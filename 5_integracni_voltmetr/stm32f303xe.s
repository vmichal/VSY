;*******************************************************************************
;* File: 	stm32f303xe.s
;* Date: 	18. 6. 2018
;* Author:	Jan Svetlik
;* Course: 	A3B38MMP - Department of Measurement
;* Brief:	Header file with STM32F303xe peripheral definitions transferred into
;* 			assembler for uVision Keil v4/v5
;*******************************************************************************

;*
;  ******************************************************************************
;  * @file    stm32f303xe.h
;  * @author  MCD Application Team
;  * @brief   CMSIS STM32F303xE Devices Peripheral Access Layer Header File.
;  *
;  *          This file contains:
;  *           - Data structures and the address mapping for all peripherals
;  *           - Peripheral's registers declarations and bits definition
;  *           - Macros to access peripheralï¿½s registers hardware
;  *
;  ******************************************************************************
;  * @attention
;  *
;  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
;  *
;  * Redistribution and use in source and binary forms, with or without modification,
;  * are permitted provided that the following conditions are met:
;  *   1. Redistributions of source code must retain the above copyright notice,
;  *      this list of conditions and the following disclaimer.
;  *   2. Redistributions in binary form must reproduce the above copyright notice,
;  *      this list of conditions and the following disclaimer in the documentation
;  *      and/or other materials provided with the distribution.
;  *   3. Neither the name of STMicroelectronics nor the names of its contributors
;  *      may be used to endorse or promote products derived from this software
;  *      without specific prior written permission.
;  *
;  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
;  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
;  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
;  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
;  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;  *
;  ******************************************************************************

  AREA    STM32F10x_INI, CODE, READONLY

; Configuration of the Cortex-M4 Processor and Core Peripherals
__CM4_REV                 EQU 0x0001  ;!< Core revision r0p1
__MPU_PRESENT             EQU 1       ;!< STM32F303xE devices provide an MPU
__NVIC_PRIO_BITS          EQU 4       ;!< STM32F303xE devices use 4 Bits for the Priority Levels
__Vendor_SysTickConfig    EQU 0       ;!< Set to 1 if different SysTick Config is used
__FPU_PRESENT             EQU 1       ;!< STM32F303xE devices provide an FPU

;* Peripheral_memory_map

FLASH_BASE            EQU (0x08000000) ;!< FLASH base address in the alias region
CCMDATARAM_BASE       EQU (0x10000000) ;!< CCM(core coupled memory) data RAM base address in the alias region
SRAM_BASE             EQU (0x20000000) ;!< SRAM base address in the alias region
PERIPH_BASE           EQU (0x40000000) ;!< Peripheral base address in the alias region
FMC_BASE              EQU (0x60000000) ;!< FMC base address
FMC_R_BASE            EQU (0xA0000000) ;!< FMC registers base address

SRAM_BB_BASE          EQU (0x22000000) ;!< SRAM base address in the bit-band region
PERIPH_BB_BASE        EQU (0x42000000) ;!< Peripheral base address in the bit-band region


;!< Peripheral memory map
APB1PERIPH_BASE       EQU PERIPH_BASE
APB2PERIPH_BASE       EQU (PERIPH_BASE + 0x00010000)
AHB1PERIPH_BASE       EQU (PERIPH_BASE + 0x00020000)
AHB2PERIPH_BASE       EQU (PERIPH_BASE + 0x08000000)
AHB3PERIPH_BASE       EQU (PERIPH_BASE + 0x10000000)

;!< APB1 peripherals
TIM2_BASE             EQU (APB1PERIPH_BASE + 0x00000000)
TIM3_BASE             EQU (APB1PERIPH_BASE + 0x00000400)
TIM4_BASE             EQU (APB1PERIPH_BASE + 0x00000800)
TIM6_BASE             EQU (APB1PERIPH_BASE + 0x00001000)
TIM7_BASE             EQU (APB1PERIPH_BASE + 0x00001400)
RTC_BASE              EQU (APB1PERIPH_BASE + 0x00002800)
WWDG_BASE             EQU (APB1PERIPH_BASE + 0x00002C00)
IWDG_BASE             EQU (APB1PERIPH_BASE + 0x00003000)
I2S2ext_BASE          EQU (APB1PERIPH_BASE + 0x00003400)
SPI2_BASE             EQU (APB1PERIPH_BASE + 0x00003800)
SPI3_BASE             EQU (APB1PERIPH_BASE + 0x00003C00)
I2S3ext_BASE          EQU (APB1PERIPH_BASE + 0x00004000)
USART2_BASE           EQU (APB1PERIPH_BASE + 0x00004400)
USART3_BASE           EQU (APB1PERIPH_BASE + 0x00004800)
UART4_BASE            EQU (APB1PERIPH_BASE + 0x00004C00)
UART5_BASE            EQU (APB1PERIPH_BASE + 0x00005000)
I2C1_BASE             EQU (APB1PERIPH_BASE + 0x00005400)
I2C2_BASE             EQU (APB1PERIPH_BASE + 0x00005800)
USB_BASE              EQU (APB1PERIPH_BASE + 0x00005C00) ;!< USB_IP Peripheral Registers base address
USB_PMAADDR           EQU (APB1PERIPH_BASE + 0x00006000) ;!< USB_IP Packet Memory Area base address
CAN_BASE              EQU (APB1PERIPH_BASE + 0x00006400)
PWR_BASE              EQU (APB1PERIPH_BASE + 0x00007000)
DAC1_BASE             EQU (APB1PERIPH_BASE + 0x00007400)
DAC_BASE               EQU DAC1_BASE
I2C3_BASE             EQU (APB1PERIPH_BASE + 0x00007800)

;!< APB2 peripherals
SYSCFG_BASE           EQU (APB2PERIPH_BASE + 0x00000000)
COMP1_BASE            EQU (APB2PERIPH_BASE + 0x0000001C)
COMP2_BASE            EQU (APB2PERIPH_BASE + 0x00000020)
COMP3_BASE            EQU (APB2PERIPH_BASE + 0x00000024)
COMP4_BASE            EQU (APB2PERIPH_BASE + 0x00000028)
COMP5_BASE            EQU (APB2PERIPH_BASE + 0x0000002C)
COMP6_BASE            EQU (APB2PERIPH_BASE + 0x00000030)
COMP7_BASE            EQU (APB2PERIPH_BASE + 0x00000034)
COMP_BASE             EQU COMP1_BASE
OPAMP1_BASE           EQU (APB2PERIPH_BASE + 0x00000038)
OPAMP2_BASE           EQU (APB2PERIPH_BASE + 0x0000003C)
OPAMP3_BASE           EQU (APB2PERIPH_BASE + 0x00000040)
OPAMP4_BASE           EQU (APB2PERIPH_BASE + 0x00000044)
OPAMP_BASE            EQU OPAMP1_BASE
EXTI_BASE             EQU (APB2PERIPH_BASE + 0x00000400)
TIM1_BASE             EQU (APB2PERIPH_BASE + 0x00002C00)
SPI1_BASE             EQU (APB2PERIPH_BASE + 0x00003000)
TIM8_BASE             EQU (APB2PERIPH_BASE + 0x00003400)
USART1_BASE           EQU (APB2PERIPH_BASE + 0x00003800)
SPI4_BASE             EQU (APB2PERIPH_BASE + 0x00003C00)
TIM15_BASE            EQU (APB2PERIPH_BASE + 0x00004000)
TIM16_BASE            EQU (APB2PERIPH_BASE + 0x00004400)
TIM17_BASE            EQU (APB2PERIPH_BASE + 0x00004800)
TIM20_BASE            EQU (APB2PERIPH_BASE + 0x00005000)

;!< AHB1 peripherals
DMA1_BASE             EQU (AHB1PERIPH_BASE + 0x00000000)
DMA1_Channel1_BASE    EQU (AHB1PERIPH_BASE + 0x00000008)
DMA1_Channel2_BASE    EQU (AHB1PERIPH_BASE + 0x0000001C)
DMA1_Channel3_BASE    EQU (AHB1PERIPH_BASE + 0x00000030)
DMA1_Channel4_BASE    EQU (AHB1PERIPH_BASE + 0x00000044)
DMA1_Channel5_BASE    EQU (AHB1PERIPH_BASE + 0x00000058)
DMA1_Channel6_BASE    EQU (AHB1PERIPH_BASE + 0x0000006C)
DMA1_Channel7_BASE    EQU (AHB1PERIPH_BASE + 0x00000080)
DMA2_BASE             EQU (AHB1PERIPH_BASE + 0x00000400)
DMA2_Channel1_BASE    EQU (AHB1PERIPH_BASE + 0x00000408)
DMA2_Channel2_BASE    EQU (AHB1PERIPH_BASE + 0x0000041C)
DMA2_Channel3_BASE    EQU (AHB1PERIPH_BASE + 0x00000430)
DMA2_Channel4_BASE    EQU (AHB1PERIPH_BASE + 0x00000444)
DMA2_Channel5_BASE    EQU (AHB1PERIPH_BASE + 0x00000458)
RCC_BASE              EQU (AHB1PERIPH_BASE + 0x00001000)
FLASH_R_BASE          EQU (AHB1PERIPH_BASE + 0x00002000) ;!< Flash registers base address
OB_BASE               EQU (0x1FFFF800)         ;!< Flash Option Bytes base address
FLASHSIZE_BASE        EQU (0x1FFFF7CC)         ;!< FLASH Size register base address
UID_BASE              EQU (0x1FFFF7AC)         ;!< Unique device ID register base address
CRC_BASE              EQU (AHB1PERIPH_BASE + 0x00003000)
TSC_BASE              EQU (AHB1PERIPH_BASE + 0x00004000)

;!< AHB2 peripherals
GPIOA_BASE            EQU (AHB2PERIPH_BASE + 0x00000000)
GPIOB_BASE            EQU (AHB2PERIPH_BASE + 0x00000400)
GPIOC_BASE            EQU (AHB2PERIPH_BASE + 0x00000800)
GPIOD_BASE            EQU (AHB2PERIPH_BASE + 0x00000C00)
GPIOE_BASE            EQU (AHB2PERIPH_BASE + 0x00001000)
GPIOF_BASE            EQU (AHB2PERIPH_BASE + 0x00001400)
GPIOG_BASE            EQU (AHB2PERIPH_BASE + 0x00001800)
GPIOH_BASE            EQU (AHB2PERIPH_BASE + 0x00001C00)

;!< AHB3 peripherals
ADC1_BASE             EQU (AHB3PERIPH_BASE + 0x00000000)
ADC2_BASE             EQU (AHB3PERIPH_BASE + 0x00000100)
ADC1_2_COMMON_BASE    EQU (AHB3PERIPH_BASE + 0x00000300)
ADC3_BASE             EQU (AHB3PERIPH_BASE + 0x00000400)
ADC4_BASE             EQU (AHB3PERIPH_BASE + 0x00000500)
ADC3_4_COMMON_BASE    EQU (AHB3PERIPH_BASE + 0x00000700)

;!< FMC Bankx base address
FMC_BANK1             EQU (FMC_BASE)               ;!< FMC Bank1 base address
FMC_BANK1_1           EQU (FMC_BANK1)              ;!< FMC Bank1_1 base address
FMC_BANK1_2           EQU (FMC_BANK1 + 0x04000000) ;!< FMC Bank1_2 base address
FMC_BANK1_3           EQU (FMC_BANK1 + 0x08000000) ;!< FMC Bank1_3 base address
FMC_BANK1_4           EQU (FMC_BANK1 + 0x0C000000) ;!< FMC Bank1_4 base address

FMC_BANK2             EQU (FMC_BASE + 0x10000000)  ;!< FMC Bank2 base address
FMC_BANK3             EQU (FMC_BASE + 0x20000000)  ;!< FMC Bank3 base address
FMC_BANK4             EQU (FMC_BASE + 0x30000000)  ;!< FMC Bank4 base address

;!< FMC Bankx registers base address
FMC_Bank1_R_BASE      EQU (FMC_R_BASE + 0x0000)
FMC_Bank1E_R_BASE     EQU (FMC_R_BASE + 0x0104)
FMC_Bank2_3_R_BASE    EQU (FMC_R_BASE + 0x0060)
FMC_Bank4_R_BASE      EQU (FMC_R_BASE + 0x00A0)

DBGMCU_BASE          EQU (0xE0042000) ;!< Debug MCU registers base address

; Peripheral_declaration
TIM2                EQU (TIM2_BASE)
TIM3                EQU (TIM3_BASE)
TIM4                EQU (TIM4_BASE)
TIM6                EQU (TIM6_BASE)
TIM7                EQU (TIM7_BASE)
RTC                 EQU (RTC_BASE)
WWDG                EQU (WWDG_BASE)
IWDG                EQU (IWDG_BASE)
I2S2ext             EQU (I2S2ext_BASE)
SPI2                EQU (SPI2_BASE)
SPI3                EQU (SPI3_BASE)
I2S3ext             EQU (I2S3ext_BASE)
USART2              EQU (USART2_BASE)
USART3              EQU (USART3_BASE)
UART4               EQU (UART4_BASE)
UART5               EQU (UART5_BASE)
I2C1                EQU (I2C1_BASE)
I2C2                EQU (I2C2_BASE)
I2C3                EQU (I2C3_BASE)
CAN                 EQU (CAN_BASE)
PWR                 EQU (PWR_BASE)
DAC                 EQU (DAC_BASE)
DAC1                EQU (DAC1_BASE)
COMP1               EQU (COMP1_BASE)
COMP2               EQU (COMP2_BASE)
COMP12_COMMON       EQU (COMP2_BASE)
COMP3               EQU (COMP3_BASE)
COMP4               EQU (COMP4_BASE)
COMP34_COMMON       EQU (COMP4_BASE)
COMP5               EQU (COMP5_BASE)
COMP6               EQU (COMP6_BASE)
COMP56_COMMON       EQU (COMP6_BASE)
COMP7               EQU (COMP7_BASE)
; Legacy define
COMP                EQU (COMP_BASE)
OPAMP1              EQU (OPAMP1_BASE)
OPAMP               EQU (OPAMP_BASE)
OPAMP2              EQU (OPAMP2_BASE)
OPAMP3              EQU (OPAMP3_BASE)
OPAMP4              EQU (OPAMP4_BASE)
SYSCFG              EQU (SYSCFG_BASE)
EXTI                EQU (EXTI_BASE)
TIM1                EQU (TIM1_BASE)
SPI1                EQU (SPI1_BASE)
TIM8                EQU (TIM8_BASE)
USART1              EQU (USART1_BASE)
SPI4                EQU (SPI4_BASE)
TIM15               EQU (TIM15_BASE)
TIM16               EQU (TIM16_BASE)
TIM17               EQU (TIM17_BASE)
TIM20               EQU (TIM20_BASE)
DBGMCU              EQU (DBGMCU_BASE)
DMA1                EQU (DMA1_BASE)
DMA1_Channel1       EQU (DMA1_Channel1_BASE)
DMA1_Channel2       EQU (DMA1_Channel2_BASE)
DMA1_Channel3       EQU (DMA1_Channel3_BASE)
DMA1_Channel4       EQU (DMA1_Channel4_BASE)
DMA1_Channel5       EQU (DMA1_Channel5_BASE)
DMA1_Channel6       EQU (DMA1_Channel6_BASE)
DMA1_Channel7       EQU (DMA1_Channel7_BASE)
DMA2                EQU (DMA2_BASE)
DMA2_Channel1       EQU (DMA2_Channel1_BASE)
DMA2_Channel2       EQU (DMA2_Channel2_BASE)
DMA2_Channel3       EQU (DMA2_Channel3_BASE)
DMA2_Channel4       EQU (DMA2_Channel4_BASE)
DMA2_Channel5       EQU (DMA2_Channel5_BASE)
RCC                 EQU (RCC_BASE)
FLASH               EQU (FLASH_R_BASE)
OB                  EQU (OB_BASE)
CRC                 EQU (CRC_BASE)
TSC                 EQU (TSC_BASE)
GPIOA               EQU (GPIOA_BASE)
GPIOB               EQU (GPIOB_BASE)
GPIOC               EQU (GPIOC_BASE)
GPIOD               EQU (GPIOD_BASE)
GPIOE               EQU (GPIOE_BASE)
GPIOF               EQU (GPIOF_BASE)
GPIOG               EQU (GPIOG_BASE)
GPIOH               EQU (GPIOH_BASE)
ADC1                EQU (ADC1_BASE)
ADC2                EQU (ADC2_BASE)
ADC3                EQU (ADC3_BASE)
ADC4                EQU (ADC4_BASE)
ADC12_COMMON        EQU (ADC1_2_COMMON_BASE)
ADC34_COMMON        EQU (ADC3_4_COMMON_BASE)
; Legacy defines
ADC1_2_COMMON       EQU ADC12_COMMON
ADC3_4_COMMON       EQU ADC34_COMMON
USB                 EQU (USB_BASE)
FMC_Bank1           EQU (FMC_Bank1_R_BASE)
FMC_Bank1E          EQU (FMC_Bank1E_R_BASE)
FMC_Bank2_3         EQU (FMC_Bank2_3_R_BASE)
FMC_Bank4           EQU (FMC_Bank4_R_BASE)


;****************************************************************************
;                         Peripheral Registers definitions
;****************************************************************************

TIM1_CR1         EQU (TIM1 + 0x00) ;!< TIM control register 1,              Address offset: 0x00
TIM1_CR2         EQU (TIM1 + 0x04) ;!< TIM control register 2,              Address offset: 0x04
TIM1_SMCR        EQU (TIM1 + 0x08) ;!< TIM slave mode control register,     Address offset: 0x08
TIM1_DIER        EQU (TIM1 + 0x0C) ;!< TIM DMA/interrupt enable register,   Address offset: 0x0C
TIM1_SR          EQU (TIM1 + 0x10) ;!< TIM status register,                 Address offset: 0x10
TIM1_EGR         EQU (TIM1 + 0x14) ;!< TIM event generation register,       Address offset: 0x14
TIM1_CCMR1       EQU (TIM1 + 0x18) ;!< TIM capture/compare mode register 1, Address offset: 0x18
TIM1_CCMR2       EQU (TIM1 + 0x1C) ;!< TIM capture/compare mode register 2, Address offset: 0x1C
TIM1_CCER        EQU (TIM1 + 0x20) ;!< TIM capture/compare enable register, Address offset: 0x20
TIM1_CNT         EQU (TIM1 + 0x24) ;!< TIM counter register,                Address offset: 0x24
TIM1_PSC         EQU (TIM1 + 0x28) ;!< TIM prescaler,                       Address offset: 0x28
TIM1_ARR         EQU (TIM1 + 0x2C) ;!< TIM auto-reload register,            Address offset: 0x2C
TIM1_RCR         EQU (TIM1 + 0x30) ;!< TIM repetition counter register,     Address offset: 0x30
TIM1_CCR1        EQU (TIM1 + 0x34) ;!< TIM capture/compare register 1,      Address offset: 0x34
TIM1_CCR2        EQU (TIM1 + 0x38) ;!< TIM capture/compare register 2,      Address offset: 0x38
TIM1_CCR3        EQU (TIM1 + 0x3C) ;!< TIM capture/compare register 3,      Address offset: 0x3C
TIM1_CCR4        EQU (TIM1 + 0x40) ;!< TIM capture/compare register 4,      Address offset: 0x40
TIM1_BDTR        EQU (TIM1 + 0x44) ;!< TIM break and dead-time register,    Address offset: 0x44
TIM1_DCR         EQU (TIM1 + 0x48) ;!< TIM DMA control register,            Address offset: 0x48
TIM1_DMAR        EQU (TIM1 + 0x4C) ;!< TIM DMA address for full transfer,   Address offset: 0x4C
TIM1_OR          EQU (TIM1 + 0x50) ;!< TIM option register,                 Address offset: 0x50
TIM1_CCMR3       EQU (TIM1 + 0x54) ;!< TIM capture/compare mode register 3, Address offset: 0x54
TIM1_CCR5        EQU (TIM1 + 0x58) ;!< TIM capture/compare register5,       Address offset: 0x58
TIM1_CCR6        EQU (TIM1 + 0x5C) ;!< TIM capture/compare register 4,      Address offset: 0x5C


TIM2_CR1         EQU (TIM2 + 0x00) ;!< TIM control register 1,              Address offset: 0x00
TIM2_CR2         EQU (TIM2 + 0x04) ;!< TIM control register 2,              Address offset: 0x04
TIM2_SMCR        EQU (TIM2 + 0x08) ;!< TIM slave mode control register,     Address offset: 0x08
TIM2_DIER        EQU (TIM2 + 0x0C) ;!< TIM DMA/interrupt enable register,   Address offset: 0x0C
TIM2_SR          EQU (TIM2 + 0x10) ;!< TIM status register,                 Address offset: 0x10
TIM2_EGR         EQU (TIM2 + 0x14) ;!< TIM event generation register,       Address offset: 0x14
TIM2_CCMR1       EQU (TIM2 + 0x18) ;!< TIM capture/compare mode register 1, Address offset: 0x18
TIM2_CCMR2       EQU (TIM2 + 0x1C) ;!< TIM capture/compare mode register 2, Address offset: 0x1C
TIM2_CCER        EQU (TIM2 + 0x20) ;!< TIM capture/compare enable register, Address offset: 0x20
TIM2_CNT         EQU (TIM2 + 0x24) ;!< TIM counter register,                Address offset: 0x24
TIM2_PSC         EQU (TIM2 + 0x28) ;!< TIM prescaler,                       Address offset: 0x28
TIM2_ARR         EQU (TIM2 + 0x2C) ;!< TIM auto-reload register,            Address offset: 0x2C
TIM2_RCR         EQU (TIM2 + 0x30) ;!< TIM repetition counter register,     Address offset: 0x30
TIM2_CCR1        EQU (TIM2 + 0x34) ;!< TIM capture/compare register 1,      Address offset: 0x34
TIM2_CCR2        EQU (TIM2 + 0x38) ;!< TIM capture/compare register 2,      Address offset: 0x38
TIM2_CCR3        EQU (TIM2 + 0x3C) ;!< TIM capture/compare register 3,      Address offset: 0x3C
TIM2_CCR4        EQU (TIM2 + 0x40) ;!< TIM capture/compare register 4,      Address offset: 0x40
TIM2_BDTR        EQU (TIM2 + 0x44) ;!< TIM break and dead-time register,    Address offset: 0x44
TIM2_DCR         EQU (TIM2 + 0x48) ;!< TIM DMA control register,            Address offset: 0x48
TIM2_DMAR        EQU (TIM2 + 0x4C) ;!< TIM DMA address for full transfer,   Address offset: 0x4C
TIM2_OR          EQU (TIM2 + 0x50) ;!< TIM option register,                 Address offset: 0x50
TIM2_CCMR3       EQU (TIM2 + 0x54) ;!< TIM capture/compare mode register 3, Address offset: 0x54
TIM2_CCR5        EQU (TIM2 + 0x58) ;!< TIM capture/compare register5,       Address offset: 0x58
TIM2_CCR6        EQU (TIM2 + 0x5C) ;!< TIM capture/compare register 4,      Address offset: 0x5C


TIM3_CR1         EQU (TIM3 + 0x00) ;!< TIM control register 1,              Address offset: 0x00
TIM3_CR2         EQU (TIM3 + 0x04) ;!< TIM control register 2,              Address offset: 0x04
TIM3_SMCR        EQU (TIM3 + 0x08) ;!< TIM slave mode control register,     Address offset: 0x08
TIM3_DIER        EQU (TIM3 + 0x0C) ;!< TIM DMA/interrupt enable register,   Address offset: 0x0C
TIM3_SR          EQU (TIM3 + 0x10) ;!< TIM status register,                 Address offset: 0x10
TIM3_EGR         EQU (TIM3 + 0x14) ;!< TIM event generation register,       Address offset: 0x14
TIM3_CCMR1       EQU (TIM3 + 0x18) ;!< TIM capture/compare mode register 1, Address offset: 0x18
TIM3_CCMR2       EQU (TIM3 + 0x1C) ;!< TIM capture/compare mode register 2, Address offset: 0x1C
TIM3_CCER        EQU (TIM3 + 0x20) ;!< TIM capture/compare enable register, Address offset: 0x20
TIM3_CNT         EQU (TIM3 + 0x24) ;!< TIM counter register,                Address offset: 0x24
TIM3_PSC         EQU (TIM3 + 0x28) ;!< TIM prescaler,                       Address offset: 0x28
TIM3_ARR         EQU (TIM3 + 0x2C) ;!< TIM auto-reload register,            Address offset: 0x2C
TIM3_RCR         EQU (TIM3 + 0x30) ;!< TIM repetition counter register,     Address offset: 0x30
TIM3_CCR1        EQU (TIM3 + 0x34) ;!< TIM capture/compare register 1,      Address offset: 0x34
TIM3_CCR2        EQU (TIM3 + 0x38) ;!< TIM capture/compare register 2,      Address offset: 0x38
TIM3_CCR3        EQU (TIM3 + 0x3C) ;!< TIM capture/compare register 3,      Address offset: 0x3C
TIM3_CCR4        EQU (TIM3 + 0x40) ;!< TIM capture/compare register 4,      Address offset: 0x40
TIM3_BDTR        EQU (TIM3 + 0x44) ;!< TIM break and dead-time register,    Address offset: 0x44
TIM3_DCR         EQU (TIM3 + 0x48) ;!< TIM DMA control register,            Address offset: 0x48
TIM3_DMAR        EQU (TIM3 + 0x4C) ;!< TIM DMA address for full transfer,   Address offset: 0x4C
TIM3_OR          EQU (TIM3 + 0x50) ;!< TIM option register,                 Address offset: 0x50
TIM3_CCMR3       EQU (TIM3 + 0x54) ;!< TIM capture/compare mode register 3, Address offset: 0x54
TIM3_CCR5        EQU (TIM3 + 0x58) ;!< TIM capture/compare register5,       Address offset: 0x58
TIM3_CCR6        EQU (TIM3 + 0x5C) ;!< TIM capture/compare register 4,      Address offset: 0x5C


TIM4_CR1         EQU (TIM4 + 0x00) ;!< TIM control register 1,              Address offset: 0x00
TIM4_CR2         EQU (TIM4 + 0x04) ;!< TIM control register 2,              Address offset: 0x04
TIM4_SMCR        EQU (TIM4 + 0x08) ;!< TIM slave mode control register,     Address offset: 0x08
TIM4_DIER        EQU (TIM4 + 0x0C) ;!< TIM DMA/interrupt enable register,   Address offset: 0x0C
TIM4_SR          EQU (TIM4 + 0x10) ;!< TIM status register,                 Address offset: 0x10
TIM4_EGR         EQU (TIM4 + 0x14) ;!< TIM event generation register,       Address offset: 0x14
TIM4_CCMR1       EQU (TIM4 + 0x18) ;!< TIM capture/compare mode register 1, Address offset: 0x18
TIM4_CCMR2       EQU (TIM4 + 0x1C) ;!< TIM capture/compare mode register 2, Address offset: 0x1C
TIM4_CCER        EQU (TIM4 + 0x20) ;!< TIM capture/compare enable register, Address offset: 0x20
TIM4_CNT         EQU (TIM4 + 0x24) ;!< TIM counter register,                Address offset: 0x24
TIM4_PSC         EQU (TIM4 + 0x28) ;!< TIM prescaler,                       Address offset: 0x28
TIM4_ARR         EQU (TIM4 + 0x2C) ;!< TIM auto-reload register,            Address offset: 0x2C
TIM4_RCR         EQU (TIM4 + 0x30) ;!< TIM repetition counter register,     Address offset: 0x30
TIM4_CCR1        EQU (TIM4 + 0x34) ;!< TIM capture/compare register 1,      Address offset: 0x34
TIM4_CCR2        EQU (TIM4 + 0x38) ;!< TIM capture/compare register 2,      Address offset: 0x38
TIM4_CCR3        EQU (TIM4 + 0x3C) ;!< TIM capture/compare register 3,      Address offset: 0x3C
TIM4_CCR4        EQU (TIM4 + 0x40) ;!< TIM capture/compare register 4,      Address offset: 0x40
TIM4_BDTR        EQU (TIM4 + 0x44) ;!< TIM break and dead-time register,    Address offset: 0x44
TIM4_DCR         EQU (TIM4 + 0x48) ;!< TIM DMA control register,            Address offset: 0x48
TIM4_DMAR        EQU (TIM4 + 0x4C) ;!< TIM DMA address for full transfer,   Address offset: 0x4C
TIM4_OR          EQU (TIM4 + 0x50) ;!< TIM option register,                 Address offset: 0x50
TIM4_CCMR3       EQU (TIM4 + 0x54) ;!< TIM capture/compare mode register 3, Address offset: 0x54
TIM4_CCR5        EQU (TIM4 + 0x58) ;!< TIM capture/compare register5,       Address offset: 0x58
TIM4_CCR6        EQU (TIM4 + 0x5C) ;!< TIM capture/compare register 4,      Address offset: 0x5C


TIM6_CR1         EQU (TIM6 + 0x00) ;!< TIM control register 1,              Address offset: 0x00
TIM6_CR2         EQU (TIM6 + 0x04) ;!< TIM control register 2,              Address offset: 0x04
TIM6_SMCR        EQU (TIM6 + 0x08) ;!< TIM slave mode control register,     Address offset: 0x08
TIM6_DIER        EQU (TIM6 + 0x0C) ;!< TIM DMA/interrupt enable register,   Address offset: 0x0C
TIM6_SR          EQU (TIM6 + 0x10) ;!< TIM status register,                 Address offset: 0x10
TIM6_EGR         EQU (TIM6 + 0x14) ;!< TIM event generation register,       Address offset: 0x14
TIM6_CCMR1       EQU (TIM6 + 0x18) ;!< TIM capture/compare mode register 1, Address offset: 0x18
TIM6_CCMR2       EQU (TIM6 + 0x1C) ;!< TIM capture/compare mode register 2, Address offset: 0x1C
TIM6_CCER        EQU (TIM6 + 0x20) ;!< TIM capture/compare enable register, Address offset: 0x20
TIM6_CNT         EQU (TIM6 + 0x24) ;!< TIM counter register,                Address offset: 0x24
TIM6_PSC         EQU (TIM6 + 0x28) ;!< TIM prescaler,                       Address offset: 0x28
TIM6_ARR         EQU (TIM6 + 0x2C) ;!< TIM auto-reload register,            Address offset: 0x2C
TIM6_RCR         EQU (TIM6 + 0x30) ;!< TIM repetition counter register,     Address offset: 0x30
TIM6_CCR1        EQU (TIM6 + 0x34) ;!< TIM capture/compare register 1,      Address offset: 0x34
TIM6_CCR2        EQU (TIM6 + 0x38) ;!< TIM capture/compare register 2,      Address offset: 0x38
TIM6_CCR3        EQU (TIM6 + 0x3C) ;!< TIM capture/compare register 3,      Address offset: 0x3C
TIM6_CCR4        EQU (TIM6 + 0x40) ;!< TIM capture/compare register 4,      Address offset: 0x40
TIM6_BDTR        EQU (TIM6 + 0x44) ;!< TIM break and dead-time register,    Address offset: 0x44
TIM6_DCR         EQU (TIM6 + 0x48) ;!< TIM DMA control register,            Address offset: 0x48
TIM6_DMAR        EQU (TIM6 + 0x4C) ;!< TIM DMA address for full transfer,   Address offset: 0x4C
TIM6_OR          EQU (TIM6 + 0x50) ;!< TIM option register,                 Address offset: 0x50
TIM6_CCMR3       EQU (TIM6 + 0x54) ;!< TIM capture/compare mode register 3, Address offset: 0x54
TIM6_CCR5        EQU (TIM6 + 0x58) ;!< TIM capture/compare register5,       Address offset: 0x58
TIM6_CCR6        EQU (TIM6 + 0x5C) ;!< TIM capture/compare register 4,      Address offset: 0x5C


TIM7_CR1         EQU (TIM7 + 0x00) ;!< TIM control register 1,              Address offset: 0x00
TIM7_CR2         EQU (TIM7 + 0x04) ;!< TIM control register 2,              Address offset: 0x04
TIM7_SMCR        EQU (TIM7 + 0x08) ;!< TIM slave mode control register,     Address offset: 0x08
TIM7_DIER        EQU (TIM7 + 0x0C) ;!< TIM DMA/interrupt enable register,   Address offset: 0x0C
TIM7_SR          EQU (TIM7 + 0x10) ;!< TIM status register,                 Address offset: 0x10
TIM7_EGR         EQU (TIM7 + 0x14) ;!< TIM event generation register,       Address offset: 0x14
TIM7_CCMR1       EQU (TIM7 + 0x18) ;!< TIM capture/compare mode register 1, Address offset: 0x18
TIM7_CCMR2       EQU (TIM7 + 0x1C) ;!< TIM capture/compare mode register 2, Address offset: 0x1C
TIM7_CCER        EQU (TIM7 + 0x20) ;!< TIM capture/compare enable register, Address offset: 0x20
TIM7_CNT         EQU (TIM7 + 0x24) ;!< TIM counter register,                Address offset: 0x24
TIM7_PSC         EQU (TIM7 + 0x28) ;!< TIM prescaler,                       Address offset: 0x28
TIM7_ARR         EQU (TIM7 + 0x2C) ;!< TIM auto-reload register,            Address offset: 0x2C
TIM7_RCR         EQU (TIM7 + 0x30) ;!< TIM repetition counter register,     Address offset: 0x30
TIM7_CCR1        EQU (TIM7 + 0x34) ;!< TIM capture/compare register 1,      Address offset: 0x34
TIM7_CCR2        EQU (TIM7 + 0x38) ;!< TIM capture/compare register 2,      Address offset: 0x38
TIM7_CCR3        EQU (TIM7 + 0x3C) ;!< TIM capture/compare register 3,      Address offset: 0x3C
TIM7_CCR4        EQU (TIM7 + 0x40) ;!< TIM capture/compare register 4,      Address offset: 0x40
TIM7_BDTR        EQU (TIM7 + 0x44) ;!< TIM break and dead-time register,    Address offset: 0x44
TIM7_DCR         EQU (TIM7 + 0x48) ;!< TIM DMA control register,            Address offset: 0x48
TIM7_DMAR        EQU (TIM7 + 0x4C) ;!< TIM DMA address for full transfer,   Address offset: 0x4C
TIM7_OR          EQU (TIM7 + 0x50) ;!< TIM option register,                 Address offset: 0x50
TIM7_CCMR3       EQU (TIM7 + 0x54) ;!< TIM capture/compare mode register 3, Address offset: 0x54
TIM7_CCR5        EQU (TIM7 + 0x58) ;!< TIM capture/compare register5,       Address offset: 0x58
TIM7_CCR6        EQU (TIM7 + 0x5C) ;!< TIM capture/compare register 4,      Address offset: 0x5C


TIM8_CR1         EQU (TIM8 + 0x00) ;!< TIM control register 1,              Address offset: 0x00
TIM8_CR2         EQU (TIM8 + 0x04) ;!< TIM control register 2,              Address offset: 0x04
TIM8_SMCR        EQU (TIM8 + 0x08) ;!< TIM slave mode control register,     Address offset: 0x08
TIM8_DIER        EQU (TIM8 + 0x0C) ;!< TIM DMA/interrupt enable register,   Address offset: 0x0C
TIM8_SR          EQU (TIM8 + 0x10) ;!< TIM status register,                 Address offset: 0x10
TIM8_EGR         EQU (TIM8 + 0x14) ;!< TIM event generation register,       Address offset: 0x14
TIM8_CCMR1       EQU (TIM8 + 0x18) ;!< TIM capture/compare mode register 1, Address offset: 0x18
TIM8_CCMR2       EQU (TIM8 + 0x1C) ;!< TIM capture/compare mode register 2, Address offset: 0x1C
TIM8_CCER        EQU (TIM8 + 0x20) ;!< TIM capture/compare enable register, Address offset: 0x20
TIM8_CNT         EQU (TIM8 + 0x24) ;!< TIM counter register,                Address offset: 0x24
TIM8_PSC         EQU (TIM8 + 0x28) ;!< TIM prescaler,                       Address offset: 0x28
TIM8_ARR         EQU (TIM8 + 0x2C) ;!< TIM auto-reload register,            Address offset: 0x2C
TIM8_RCR         EQU (TIM8 + 0x30) ;!< TIM repetition counter register,     Address offset: 0x30
TIM8_CCR1        EQU (TIM8 + 0x34) ;!< TIM capture/compare register 1,      Address offset: 0x34
TIM8_CCR2        EQU (TIM8 + 0x38) ;!< TIM capture/compare register 2,      Address offset: 0x38
TIM8_CCR3        EQU (TIM8 + 0x3C) ;!< TIM capture/compare register 3,      Address offset: 0x3C
TIM8_CCR4        EQU (TIM8 + 0x40) ;!< TIM capture/compare register 4,      Address offset: 0x40
TIM8_BDTR        EQU (TIM8 + 0x44) ;!< TIM break and dead-time register,    Address offset: 0x44
TIM8_DCR         EQU (TIM8 + 0x48) ;!< TIM DMA control register,            Address offset: 0x48
TIM8_DMAR        EQU (TIM8 + 0x4C) ;!< TIM DMA address for full transfer,   Address offset: 0x4C
TIM8_OR          EQU (TIM8 + 0x50) ;!< TIM option register,                 Address offset: 0x50
TIM8_CCMR3       EQU (TIM8 + 0x54) ;!< TIM capture/compare mode register 3, Address offset: 0x54
TIM8_CCR5        EQU (TIM8 + 0x58) ;!< TIM capture/compare register5,       Address offset: 0x58
TIM8_CCR6        EQU (TIM8 + 0x5C) ;!< TIM capture/compare register 4,      Address offset: 0x5C


TIM15_CR1         EQU (TIM15 + 0x00) ;!< TIM control register 1,              Address offset: 0x00
TIM15_CR2         EQU (TIM15 + 0x04) ;!< TIM control register 2,              Address offset: 0x04
TIM15_SMCR        EQU (TIM15 + 0x08) ;!< TIM slave mode control register,     Address offset: 0x08
TIM15_DIER        EQU (TIM15 + 0x0C) ;!< TIM DMA/interrupt enable register,   Address offset: 0x0C
TIM15_SR          EQU (TIM15 + 0x10) ;!< TIM status register,                 Address offset: 0x10
TIM15_EGR         EQU (TIM15 + 0x14) ;!< TIM event generation register,       Address offset: 0x14
TIM15_CCMR1       EQU (TIM15 + 0x18) ;!< TIM capture/compare mode register 1, Address offset: 0x18
TIM15_CCMR2       EQU (TIM15 + 0x1C) ;!< TIM capture/compare mode register 2, Address offset: 0x1C
TIM15_CCER        EQU (TIM15 + 0x20) ;!< TIM capture/compare enable register, Address offset: 0x20
TIM15_CNT         EQU (TIM15 + 0x24) ;!< TIM counter register,                Address offset: 0x24
TIM15_PSC         EQU (TIM15 + 0x28) ;!< TIM prescaler,                       Address offset: 0x28
TIM15_ARR         EQU (TIM15 + 0x2C) ;!< TIM auto-reload register,            Address offset: 0x2C
TIM15_RCR         EQU (TIM15 + 0x30) ;!< TIM repetition counter register,     Address offset: 0x30
TIM15_CCR1        EQU (TIM15 + 0x34) ;!< TIM capture/compare register 1,      Address offset: 0x34
TIM15_CCR2        EQU (TIM15 + 0x38) ;!< TIM capture/compare register 2,      Address offset: 0x38
TIM15_CCR3        EQU (TIM15 + 0x3C) ;!< TIM capture/compare register 3,      Address offset: 0x3C
TIM15_CCR4        EQU (TIM15 + 0x40) ;!< TIM capture/compare register 4,      Address offset: 0x40
TIM15_BDTR        EQU (TIM15 + 0x44) ;!< TIM break and dead-time register,    Address offset: 0x44
TIM15_DCR         EQU (TIM15 + 0x48) ;!< TIM DMA control register,            Address offset: 0x48
TIM15_DMAR        EQU (TIM15 + 0x4C) ;!< TIM DMA address for full transfer,   Address offset: 0x4C
TIM15_OR          EQU (TIM15 + 0x50) ;!< TIM option register,                 Address offset: 0x50
TIM15_CCMR3       EQU (TIM15 + 0x54) ;!< TIM capture/compare mode register 3, Address offset: 0x54
TIM15_CCR5        EQU (TIM15 + 0x58) ;!< TIM capture/compare register5,       Address offset: 0x58
TIM15_CCR6        EQU (TIM15 + 0x5C) ;!< TIM capture/compare register 4,      Address offset: 0x5C


TIM16_CR1         EQU (TIM16 + 0x00) ;!< TIM control register 1,              Address offset: 0x00
TIM16_CR2         EQU (TIM16 + 0x04) ;!< TIM control register 2,              Address offset: 0x04
TIM16_SMCR        EQU (TIM16 + 0x08) ;!< TIM slave mode control register,     Address offset: 0x08
TIM16_DIER        EQU (TIM16 + 0x0C) ;!< TIM DMA/interrupt enable register,   Address offset: 0x0C
TIM16_SR          EQU (TIM16 + 0x10) ;!< TIM status register,                 Address offset: 0x10
TIM16_EGR         EQU (TIM16 + 0x14) ;!< TIM event generation register,       Address offset: 0x14
TIM16_CCMR1       EQU (TIM16 + 0x18) ;!< TIM capture/compare mode register 1, Address offset: 0x18
TIM16_CCMR2       EQU (TIM16 + 0x1C) ;!< TIM capture/compare mode register 2, Address offset: 0x1C
TIM16_CCER        EQU (TIM16 + 0x20) ;!< TIM capture/compare enable register, Address offset: 0x20
TIM16_CNT         EQU (TIM16 + 0x24) ;!< TIM counter register,                Address offset: 0x24
TIM16_PSC         EQU (TIM16 + 0x28) ;!< TIM prescaler,                       Address offset: 0x28
TIM16_ARR         EQU (TIM16 + 0x2C) ;!< TIM auto-reload register,            Address offset: 0x2C
TIM16_RCR         EQU (TIM16 + 0x30) ;!< TIM repetition counter register,     Address offset: 0x30
TIM16_CCR1        EQU (TIM16 + 0x34) ;!< TIM capture/compare register 1,      Address offset: 0x34
TIM16_CCR2        EQU (TIM16 + 0x38) ;!< TIM capture/compare register 2,      Address offset: 0x38
TIM16_CCR3        EQU (TIM16 + 0x3C) ;!< TIM capture/compare register 3,      Address offset: 0x3C
TIM16_CCR4        EQU (TIM16 + 0x40) ;!< TIM capture/compare register 4,      Address offset: 0x40
TIM16_BDTR        EQU (TIM16 + 0x44) ;!< TIM break and dead-time register,    Address offset: 0x44
TIM16_DCR         EQU (TIM16 + 0x48) ;!< TIM DMA control register,            Address offset: 0x48
TIM16_DMAR        EQU (TIM16 + 0x4C) ;!< TIM DMA address for full transfer,   Address offset: 0x4C
TIM16_OR          EQU (TIM16 + 0x50) ;!< TIM option register,                 Address offset: 0x50
TIM16_CCMR3       EQU (TIM16 + 0x54) ;!< TIM capture/compare mode register 3, Address offset: 0x54
TIM16_CCR5        EQU (TIM16 + 0x58) ;!< TIM capture/compare register5,       Address offset: 0x58
TIM16_CCR6        EQU (TIM16 + 0x5C) ;!< TIM capture/compare register 4,      Address offset: 0x5C


TIM17_CR1         EQU (TIM17 + 0x00) ;!< TIM control register 1,              Address offset: 0x00
TIM17_CR2         EQU (TIM17 + 0x04) ;!< TIM control register 2,              Address offset: 0x04
TIM17_SMCR        EQU (TIM17 + 0x08) ;!< TIM slave mode control register,     Address offset: 0x08
TIM17_DIER        EQU (TIM17 + 0x0C) ;!< TIM DMA/interrupt enable register,   Address offset: 0x0C
TIM17_SR          EQU (TIM17 + 0x10) ;!< TIM status register,                 Address offset: 0x10
TIM17_EGR         EQU (TIM17 + 0x14) ;!< TIM event generation register,       Address offset: 0x14
TIM17_CCMR1       EQU (TIM17 + 0x18) ;!< TIM capture/compare mode register 1, Address offset: 0x18
TIM17_CCMR2       EQU (TIM17 + 0x1C) ;!< TIM capture/compare mode register 2, Address offset: 0x1C
TIM17_CCER        EQU (TIM17 + 0x20) ;!< TIM capture/compare enable register, Address offset: 0x20
TIM17_CNT         EQU (TIM17 + 0x24) ;!< TIM counter register,                Address offset: 0x24
TIM17_PSC         EQU (TIM17 + 0x28) ;!< TIM prescaler,                       Address offset: 0x28
TIM17_ARR         EQU (TIM17 + 0x2C) ;!< TIM auto-reload register,            Address offset: 0x2C
TIM17_RCR         EQU (TIM17 + 0x30) ;!< TIM repetition counter register,     Address offset: 0x30
TIM17_CCR1        EQU (TIM17 + 0x34) ;!< TIM capture/compare register 1,      Address offset: 0x34
TIM17_CCR2        EQU (TIM17 + 0x38) ;!< TIM capture/compare register 2,      Address offset: 0x38
TIM17_CCR3        EQU (TIM17 + 0x3C) ;!< TIM capture/compare register 3,      Address offset: 0x3C
TIM17_CCR4        EQU (TIM17 + 0x40) ;!< TIM capture/compare register 4,      Address offset: 0x40
TIM17_BDTR        EQU (TIM17 + 0x44) ;!< TIM break and dead-time register,    Address offset: 0x44
TIM17_DCR         EQU (TIM17 + 0x48) ;!< TIM DMA control register,            Address offset: 0x48
TIM17_DMAR        EQU (TIM17 + 0x4C) ;!< TIM DMA address for full transfer,   Address offset: 0x4C
TIM17_OR          EQU (TIM17 + 0x50) ;!< TIM option register,                 Address offset: 0x50
TIM17_CCMR3       EQU (TIM17 + 0x54) ;!< TIM capture/compare mode register 3, Address offset: 0x54
TIM17_CCR5        EQU (TIM17 + 0x58) ;!< TIM capture/compare register5,       Address offset: 0x58
TIM17_CCR6        EQU (TIM17 + 0x5C) ;!< TIM capture/compare register 4,      Address offset: 0x5C


TIM20_CR1         EQU (TIM20 + 0x00) ;!< TIM control register 1,              Address offset: 0x00
TIM20_CR2         EQU (TIM20 + 0x04) ;!< TIM control register 2,              Address offset: 0x04
TIM20_SMCR        EQU (TIM20 + 0x08) ;!< TIM slave mode control register,     Address offset: 0x08
TIM20_DIER        EQU (TIM20 + 0x0C) ;!< TIM DMA/interrupt enable register,   Address offset: 0x0C
TIM20_SR          EQU (TIM20 + 0x10) ;!< TIM status register,                 Address offset: 0x10
TIM20_EGR         EQU (TIM20 + 0x14) ;!< TIM event generation register,       Address offset: 0x14
TIM20_CCMR1       EQU (TIM20 + 0x18) ;!< TIM capture/compare mode register 1, Address offset: 0x18
TIM20_CCMR2       EQU (TIM20 + 0x1C) ;!< TIM capture/compare mode register 2, Address offset: 0x1C
TIM20_CCER        EQU (TIM20 + 0x20) ;!< TIM capture/compare enable register, Address offset: 0x20
TIM20_CNT         EQU (TIM20 + 0x24) ;!< TIM counter register,                Address offset: 0x24
TIM20_PSC         EQU (TIM20 + 0x28) ;!< TIM prescaler,                       Address offset: 0x28
TIM20_ARR         EQU (TIM20 + 0x2C) ;!< TIM auto-reload register,            Address offset: 0x2C
TIM20_RCR         EQU (TIM20 + 0x30) ;!< TIM repetition counter register,     Address offset: 0x30
TIM20_CCR1        EQU (TIM20 + 0x34) ;!< TIM capture/compare register 1,      Address offset: 0x34
TIM20_CCR2        EQU (TIM20 + 0x38) ;!< TIM capture/compare register 2,      Address offset: 0x38
TIM20_CCR3        EQU (TIM20 + 0x3C) ;!< TIM capture/compare register 3,      Address offset: 0x3C
TIM20_CCR4        EQU (TIM20 + 0x40) ;!< TIM capture/compare register 4,      Address offset: 0x40
TIM20_BDTR        EQU (TIM20 + 0x44) ;!< TIM break and dead-time register,    Address offset: 0x44
TIM20_DCR         EQU (TIM20 + 0x48) ;!< TIM DMA control register,            Address offset: 0x48
TIM20_DMAR        EQU (TIM20 + 0x4C) ;!< TIM DMA address for full transfer,   Address offset: 0x4C
TIM20_OR          EQU (TIM20 + 0x50) ;!< TIM option register,                 Address offset: 0x50
TIM20_CCMR3       EQU (TIM20 + 0x54) ;!< TIM capture/compare mode register 3, Address offset: 0x54
TIM20_CCR5        EQU (TIM20 + 0x58) ;!< TIM capture/compare register5,       Address offset: 0x58
TIM20_CCR6        EQU (TIM20 + 0x5C) ;!< TIM capture/compare register 4,      Address offset: 0x5C


RTC_TR         EQU (RTC + 0x00) ;!< RTC time register,                                        Address offset: 0x00
RTC_DR         EQU (RTC + 0x04) ;!< RTC date register,                                        Address offset: 0x04
RTC_CR         EQU (RTC + 0x08) ;!< RTC control register,                                     Address offset: 0x08
RTC_ISR        EQU (RTC + 0x0C) ;!< RTC initialization and status register,                   Address offset: 0x0C
RTC_PRER       EQU (RTC + 0x10) ;!< RTC prescaler register,                                   Address offset: 0x10
RTC_WUTR       EQU (RTC + 0x14) ;!< RTC wakeup timer register,                                Address offset: 0x14
RTC_ALRMAR     EQU (RTC + 0x1C) ;!< RTC alarm A register,                                     Address offset: 0x1C
RTC_ALRMBR     EQU (RTC + 0x20) ;!< RTC alarm B register,                                     Address offset: 0x20
RTC_WPR        EQU (RTC + 0x24) ;!< RTC write protection register,                            Address offset: 0x24
RTC_SSR        EQU (RTC + 0x28) ;!< RTC sub second register,                                  Address offset: 0x28
RTC_SHIFTR     EQU (RTC + 0x2C) ;!< RTC shift control register,                               Address offset: 0x2C
RTC_TSTR       EQU (RTC + 0x30) ;!< RTC time stamp time register,                             Address offset: 0x30
RTC_TSDR       EQU (RTC + 0x34) ;!< RTC time stamp date register,                             Address offset: 0x34
RTC_TSSSR      EQU (RTC + 0x38) ;!< RTC time-stamp sub second register,                       Address offset: 0x38
RTC_CALR       EQU (RTC + 0x3C) ;!< RTC calibration register,                                 Address offset: 0x3C
RTC_TAFCR      EQU (RTC + 0x40) ;!< RTC tamper and alternate function configuration register, Address offset: 0x40
RTC_ALRMASSR   EQU (RTC + 0x44) ;!< RTC alarm A sub second register,                          Address offset: 0x44
RTC_ALRMBSSR   EQU (RTC + 0x48) ;!< RTC alarm B sub second register,                          Address offset: 0x48
RTC_BKP0R      EQU (RTC + 0x50) ;!< RTC backup register 0,                                    Address offset: 0x50
RTC_BKP1R      EQU (RTC + 0x54) ;!< RTC backup register 1,                                    Address offset: 0x54
RTC_BKP2R      EQU (RTC + 0x58) ;!< RTC backup register 2,                                    Address offset: 0x58
RTC_BKP3R      EQU (RTC + 0x5C) ;!< RTC backup register 3,                                    Address offset: 0x5C
RTC_BKP4R      EQU (RTC + 0x60) ;!< RTC backup register 4,                                    Address offset: 0x60
RTC_BKP5R      EQU (RTC + 0x64) ;!< RTC backup register 5,                                    Address offset: 0x64
RTC_BKP6R      EQU (RTC + 0x68) ;!< RTC backup register 6,                                    Address offset: 0x68
RTC_BKP7R      EQU (RTC + 0x6C) ;!< RTC backup register 7,                                    Address offset: 0x6C
RTC_BKP8R      EQU (RTC + 0x70) ;!< RTC backup register 8,                                    Address offset: 0x70
RTC_BKP9R      EQU (RTC + 0x74) ;!< RTC backup register 9,                                    Address offset: 0x74
RTC_BKP10R     EQU (RTC + 0x78) ;!< RTC backup register 10,                                   Address offset: 0x78
RTC_BKP11R     EQU (RTC + 0x7C) ;!< RTC backup register 11,                                   Address offset: 0x7C
RTC_BKP12R     EQU (RTC + 0x80) ;!< RTC backup register 12,                                   Address offset: 0x80
RTC_BKP13R     EQU (RTC + 0x84) ;!< RTC backup register 13,                                   Address offset: 0x84
RTC_BKP14R     EQU (RTC + 0x88) ;!< RTC backup register 14,                                   Address offset: 0x88
RTC_BKP15R     EQU (RTC + 0x8C) ;!< RTC backup register 15,                                   Address offset: 0x8C


WWDG_CR   EQU (WWDG + 0x00) ;!< WWDG Control register,       Address offset: 0x00
WWDG_CFR  EQU (WWDG + 0x04) ;!< WWDG Configuration register, Address offset: 0x04
WWDG_SR   EQU (WWDG + 0x08) ;!< WWDG Status register,        Address offset: 0x08


IWDG_KR   EQU (IWDG + 0x00) ;!< IWDG Key register,       Address offset: 0x00
IWDG_PR   EQU (IWDG + 0x04) ;!< IWDG Prescaler register, Address offset: 0x04
IWDG_RLR  EQU (IWDG + 0x08) ;!< IWDG Reload register,    Address offset: 0x08
IWDG_SR   EQU (IWDG + 0x0C) ;!< IWDG Status register,    Address offset: 0x0C
IWDG_WINR EQU (IWDG + 0x10) ;!< IWDG Window register,    Address offset: 0x10


I2S2_CR1      EQU (I2S2ext + 0x00) ;!< SPI Control register 1,                              Address offset: 0x00
I2S2_CR2      EQU (I2S2ext + 0x04) ;!< SPI Control register 2,                              Address offset: 0x04
I2S2_SR       EQU (I2S2ext + 0x08) ;!< SPI Status register,                                 Address offset: 0x08
I2S2_DR       EQU (I2S2ext + 0x0C) ;!< SPI data register,                                   Address offset: 0x0C
I2S2_CRCPR    EQU (I2S2ext + 0x10) ;!< SPI CRC polynomial register,                         Address offset: 0x10
I2S2_RXCRCR   EQU (I2S2ext + 0x14) ;!< SPI Rx CRC register,                                 Address offset: 0x14
I2S2_TXCRCR   EQU (I2S2ext + 0x18) ;!< SPI Tx CRC register,                                 Address offset: 0x18
I2S2_I2SCFGR  EQU (I2S2ext + 0x1C) ;!< SPI_I2S configuration register,                      Address offset: 0x1C
I2S2_I2SPR    EQU (I2S2ext + 0x20) ;!< SPI_I2S prescaler register,                          Address offset: 0x20


SPI1_CR1      EQU (SPI1 + 0x00) ;!< SPI Control register 1,                              Address offset: 0x00
SPI1_CR2      EQU (SPI1 + 0x04) ;!< SPI Control register 2,                              Address offset: 0x04
SPI1_SR       EQU (SPI1 + 0x08) ;!< SPI Status register,                                 Address offset: 0x08
SPI1_DR       EQU (SPI1 + 0x0C) ;!< SPI data register,                                   Address offset: 0x0C
SPI1_CRCPR    EQU (SPI1 + 0x10) ;!< SPI CRC polynomial register,                         Address offset: 0x10
SPI1_RXCRCR   EQU (SPI1 + 0x14) ;!< SPI Rx CRC register,                                 Address offset: 0x14
SPI1_TXCRCR   EQU (SPI1 + 0x18) ;!< SPI Tx CRC register,                                 Address offset: 0x18
SPI1_I2SCFGR  EQU (SPI1 + 0x1C) ;!< SPI_I2S configuration register,                      Address offset: 0x1C
SPI1_I2SPR    EQU (SPI1 + 0x20) ;!< SPI_I2S prescaler register,                          Address offset: 0x20


SPI2_CR1      EQU (SPI2 + 0x00) ;!< SPI Control register 1,                              Address offset: 0x00
SPI2_CR2      EQU (SPI2 + 0x04) ;!< SPI Control register 2,                              Address offset: 0x04
SPI2_SR       EQU (SPI2 + 0x08) ;!< SPI Status register,                                 Address offset: 0x08
SPI2_DR       EQU (SPI2 + 0x0C) ;!< SPI data register,                                   Address offset: 0x0C
SPI2_CRCPR    EQU (SPI2 + 0x10) ;!< SPI CRC polynomial register,                         Address offset: 0x10
SPI2_RXCRCR   EQU (SPI2 + 0x14) ;!< SPI Rx CRC register,                                 Address offset: 0x14
SPI2_TXCRCR   EQU (SPI2 + 0x18) ;!< SPI Tx CRC register,                                 Address offset: 0x18
SPI2_I2SCFGR  EQU (SPI2 + 0x1C) ;!< SPI_I2S configuration register,                      Address offset: 0x1C
SPI2_I2SPR    EQU (SPI2 + 0x20) ;!< SPI_I2S prescaler register,                          Address offset: 0x20


SPI3_CR1      EQU (SPI3 + 0x00) ;!< SPI Control register 1,                              Address offset: 0x00
SPI3_CR2      EQU (SPI3 + 0x04) ;!< SPI Control register 2,                              Address offset: 0x04
SPI3_SR       EQU (SPI3 + 0x08) ;!< SPI Status register,                                 Address offset: 0x08
SPI3_DR       EQU (SPI3 + 0x0C) ;!< SPI data register,                                   Address offset: 0x0C
SPI3_CRCPR    EQU (SPI3 + 0x10) ;!< SPI CRC polynomial register,                         Address offset: 0x10
SPI3_RXCRCR   EQU (SPI3 + 0x14) ;!< SPI Rx CRC register,                                 Address offset: 0x14
SPI3_TXCRCR   EQU (SPI3 + 0x18) ;!< SPI Tx CRC register,                                 Address offset: 0x18
SPI3_I2SCFGR  EQU (SPI3 + 0x1C) ;!< SPI_I2S configuration register,                      Address offset: 0x1C
SPI3_I2SPR    EQU (SPI3 + 0x20) ;!< SPI_I2S prescaler register,                          Address offset: 0x20


I2S3_CR1      EQU (I2S3ext + 0x00) ;!< SPI Control register 1,                              Address offset: 0x00
I2S3_CR2      EQU (I2S3ext + 0x04) ;!< SPI Control register 2,                              Address offset: 0x04
I2S3_SR       EQU (I2S3ext + 0x08) ;!< SPI Status register,                                 Address offset: 0x08
I2S3_DR       EQU (I2S3ext + 0x0C) ;!< SPI data register,                                   Address offset: 0x0C
I2S3_CRCPR    EQU (I2S3ext + 0x10) ;!< SPI CRC polynomial register,                         Address offset: 0x10
I2S3_RXCRCR   EQU (I2S3ext + 0x14) ;!< SPI Rx CRC register,                                 Address offset: 0x14
I2S3_TXCRCR   EQU (I2S3ext + 0x18) ;!< SPI Tx CRC register,                                 Address offset: 0x18
I2S3_I2SCFGR  EQU (I2S3ext + 0x1C) ;!< SPI_I2S configuration register,                      Address offset: 0x1C
I2S3_I2SPR    EQU (I2S3ext + 0x20) ;!< SPI_I2S prescaler register,                          Address offset: 0x20


SPI4_CR1      EQU (SPI4 + 0x00) ;!< SPI Control register 1,                              Address offset: 0x00
SPI4_CR2      EQU (SPI4 + 0x04) ;!< SPI Control register 2,                              Address offset: 0x04
SPI4_SR       EQU (SPI4 + 0x08) ;!< SPI Status register,                                 Address offset: 0x08
SPI4_DR       EQU (SPI4 + 0x0C) ;!< SPI data register,                                   Address offset: 0x0C
SPI4_CRCPR    EQU (SPI4 + 0x10) ;!< SPI CRC polynomial register,                         Address offset: 0x10
SPI4_RXCRCR   EQU (SPI4 + 0x14) ;!< SPI Rx CRC register,                                 Address offset: 0x14
SPI4_TXCRCR   EQU (SPI4 + 0x18) ;!< SPI Tx CRC register,                                 Address offset: 0x18
SPI4_I2SCFGR  EQU (SPI4 + 0x1C) ;!< SPI_I2S configuration register,                      Address offset: 0x1C
SPI4_I2SPR    EQU (SPI4 + 0x20) ;!< SPI_I2S prescaler register,                          Address offset: 0x20


USART1_CR1    EQU (USART1 + 0x00) ;!< USART Control register 1,                 Address offset: 0x00
USART1_CR2    EQU (USART1 + 0x04) ;!< USART Control register 2,                 Address offset: 0x04
USART1_CR3    EQU (USART1 + 0x08) ;!< USART Control register 3,                 Address offset: 0x08
USART1_BRR    EQU (USART1 + 0x0C) ;!< USART Baud rate register,                 Address offset: 0x0C
USART1_GTPR   EQU (USART1 + 0x10) ;!< USART Guard time and prescaler register,  Address offset: 0x10
USART1_RTOR   EQU (USART1 + 0x14) ;!< USART Receiver Time Out register,         Address offset: 0x14
USART1_RQR    EQU (USART1 + 0x18) ;!< USART Request register,                   Address offset: 0x18
USART1_ISR    EQU (USART1 + 0x1C) ;!< USART Interrupt and status register,      Address offset: 0x1C
USART1_ICR    EQU (USART1 + 0x20) ;!< USART Interrupt flag Clear register,      Address offset: 0x20
USART1_RDR    EQU (USART1 + 0x24) ;!< USART Receive Data register,              Address offset: 0x24
USART1_TDR    EQU (USART1 + 0x28) ;!< USART Transmit Data register,             Address offset: 0x28


USART2_CR1    EQU (USART2 + 0x00) ;!< USART Control register 1,                 Address offset: 0x00
USART2_CR2    EQU (USART2 + 0x04) ;!< USART Control register 2,                 Address offset: 0x04
USART2_CR3    EQU (USART2 + 0x08) ;!< USART Control register 3,                 Address offset: 0x08
USART2_BRR    EQU (USART2 + 0x0C) ;!< USART Baud rate register,                 Address offset: 0x0C
USART2_GTPR   EQU (USART2 + 0x10) ;!< USART Guard time and prescaler register,  Address offset: 0x10
USART2_RTOR   EQU (USART2 + 0x14) ;!< USART Receiver Time Out register,         Address offset: 0x14
USART2_RQR    EQU (USART2 + 0x18) ;!< USART Request register,                   Address offset: 0x18
USART2_ISR    EQU (USART2 + 0x1C) ;!< USART Interrupt and status register,      Address offset: 0x1C
USART2_ICR    EQU (USART2 + 0x20) ;!< USART Interrupt flag Clear register,      Address offset: 0x20
USART2_RDR    EQU (USART2 + 0x24) ;!< USART Receive Data register,              Address offset: 0x24
USART2_TDR    EQU (USART2 + 0x28) ;!< USART Transmit Data register,             Address offset: 0x28


USART3_CR1    EQU (USART3 + 0x00) ;!< USART Control register 1,                 Address offset: 0x00
USART3_CR2    EQU (USART3 + 0x04) ;!< USART Control register 2,                 Address offset: 0x04
USART3_CR3    EQU (USART3 + 0x08) ;!< USART Control register 3,                 Address offset: 0x08
USART3_BRR    EQU (USART3 + 0x0C) ;!< USART Baud rate register,                 Address offset: 0x0C
USART3_GTPR   EQU (USART3 + 0x10) ;!< USART Guard time and prescaler register,  Address offset: 0x10
USART3_RTOR   EQU (USART3 + 0x14) ;!< USART Receiver Time Out register,         Address offset: 0x14
USART3_RQR    EQU (USART3 + 0x18) ;!< USART Request register,                   Address offset: 0x18
USART3_ISR    EQU (USART3 + 0x1C) ;!< USART Interrupt and status register,      Address offset: 0x1C
USART3_ICR    EQU (USART3 + 0x20) ;!< USART Interrupt flag Clear register,      Address offset: 0x20
USART3_RDR    EQU (USART3 + 0x24) ;!< USART Receive Data register,              Address offset: 0x24
USART3_TDR    EQU (USART3 + 0x28) ;!< USART Transmit Data register,             Address offset: 0x28


UART4_CR1    EQU (UART4 + 0x00) ;!< USART Control register 1,                 Address offset: 0x00
UART4_CR2    EQU (UART4 + 0x04) ;!< USART Control register 2,                 Address offset: 0x04
UART4_CR3    EQU (UART4 + 0x08) ;!< USART Control register 3,                 Address offset: 0x08
UART4_BRR    EQU (UART4 + 0x0C) ;!< USART Baud rate register,                 Address offset: 0x0C
UART4_GTPR   EQU (UART4 + 0x10) ;!< USART Guard time and prescaler register,  Address offset: 0x10
UART4_RTOR   EQU (UART4 + 0x14) ;!< USART Receiver Time Out register,         Address offset: 0x14
UART4_RQR    EQU (UART4 + 0x18) ;!< USART Request register,                   Address offset: 0x18
UART4_ISR    EQU (UART4 + 0x1C) ;!< USART Interrupt and status register,      Address offset: 0x1C
UART4_ICR    EQU (UART4 + 0x20) ;!< USART Interrupt flag Clear register,      Address offset: 0x20
UART4_RDR    EQU (UART4 + 0x24) ;!< USART Receive Data register,              Address offset: 0x24
UART4_TDR    EQU (UART4 + 0x28) ;!< USART Transmit Data register,             Address offset: 0x28


UART5_CR1    EQU (UART5 + 0x00) ;!< USART Control register 1,                 Address offset: 0x00
UART5_CR2    EQU (UART5 + 0x04) ;!< USART Control register 2,                 Address offset: 0x04
UART5_CR3    EQU (UART5 + 0x08) ;!< USART Control register 3,                 Address offset: 0x08
UART5_BRR    EQU (UART5 + 0x0C) ;!< USART Baud rate register,                 Address offset: 0x0C
UART5_GTPR   EQU (UART5 + 0x10) ;!< USART Guard time and prescaler register,  Address offset: 0x10
UART5_RTOR   EQU (UART5 + 0x14) ;!< USART Receiver Time Out register,         Address offset: 0x14
UART5_RQR    EQU (UART5 + 0x18) ;!< USART Request register,                   Address offset: 0x18
UART5_ISR    EQU (UART5 + 0x1C) ;!< USART Interrupt and status register,      Address offset: 0x1C
UART5_ICR    EQU (UART5 + 0x20) ;!< USART Interrupt flag Clear register,      Address offset: 0x20
UART5_RDR    EQU (UART5 + 0x24) ;!< USART Receive Data register,              Address offset: 0x24
UART5_TDR    EQU (UART5 + 0x28) ;!< USART Transmit Data register,             Address offset: 0x28


I2C1_CR1      EQU (I2C1 + 0x00) ;!< I2C Control register 1,            Address offset: 0x00
I2C1_CR2      EQU (I2C1 + 0x04) ;!< I2C Control register 2,            Address offset: 0x04
I2C1_OAR1     EQU (I2C1 + 0x08) ;!< I2C Own address 1 register,        Address offset: 0x08
I2C1_OAR2     EQU (I2C1 + 0x0C) ;!< I2C Own address 2 register,        Address offset: 0x0C
I2C1_TIMINGR  EQU (I2C1 + 0x10) ;!< I2C Timing register,               Address offset: 0x10
I2C1_TIMEOUTR EQU (I2C1 + 0x14) ;!< I2C Timeout register,              Address offset: 0x14
I2C1_ISR      EQU (I2C1 + 0x18) ;!< I2C Interrupt and status register, Address offset: 0x18
I2C1_ICR      EQU (I2C1 + 0x1C) ;!< I2C Interrupt clear register,      Address offset: 0x1C
I2C1_PECR     EQU (I2C1 + 0x20) ;!< I2C PEC register,                  Address offset: 0x20
I2C1_RXDR     EQU (I2C1 + 0x24) ;!< I2C Receive data register,         Address offset: 0x24
I2C1_TXDR     EQU (I2C1 + 0x28) ;!< I2C Transmit data register,        Address offset: 0x28


I2C2_CR1      EQU (I2C2 + 0x00) ;!< I2C Control register 1,            Address offset: 0x00
I2C2_CR2      EQU (I2C2 + 0x04) ;!< I2C Control register 2,            Address offset: 0x04
I2C2_OAR1     EQU (I2C2 + 0x08) ;!< I2C Own address 1 register,        Address offset: 0x08
I2C2_OAR2     EQU (I2C2 + 0x0C) ;!< I2C Own address 2 register,        Address offset: 0x0C
I2C2_TIMINGR  EQU (I2C2 + 0x10) ;!< I2C Timing register,               Address offset: 0x10
I2C2_TIMEOUTR EQU (I2C2 + 0x14) ;!< I2C Timeout register,              Address offset: 0x14
I2C2_ISR      EQU (I2C2 + 0x18) ;!< I2C Interrupt and status register, Address offset: 0x18
I2C2_ICR      EQU (I2C2 + 0x1C) ;!< I2C Interrupt clear register,      Address offset: 0x1C
I2C2_PECR     EQU (I2C2 + 0x20) ;!< I2C PEC register,                  Address offset: 0x20
I2C2_RXDR     EQU (I2C2 + 0x24) ;!< I2C Receive data register,         Address offset: 0x24
I2C2_TXDR     EQU (I2C2 + 0x28) ;!< I2C Transmit data register,        Address offset: 0x28


I2C3_CR1      EQU (I2C3 + 0x00) ;!< I2C Control register 1,            Address offset: 0x00
I2C3_CR2      EQU (I2C3 + 0x04) ;!< I2C Control register 2,            Address offset: 0x04
I2C3_OAR1     EQU (I2C3 + 0x08) ;!< I2C Own address 1 register,        Address offset: 0x08
I2C3_OAR2     EQU (I2C3 + 0x0C) ;!< I2C Own address 2 register,        Address offset: 0x0C
I2C3_TIMINGR  EQU (I2C3 + 0x10) ;!< I2C Timing register,               Address offset: 0x10
I2C3_TIMEOUTR EQU (I2C3 + 0x14) ;!< I2C Timeout register,              Address offset: 0x14
I2C3_ISR      EQU (I2C3 + 0x18) ;!< I2C Interrupt and status register, Address offset: 0x18
I2C3_ICR      EQU (I2C3 + 0x1C) ;!< I2C Interrupt clear register,      Address offset: 0x1C
I2C3_PECR     EQU (I2C3 + 0x20) ;!< I2C PEC register,                  Address offset: 0x20
I2C3_RXDR     EQU (I2C3 + 0x24) ;!< I2C Receive data register,         Address offset: 0x24
I2C3_TXDR     EQU (I2C3 + 0x28) ;!< I2C Transmit data register,        Address offset: 0x28


PWR_CR   EQU (PWR + 0x00) ;!< PWR power control register,        Address offset: 0x00
PWR_CSR  EQU (PWR + 0x04) ;!< PWR power control/status register, Address offset: 0x04


DAC1_CR       EQU (DAC1 + 0x00) ;!< DAC control register,                                    Address offset: 0x00
DAC1_SWTRIGR  EQU (DAC1 + 0x04) ;!< DAC software trigger register,                           Address offset: 0x04
DAC1_DHR12R1  EQU (DAC1 + 0x08) ;!< DAC channel1 12-bit right-aligned data holding register, Address offset: 0x08
DAC1_DHR12L1  EQU (DAC1 + 0x0C) ;!< DAC channel1 12-bit left aligned data holding register,  Address offset: 0x0C
DAC1_DHR8R1   EQU (DAC1 + 0x10) ;!< DAC channel1 8-bit right aligned data holding register,  Address offset: 0x10
DAC1_DHR12R2  EQU (DAC1 + 0x14) ;!< DAC channel2 12-bit right aligned data holding register, Address offset: 0x14
DAC1_DHR12L2  EQU (DAC1 + 0x18) ;!< DAC channel2 12-bit left aligned data holding register,  Address offset: 0x18
DAC1_DHR8R2   EQU (DAC1 + 0x1C) ;!< DAC channel2 8-bit right-aligned data holding register,  Address offset: 0x1C
DAC1_DHR12RD  EQU (DAC1 + 0x20) ;!< Dual DAC 12-bit right-aligned data holding register,     Address offset: 0x20
DAC1_DHR12LD  EQU (DAC1 + 0x24) ;!< DUAL DAC 12-bit left aligned data holding register,      Address offset: 0x24
DAC1_DHR8RD   EQU (DAC1 + 0x28) ;!< DUAL DAC 8-bit right aligned data holding register,      Address offset: 0x28
DAC1_DOR1     EQU (DAC1 + 0x2C) ;!< DAC channel1 data output register,                       Address offset: 0x2C
DAC1_DOR2     EQU (DAC1 + 0x30) ;!< DAC channel2 data output register,                       Address offset: 0x30
DAC1_SR       EQU (DAC1 + 0x34) ;!< DAC status register,                                     Address offset: 0x34


COMP1_CSR         EQU (COMP1 + 0x00) ;!< COMP control and status register, Address offset: 0x00


COMP2_CSR         EQU (COMP2 + 0x00) ;!< COMP control and status register, Address offset: 0x00


COMP3_CSR         EQU (COMP3 + 0x00) ;!< COMP control and status register, Address offset: 0x00


COMP4_CSR         EQU (COMP4 + 0x00) ;!< COMP control and status register, Address offset: 0x00


COMP5_CSR         EQU (COMP5 + 0x00) ;!< COMP control and status register, Address offset: 0x00


COMP6_CSR         EQU (COMP6 + 0x00) ;!< COMP control and status register, Address offset: 0x00


COMP7_CSR         EQU (COMP7 + 0x00) ;!< COMP control and status register, Address offset: 0x00


COMP12_COMMON_CSR         EQU (COMP12_COMMON + 0x00) ;!< COMP control and status register, used for bits common to several COMP instances, Address offset: 0x00


COMP34_COMMON_CSR         EQU (COMP34_COMMON + 0x00) ;!< COMP control and status register, used for bits common to several COMP instances, Address offset: 0x00


COMP56_COMMON_CSR         EQU (COMP56_COMMON + 0x00) ;!< COMP control and status register, used for bits common to several COMP instances, Address offset: 0x00


OPAMP1_CSR        EQU (OPAMP1 + 0x00) ;!< OPAMP control and status register,            Address offset: 0x00


OPAMP2_CSR        EQU (OPAMP2 + 0x00) ;!< OPAMP control and status register,            Address offset: 0x00


OPAMP3_CSR        EQU (OPAMP3 + 0x00) ;!< OPAMP control and status register,            Address offset: 0x00


OPAMP4_CSR        EQU (OPAMP4 + 0x00) ;!< OPAMP control and status register,            Address offset: 0x00


SYSCFG_CFGR1      EQU (SYSCFG + 0x00) ;!< SYSCFG configuration register 1,                      Address offset: 0x00
SYSCFG_RCR        EQU (SYSCFG + 0x04) ;!< SYSCFG CCM SRAM protection register,               Address offset: 0x04
SYSCFG_EXTICR     EQU (SYSCFG + 0x08) ;!< SYSCFG external interrupt configuration registers, Address offset: 0x14-0x08
SYSCFG_CFGR2      EQU (SYSCFG + 0x18) ;!< SYSCFG configuration register 2,                      Address offset: 0x18
SYSCFG_CFGR4      EQU (SYSCFG + 0x48) ;!< SYSCFG configuration register 4,                   Address offset: 0x48


EXTI_IMR          EQU (EXTI + 0x00) ;!<EXTI Interrupt mask register,                             Address offset: 0x00
EXTI_EMR          EQU (EXTI + 0x04) ;!<EXTI Event mask register,                                 Address offset: 0x04
EXTI_RTSR         EQU (EXTI + 0x08) ;!<EXTI Rising trigger selection register ,                  Address offset: 0x08
EXTI_FTSR         EQU (EXTI + 0x0C) ;!<EXTI Falling trigger selection register,                  Address offset: 0x0C
EXTI_SWIER        EQU (EXTI + 0x10) ;!<EXTI Software interrupt event register,                   Address offset: 0x10
EXTI_PR           EQU (EXTI + 0x14) ;!<EXTI Pending register,                                    Address offset: 0x14
EXTI_IMR2         EQU (EXTI + 0x20) ;!< EXTI Interrupt mask register,                            Address offset: 0x20
EXTI_EMR2         EQU (EXTI + 0x24) ;!< EXTI Event mask register,                                Address offset: 0x24
EXTI_RTSR2        EQU (EXTI + 0x28) ;!< EXTI Rising trigger selection register,                  Address offset: 0x28
EXTI_FTSR2        EQU (EXTI + 0x2C) ;!< EXTI Falling trigger selection register,                 Address offset: 0x2C
EXTI_SWIER2       EQU (EXTI + 0x30) ;!< EXTI Software interrupt event register,                  Address offset: 0x30
EXTI_PR2          EQU (EXTI + 0x34) ;!< EXTI Pending register,                                   Address offset: 0x34


DBGMCU_IDCODE  EQU (DBGMCU + 0x00) ;!< MCU device ID code,               Address offset: 0x00
DBGMCU_CR      EQU (DBGMCU + 0x04) ;!< Debug MCU configuration register, Address offset: 0x04
DBGMCU_APB1FZ  EQU (DBGMCU + 0x08) ;!< Debug MCU APB1 freeze register,   Address offset: 0x08
DBGMCU_APB2FZ  EQU (DBGMCU + 0x0C) ;!< Debug MCU APB2 freeze register,   Address offset: 0x0C


DMA1_ISR          EQU (DMA1 + 0x00) ;!< DMA interrupt status register,                            Address offset: 0x00
DMA1_IFCR         EQU (DMA1 + 0x04) ;!< DMA interrupt flag clear register,                        Address offset: 0x04


DMA1_Channel1_CCR          EQU (DMA1_Channel1 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA1_Channel1_CNDTR        EQU (DMA1_Channel1 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA1_Channel1_CPAR         EQU (DMA1_Channel1 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA1_Channel1_CMAR         EQU (DMA1_Channel1 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


DMA1_Channel2_CCR          EQU (DMA1_Channel2 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA1_Channel2_CNDTR        EQU (DMA1_Channel2 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA1_Channel2_CPAR         EQU (DMA1_Channel2 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA1_Channel2_CMAR         EQU (DMA1_Channel2 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


DMA1_Channel3_CCR          EQU (DMA1_Channel3 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA1_Channel3_CNDTR        EQU (DMA1_Channel3 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA1_Channel3_CPAR         EQU (DMA1_Channel3 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA1_Channel3_CMAR         EQU (DMA1_Channel3 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


DMA1_Channel4_CCR          EQU (DMA1_Channel4 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA1_Channel4_CNDTR        EQU (DMA1_Channel4 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA1_Channel4_CPAR         EQU (DMA1_Channel4 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA1_Channel4_CMAR         EQU (DMA1_Channel4 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


DMA1_Channel5_CCR          EQU (DMA1_Channel5 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA1_Channel5_CNDTR        EQU (DMA1_Channel5 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA1_Channel5_CPAR         EQU (DMA1_Channel5 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA1_Channel5_CMAR         EQU (DMA1_Channel5 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


DMA1_Channel6_CCR          EQU (DMA1_Channel6 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA1_Channel6_CNDTR        EQU (DMA1_Channel6 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA1_Channel6_CPAR         EQU (DMA1_Channel6 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA1_Channel6_CMAR         EQU (DMA1_Channel6 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


DMA1_Channel7_CCR          EQU (DMA1_Channel7 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA1_Channel7_CNDTR        EQU (DMA1_Channel7 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA1_Channel7_CPAR         EQU (DMA1_Channel7 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA1_Channel7_CMAR         EQU (DMA1_Channel7 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


DMA2_ISR          EQU (DMA2 + 0x00) ;!< DMA interrupt status register,                            Address offset: 0x00
DMA2_IFCR         EQU (DMA2 + 0x04) ;!< DMA interrupt flag clear register,                        Address offset: 0x04


DMA2_Channel1_CCR          EQU (DMA2_Channel1 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA2_Channel1_CNDTR        EQU (DMA2_Channel1 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA2_Channel1_CPAR         EQU (DMA2_Channel1 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA2_Channel1_CMAR         EQU (DMA2_Channel1 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


DMA2_Channel2_CCR          EQU (DMA2_Channel2 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA2_Channel2_CNDTR        EQU (DMA2_Channel2 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA2_Channel2_CPAR         EQU (DMA2_Channel2 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA2_Channel2_CMAR         EQU (DMA2_Channel2 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


DMA2_Channel3_CCR          EQU (DMA2_Channel3 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA2_Channel3_CNDTR        EQU (DMA2_Channel3 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA2_Channel3_CPAR         EQU (DMA2_Channel3 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA2_Channel3_CMAR         EQU (DMA2_Channel3 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


DMA2_Channel4_CCR          EQU (DMA2_Channel4 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA2_Channel4_CNDTR        EQU (DMA2_Channel4 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA2_Channel4_CPAR         EQU (DMA2_Channel4 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA2_Channel4_CMAR         EQU (DMA2_Channel4 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


DMA2_Channel5_CCR          EQU (DMA2_Channel5 + 0x00) ;!< DMA channel x configuration register             Address offset: 0x00
DMA2_Channel5_CNDTR        EQU (DMA2_Channel5 + 0x04) ;!< DMA channel x number of data register            Address offset: 0x04
DMA2_Channel5_CPAR         EQU (DMA2_Channel5 + 0x08) ;!< DMA channel x peripheral address register        Address offset: 0x08
DMA2_Channel5_CMAR         EQU (DMA2_Channel5 + 0x0C) ;!< DMA channel x memory address register            Address offset: 0x0C


RCC_CR         EQU (RCC + 0x00) ;!< RCC clock control register,                                  Address offset: 0x00
RCC_CFGR       EQU (RCC + 0x04) ;!< RCC clock configuration register,                            Address offset: 0x04
RCC_CIR        EQU (RCC + 0x08) ;!< RCC clock interrupt register,                                Address offset: 0x08
RCC_APB2RSTR   EQU (RCC + 0x0C) ;!< RCC APB2 peripheral reset register,                          Address offset: 0x0C
RCC_APB1RSTR   EQU (RCC + 0x10) ;!< RCC APB1 peripheral reset register,                          Address offset: 0x10
RCC_AHBENR     EQU (RCC + 0x14) ;!< RCC AHB peripheral clock register,                           Address offset: 0x14
RCC_APB2ENR    EQU (RCC + 0x18) ;!< RCC APB2 peripheral clock enable register,                   Address offset: 0x18
RCC_APB1ENR    EQU (RCC + 0x1C) ;!< RCC APB1 peripheral clock enable register,                   Address offset: 0x1C
RCC_BDCR       EQU (RCC + 0x20) ;!< RCC Backup domain control register,                          Address offset: 0x20
RCC_CSR        EQU (RCC + 0x24) ;!< RCC clock control & status register,                         Address offset: 0x24
RCC_AHBRSTR    EQU (RCC + 0x28) ;!< RCC AHB peripheral reset register,                           Address offset: 0x28
RCC_CFGR2      EQU (RCC + 0x2C) ;!< RCC clock configuration register 2,                          Address offset: 0x2C
RCC_CFGR3      EQU (RCC + 0x30) ;!< RCC clock configuration register 3,                          Address offset: 0x30


FLASH_ACR          EQU (FLASH + 0x00) ;!< FLASH access control register,              Address offset: 0x00
FLASH_KEYR         EQU (FLASH + 0x04) ;!< FLASH key register,                         Address offset: 0x04
FLASH_OPTKEYR      EQU (FLASH + 0x08) ;!< FLASH option key register,                  Address offset: 0x08
FLASH_SR           EQU (FLASH + 0x0C) ;!< FLASH status register,                      Address offset: 0x0C
FLASH_CR           EQU (FLASH + 0x10) ;!< FLASH control register,                     Address offset: 0x10
FLASH_AR           EQU (FLASH + 0x14) ;!< FLASH address register,                     Address offset: 0x14
FLASH_OBR          EQU (FLASH + 0x1C) ;!< FLASH Option byte register,                 Address offset: 0x1C
FLASH_WRPR         EQU (FLASH + 0x20) ;!< FLASH Write register,                       Address offset: 0x20


OB_RDP          EQU (OB + 0x00) ;!<FLASH option byte Read protection,             Address offset: 0x00
OB_USER         EQU (OB + 0x02) ;!<FLASH option byte user options,                Address offset: 0x02
OB_WRP0         EQU (OB + 0x08) ;!<FLASH option byte write protection 0,          Address offset: 0x08
OB_WRP1         EQU (OB + 0x0C) ;!<FLASH option byte write protection 1,          Address offset: 0x0C
OB_WRP2         EQU (OB + 0x10) ;!<FLASH option byte write protection 2,          Address offset: 0x10
OB_WRP3         EQU (OB + 0x12) ;!<FLASH option byte write protection 3,          Address offset: 0x12


CRC_DR          EQU (CRC + 0x00) ;!< CRC Data register,                           Address offset: 0x00
CRC_IDR         EQU (CRC + 0x04) ;!< CRC Independent data register,               Address offset: 0x04
CRC_CR          EQU (CRC + 0x08) ;!< CRC Control register,                        Address offset: 0x08
CRC_INIT        EQU (CRC + 0x10) ;!< Initial CRC value register,                  Address offset: 0x10
CRC_POL         EQU (CRC + 0x14) ;!< CRC polynomial register,                     Address offset: 0x14


TSC_CR            EQU (TSC + 0x00) ;!< TSC control register,                                     Address offset: 0x00
TSC_IER           EQU (TSC + 0x04) ;!< TSC interrupt enable register,                            Address offset: 0x04
TSC_ICR           EQU (TSC + 0x08) ;!< TSC interrupt clear register,                             Address offset: 0x08
TSC_ISR           EQU (TSC + 0x0C) ;!< TSC interrupt status register,                            Address offset: 0x0C
TSC_IOHCR         EQU (TSC + 0x10) ;!< TSC I/O hysteresis control register,                      Address offset: 0x10
TSC_IOASCR        EQU (TSC + 0x18) ;!< TSC I/O analog switch control register,                   Address offset: 0x18
TSC_IOSCR         EQU (TSC + 0x20) ;!< TSC I/O sampling control register,                        Address offset: 0x20
TSC_IOCCR         EQU (TSC + 0x28) ;!< TSC I/O channel control register,                         Address offset: 0x28
TSC_IOGCSR        EQU (TSC + 0x30) ;!< TSC I/O group control status register,                    Address offset: 0x30
TSC_IOGXCR        EQU (TSC + 0x34) ;!< TSC I/O group x counter register,                         Address offset: 0x34-50


GPIOA_MODER        EQU (GPIOA + 0x00) ;!< GPIO port mode register,               Address offset: 0x00
GPIOA_OTYPER       EQU (GPIOA + 0x04) ;!< GPIO port output type register,        Address offset: 0x04
GPIOA_OSPEEDR      EQU (GPIOA + 0x08) ;!< GPIO port output speed register,       Address offset: 0x08
GPIOA_PUPDR        EQU (GPIOA + 0x0C) ;!< GPIO port pull-up/pull-down register,  Address offset: 0x0C
GPIOA_IDR          EQU (GPIOA + 0x10) ;!< GPIO port input data register,         Address offset: 0x10
GPIOA_ODR          EQU (GPIOA + 0x14) ;!< GPIO port output data register,        Address offset: 0x14
GPIOA_BSRR         EQU (GPIOA + 0x18) ;!< GPIO port bit set/reset register,      Address offset: 0x1A
GPIOA_LCKR         EQU (GPIOA + 0x1C) ;!< GPIO port configuration lock register, Address offset: 0x1C
GPIOA_AFRL         EQU (GPIOA + 0x20) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOA_AFRH         EQU (GPIOA + 0x24) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOA_BRR          EQU (GPIOA + 0x28) ;!< GPIO bit reset register,               Address offset: 0x28


GPIOB_MODER        EQU (GPIOB + 0x00) ;!< GPIO port mode register,               Address offset: 0x00
GPIOB_OTYPER       EQU (GPIOB + 0x04) ;!< GPIO port output type register,        Address offset: 0x04
GPIOB_OSPEEDR      EQU (GPIOB + 0x08) ;!< GPIO port output speed register,       Address offset: 0x08
GPIOB_PUPDR        EQU (GPIOB + 0x0C) ;!< GPIO port pull-up/pull-down register,  Address offset: 0x0C
GPIOB_IDR          EQU (GPIOB + 0x10) ;!< GPIO port input data register,         Address offset: 0x10
GPIOB_ODR          EQU (GPIOB + 0x14) ;!< GPIO port output data register,        Address offset: 0x14
GPIOB_BSRR         EQU (GPIOB + 0x18) ;!< GPIO port bit set/reset register,      Address offset: 0x1A
GPIOB_LCKR         EQU (GPIOB + 0x1C) ;!< GPIO port configuration lock register, Address offset: 0x1C
GPIOB_AFRL         EQU (GPIOB + 0x20) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOB_AFRH         EQU (GPIOB + 0x24) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOB_BRR          EQU (GPIOB + 0x28) ;!< GPIO bit reset register,               Address offset: 0x28


GPIOC_MODER        EQU (GPIOC + 0x00) ;!< GPIO port mode register,               Address offset: 0x00
GPIOC_OTYPER       EQU (GPIOC + 0x04) ;!< GPIO port output type register,        Address offset: 0x04
GPIOC_OSPEEDR      EQU (GPIOC + 0x08) ;!< GPIO port output speed register,       Address offset: 0x08
GPIOC_PUPDR        EQU (GPIOC + 0x0C) ;!< GPIO port pull-up/pull-down register,  Address offset: 0x0C
GPIOC_IDR          EQU (GPIOC + 0x10) ;!< GPIO port input data register,         Address offset: 0x10
GPIOC_ODR          EQU (GPIOC + 0x14) ;!< GPIO port output data register,        Address offset: 0x14
GPIOC_BSRR         EQU (GPIOC + 0x18) ;!< GPIO port bit set/reset register,      Address offset: 0x1A
GPIOC_LCKR         EQU (GPIOC + 0x1C) ;!< GPIO port configuration lock register, Address offset: 0x1C
GPIOC_AFRL         EQU (GPIOC + 0x20) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOC_AFRH         EQU (GPIOC + 0x24) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOC_BRR          EQU (GPIOC + 0x28) ;!< GPIO bit reset register,               Address offset: 0x28


GPIOD_MODER        EQU (GPIOD + 0x00) ;!< GPIO port mode register,               Address offset: 0x00
GPIOD_OTYPER       EQU (GPIOD + 0x04) ;!< GPIO port output type register,        Address offset: 0x04
GPIOD_OSPEEDR      EQU (GPIOD + 0x08) ;!< GPIO port output speed register,       Address offset: 0x08
GPIOD_PUPDR        EQU (GPIOD + 0x0C) ;!< GPIO port pull-up/pull-down register,  Address offset: 0x0C
GPIOD_IDR          EQU (GPIOD + 0x10) ;!< GPIO port input data register,         Address offset: 0x10
GPIOD_ODR          EQU (GPIOD + 0x14) ;!< GPIO port output data register,        Address offset: 0x14
GPIOD_BSRR         EQU (GPIOD + 0x18) ;!< GPIO port bit set/reset register,      Address offset: 0x1A
GPIOD_LCKR         EQU (GPIOD + 0x1C) ;!< GPIO port configuration lock register, Address offset: 0x1C
GPIOD_AFRL         EQU (GPIOD + 0x20) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOD_AFRH         EQU (GPIOD + 0x24) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOD_BRR          EQU (GPIOD + 0x28) ;!< GPIO bit reset register,               Address offset: 0x28


GPIOE_MODER        EQU (GPIOE + 0x00) ;!< GPIO port mode register,               Address offset: 0x00
GPIOE_OTYPER       EQU (GPIOE + 0x04) ;!< GPIO port output type register,        Address offset: 0x04
GPIOE_OSPEEDR      EQU (GPIOE + 0x08) ;!< GPIO port output speed register,       Address offset: 0x08
GPIOE_PUPDR        EQU (GPIOE + 0x0C) ;!< GPIO port pull-up/pull-down register,  Address offset: 0x0C
GPIOE_IDR          EQU (GPIOE + 0x10) ;!< GPIO port input data register,         Address offset: 0x10
GPIOE_ODR          EQU (GPIOE + 0x14) ;!< GPIO port output data register,        Address offset: 0x14
GPIOE_BSRR         EQU (GPIOE + 0x18) ;!< GPIO port bit set/reset register,      Address offset: 0x1A
GPIOE_LCKR         EQU (GPIOE + 0x1C) ;!< GPIO port configuration lock register, Address offset: 0x1C
GPIOE_AFRL         EQU (GPIOE + 0x20) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOE_AFRH         EQU (GPIOE + 0x24) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOE_BRR          EQU (GPIOE + 0x28) ;!< GPIO bit reset register,               Address offset: 0x28


GPIOF_MODER        EQU (GPIOF + 0x00) ;!< GPIO port mode register,               Address offset: 0x00
GPIOF_OTYPER       EQU (GPIOF + 0x04) ;!< GPIO port output type register,        Address offset: 0x04
GPIOF_OSPEEDR      EQU (GPIOF + 0x08) ;!< GPIO port output speed register,       Address offset: 0x08
GPIOF_PUPDR        EQU (GPIOF + 0x0C) ;!< GPIO port pull-up/pull-down register,  Address offset: 0x0C
GPIOF_IDR          EQU (GPIOF + 0x10) ;!< GPIO port input data register,         Address offset: 0x10
GPIOF_ODR          EQU (GPIOF + 0x14) ;!< GPIO port output data register,        Address offset: 0x14
GPIOF_BSRR         EQU (GPIOF + 0x18) ;!< GPIO port bit set/reset register,      Address offset: 0x1A
GPIOF_LCKR         EQU (GPIOF + 0x1C) ;!< GPIO port configuration lock register, Address offset: 0x1C
GPIOF_AFRL         EQU (GPIOF + 0x20) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOF_AFRH         EQU (GPIOF + 0x24) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOF_BRR          EQU (GPIOF + 0x28) ;!< GPIO bit reset register,               Address offset: 0x28


GPIOG_MODER        EQU (GPIOG + 0x00) ;!< GPIO port mode register,               Address offset: 0x00
GPIOG_OTYPER       EQU (GPIOG + 0x04) ;!< GPIO port output type register,        Address offset: 0x04
GPIOG_OSPEEDR      EQU (GPIOG + 0x08) ;!< GPIO port output speed register,       Address offset: 0x08
GPIOG_PUPDR        EQU (GPIOG + 0x0C) ;!< GPIO port pull-up/pull-down register,  Address offset: 0x0C
GPIOG_IDR          EQU (GPIOG + 0x10) ;!< GPIO port input data register,         Address offset: 0x10
GPIOG_ODR          EQU (GPIOG + 0x14) ;!< GPIO port output data register,        Address offset: 0x14
GPIOG_BSRR         EQU (GPIOG + 0x18) ;!< GPIO port bit set/reset register,      Address offset: 0x1A
GPIOG_LCKR         EQU (GPIOG + 0x1C) ;!< GPIO port configuration lock register, Address offset: 0x1C
GPIOG_AFRL         EQU (GPIOG + 0x20) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOG_AFRH         EQU (GPIOG + 0x24) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOG_BRR          EQU (GPIOG + 0x28) ;!< GPIO bit reset register,               Address offset: 0x28


GPIOH_MODER        EQU (GPIOH + 0x00) ;!< GPIO port mode register,               Address offset: 0x00
GPIOH_OTYPER       EQU (GPIOH + 0x04) ;!< GPIO port output type register,        Address offset: 0x04
GPIOH_OSPEEDR      EQU (GPIOH + 0x08) ;!< GPIO port output speed register,       Address offset: 0x08
GPIOH_PUPDR        EQU (GPIOH + 0x0C) ;!< GPIO port pull-up/pull-down register,  Address offset: 0x0C
GPIOH_IDR          EQU (GPIOH + 0x10) ;!< GPIO port input data register,         Address offset: 0x10
GPIOH_ODR          EQU (GPIOH + 0x14) ;!< GPIO port output data register,        Address offset: 0x14
GPIOH_BSRR         EQU (GPIOH + 0x18) ;!< GPIO port bit set/reset register,      Address offset: 0x1A
GPIOH_LCKR         EQU (GPIOH + 0x1C) ;!< GPIO port configuration lock register, Address offset: 0x1C
GPIOH_AFRL         EQU (GPIOH + 0x20) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOH_AFRH         EQU (GPIOH + 0x24) ;!< GPIO alternate function registers,     Address offset: 0x20-0x24
GPIOH_BRR          EQU (GPIOH + 0x28) ;!< GPIO bit reset register,               Address offset: 0x28


ADC1_ISR              EQU (ADC1 + 0x00) ;!< ADC Interrupt and Status Register,                 Address offset: 0x00
ADC1_IER              EQU (ADC1 + 0x04) ;!< ADC Interrupt Enable Register,                     Address offset: 0x04
ADC1_CR               EQU (ADC1 + 0x08) ;!< ADC control register,                              Address offset: 0x08
ADC1_CFGR             EQU (ADC1 + 0x0C) ;!< ADC Configuration register,                        Address offset: 0x0C
ADC1_SMPR1            EQU (ADC1 + 0x14) ;!< ADC sample time register 1,                        Address offset: 0x14
ADC1_SMPR2            EQU (ADC1 + 0x18) ;!< ADC sample time register 2,                        Address offset: 0x18
ADC1_TR1              EQU (ADC1 + 0x20) ;!< ADC watchdog threshold register 1,                 Address offset: 0x20
ADC1_TR2              EQU (ADC1 + 0x24) ;!< ADC watchdog threshold register 2,                 Address offset: 0x24
ADC1_TR3              EQU (ADC1 + 0x28) ;!< ADC watchdog threshold register 3,                 Address offset: 0x28
ADC1_SQR1             EQU (ADC1 + 0x30) ;!< ADC regular sequence register 1,                   Address offset: 0x30
ADC1_SQR2             EQU (ADC1 + 0x34) ;!< ADC regular sequence register 2,                   Address offset: 0x34
ADC1_SQR3             EQU (ADC1 + 0x38) ;!< ADC regular sequence register 3,                   Address offset: 0x38
ADC1_SQR4             EQU (ADC1 + 0x3C) ;!< ADC regular sequence register 4,                   Address offset: 0x3C
ADC1_DR               EQU (ADC1 + 0x40) ;!< ADC regular data register,                         Address offset: 0x40
ADC1_JSQR             EQU (ADC1 + 0x4C) ;!< ADC injected sequence register,                    Address offset: 0x4C
ADC1_OFR1             EQU (ADC1 + 0x60) ;!< ADC offset register 1,                             Address offset: 0x60
ADC1_OFR2             EQU (ADC1 + 0x64) ;!< ADC offset register 2,                             Address offset: 0x64
ADC1_OFR3             EQU (ADC1 + 0x68) ;!< ADC offset register 3,                             Address offset: 0x68
ADC1_OFR4             EQU (ADC1 + 0x6C) ;!< ADC offset register 4,                             Address offset: 0x6C
ADC1_JDR1             EQU (ADC1 + 0x80) ;!< ADC injected data register 1,                      Address offset: 0x80
ADC1_JDR2             EQU (ADC1 + 0x84) ;!< ADC injected data register 2,                      Address offset: 0x84
ADC1_JDR3             EQU (ADC1 + 0x88) ;!< ADC injected data register 3,                      Address offset: 0x88
ADC1_JDR4             EQU (ADC1 + 0x8C) ;!< ADC injected data register 4,                      Address offset: 0x8C
ADC1_AWD2CR           EQU (ADC1 + 0xA0) ;!< ADC  Analog Watchdog 2 Configuration Register,     Address offset: 0xA0
ADC1_AWD3CR           EQU (ADC1 + 0xA4) ;!< ADC  Analog Watchdog 3 Configuration Register,     Address offset: 0xA4
ADC1_DIFSEL           EQU (ADC1 + 0xB0) ;!< ADC  Differential Mode Selection Register,         Address offset: 0xB0
ADC1_CALFACT          EQU (ADC1 + 0xB4) ;!< ADC  Calibration Factors,                          Address offset: 0xB4


ADC2_ISR              EQU (ADC2 + 0x00) ;!< ADC Interrupt and Status Register,                 Address offset: 0x00
ADC2_IER              EQU (ADC2 + 0x04) ;!< ADC Interrupt Enable Register,                     Address offset: 0x04
ADC2_CR               EQU (ADC2 + 0x08) ;!< ADC control register,                              Address offset: 0x08
ADC2_CFGR             EQU (ADC2 + 0x0C) ;!< ADC Configuration register,                        Address offset: 0x0C
ADC2_SMPR1            EQU (ADC2 + 0x14) ;!< ADC sample time register 1,                        Address offset: 0x14
ADC2_SMPR2            EQU (ADC2 + 0x18) ;!< ADC sample time register 2,                        Address offset: 0x18
ADC2_TR1              EQU (ADC2 + 0x20) ;!< ADC watchdog threshold register 1,                 Address offset: 0x20
ADC2_TR2              EQU (ADC2 + 0x24) ;!< ADC watchdog threshold register 2,                 Address offset: 0x24
ADC2_TR3              EQU (ADC2 + 0x28) ;!< ADC watchdog threshold register 3,                 Address offset: 0x28
ADC2_SQR1             EQU (ADC2 + 0x30) ;!< ADC regular sequence register 1,                   Address offset: 0x30
ADC2_SQR2             EQU (ADC2 + 0x34) ;!< ADC regular sequence register 2,                   Address offset: 0x34
ADC2_SQR3             EQU (ADC2 + 0x38) ;!< ADC regular sequence register 3,                   Address offset: 0x38
ADC2_SQR4             EQU (ADC2 + 0x3C) ;!< ADC regular sequence register 4,                   Address offset: 0x3C
ADC2_DR               EQU (ADC2 + 0x40) ;!< ADC regular data register,                         Address offset: 0x40
ADC2_JSQR             EQU (ADC2 + 0x4C) ;!< ADC injected sequence register,                    Address offset: 0x4C
ADC2_OFR1             EQU (ADC2 + 0x60) ;!< ADC offset register 1,                             Address offset: 0x60
ADC2_OFR2             EQU (ADC2 + 0x64) ;!< ADC offset register 2,                             Address offset: 0x64
ADC2_OFR3             EQU (ADC2 + 0x68) ;!< ADC offset register 3,                             Address offset: 0x68
ADC2_OFR4             EQU (ADC2 + 0x6C) ;!< ADC offset register 4,                             Address offset: 0x6C
ADC2_JDR1             EQU (ADC2 + 0x80) ;!< ADC injected data register 1,                      Address offset: 0x80
ADC2_JDR2             EQU (ADC2 + 0x84) ;!< ADC injected data register 2,                      Address offset: 0x84
ADC2_JDR3             EQU (ADC2 + 0x88) ;!< ADC injected data register 3,                      Address offset: 0x88
ADC2_JDR4             EQU (ADC2 + 0x8C) ;!< ADC injected data register 4,                      Address offset: 0x8C
ADC2_AWD2CR           EQU (ADC2 + 0xA0) ;!< ADC  Analog Watchdog 2 Configuration Register,     Address offset: 0xA0
ADC2_AWD3CR           EQU (ADC2 + 0xA4) ;!< ADC  Analog Watchdog 3 Configuration Register,     Address offset: 0xA4
ADC2_DIFSEL           EQU (ADC2 + 0xB0) ;!< ADC  Differential Mode Selection Register,         Address offset: 0xB0
ADC2_CALFACT          EQU (ADC2 + 0xB4) ;!< ADC  Calibration Factors,                          Address offset: 0xB4


ADC3_ISR              EQU (ADC3 + 0x00) ;!< ADC Interrupt and Status Register,                 Address offset: 0x00
ADC3_IER              EQU (ADC3 + 0x04) ;!< ADC Interrupt Enable Register,                     Address offset: 0x04
ADC3_CR               EQU (ADC3 + 0x08) ;!< ADC control register,                              Address offset: 0x08
ADC3_CFGR             EQU (ADC3 + 0x0C) ;!< ADC Configuration register,                        Address offset: 0x0C
ADC3_SMPR1            EQU (ADC3 + 0x14) ;!< ADC sample time register 1,                        Address offset: 0x14
ADC3_SMPR2            EQU (ADC3 + 0x18) ;!< ADC sample time register 2,                        Address offset: 0x18
ADC3_TR1              EQU (ADC3 + 0x20) ;!< ADC watchdog threshold register 1,                 Address offset: 0x20
ADC3_TR2              EQU (ADC3 + 0x24) ;!< ADC watchdog threshold register 2,                 Address offset: 0x24
ADC3_TR3              EQU (ADC3 + 0x28) ;!< ADC watchdog threshold register 3,                 Address offset: 0x28
ADC3_SQR1             EQU (ADC3 + 0x30) ;!< ADC regular sequence register 1,                   Address offset: 0x30
ADC3_SQR2             EQU (ADC3 + 0x34) ;!< ADC regular sequence register 2,                   Address offset: 0x34
ADC3_SQR3             EQU (ADC3 + 0x38) ;!< ADC regular sequence register 3,                   Address offset: 0x38
ADC3_SQR4             EQU (ADC3 + 0x3C) ;!< ADC regular sequence register 4,                   Address offset: 0x3C
ADC3_DR               EQU (ADC3 + 0x40) ;!< ADC regular data register,                         Address offset: 0x40
ADC3_JSQR             EQU (ADC3 + 0x4C) ;!< ADC injected sequence register,                    Address offset: 0x4C
ADC3_OFR1             EQU (ADC3 + 0x60) ;!< ADC offset register 1,                             Address offset: 0x60
ADC3_OFR2             EQU (ADC3 + 0x64) ;!< ADC offset register 2,                             Address offset: 0x64
ADC3_OFR3             EQU (ADC3 + 0x68) ;!< ADC offset register 3,                             Address offset: 0x68
ADC3_OFR4             EQU (ADC3 + 0x6C) ;!< ADC offset register 4,                             Address offset: 0x6C
ADC3_JDR1             EQU (ADC3 + 0x80) ;!< ADC injected data register 1,                      Address offset: 0x80
ADC3_JDR2             EQU (ADC3 + 0x84) ;!< ADC injected data register 2,                      Address offset: 0x84
ADC3_JDR3             EQU (ADC3 + 0x88) ;!< ADC injected data register 3,                      Address offset: 0x88
ADC3_JDR4             EQU (ADC3 + 0x8C) ;!< ADC injected data register 4,                      Address offset: 0x8C
ADC3_AWD2CR           EQU (ADC3 + 0xA0) ;!< ADC  Analog Watchdog 2 Configuration Register,     Address offset: 0xA0
ADC3_AWD3CR           EQU (ADC3 + 0xA4) ;!< ADC  Analog Watchdog 3 Configuration Register,     Address offset: 0xA4
ADC3_DIFSEL           EQU (ADC3 + 0xB0) ;!< ADC  Differential Mode Selection Register,         Address offset: 0xB0
ADC3_CALFACT          EQU (ADC3 + 0xB4) ;!< ADC  Calibration Factors,                          Address offset: 0xB4


ADC4_ISR              EQU (ADC4 + 0x00) ;!< ADC Interrupt and Status Register,                 Address offset: 0x00
ADC4_IER              EQU (ADC4 + 0x04) ;!< ADC Interrupt Enable Register,                     Address offset: 0x04
ADC4_CR               EQU (ADC4 + 0x08) ;!< ADC control register,                              Address offset: 0x08
ADC4_CFGR             EQU (ADC4 + 0x0C) ;!< ADC Configuration register,                        Address offset: 0x0C
ADC4_SMPR1            EQU (ADC4 + 0x14) ;!< ADC sample time register 1,                        Address offset: 0x14
ADC4_SMPR2            EQU (ADC4 + 0x18) ;!< ADC sample time register 2,                        Address offset: 0x18
ADC4_TR1              EQU (ADC4 + 0x20) ;!< ADC watchdog threshold register 1,                 Address offset: 0x20
ADC4_TR2              EQU (ADC4 + 0x24) ;!< ADC watchdog threshold register 2,                 Address offset: 0x24
ADC4_TR3              EQU (ADC4 + 0x28) ;!< ADC watchdog threshold register 3,                 Address offset: 0x28
ADC4_SQR1             EQU (ADC4 + 0x30) ;!< ADC regular sequence register 1,                   Address offset: 0x30
ADC4_SQR2             EQU (ADC4 + 0x34) ;!< ADC regular sequence register 2,                   Address offset: 0x34
ADC4_SQR3             EQU (ADC4 + 0x38) ;!< ADC regular sequence register 3,                   Address offset: 0x38
ADC4_SQR4             EQU (ADC4 + 0x3C) ;!< ADC regular sequence register 4,                   Address offset: 0x3C
ADC4_DR               EQU (ADC4 + 0x40) ;!< ADC regular data register,                         Address offset: 0x40
ADC4_JSQR             EQU (ADC4 + 0x4C) ;!< ADC injected sequence register,                    Address offset: 0x4C
ADC4_OFR1             EQU (ADC4 + 0x60) ;!< ADC offset register 1,                             Address offset: 0x60
ADC4_OFR2             EQU (ADC4 + 0x64) ;!< ADC offset register 2,                             Address offset: 0x64
ADC4_OFR3             EQU (ADC4 + 0x68) ;!< ADC offset register 3,                             Address offset: 0x68
ADC4_OFR4             EQU (ADC4 + 0x6C) ;!< ADC offset register 4,                             Address offset: 0x6C
ADC4_JDR1             EQU (ADC4 + 0x80) ;!< ADC injected data register 1,                      Address offset: 0x80
ADC4_JDR2             EQU (ADC4 + 0x84) ;!< ADC injected data register 2,                      Address offset: 0x84
ADC4_JDR3             EQU (ADC4 + 0x88) ;!< ADC injected data register 3,                      Address offset: 0x88
ADC4_JDR4             EQU (ADC4 + 0x8C) ;!< ADC injected data register 4,                      Address offset: 0x8C
ADC4_AWD2CR           EQU (ADC4 + 0xA0) ;!< ADC  Analog Watchdog 2 Configuration Register,     Address offset: 0xA0
ADC4_AWD3CR           EQU (ADC4 + 0xA4) ;!< ADC  Analog Watchdog 3 Configuration Register,     Address offset: 0xA4
ADC4_DIFSEL           EQU (ADC4 + 0xB0) ;!< ADC  Differential Mode Selection Register,         Address offset: 0xB0
ADC4_CALFACT          EQU (ADC4 + 0xB4) ;!< ADC  Calibration Factors,                          Address offset: 0xB4


ADC12_COMMON_CSR            EQU (ADC12_COMMON + 0x00) ;!< ADC Common status register,                  Address offset: ADC1/3 base address + 0x300
ADC12_COMMON_CCR            EQU (ADC12_COMMON + 0x08) ;!< ADC common control register,                 Address offset: ADC1/3 base address + 0x308
ADC12_COMMON_CDR            EQU (ADC12_COMMON + 0x0C) ;!< ADC common regular data register for dual    Address offset: ADC1/3 base address + 0x30C


ADC34_COMMON_CSR            EQU (ADC34_COMMON + 0x00) ;!< ADC Common status register,                  Address offset: ADC1/3 base address + 0x300
ADC34_COMMON_CCR            EQU (ADC34_COMMON + 0x08) ;!< ADC common control register,                 Address offset: ADC1/3 base address + 0x308
ADC34_COMMON_CDR            EQU (ADC34_COMMON + 0x0C) ;!< ADC common regular data register for dual    Address offset: ADC1/3 base address + 0x30C


USB_EP0R            EQU (USB + 0x00) ;!< USB Endpoint 0 register,                Address offset: 0x00
USB_EP1R            EQU (USB + 0x04) ;!< USB Endpoint 1 register,                Address offset: 0x04
USB_EP2R            EQU (USB + 0x08) ;!< USB Endpoint 2 register,                Address offset: 0x08
USB_EP3R            EQU (USB + 0x0C) ;!< USB Endpoint 3 register,                Address offset: 0x0C
USB_EP4R            EQU (USB + 0x10) ;!< USB Endpoint 4 register,                Address offset: 0x10
USB_EP5R            EQU (USB + 0x14) ;!< USB Endpoint 5 register,                Address offset: 0x14
USB_EP6R            EQU (USB + 0x18) ;!< USB Endpoint 6 register,                Address offset: 0x18
USB_EP7R            EQU (USB + 0x1C) ;!< USB Endpoint 7 register,                Address offset: 0x1C
USB_CNTR            EQU (USB + 0x40) ;!< Control register,                       Address offset: 0x40
USB_ISTR            EQU (USB + 0x44) ;!< Interrupt status register,              Address offset: 0x44
USB_FNR             EQU (USB + 0x48) ;!< Frame number register,                  Address offset: 0x48
USB_DADDR           EQU (USB + 0x4C) ;!< Device address register,                Address offset: 0x4C
USB_BTABLE          EQU (USB + 0x50) ;!< Buffer Table address register,          Address offset: 0x50
USB_LPMCSR          EQU (USB + 0x54) ;!< LPM Control and Status register,        Address offset: 0x54


;****************************************************************************
;                         Peripheral Registers_Bits_Definition
;****************************************************************************

;****************************************************************************
;
;                        Analog to Digital Converter SAR (ADC)
;
;****************************************************************************

;*******************  Bit definition for ADC_ISR register  *******************
ADC_ISR_ADRDY_Pos              EQU (0)
ADC_ISR_ADRDY_Msk              EQU (0x1 :SHL: ADC_ISR_ADRDY_Pos)             ;!< 0x00000001
ADC_ISR_ADRDY                  EQU ADC_ISR_ADRDY_Msk                       ;!< ADC ready flag
ADC_ISR_EOSMP_Pos              EQU (1)
ADC_ISR_EOSMP_Msk              EQU (0x1 :SHL: ADC_ISR_EOSMP_Pos)             ;!< 0x00000002
ADC_ISR_EOSMP                  EQU ADC_ISR_EOSMP_Msk                       ;!< ADC group regular end of sampling flag
ADC_ISR_EOC_Pos                EQU (2)
ADC_ISR_EOC_Msk                EQU (0x1 :SHL: ADC_ISR_EOC_Pos)               ;!< 0x00000004
ADC_ISR_EOC                    EQU ADC_ISR_EOC_Msk                         ;!< ADC group regular end of unitary conversion flag
ADC_ISR_EOS_Pos                EQU (3)
ADC_ISR_EOS_Msk                EQU (0x1 :SHL: ADC_ISR_EOS_Pos)               ;!< 0x00000008
ADC_ISR_EOS                    EQU ADC_ISR_EOS_Msk                         ;!< ADC group regular end of sequence conversions flag
ADC_ISR_OVR_Pos                EQU (4)
ADC_ISR_OVR_Msk                EQU (0x1 :SHL: ADC_ISR_OVR_Pos)               ;!< 0x00000010
ADC_ISR_OVR                    EQU ADC_ISR_OVR_Msk                         ;!< ADC group regular overrun flag
ADC_ISR_JEOC_Pos               EQU (5)
ADC_ISR_JEOC_Msk               EQU (0x1 :SHL: ADC_ISR_JEOC_Pos)              ;!< 0x00000020
ADC_ISR_JEOC                   EQU ADC_ISR_JEOC_Msk                        ;!< ADC group injected end of unitary conversion flag
ADC_ISR_JEOS_Pos               EQU (6)
ADC_ISR_JEOS_Msk               EQU (0x1 :SHL: ADC_ISR_JEOS_Pos)              ;!< 0x00000040
ADC_ISR_JEOS                   EQU ADC_ISR_JEOS_Msk                        ;!< ADC group injected end of sequence conversions flag
ADC_ISR_AWD1_Pos               EQU (7)
ADC_ISR_AWD1_Msk               EQU (0x1 :SHL: ADC_ISR_AWD1_Pos)              ;!< 0x00000080
ADC_ISR_AWD1                   EQU ADC_ISR_AWD1_Msk                        ;!< ADC analog watchdog 1 flag
ADC_ISR_AWD2_Pos               EQU (8)
ADC_ISR_AWD2_Msk               EQU (0x1 :SHL: ADC_ISR_AWD2_Pos)              ;!< 0x00000100
ADC_ISR_AWD2                   EQU ADC_ISR_AWD2_Msk                        ;!< ADC analog watchdog 2 flag
ADC_ISR_AWD3_Pos               EQU (9)
ADC_ISR_AWD3_Msk               EQU (0x1 :SHL: ADC_ISR_AWD3_Pos)              ;!< 0x00000200
ADC_ISR_AWD3                   EQU ADC_ISR_AWD3_Msk                        ;!< ADC analog watchdog 3 flag
ADC_ISR_JQOVF_Pos              EQU (10)
ADC_ISR_JQOVF_Msk              EQU (0x1 :SHL: ADC_ISR_JQOVF_Pos)             ;!< 0x00000400
ADC_ISR_JQOVF                  EQU ADC_ISR_JQOVF_Msk                       ;!< ADC group injected contexts queue overflow flag

; Legacy defines
ADC_ISR_ADRD            EQU (ADC_ISR_ADRDY)

;*******************  Bit definition for ADC_IER register  *******************
ADC_IER_ADRDYIE_Pos            EQU (0)
ADC_IER_ADRDYIE_Msk            EQU (0x1 :SHL: ADC_IER_ADRDYIE_Pos)           ;!< 0x00000001
ADC_IER_ADRDYIE                EQU ADC_IER_ADRDYIE_Msk                     ;!< ADC ready interrupt
ADC_IER_EOSMPIE_Pos            EQU (1)
ADC_IER_EOSMPIE_Msk            EQU (0x1 :SHL: ADC_IER_EOSMPIE_Pos)           ;!< 0x00000002
ADC_IER_EOSMPIE                EQU ADC_IER_EOSMPIE_Msk                     ;!< ADC group regular end of sampling interrupt
ADC_IER_EOCIE_Pos              EQU (2)
ADC_IER_EOCIE_Msk              EQU (0x1 :SHL: ADC_IER_EOCIE_Pos)             ;!< 0x00000004
ADC_IER_EOCIE                  EQU ADC_IER_EOCIE_Msk                       ;!< ADC group regular end of unitary conversion interrupt
ADC_IER_EOSIE_Pos              EQU (3)
ADC_IER_EOSIE_Msk              EQU (0x1 :SHL: ADC_IER_EOSIE_Pos)             ;!< 0x00000008
ADC_IER_EOSIE                  EQU ADC_IER_EOSIE_Msk                       ;!< ADC group regular end of sequence conversions interrupt
ADC_IER_OVRIE_Pos              EQU (4)
ADC_IER_OVRIE_Msk              EQU (0x1 :SHL: ADC_IER_OVRIE_Pos)             ;!< 0x00000010
ADC_IER_OVRIE                  EQU ADC_IER_OVRIE_Msk                       ;!< ADC group regular overrun interrupt
ADC_IER_JEOCIE_Pos             EQU (5)
ADC_IER_JEOCIE_Msk             EQU (0x1 :SHL: ADC_IER_JEOCIE_Pos)            ;!< 0x00000020
ADC_IER_JEOCIE                 EQU ADC_IER_JEOCIE_Msk                      ;!< ADC group injected end of unitary conversion interrupt
ADC_IER_JEOSIE_Pos             EQU (6)
ADC_IER_JEOSIE_Msk             EQU (0x1 :SHL: ADC_IER_JEOSIE_Pos)            ;!< 0x00000040
ADC_IER_JEOSIE                 EQU ADC_IER_JEOSIE_Msk                      ;!< ADC group injected end of sequence conversions interrupt
ADC_IER_AWD1IE_Pos             EQU (7)
ADC_IER_AWD1IE_Msk             EQU (0x1 :SHL: ADC_IER_AWD1IE_Pos)            ;!< 0x00000080
ADC_IER_AWD1IE                 EQU ADC_IER_AWD1IE_Msk                      ;!< ADC analog watchdog 1 interrupt
ADC_IER_AWD2IE_Pos             EQU (8)
ADC_IER_AWD2IE_Msk             EQU (0x1 :SHL: ADC_IER_AWD2IE_Pos)            ;!< 0x00000100
ADC_IER_AWD2IE                 EQU ADC_IER_AWD2IE_Msk                      ;!< ADC analog watchdog 2 interrupt
ADC_IER_AWD3IE_Pos             EQU (9)
ADC_IER_AWD3IE_Msk             EQU (0x1 :SHL: ADC_IER_AWD3IE_Pos)            ;!< 0x00000200
ADC_IER_AWD3IE                 EQU ADC_IER_AWD3IE_Msk                      ;!< ADC analog watchdog 3 interrupt
ADC_IER_JQOVFIE_Pos            EQU (10)
ADC_IER_JQOVFIE_Msk            EQU (0x1 :SHL: ADC_IER_JQOVFIE_Pos)           ;!< 0x00000400
ADC_IER_JQOVFIE                EQU ADC_IER_JQOVFIE_Msk                     ;!< ADC group injected contexts queue overflow interrupt

; Legacy defines
ADC_IER_RDY             EQU (ADC_IER_ADRDYIE)
ADC_IER_EOSMP           EQU (ADC_IER_EOSMPIE)
ADC_IER_EOC             EQU (ADC_IER_EOCIE)
ADC_IER_EOS             EQU (ADC_IER_EOSIE)
ADC_IER_OVR             EQU (ADC_IER_OVRIE)
ADC_IER_JEOC            EQU (ADC_IER_JEOCIE)
ADC_IER_JEOS            EQU (ADC_IER_JEOSIE)
ADC_IER_AWD1            EQU (ADC_IER_AWD1IE)
ADC_IER_AWD2            EQU (ADC_IER_AWD2IE)
ADC_IER_AWD3            EQU (ADC_IER_AWD3IE)
ADC_IER_JQOVF           EQU (ADC_IER_JQOVFIE)

;*******************  Bit definition for ADC_CR register  *******************
ADC_CR_ADEN_Pos                EQU (0)
ADC_CR_ADEN_Msk                EQU (0x1 :SHL: ADC_CR_ADEN_Pos)               ;!< 0x00000001
ADC_CR_ADEN                    EQU ADC_CR_ADEN_Msk                         ;!< ADC enable
ADC_CR_ADDIS_Pos               EQU (1)
ADC_CR_ADDIS_Msk               EQU (0x1 :SHL: ADC_CR_ADDIS_Pos)              ;!< 0x00000002
ADC_CR_ADDIS                   EQU ADC_CR_ADDIS_Msk                        ;!< ADC disable
ADC_CR_ADSTART_Pos             EQU (2)
ADC_CR_ADSTART_Msk             EQU (0x1 :SHL: ADC_CR_ADSTART_Pos)            ;!< 0x00000004
ADC_CR_ADSTART                 EQU ADC_CR_ADSTART_Msk                      ;!< ADC group regular conversion start
ADC_CR_JADSTART_Pos            EQU (3)
ADC_CR_JADSTART_Msk            EQU (0x1 :SHL: ADC_CR_JADSTART_Pos)           ;!< 0x00000008
ADC_CR_JADSTART                EQU ADC_CR_JADSTART_Msk                     ;!< ADC group injected conversion start
ADC_CR_ADSTP_Pos               EQU (4)
ADC_CR_ADSTP_Msk               EQU (0x1 :SHL: ADC_CR_ADSTP_Pos)              ;!< 0x00000010
ADC_CR_ADSTP                   EQU ADC_CR_ADSTP_Msk                        ;!< ADC group regular conversion stop
ADC_CR_JADSTP_Pos              EQU (5)
ADC_CR_JADSTP_Msk              EQU (0x1 :SHL: ADC_CR_JADSTP_Pos)             ;!< 0x00000020
ADC_CR_JADSTP                  EQU ADC_CR_JADSTP_Msk                       ;!< ADC group injected conversion stop
ADC_CR_ADVREGEN_Pos            EQU (28)
ADC_CR_ADVREGEN_Msk            EQU (0x3 :SHL: ADC_CR_ADVREGEN_Pos)           ;!< 0x30000000
ADC_CR_ADVREGEN                EQU ADC_CR_ADVREGEN_Msk                     ;!< ADC voltage regulator enable
ADC_CR_ADVREGEN_0              EQU (0x1 :SHL: ADC_CR_ADVREGEN_Pos)           ;!< 0x10000000
ADC_CR_ADVREGEN_1              EQU (0x2 :SHL: ADC_CR_ADVREGEN_Pos)           ;!< 0x20000000
ADC_CR_ADCALDIF_Pos            EQU (30)
ADC_CR_ADCALDIF_Msk            EQU (0x1 :SHL: ADC_CR_ADCALDIF_Pos)           ;!< 0x40000000
ADC_CR_ADCALDIF                EQU ADC_CR_ADCALDIF_Msk                     ;!< ADC differential mode for calibration
ADC_CR_ADCAL_Pos               EQU (31)
ADC_CR_ADCAL_Msk               EQU (0x1 :SHL: ADC_CR_ADCAL_Pos)              ;!< 0x80000000
ADC_CR_ADCAL                   EQU ADC_CR_ADCAL_Msk                        ;!< ADC calibration

;*******************  Bit definition for ADC_CFGR register  *****************
ADC_CFGR_DMAEN_Pos             EQU (0)
ADC_CFGR_DMAEN_Msk             EQU (0x1 :SHL: ADC_CFGR_DMAEN_Pos)            ;!< 0x00000001
ADC_CFGR_DMAEN                 EQU ADC_CFGR_DMAEN_Msk                      ;!< ADC DMA enable
ADC_CFGR_DMACFG_Pos            EQU (1)
ADC_CFGR_DMACFG_Msk            EQU (0x1 :SHL: ADC_CFGR_DMACFG_Pos)           ;!< 0x00000002
ADC_CFGR_DMACFG                EQU ADC_CFGR_DMACFG_Msk                     ;!< ADC DMA configuration

ADC_CFGR_RES_Pos               EQU (3)
ADC_CFGR_RES_Msk               EQU (0x3 :SHL: ADC_CFGR_RES_Pos)              ;!< 0x00000018
ADC_CFGR_RES                   EQU ADC_CFGR_RES_Msk                        ;!< ADC data resolution
ADC_CFGR_RES_0                 EQU (0x1 :SHL: ADC_CFGR_RES_Pos)              ;!< 0x00000008
ADC_CFGR_RES_1                 EQU (0x2 :SHL: ADC_CFGR_RES_Pos)              ;!< 0x00000010

ADC_CFGR_ALIGN_Pos             EQU (5)
ADC_CFGR_ALIGN_Msk             EQU (0x1 :SHL: ADC_CFGR_ALIGN_Pos)            ;!< 0x00000020
ADC_CFGR_ALIGN                 EQU ADC_CFGR_ALIGN_Msk                      ;!< ADC data alignement

ADC_CFGR_EXTSEL_Pos            EQU (6)
ADC_CFGR_EXTSEL_Msk            EQU (0xF :SHL: ADC_CFGR_EXTSEL_Pos)           ;!< 0x000003C0
ADC_CFGR_EXTSEL                EQU ADC_CFGR_EXTSEL_Msk                     ;!< ADC group regular external trigger source
ADC_CFGR_EXTSEL_0              EQU (0x1 :SHL: ADC_CFGR_EXTSEL_Pos)           ;!< 0x00000040
ADC_CFGR_EXTSEL_1              EQU (0x2 :SHL: ADC_CFGR_EXTSEL_Pos)           ;!< 0x00000080
ADC_CFGR_EXTSEL_2              EQU (0x4 :SHL: ADC_CFGR_EXTSEL_Pos)           ;!< 0x00000100
ADC_CFGR_EXTSEL_3              EQU (0x8 :SHL: ADC_CFGR_EXTSEL_Pos)           ;!< 0x00000200

ADC_CFGR_EXTEN_Pos             EQU (10)
ADC_CFGR_EXTEN_Msk             EQU (0x3 :SHL: ADC_CFGR_EXTEN_Pos)            ;!< 0x00000C00
ADC_CFGR_EXTEN                 EQU ADC_CFGR_EXTEN_Msk                      ;!< ADC group regular external trigger polarity
ADC_CFGR_EXTEN_0               EQU (0x1 :SHL: ADC_CFGR_EXTEN_Pos)            ;!< 0x00000400
ADC_CFGR_EXTEN_1               EQU (0x2 :SHL: ADC_CFGR_EXTEN_Pos)            ;!< 0x00000800

ADC_CFGR_OVRMOD_Pos            EQU (12)
ADC_CFGR_OVRMOD_Msk            EQU (0x1 :SHL: ADC_CFGR_OVRMOD_Pos)           ;!< 0x00001000
ADC_CFGR_OVRMOD                EQU ADC_CFGR_OVRMOD_Msk                     ;!< ADC group regular overrun configuration
ADC_CFGR_CONT_Pos              EQU (13)
ADC_CFGR_CONT_Msk              EQU (0x1 :SHL: ADC_CFGR_CONT_Pos)             ;!< 0x00002000
ADC_CFGR_CONT                  EQU ADC_CFGR_CONT_Msk                       ;!< ADC group regular continuous conversion mode
ADC_CFGR_AUTDLY_Pos            EQU (14)
ADC_CFGR_AUTDLY_Msk            EQU (0x1 :SHL: ADC_CFGR_AUTDLY_Pos)           ;!< 0x00004000
ADC_CFGR_AUTDLY                EQU ADC_CFGR_AUTDLY_Msk                     ;!< ADC low power auto wait

ADC_CFGR_DISCEN_Pos            EQU (16)
ADC_CFGR_DISCEN_Msk            EQU (0x1 :SHL: ADC_CFGR_DISCEN_Pos)           ;!< 0x00010000
ADC_CFGR_DISCEN                EQU ADC_CFGR_DISCEN_Msk                     ;!< ADC group regular sequencer discontinuous mode

ADC_CFGR_DISCNUM_Pos           EQU (17)
ADC_CFGR_DISCNUM_Msk           EQU (0x7 :SHL: ADC_CFGR_DISCNUM_Pos)          ;!< 0x000E0000
ADC_CFGR_DISCNUM               EQU ADC_CFGR_DISCNUM_Msk                    ;!< ADC Discontinuous mode channel count
ADC_CFGR_DISCNUM_0             EQU (0x1 :SHL: ADC_CFGR_DISCNUM_Pos)          ;!< 0x00020000
ADC_CFGR_DISCNUM_1             EQU (0x2 :SHL: ADC_CFGR_DISCNUM_Pos)          ;!< 0x00040000
ADC_CFGR_DISCNUM_2             EQU (0x4 :SHL: ADC_CFGR_DISCNUM_Pos)          ;!< 0x00080000

ADC_CFGR_JDISCEN_Pos           EQU (20)
ADC_CFGR_JDISCEN_Msk           EQU (0x1 :SHL: ADC_CFGR_JDISCEN_Pos)          ;!< 0x00100000
ADC_CFGR_JDISCEN               EQU ADC_CFGR_JDISCEN_Msk                    ;!< ADC Discontinuous mode on injected channels
ADC_CFGR_JQM_Pos               EQU (21)
ADC_CFGR_JQM_Msk               EQU (0x1 :SHL: ADC_CFGR_JQM_Pos)              ;!< 0x00200000
ADC_CFGR_JQM                   EQU ADC_CFGR_JQM_Msk                        ;!< ADC group injected contexts queue mode
ADC_CFGR_AWD1SGL_Pos           EQU (22)
ADC_CFGR_AWD1SGL_Msk           EQU (0x1 :SHL: ADC_CFGR_AWD1SGL_Pos)          ;!< 0x00400000
ADC_CFGR_AWD1SGL               EQU ADC_CFGR_AWD1SGL_Msk                    ;!< ADC analog watchdog 1 monitoring a single channel or all channels
ADC_CFGR_AWD1EN_Pos            EQU (23)
ADC_CFGR_AWD1EN_Msk            EQU (0x1 :SHL: ADC_CFGR_AWD1EN_Pos)           ;!< 0x00800000
ADC_CFGR_AWD1EN                EQU ADC_CFGR_AWD1EN_Msk                     ;!< ADC analog watchdog 1 enable on scope ADC group regular
ADC_CFGR_JAWD1EN_Pos           EQU (24)
ADC_CFGR_JAWD1EN_Msk           EQU (0x1 :SHL: ADC_CFGR_JAWD1EN_Pos)          ;!< 0x01000000
ADC_CFGR_JAWD1EN               EQU ADC_CFGR_JAWD1EN_Msk                    ;!< ADC analog watchdog 1 enable on scope ADC group injected
ADC_CFGR_JAUTO_Pos             EQU (25)
ADC_CFGR_JAUTO_Msk             EQU (0x1 :SHL: ADC_CFGR_JAUTO_Pos)            ;!< 0x02000000
ADC_CFGR_JAUTO                 EQU ADC_CFGR_JAUTO_Msk                      ;!< ADC group injected automatic trigger mode

ADC_CFGR_AWD1CH_Pos            EQU (26)
ADC_CFGR_AWD1CH_Msk            EQU (0x1F :SHL: ADC_CFGR_AWD1CH_Pos)          ;!< 0x7C000000
ADC_CFGR_AWD1CH                EQU ADC_CFGR_AWD1CH_Msk                     ;!< ADC analog watchdog 1 monitored channel selection
ADC_CFGR_AWD1CH_0              EQU (0x01 :SHL: ADC_CFGR_AWD1CH_Pos)          ;!< 0x04000000
ADC_CFGR_AWD1CH_1              EQU (0x02 :SHL: ADC_CFGR_AWD1CH_Pos)          ;!< 0x08000000
ADC_CFGR_AWD1CH_2              EQU (0x04 :SHL: ADC_CFGR_AWD1CH_Pos)          ;!< 0x10000000
ADC_CFGR_AWD1CH_3              EQU (0x08 :SHL: ADC_CFGR_AWD1CH_Pos)          ;!< 0x20000000
ADC_CFGR_AWD1CH_4              EQU (0x10 :SHL: ADC_CFGR_AWD1CH_Pos)          ;!< 0x40000000

; Legacy defines
ADC_CFGR_AUTOFF_Pos            EQU (15)
ADC_CFGR_AUTOFF_Msk            EQU (0x1 :SHL: ADC_CFGR_AUTOFF_Pos)           ;!< 0x00008000
ADC_CFGR_AUTOFF                EQU ADC_CFGR_AUTOFF_Msk                     ;!< ADC low power auto power off

;*******************  Bit definition for ADC_SMPR1 register  ****************
ADC_SMPR1_SMP0_Pos             EQU (0)
ADC_SMPR1_SMP0_Msk             EQU (0x7 :SHL: ADC_SMPR1_SMP0_Pos)            ;!< 0x00000007
ADC_SMPR1_SMP0                 EQU ADC_SMPR1_SMP0_Msk                      ;!< ADC channel 0 sampling time selection
ADC_SMPR1_SMP0_0               EQU (0x1 :SHL: ADC_SMPR1_SMP0_Pos)            ;!< 0x00000001
ADC_SMPR1_SMP0_1               EQU (0x2 :SHL: ADC_SMPR1_SMP0_Pos)            ;!< 0x00000002
ADC_SMPR1_SMP0_2               EQU (0x4 :SHL: ADC_SMPR1_SMP0_Pos)            ;!< 0x00000004

ADC_SMPR1_SMP1_Pos             EQU (3)
ADC_SMPR1_SMP1_Msk             EQU (0x7 :SHL: ADC_SMPR1_SMP1_Pos)            ;!< 0x00000038
ADC_SMPR1_SMP1                 EQU ADC_SMPR1_SMP1_Msk                      ;!< ADC channel 1 sampling time selection
ADC_SMPR1_SMP1_0               EQU (0x1 :SHL: ADC_SMPR1_SMP1_Pos)            ;!< 0x00000008
ADC_SMPR1_SMP1_1               EQU (0x2 :SHL: ADC_SMPR1_SMP1_Pos)            ;!< 0x00000010
ADC_SMPR1_SMP1_2               EQU (0x4 :SHL: ADC_SMPR1_SMP1_Pos)            ;!< 0x00000020

ADC_SMPR1_SMP2_Pos             EQU (6)
ADC_SMPR1_SMP2_Msk             EQU (0x7 :SHL: ADC_SMPR1_SMP2_Pos)            ;!< 0x000001C0
ADC_SMPR1_SMP2                 EQU ADC_SMPR1_SMP2_Msk                      ;!< ADC channel 2 sampling time selection
ADC_SMPR1_SMP2_0               EQU (0x1 :SHL: ADC_SMPR1_SMP2_Pos)            ;!< 0x00000040
ADC_SMPR1_SMP2_1               EQU (0x2 :SHL: ADC_SMPR1_SMP2_Pos)            ;!< 0x00000080
ADC_SMPR1_SMP2_2               EQU (0x4 :SHL: ADC_SMPR1_SMP2_Pos)            ;!< 0x00000100

ADC_SMPR1_SMP3_Pos             EQU (9)
ADC_SMPR1_SMP3_Msk             EQU (0x7 :SHL: ADC_SMPR1_SMP3_Pos)            ;!< 0x00000E00
ADC_SMPR1_SMP3                 EQU ADC_SMPR1_SMP3_Msk                      ;!< ADC channel 3 sampling time selection
ADC_SMPR1_SMP3_0               EQU (0x1 :SHL: ADC_SMPR1_SMP3_Pos)            ;!< 0x00000200
ADC_SMPR1_SMP3_1               EQU (0x2 :SHL: ADC_SMPR1_SMP3_Pos)            ;!< 0x00000400
ADC_SMPR1_SMP3_2               EQU (0x4 :SHL: ADC_SMPR1_SMP3_Pos)            ;!< 0x00000800

ADC_SMPR1_SMP4_Pos             EQU (12)
ADC_SMPR1_SMP4_Msk             EQU (0x7 :SHL: ADC_SMPR1_SMP4_Pos)            ;!< 0x00007000
ADC_SMPR1_SMP4                 EQU ADC_SMPR1_SMP4_Msk                      ;!< ADC channel 4 sampling time selection
ADC_SMPR1_SMP4_0               EQU (0x1 :SHL: ADC_SMPR1_SMP4_Pos)            ;!< 0x00001000
ADC_SMPR1_SMP4_1               EQU (0x2 :SHL: ADC_SMPR1_SMP4_Pos)            ;!< 0x00002000
ADC_SMPR1_SMP4_2               EQU (0x4 :SHL: ADC_SMPR1_SMP4_Pos)            ;!< 0x00004000

ADC_SMPR1_SMP5_Pos             EQU (15)
ADC_SMPR1_SMP5_Msk             EQU (0x7 :SHL: ADC_SMPR1_SMP5_Pos)            ;!< 0x00038000
ADC_SMPR1_SMP5                 EQU ADC_SMPR1_SMP5_Msk                      ;!< ADC channel 5 sampling time selection
ADC_SMPR1_SMP5_0               EQU (0x1 :SHL: ADC_SMPR1_SMP5_Pos)            ;!< 0x00008000
ADC_SMPR1_SMP5_1               EQU (0x2 :SHL: ADC_SMPR1_SMP5_Pos)            ;!< 0x00010000
ADC_SMPR1_SMP5_2               EQU (0x4 :SHL: ADC_SMPR1_SMP5_Pos)            ;!< 0x00020000

ADC_SMPR1_SMP6_Pos             EQU (18)
ADC_SMPR1_SMP6_Msk             EQU (0x7 :SHL: ADC_SMPR1_SMP6_Pos)            ;!< 0x001C0000
ADC_SMPR1_SMP6                 EQU ADC_SMPR1_SMP6_Msk                      ;!< ADC channel 6 sampling time selection
ADC_SMPR1_SMP6_0               EQU (0x1 :SHL: ADC_SMPR1_SMP6_Pos)            ;!< 0x00040000
ADC_SMPR1_SMP6_1               EQU (0x2 :SHL: ADC_SMPR1_SMP6_Pos)            ;!< 0x00080000
ADC_SMPR1_SMP6_2               EQU (0x4 :SHL: ADC_SMPR1_SMP6_Pos)            ;!< 0x00100000

ADC_SMPR1_SMP7_Pos             EQU (21)
ADC_SMPR1_SMP7_Msk             EQU (0x7 :SHL: ADC_SMPR1_SMP7_Pos)            ;!< 0x00E00000
ADC_SMPR1_SMP7                 EQU ADC_SMPR1_SMP7_Msk                      ;!< ADC channel 7 sampling time selection
ADC_SMPR1_SMP7_0               EQU (0x1 :SHL: ADC_SMPR1_SMP7_Pos)            ;!< 0x00200000
ADC_SMPR1_SMP7_1               EQU (0x2 :SHL: ADC_SMPR1_SMP7_Pos)            ;!< 0x00400000
ADC_SMPR1_SMP7_2               EQU (0x4 :SHL: ADC_SMPR1_SMP7_Pos)            ;!< 0x00800000

ADC_SMPR1_SMP8_Pos             EQU (24)
ADC_SMPR1_SMP8_Msk             EQU (0x7 :SHL: ADC_SMPR1_SMP8_Pos)            ;!< 0x07000000
ADC_SMPR1_SMP8                 EQU ADC_SMPR1_SMP8_Msk                      ;!< ADC channel 8 sampling time selection
ADC_SMPR1_SMP8_0               EQU (0x1 :SHL: ADC_SMPR1_SMP8_Pos)            ;!< 0x01000000
ADC_SMPR1_SMP8_1               EQU (0x2 :SHL: ADC_SMPR1_SMP8_Pos)            ;!< 0x02000000
ADC_SMPR1_SMP8_2               EQU (0x4 :SHL: ADC_SMPR1_SMP8_Pos)            ;!< 0x04000000

ADC_SMPR1_SMP9_Pos             EQU (27)
ADC_SMPR1_SMP9_Msk             EQU (0x7 :SHL: ADC_SMPR1_SMP9_Pos)            ;!< 0x38000000
ADC_SMPR1_SMP9                 EQU ADC_SMPR1_SMP9_Msk                      ;!< ADC channel 9 sampling time selection
ADC_SMPR1_SMP9_0               EQU (0x1 :SHL: ADC_SMPR1_SMP9_Pos)            ;!< 0x08000000
ADC_SMPR1_SMP9_1               EQU (0x2 :SHL: ADC_SMPR1_SMP9_Pos)            ;!< 0x10000000
ADC_SMPR1_SMP9_2               EQU (0x4 :SHL: ADC_SMPR1_SMP9_Pos)            ;!< 0x20000000

;*******************  Bit definition for ADC_SMPR2 register  ****************
ADC_SMPR2_SMP10_Pos            EQU (0)
ADC_SMPR2_SMP10_Msk            EQU (0x7 :SHL: ADC_SMPR2_SMP10_Pos)           ;!< 0x00000007
ADC_SMPR2_SMP10                EQU ADC_SMPR2_SMP10_Msk                     ;!< ADC channel 10 sampling time selection
ADC_SMPR2_SMP10_0              EQU (0x1 :SHL: ADC_SMPR2_SMP10_Pos)           ;!< 0x00000001
ADC_SMPR2_SMP10_1              EQU (0x2 :SHL: ADC_SMPR2_SMP10_Pos)           ;!< 0x00000002
ADC_SMPR2_SMP10_2              EQU (0x4 :SHL: ADC_SMPR2_SMP10_Pos)           ;!< 0x00000004

ADC_SMPR2_SMP11_Pos            EQU (3)
ADC_SMPR2_SMP11_Msk            EQU (0x7 :SHL: ADC_SMPR2_SMP11_Pos)           ;!< 0x00000038
ADC_SMPR2_SMP11                EQU ADC_SMPR2_SMP11_Msk                     ;!< ADC channel 11 sampling time selection
ADC_SMPR2_SMP11_0              EQU (0x1 :SHL: ADC_SMPR2_SMP11_Pos)           ;!< 0x00000008
ADC_SMPR2_SMP11_1              EQU (0x2 :SHL: ADC_SMPR2_SMP11_Pos)           ;!< 0x00000010
ADC_SMPR2_SMP11_2              EQU (0x4 :SHL: ADC_SMPR2_SMP11_Pos)           ;!< 0x00000020

ADC_SMPR2_SMP12_Pos            EQU (6)
ADC_SMPR2_SMP12_Msk            EQU (0x7 :SHL: ADC_SMPR2_SMP12_Pos)           ;!< 0x000001C0
ADC_SMPR2_SMP12                EQU ADC_SMPR2_SMP12_Msk                     ;!< ADC channel 12 sampling time selection
ADC_SMPR2_SMP12_0              EQU (0x1 :SHL: ADC_SMPR2_SMP12_Pos)           ;!< 0x00000040
ADC_SMPR2_SMP12_1              EQU (0x2 :SHL: ADC_SMPR2_SMP12_Pos)           ;!< 0x00000080
ADC_SMPR2_SMP12_2              EQU (0x4 :SHL: ADC_SMPR2_SMP12_Pos)           ;!< 0x00000100

ADC_SMPR2_SMP13_Pos            EQU (9)
ADC_SMPR2_SMP13_Msk            EQU (0x7 :SHL: ADC_SMPR2_SMP13_Pos)           ;!< 0x00000E00
ADC_SMPR2_SMP13                EQU ADC_SMPR2_SMP13_Msk                     ;!< ADC channel 13 sampling time selection
ADC_SMPR2_SMP13_0              EQU (0x1 :SHL: ADC_SMPR2_SMP13_Pos)           ;!< 0x00000200
ADC_SMPR2_SMP13_1              EQU (0x2 :SHL: ADC_SMPR2_SMP13_Pos)           ;!< 0x00000400
ADC_SMPR2_SMP13_2              EQU (0x4 :SHL: ADC_SMPR2_SMP13_Pos)           ;!< 0x00000800

ADC_SMPR2_SMP14_Pos            EQU (12)
ADC_SMPR2_SMP14_Msk            EQU (0x7 :SHL: ADC_SMPR2_SMP14_Pos)           ;!< 0x00007000
ADC_SMPR2_SMP14                EQU ADC_SMPR2_SMP14_Msk                     ;!< ADC channel 14 sampling time selection
ADC_SMPR2_SMP14_0              EQU (0x1 :SHL: ADC_SMPR2_SMP14_Pos)           ;!< 0x00001000
ADC_SMPR2_SMP14_1              EQU (0x2 :SHL: ADC_SMPR2_SMP14_Pos)           ;!< 0x00002000
ADC_SMPR2_SMP14_2              EQU (0x4 :SHL: ADC_SMPR2_SMP14_Pos)           ;!< 0x00004000

ADC_SMPR2_SMP15_Pos            EQU (15)
ADC_SMPR2_SMP15_Msk            EQU (0x7 :SHL: ADC_SMPR2_SMP15_Pos)           ;!< 0x00038000
ADC_SMPR2_SMP15                EQU ADC_SMPR2_SMP15_Msk                     ;!< ADC channel 15 sampling time selection
ADC_SMPR2_SMP15_0              EQU (0x1 :SHL: ADC_SMPR2_SMP15_Pos)           ;!< 0x00008000
ADC_SMPR2_SMP15_1              EQU (0x2 :SHL: ADC_SMPR2_SMP15_Pos)           ;!< 0x00010000
ADC_SMPR2_SMP15_2              EQU (0x4 :SHL: ADC_SMPR2_SMP15_Pos)           ;!< 0x00020000

ADC_SMPR2_SMP16_Pos            EQU (18)
ADC_SMPR2_SMP16_Msk            EQU (0x7 :SHL: ADC_SMPR2_SMP16_Pos)           ;!< 0x001C0000
ADC_SMPR2_SMP16                EQU ADC_SMPR2_SMP16_Msk                     ;!< ADC channel 16 sampling time selection
ADC_SMPR2_SMP16_0              EQU (0x1 :SHL: ADC_SMPR2_SMP16_Pos)           ;!< 0x00040000
ADC_SMPR2_SMP16_1              EQU (0x2 :SHL: ADC_SMPR2_SMP16_Pos)           ;!< 0x00080000
ADC_SMPR2_SMP16_2              EQU (0x4 :SHL: ADC_SMPR2_SMP16_Pos)           ;!< 0x00100000

ADC_SMPR2_SMP17_Pos            EQU (21)
ADC_SMPR2_SMP17_Msk            EQU (0x7 :SHL: ADC_SMPR2_SMP17_Pos)           ;!< 0x00E00000
ADC_SMPR2_SMP17                EQU ADC_SMPR2_SMP17_Msk                     ;!< ADC channel 17 sampling time selection
ADC_SMPR2_SMP17_0              EQU (0x1 :SHL: ADC_SMPR2_SMP17_Pos)           ;!< 0x00200000
ADC_SMPR2_SMP17_1              EQU (0x2 :SHL: ADC_SMPR2_SMP17_Pos)           ;!< 0x00400000
ADC_SMPR2_SMP17_2              EQU (0x4 :SHL: ADC_SMPR2_SMP17_Pos)           ;!< 0x00800000

ADC_SMPR2_SMP18_Pos            EQU (24)
ADC_SMPR2_SMP18_Msk            EQU (0x7 :SHL: ADC_SMPR2_SMP18_Pos)           ;!< 0x07000000
ADC_SMPR2_SMP18                EQU ADC_SMPR2_SMP18_Msk                     ;!< ADC channel 18 sampling time selection
ADC_SMPR2_SMP18_0              EQU (0x1 :SHL: ADC_SMPR2_SMP18_Pos)           ;!< 0x01000000
ADC_SMPR2_SMP18_1              EQU (0x2 :SHL: ADC_SMPR2_SMP18_Pos)           ;!< 0x02000000
ADC_SMPR2_SMP18_2              EQU (0x4 :SHL: ADC_SMPR2_SMP18_Pos)           ;!< 0x04000000

;*******************  Bit definition for ADC_TR1 register  ******************
ADC_TR1_LT1_Pos                EQU (0)
ADC_TR1_LT1_Msk                EQU (0xFFF :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000FFF
ADC_TR1_LT1                    EQU ADC_TR1_LT1_Msk                         ;!< ADC analog watchdog 1 threshold low
ADC_TR1_LT1_0                  EQU (0x001 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000001
ADC_TR1_LT1_1                  EQU (0x002 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000002
ADC_TR1_LT1_2                  EQU (0x004 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000004
ADC_TR1_LT1_3                  EQU (0x008 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000008
ADC_TR1_LT1_4                  EQU (0x010 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000010
ADC_TR1_LT1_5                  EQU (0x020 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000020
ADC_TR1_LT1_6                  EQU (0x040 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000040
ADC_TR1_LT1_7                  EQU (0x080 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000080
ADC_TR1_LT1_8                  EQU (0x100 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000100
ADC_TR1_LT1_9                  EQU (0x200 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000200
ADC_TR1_LT1_10                 EQU (0x400 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000400
ADC_TR1_LT1_11                 EQU (0x800 :SHL: ADC_TR1_LT1_Pos)             ;!< 0x00000800

ADC_TR1_HT1_Pos                EQU (16)
ADC_TR1_HT1_Msk                EQU (0xFFF :SHL: ADC_TR1_HT1_Pos)             ;!< 0x0FFF0000
ADC_TR1_HT1                    EQU ADC_TR1_HT1_Msk                         ;!< ADC Analog watchdog 1 threshold high
ADC_TR1_HT1_0                  EQU (0x001 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x00010000
ADC_TR1_HT1_1                  EQU (0x002 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x00020000
ADC_TR1_HT1_2                  EQU (0x004 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x00040000
ADC_TR1_HT1_3                  EQU (0x008 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x00080000
ADC_TR1_HT1_4                  EQU (0x010 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x00100000
ADC_TR1_HT1_5                  EQU (0x020 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x00200000
ADC_TR1_HT1_6                  EQU (0x040 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x00400000
ADC_TR1_HT1_7                  EQU (0x080 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x00800000
ADC_TR1_HT1_8                  EQU (0x100 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x01000000
ADC_TR1_HT1_9                  EQU (0x200 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x02000000
ADC_TR1_HT1_10                 EQU (0x400 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x04000000
ADC_TR1_HT1_11                 EQU (0x800 :SHL: ADC_TR1_HT1_Pos)             ;!< 0x08000000

;*******************  Bit definition for ADC_TR2 register  ******************
ADC_TR2_LT2_Pos                EQU (0)
ADC_TR2_LT2_Msk                EQU (0xFF :SHL: ADC_TR2_LT2_Pos)              ;!< 0x000000FF
ADC_TR2_LT2                    EQU ADC_TR2_LT2_Msk                         ;!< ADC analog watchdog 2 threshold low
ADC_TR2_LT2_0                  EQU (0x01 :SHL: ADC_TR2_LT2_Pos)              ;!< 0x00000001
ADC_TR2_LT2_1                  EQU (0x02 :SHL: ADC_TR2_LT2_Pos)              ;!< 0x00000002
ADC_TR2_LT2_2                  EQU (0x04 :SHL: ADC_TR2_LT2_Pos)              ;!< 0x00000004
ADC_TR2_LT2_3                  EQU (0x08 :SHL: ADC_TR2_LT2_Pos)              ;!< 0x00000008
ADC_TR2_LT2_4                  EQU (0x10 :SHL: ADC_TR2_LT2_Pos)              ;!< 0x00000010
ADC_TR2_LT2_5                  EQU (0x20 :SHL: ADC_TR2_LT2_Pos)              ;!< 0x00000020
ADC_TR2_LT2_6                  EQU (0x40 :SHL: ADC_TR2_LT2_Pos)              ;!< 0x00000040
ADC_TR2_LT2_7                  EQU (0x80 :SHL: ADC_TR2_LT2_Pos)              ;!< 0x00000080

ADC_TR2_HT2_Pos                EQU (16)
ADC_TR2_HT2_Msk                EQU (0xFF :SHL: ADC_TR2_HT2_Pos)              ;!< 0x00FF0000
ADC_TR2_HT2                    EQU ADC_TR2_HT2_Msk                         ;!< ADC analog watchdog 2 threshold high
ADC_TR2_HT2_0                  EQU (0x01 :SHL: ADC_TR2_HT2_Pos)              ;!< 0x00010000
ADC_TR2_HT2_1                  EQU (0x02 :SHL: ADC_TR2_HT2_Pos)              ;!< 0x00020000
ADC_TR2_HT2_2                  EQU (0x04 :SHL: ADC_TR2_HT2_Pos)              ;!< 0x00040000
ADC_TR2_HT2_3                  EQU (0x08 :SHL: ADC_TR2_HT2_Pos)              ;!< 0x00080000
ADC_TR2_HT2_4                  EQU (0x10 :SHL: ADC_TR2_HT2_Pos)              ;!< 0x00100000
ADC_TR2_HT2_5                  EQU (0x20 :SHL: ADC_TR2_HT2_Pos)              ;!< 0x00200000
ADC_TR2_HT2_6                  EQU (0x40 :SHL: ADC_TR2_HT2_Pos)              ;!< 0x00400000
ADC_TR2_HT2_7                  EQU (0x80 :SHL: ADC_TR2_HT2_Pos)              ;!< 0x00800000

;*******************  Bit definition for ADC_TR3 register  ******************
ADC_TR3_LT3_Pos                EQU (0)
ADC_TR3_LT3_Msk                EQU (0xFF :SHL: ADC_TR3_LT3_Pos)              ;!< 0x000000FF
ADC_TR3_LT3                    EQU ADC_TR3_LT3_Msk                         ;!< ADC analog watchdog 3 threshold low
ADC_TR3_LT3_0                  EQU (0x01 :SHL: ADC_TR3_LT3_Pos)              ;!< 0x00000001
ADC_TR3_LT3_1                  EQU (0x02 :SHL: ADC_TR3_LT3_Pos)              ;!< 0x00000002
ADC_TR3_LT3_2                  EQU (0x04 :SHL: ADC_TR3_LT3_Pos)              ;!< 0x00000004
ADC_TR3_LT3_3                  EQU (0x08 :SHL: ADC_TR3_LT3_Pos)              ;!< 0x00000008
ADC_TR3_LT3_4                  EQU (0x10 :SHL: ADC_TR3_LT3_Pos)              ;!< 0x00000010
ADC_TR3_LT3_5                  EQU (0x20 :SHL: ADC_TR3_LT3_Pos)              ;!< 0x00000020
ADC_TR3_LT3_6                  EQU (0x40 :SHL: ADC_TR3_LT3_Pos)              ;!< 0x00000040
ADC_TR3_LT3_7                  EQU (0x80 :SHL: ADC_TR3_LT3_Pos)              ;!< 0x00000080

ADC_TR3_HT3_Pos                EQU (16)
ADC_TR3_HT3_Msk                EQU (0xFF :SHL: ADC_TR3_HT3_Pos)              ;!< 0x00FF0000
ADC_TR3_HT3                    EQU ADC_TR3_HT3_Msk                         ;!< ADC analog watchdog 3 threshold high
ADC_TR3_HT3_0                  EQU (0x01 :SHL: ADC_TR3_HT3_Pos)              ;!< 0x00010000
ADC_TR3_HT3_1                  EQU (0x02 :SHL: ADC_TR3_HT3_Pos)              ;!< 0x00020000
ADC_TR3_HT3_2                  EQU (0x04 :SHL: ADC_TR3_HT3_Pos)              ;!< 0x00040000
ADC_TR3_HT3_3                  EQU (0x08 :SHL: ADC_TR3_HT3_Pos)              ;!< 0x00080000
ADC_TR3_HT3_4                  EQU (0x10 :SHL: ADC_TR3_HT3_Pos)              ;!< 0x00100000
ADC_TR3_HT3_5                  EQU (0x20 :SHL: ADC_TR3_HT3_Pos)              ;!< 0x00200000
ADC_TR3_HT3_6                  EQU (0x40 :SHL: ADC_TR3_HT3_Pos)              ;!< 0x00400000
ADC_TR3_HT3_7                  EQU (0x80 :SHL: ADC_TR3_HT3_Pos)              ;!< 0x00800000

;*******************  Bit definition for ADC_SQR1 register  *****************
ADC_SQR1_L_Pos                 EQU (0)
ADC_SQR1_L_Msk                 EQU (0xF :SHL: ADC_SQR1_L_Pos)                ;!< 0x0000000F
ADC_SQR1_L                     EQU ADC_SQR1_L_Msk                          ;!< ADC group regular sequencer scan length
ADC_SQR1_L_0                   EQU (0x1 :SHL: ADC_SQR1_L_Pos)                ;!< 0x00000001
ADC_SQR1_L_1                   EQU (0x2 :SHL: ADC_SQR1_L_Pos)                ;!< 0x00000002
ADC_SQR1_L_2                   EQU (0x4 :SHL: ADC_SQR1_L_Pos)                ;!< 0x00000004
ADC_SQR1_L_3                   EQU (0x8 :SHL: ADC_SQR1_L_Pos)                ;!< 0x00000008

ADC_SQR1_SQ1_Pos               EQU (6)
ADC_SQR1_SQ1_Msk               EQU (0x1F :SHL: ADC_SQR1_SQ1_Pos)             ;!< 0x000007C0
ADC_SQR1_SQ1                   EQU ADC_SQR1_SQ1_Msk                        ;!< ADC group regular sequencer rank 1
ADC_SQR1_SQ1_0                 EQU (0x01 :SHL: ADC_SQR1_SQ1_Pos)             ;!< 0x00000040
ADC_SQR1_SQ1_1                 EQU (0x02 :SHL: ADC_SQR1_SQ1_Pos)             ;!< 0x00000080
ADC_SQR1_SQ1_2                 EQU (0x04 :SHL: ADC_SQR1_SQ1_Pos)             ;!< 0x00000100
ADC_SQR1_SQ1_3                 EQU (0x08 :SHL: ADC_SQR1_SQ1_Pos)             ;!< 0x00000200
ADC_SQR1_SQ1_4                 EQU (0x10 :SHL: ADC_SQR1_SQ1_Pos)             ;!< 0x00000400

ADC_SQR1_SQ2_Pos               EQU (12)
ADC_SQR1_SQ2_Msk               EQU (0x1F :SHL: ADC_SQR1_SQ2_Pos)             ;!< 0x0001F000
ADC_SQR1_SQ2                   EQU ADC_SQR1_SQ2_Msk                        ;!< ADC group regular sequencer rank 2
ADC_SQR1_SQ2_0                 EQU (0x01 :SHL: ADC_SQR1_SQ2_Pos)             ;!< 0x00001000
ADC_SQR1_SQ2_1                 EQU (0x02 :SHL: ADC_SQR1_SQ2_Pos)             ;!< 0x00002000
ADC_SQR1_SQ2_2                 EQU (0x04 :SHL: ADC_SQR1_SQ2_Pos)             ;!< 0x00004000
ADC_SQR1_SQ2_3                 EQU (0x08 :SHL: ADC_SQR1_SQ2_Pos)             ;!< 0x00008000
ADC_SQR1_SQ2_4                 EQU (0x10 :SHL: ADC_SQR1_SQ2_Pos)             ;!< 0x00010000

ADC_SQR1_SQ3_Pos               EQU (18)
ADC_SQR1_SQ3_Msk               EQU (0x1F :SHL: ADC_SQR1_SQ3_Pos)             ;!< 0x007C0000
ADC_SQR1_SQ3                   EQU ADC_SQR1_SQ3_Msk                        ;!< ADC group regular sequencer rank 3
ADC_SQR1_SQ3_0                 EQU (0x01 :SHL: ADC_SQR1_SQ3_Pos)             ;!< 0x00040000
ADC_SQR1_SQ3_1                 EQU (0x02 :SHL: ADC_SQR1_SQ3_Pos)             ;!< 0x00080000
ADC_SQR1_SQ3_2                 EQU (0x04 :SHL: ADC_SQR1_SQ3_Pos)             ;!< 0x00100000
ADC_SQR1_SQ3_3                 EQU (0x08 :SHL: ADC_SQR1_SQ3_Pos)             ;!< 0x00200000
ADC_SQR1_SQ3_4                 EQU (0x10 :SHL: ADC_SQR1_SQ3_Pos)             ;!< 0x00400000

ADC_SQR1_SQ4_Pos               EQU (24)
ADC_SQR1_SQ4_Msk               EQU (0x1F :SHL: ADC_SQR1_SQ4_Pos)             ;!< 0x1F000000
ADC_SQR1_SQ4                   EQU ADC_SQR1_SQ4_Msk                        ;!< ADC group regular sequencer rank 4
ADC_SQR1_SQ4_0                 EQU (0x01 :SHL: ADC_SQR1_SQ4_Pos)             ;!< 0x01000000
ADC_SQR1_SQ4_1                 EQU (0x02 :SHL: ADC_SQR1_SQ4_Pos)             ;!< 0x02000000
ADC_SQR1_SQ4_2                 EQU (0x04 :SHL: ADC_SQR1_SQ4_Pos)             ;!< 0x04000000
ADC_SQR1_SQ4_3                 EQU (0x08 :SHL: ADC_SQR1_SQ4_Pos)             ;!< 0x08000000
ADC_SQR1_SQ4_4                 EQU (0x10 :SHL: ADC_SQR1_SQ4_Pos)             ;!< 0x10000000

;*******************  Bit definition for ADC_SQR2 register  *****************
ADC_SQR2_SQ5_Pos               EQU (0)
ADC_SQR2_SQ5_Msk               EQU (0x1F :SHL: ADC_SQR2_SQ5_Pos)             ;!< 0x0000001F
ADC_SQR2_SQ5                   EQU ADC_SQR2_SQ5_Msk                        ;!< ADC group regular sequencer rank 5
ADC_SQR2_SQ5_0                 EQU (0x01 :SHL: ADC_SQR2_SQ5_Pos)             ;!< 0x00000001
ADC_SQR2_SQ5_1                 EQU (0x02 :SHL: ADC_SQR2_SQ5_Pos)             ;!< 0x00000002
ADC_SQR2_SQ5_2                 EQU (0x04 :SHL: ADC_SQR2_SQ5_Pos)             ;!< 0x00000004
ADC_SQR2_SQ5_3                 EQU (0x08 :SHL: ADC_SQR2_SQ5_Pos)             ;!< 0x00000008
ADC_SQR2_SQ5_4                 EQU (0x10 :SHL: ADC_SQR2_SQ5_Pos)             ;!< 0x00000010

ADC_SQR2_SQ6_Pos               EQU (6)
ADC_SQR2_SQ6_Msk               EQU (0x1F :SHL: ADC_SQR2_SQ6_Pos)             ;!< 0x000007C0
ADC_SQR2_SQ6                   EQU ADC_SQR2_SQ6_Msk                        ;!< ADC group regular sequencer rank 6
ADC_SQR2_SQ6_0                 EQU (0x01 :SHL: ADC_SQR2_SQ6_Pos)             ;!< 0x00000040
ADC_SQR2_SQ6_1                 EQU (0x02 :SHL: ADC_SQR2_SQ6_Pos)             ;!< 0x00000080
ADC_SQR2_SQ6_2                 EQU (0x04 :SHL: ADC_SQR2_SQ6_Pos)             ;!< 0x00000100
ADC_SQR2_SQ6_3                 EQU (0x08 :SHL: ADC_SQR2_SQ6_Pos)             ;!< 0x00000200
ADC_SQR2_SQ6_4                 EQU (0x10 :SHL: ADC_SQR2_SQ6_Pos)             ;!< 0x00000400

ADC_SQR2_SQ7_Pos               EQU (12)
ADC_SQR2_SQ7_Msk               EQU (0x1F :SHL: ADC_SQR2_SQ7_Pos)             ;!< 0x0001F000
ADC_SQR2_SQ7                   EQU ADC_SQR2_SQ7_Msk                        ;!< ADC group regular sequencer rank 7
ADC_SQR2_SQ7_0                 EQU (0x01 :SHL: ADC_SQR2_SQ7_Pos)             ;!< 0x00001000
ADC_SQR2_SQ7_1                 EQU (0x02 :SHL: ADC_SQR2_SQ7_Pos)             ;!< 0x00002000
ADC_SQR2_SQ7_2                 EQU (0x04 :SHL: ADC_SQR2_SQ7_Pos)             ;!< 0x00004000
ADC_SQR2_SQ7_3                 EQU (0x08 :SHL: ADC_SQR2_SQ7_Pos)             ;!< 0x00008000
ADC_SQR2_SQ7_4                 EQU (0x10 :SHL: ADC_SQR2_SQ7_Pos)             ;!< 0x00010000

ADC_SQR2_SQ8_Pos               EQU (18)
ADC_SQR2_SQ8_Msk               EQU (0x1F :SHL: ADC_SQR2_SQ8_Pos)             ;!< 0x007C0000
ADC_SQR2_SQ8                   EQU ADC_SQR2_SQ8_Msk                        ;!< ADC group regular sequencer rank 8
ADC_SQR2_SQ8_0                 EQU (0x01 :SHL: ADC_SQR2_SQ8_Pos)             ;!< 0x00040000
ADC_SQR2_SQ8_1                 EQU (0x02 :SHL: ADC_SQR2_SQ8_Pos)             ;!< 0x00080000
ADC_SQR2_SQ8_2                 EQU (0x04 :SHL: ADC_SQR2_SQ8_Pos)             ;!< 0x00100000
ADC_SQR2_SQ8_3                 EQU (0x08 :SHL: ADC_SQR2_SQ8_Pos)             ;!< 0x00200000
ADC_SQR2_SQ8_4                 EQU (0x10 :SHL: ADC_SQR2_SQ8_Pos)             ;!< 0x00400000

ADC_SQR2_SQ9_Pos               EQU (24)
ADC_SQR2_SQ9_Msk               EQU (0x1F :SHL: ADC_SQR2_SQ9_Pos)             ;!< 0x1F000000
ADC_SQR2_SQ9                   EQU ADC_SQR2_SQ9_Msk                        ;!< ADC group regular sequencer rank 9
ADC_SQR2_SQ9_0                 EQU (0x01 :SHL: ADC_SQR2_SQ9_Pos)             ;!< 0x01000000
ADC_SQR2_SQ9_1                 EQU (0x02 :SHL: ADC_SQR2_SQ9_Pos)             ;!< 0x02000000
ADC_SQR2_SQ9_2                 EQU (0x04 :SHL: ADC_SQR2_SQ9_Pos)             ;!< 0x04000000
ADC_SQR2_SQ9_3                 EQU (0x08 :SHL: ADC_SQR2_SQ9_Pos)             ;!< 0x08000000
ADC_SQR2_SQ9_4                 EQU (0x10 :SHL: ADC_SQR2_SQ9_Pos)             ;!< 0x10000000

;*******************  Bit definition for ADC_SQR3 register  *****************
ADC_SQR3_SQ10_Pos              EQU (0)
ADC_SQR3_SQ10_Msk              EQU (0x1F :SHL: ADC_SQR3_SQ10_Pos)            ;!< 0x0000001F
ADC_SQR3_SQ10                  EQU ADC_SQR3_SQ10_Msk                       ;!< ADC group regular sequencer rank 10
ADC_SQR3_SQ10_0                EQU (0x01 :SHL: ADC_SQR3_SQ10_Pos)            ;!< 0x00000001
ADC_SQR3_SQ10_1                EQU (0x02 :SHL: ADC_SQR3_SQ10_Pos)            ;!< 0x00000002
ADC_SQR3_SQ10_2                EQU (0x04 :SHL: ADC_SQR3_SQ10_Pos)            ;!< 0x00000004
ADC_SQR3_SQ10_3                EQU (0x08 :SHL: ADC_SQR3_SQ10_Pos)            ;!< 0x00000008
ADC_SQR3_SQ10_4                EQU (0x10 :SHL: ADC_SQR3_SQ10_Pos)            ;!< 0x00000010

ADC_SQR3_SQ11_Pos              EQU (6)
ADC_SQR3_SQ11_Msk              EQU (0x1F :SHL: ADC_SQR3_SQ11_Pos)            ;!< 0x000007C0
ADC_SQR3_SQ11                  EQU ADC_SQR3_SQ11_Msk                       ;!< ADC group regular sequencer rank 11
ADC_SQR3_SQ11_0                EQU (0x01 :SHL: ADC_SQR3_SQ11_Pos)            ;!< 0x00000040
ADC_SQR3_SQ11_1                EQU (0x02 :SHL: ADC_SQR3_SQ11_Pos)            ;!< 0x00000080
ADC_SQR3_SQ11_2                EQU (0x04 :SHL: ADC_SQR3_SQ11_Pos)            ;!< 0x00000100
ADC_SQR3_SQ11_3                EQU (0x08 :SHL: ADC_SQR3_SQ11_Pos)            ;!< 0x00000200
ADC_SQR3_SQ11_4                EQU (0x10 :SHL: ADC_SQR3_SQ11_Pos)            ;!< 0x00000400

ADC_SQR3_SQ12_Pos              EQU (12)
ADC_SQR3_SQ12_Msk              EQU (0x1F :SHL: ADC_SQR3_SQ12_Pos)            ;!< 0x0001F000
ADC_SQR3_SQ12                  EQU ADC_SQR3_SQ12_Msk                       ;!< ADC group regular sequencer rank 12
ADC_SQR3_SQ12_0                EQU (0x01 :SHL: ADC_SQR3_SQ12_Pos)            ;!< 0x00001000
ADC_SQR3_SQ12_1                EQU (0x02 :SHL: ADC_SQR3_SQ12_Pos)            ;!< 0x00002000
ADC_SQR3_SQ12_2                EQU (0x04 :SHL: ADC_SQR3_SQ12_Pos)            ;!< 0x00004000
ADC_SQR3_SQ12_3                EQU (0x08 :SHL: ADC_SQR3_SQ12_Pos)            ;!< 0x00008000
ADC_SQR3_SQ12_4                EQU (0x10 :SHL: ADC_SQR3_SQ12_Pos)            ;!< 0x00010000

ADC_SQR3_SQ13_Pos              EQU (18)
ADC_SQR3_SQ13_Msk              EQU (0x1F :SHL: ADC_SQR3_SQ13_Pos)            ;!< 0x007C0000
ADC_SQR3_SQ13                  EQU ADC_SQR3_SQ13_Msk                       ;!< ADC group regular sequencer rank 13
ADC_SQR3_SQ13_0                EQU (0x01 :SHL: ADC_SQR3_SQ13_Pos)            ;!< 0x00040000
ADC_SQR3_SQ13_1                EQU (0x02 :SHL: ADC_SQR3_SQ13_Pos)            ;!< 0x00080000
ADC_SQR3_SQ13_2                EQU (0x04 :SHL: ADC_SQR3_SQ13_Pos)            ;!< 0x00100000
ADC_SQR3_SQ13_3                EQU (0x08 :SHL: ADC_SQR3_SQ13_Pos)            ;!< 0x00200000
ADC_SQR3_SQ13_4                EQU (0x10 :SHL: ADC_SQR3_SQ13_Pos)            ;!< 0x00400000

ADC_SQR3_SQ14_Pos              EQU (24)
ADC_SQR3_SQ14_Msk              EQU (0x1F :SHL: ADC_SQR3_SQ14_Pos)            ;!< 0x1F000000
ADC_SQR3_SQ14                  EQU ADC_SQR3_SQ14_Msk                       ;!< ADC group regular sequencer rank 14
ADC_SQR3_SQ14_0                EQU (0x01 :SHL: ADC_SQR3_SQ14_Pos)            ;!< 0x01000000
ADC_SQR3_SQ14_1                EQU (0x02 :SHL: ADC_SQR3_SQ14_Pos)            ;!< 0x02000000
ADC_SQR3_SQ14_2                EQU (0x04 :SHL: ADC_SQR3_SQ14_Pos)            ;!< 0x04000000
ADC_SQR3_SQ14_3                EQU (0x08 :SHL: ADC_SQR3_SQ14_Pos)            ;!< 0x08000000
ADC_SQR3_SQ14_4                EQU (0x10 :SHL: ADC_SQR3_SQ14_Pos)            ;!< 0x10000000

;*******************  Bit definition for ADC_SQR4 register  *****************
ADC_SQR4_SQ15_Pos              EQU (0)
ADC_SQR4_SQ15_Msk              EQU (0x1F :SHL: ADC_SQR4_SQ15_Pos)            ;!< 0x0000001F
ADC_SQR4_SQ15                  EQU ADC_SQR4_SQ15_Msk                       ;!< ADC group regular sequencer rank 15
ADC_SQR4_SQ15_0                EQU (0x01 :SHL: ADC_SQR4_SQ15_Pos)            ;!< 0x00000001
ADC_SQR4_SQ15_1                EQU (0x02 :SHL: ADC_SQR4_SQ15_Pos)            ;!< 0x00000002
ADC_SQR4_SQ15_2                EQU (0x04 :SHL: ADC_SQR4_SQ15_Pos)            ;!< 0x00000004
ADC_SQR4_SQ15_3                EQU (0x08 :SHL: ADC_SQR4_SQ15_Pos)            ;!< 0x00000008
ADC_SQR4_SQ15_4                EQU (0x10 :SHL: ADC_SQR4_SQ15_Pos)            ;!< 0x00000010

ADC_SQR4_SQ16_Pos              EQU (6)
ADC_SQR4_SQ16_Msk              EQU (0x1F :SHL: ADC_SQR4_SQ16_Pos)            ;!< 0x000007C0
ADC_SQR4_SQ16                  EQU ADC_SQR4_SQ16_Msk                       ;!< ADC group regular sequencer rank 16
ADC_SQR4_SQ16_0                EQU (0x01 :SHL: ADC_SQR4_SQ16_Pos)            ;!< 0x00000040
ADC_SQR4_SQ16_1                EQU (0x02 :SHL: ADC_SQR4_SQ16_Pos)            ;!< 0x00000080
ADC_SQR4_SQ16_2                EQU (0x04 :SHL: ADC_SQR4_SQ16_Pos)            ;!< 0x00000100
ADC_SQR4_SQ16_3                EQU (0x08 :SHL: ADC_SQR4_SQ16_Pos)            ;!< 0x00000200
ADC_SQR4_SQ16_4                EQU (0x10 :SHL: ADC_SQR4_SQ16_Pos)            ;!< 0x00000400

;*******************  Bit definition for ADC_DR register  *******************
ADC_DR_RDATA_Pos               EQU (0)
ADC_DR_RDATA_Msk               EQU (0xFFFF :SHL: ADC_DR_RDATA_Pos)           ;!< 0x0000FFFF
ADC_DR_RDATA                   EQU ADC_DR_RDATA_Msk                        ;!< ADC group regular conversion data
ADC_DR_RDATA_0                 EQU (0x0001 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000001
ADC_DR_RDATA_1                 EQU (0x0002 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000002
ADC_DR_RDATA_2                 EQU (0x0004 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000004
ADC_DR_RDATA_3                 EQU (0x0008 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000008
ADC_DR_RDATA_4                 EQU (0x0010 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000010
ADC_DR_RDATA_5                 EQU (0x0020 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000020
ADC_DR_RDATA_6                 EQU (0x0040 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000040
ADC_DR_RDATA_7                 EQU (0x0080 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000080
ADC_DR_RDATA_8                 EQU (0x0100 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000100
ADC_DR_RDATA_9                 EQU (0x0200 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000200
ADC_DR_RDATA_10                EQU (0x0400 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000400
ADC_DR_RDATA_11                EQU (0x0800 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00000800
ADC_DR_RDATA_12                EQU (0x1000 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00001000
ADC_DR_RDATA_13                EQU (0x2000 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00002000
ADC_DR_RDATA_14                EQU (0x4000 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00004000
ADC_DR_RDATA_15                EQU (0x8000 :SHL: ADC_DR_RDATA_Pos)           ;!< 0x00008000

;*******************  Bit definition for ADC_JSQR register  *****************
ADC_JSQR_JL_Pos                EQU (0)
ADC_JSQR_JL_Msk                EQU (0x3 :SHL: ADC_JSQR_JL_Pos)               ;!< 0x00000003
ADC_JSQR_JL                    EQU ADC_JSQR_JL_Msk                         ;!< ADC group injected sequencer scan length
ADC_JSQR_JL_0                  EQU (0x1 :SHL: ADC_JSQR_JL_Pos)               ;!< 0x00000001
ADC_JSQR_JL_1                  EQU (0x2 :SHL: ADC_JSQR_JL_Pos)               ;!< 0x00000002

ADC_JSQR_JEXTSEL_Pos           EQU (2)
ADC_JSQR_JEXTSEL_Msk           EQU (0xF :SHL: ADC_JSQR_JEXTSEL_Pos)          ;!< 0x0000003C
ADC_JSQR_JEXTSEL               EQU ADC_JSQR_JEXTSEL_Msk                    ;!< ADC group injected external trigger source
ADC_JSQR_JEXTSEL_0             EQU (0x1 :SHL: ADC_JSQR_JEXTSEL_Pos)          ;!< 0x00000004
ADC_JSQR_JEXTSEL_1             EQU (0x2 :SHL: ADC_JSQR_JEXTSEL_Pos)          ;!< 0x00000008
ADC_JSQR_JEXTSEL_2             EQU (0x4 :SHL: ADC_JSQR_JEXTSEL_Pos)          ;!< 0x00000010
ADC_JSQR_JEXTSEL_3             EQU (0x8 :SHL: ADC_JSQR_JEXTSEL_Pos)          ;!< 0x00000020

ADC_JSQR_JEXTEN_Pos            EQU (6)
ADC_JSQR_JEXTEN_Msk            EQU (0x3 :SHL: ADC_JSQR_JEXTEN_Pos)           ;!< 0x000000C0
ADC_JSQR_JEXTEN                EQU ADC_JSQR_JEXTEN_Msk                     ;!< ADC group injected external trigger polarity
ADC_JSQR_JEXTEN_0              EQU (0x1 :SHL: ADC_JSQR_JEXTEN_Pos)           ;!< 0x00000040
ADC_JSQR_JEXTEN_1              EQU (0x2 :SHL: ADC_JSQR_JEXTEN_Pos)           ;!< 0x00000080

ADC_JSQR_JSQ1_Pos              EQU (8)
ADC_JSQR_JSQ1_Msk              EQU (0x1F :SHL: ADC_JSQR_JSQ1_Pos)            ;!< 0x00001F00
ADC_JSQR_JSQ1                  EQU ADC_JSQR_JSQ1_Msk                       ;!< ADC group injected sequencer rank 1
ADC_JSQR_JSQ1_0                EQU (0x01 :SHL: ADC_JSQR_JSQ1_Pos)            ;!< 0x00000100
ADC_JSQR_JSQ1_1                EQU (0x02 :SHL: ADC_JSQR_JSQ1_Pos)            ;!< 0x00000200
ADC_JSQR_JSQ1_2                EQU (0x04 :SHL: ADC_JSQR_JSQ1_Pos)            ;!< 0x00000400
ADC_JSQR_JSQ1_3                EQU (0x08 :SHL: ADC_JSQR_JSQ1_Pos)            ;!< 0x00000800
ADC_JSQR_JSQ1_4                EQU (0x10 :SHL: ADC_JSQR_JSQ1_Pos)            ;!< 0x00001000

ADC_JSQR_JSQ2_Pos              EQU (14)
ADC_JSQR_JSQ2_Msk              EQU (0x1F :SHL: ADC_JSQR_JSQ2_Pos)            ;!< 0x0007C000
ADC_JSQR_JSQ2                  EQU ADC_JSQR_JSQ2_Msk                       ;!< ADC group injected sequencer rank 2
ADC_JSQR_JSQ2_0                EQU (0x01 :SHL: ADC_JSQR_JSQ2_Pos)            ;!< 0x00004000
ADC_JSQR_JSQ2_1                EQU (0x02 :SHL: ADC_JSQR_JSQ2_Pos)            ;!< 0x00008000
ADC_JSQR_JSQ2_2                EQU (0x04 :SHL: ADC_JSQR_JSQ2_Pos)            ;!< 0x00010000
ADC_JSQR_JSQ2_3                EQU (0x08 :SHL: ADC_JSQR_JSQ2_Pos)            ;!< 0x00020000
ADC_JSQR_JSQ2_4                EQU (0x10 :SHL: ADC_JSQR_JSQ2_Pos)            ;!< 0x00040000

ADC_JSQR_JSQ3_Pos              EQU (20)
ADC_JSQR_JSQ3_Msk              EQU (0x1F :SHL: ADC_JSQR_JSQ3_Pos)            ;!< 0x01F00000
ADC_JSQR_JSQ3                  EQU ADC_JSQR_JSQ3_Msk                       ;!< ADC group injected sequencer rank 3
ADC_JSQR_JSQ3_0                EQU (0x01 :SHL: ADC_JSQR_JSQ3_Pos)            ;!< 0x00100000
ADC_JSQR_JSQ3_1                EQU (0x02 :SHL: ADC_JSQR_JSQ3_Pos)            ;!< 0x00200000
ADC_JSQR_JSQ3_2                EQU (0x04 :SHL: ADC_JSQR_JSQ3_Pos)            ;!< 0x00400000
ADC_JSQR_JSQ3_3                EQU (0x08 :SHL: ADC_JSQR_JSQ3_Pos)            ;!< 0x00800000
ADC_JSQR_JSQ3_4                EQU (0x10 :SHL: ADC_JSQR_JSQ3_Pos)            ;!< 0x01000000

ADC_JSQR_JSQ4_Pos              EQU (26)
ADC_JSQR_JSQ4_Msk              EQU (0x1F :SHL: ADC_JSQR_JSQ4_Pos)            ;!< 0x7C000000
ADC_JSQR_JSQ4                  EQU ADC_JSQR_JSQ4_Msk                       ;!< ADC group injected sequencer rank 4
ADC_JSQR_JSQ4_0                EQU (0x01 :SHL: ADC_JSQR_JSQ4_Pos)            ;!< 0x04000000
ADC_JSQR_JSQ4_1                EQU (0x02 :SHL: ADC_JSQR_JSQ4_Pos)            ;!< 0x08000000
ADC_JSQR_JSQ4_2                EQU (0x04 :SHL: ADC_JSQR_JSQ4_Pos)            ;!< 0x10000000
ADC_JSQR_JSQ4_3                EQU (0x08 :SHL: ADC_JSQR_JSQ4_Pos)            ;!< 0x20000000
ADC_JSQR_JSQ4_4                EQU (0x10 :SHL: ADC_JSQR_JSQ4_Pos)            ;!< 0x40000000


;*******************  Bit definition for ADC_OFR1 register  *****************
ADC_OFR1_OFFSET1_Pos           EQU (0)
ADC_OFR1_OFFSET1_Msk           EQU (0xFFF :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000FFF
ADC_OFR1_OFFSET1               EQU ADC_OFR1_OFFSET1_Msk                    ;!< ADC offset number 1 offset level
ADC_OFR1_OFFSET1_0             EQU (0x001 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000001
ADC_OFR1_OFFSET1_1             EQU (0x002 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000002
ADC_OFR1_OFFSET1_2             EQU (0x004 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000004
ADC_OFR1_OFFSET1_3             EQU (0x008 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000008
ADC_OFR1_OFFSET1_4             EQU (0x010 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000010
ADC_OFR1_OFFSET1_5             EQU (0x020 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000020
ADC_OFR1_OFFSET1_6             EQU (0x040 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000040
ADC_OFR1_OFFSET1_7             EQU (0x080 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000080
ADC_OFR1_OFFSET1_8             EQU (0x100 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000100
ADC_OFR1_OFFSET1_9             EQU (0x200 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000200
ADC_OFR1_OFFSET1_10            EQU (0x400 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000400
ADC_OFR1_OFFSET1_11            EQU (0x800 :SHL: ADC_OFR1_OFFSET1_Pos)        ;!< 0x00000800

ADC_OFR1_OFFSET1_CH_Pos        EQU (26)
ADC_OFR1_OFFSET1_CH_Msk        EQU (0x1F :SHL: ADC_OFR1_OFFSET1_CH_Pos)      ;!< 0x7C000000
ADC_OFR1_OFFSET1_CH            EQU ADC_OFR1_OFFSET1_CH_Msk                 ;!< ADC offset number 1 channel selection
ADC_OFR1_OFFSET1_CH_0          EQU (0x01 :SHL: ADC_OFR1_OFFSET1_CH_Pos)      ;!< 0x04000000
ADC_OFR1_OFFSET1_CH_1          EQU (0x02 :SHL: ADC_OFR1_OFFSET1_CH_Pos)      ;!< 0x08000000
ADC_OFR1_OFFSET1_CH_2          EQU (0x04 :SHL: ADC_OFR1_OFFSET1_CH_Pos)      ;!< 0x10000000
ADC_OFR1_OFFSET1_CH_3          EQU (0x08 :SHL: ADC_OFR1_OFFSET1_CH_Pos)      ;!< 0x20000000
ADC_OFR1_OFFSET1_CH_4          EQU (0x10 :SHL: ADC_OFR1_OFFSET1_CH_Pos)      ;!< 0x40000000

ADC_OFR1_OFFSET1_EN_Pos        EQU (31)
ADC_OFR1_OFFSET1_EN_Msk        EQU (0x1 :SHL: ADC_OFR1_OFFSET1_EN_Pos)       ;!< 0x80000000
ADC_OFR1_OFFSET1_EN            EQU ADC_OFR1_OFFSET1_EN_Msk                 ;!< ADC offset number 1 enable

;*******************  Bit definition for ADC_OFR2 register  *****************
ADC_OFR2_OFFSET2_Pos           EQU (0)
ADC_OFR2_OFFSET2_Msk           EQU (0xFFF :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000FFF
ADC_OFR2_OFFSET2               EQU ADC_OFR2_OFFSET2_Msk                    ;!< ADC offset number 2 offset level
ADC_OFR2_OFFSET2_0             EQU (0x001 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000001
ADC_OFR2_OFFSET2_1             EQU (0x002 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000002
ADC_OFR2_OFFSET2_2             EQU (0x004 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000004
ADC_OFR2_OFFSET2_3             EQU (0x008 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000008
ADC_OFR2_OFFSET2_4             EQU (0x010 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000010
ADC_OFR2_OFFSET2_5             EQU (0x020 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000020
ADC_OFR2_OFFSET2_6             EQU (0x040 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000040
ADC_OFR2_OFFSET2_7             EQU (0x080 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000080
ADC_OFR2_OFFSET2_8             EQU (0x100 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000100
ADC_OFR2_OFFSET2_9             EQU (0x200 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000200
ADC_OFR2_OFFSET2_10            EQU (0x400 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000400
ADC_OFR2_OFFSET2_11            EQU (0x800 :SHL: ADC_OFR2_OFFSET2_Pos)        ;!< 0x00000800

ADC_OFR2_OFFSET2_CH_Pos        EQU (26)
ADC_OFR2_OFFSET2_CH_Msk        EQU (0x1F :SHL: ADC_OFR2_OFFSET2_CH_Pos)      ;!< 0x7C000000
ADC_OFR2_OFFSET2_CH            EQU ADC_OFR2_OFFSET2_CH_Msk                 ;!< ADC offset number 2 channel selection
ADC_OFR2_OFFSET2_CH_0          EQU (0x01 :SHL: ADC_OFR2_OFFSET2_CH_Pos)      ;!< 0x04000000
ADC_OFR2_OFFSET2_CH_1          EQU (0x02 :SHL: ADC_OFR2_OFFSET2_CH_Pos)      ;!< 0x08000000
ADC_OFR2_OFFSET2_CH_2          EQU (0x04 :SHL: ADC_OFR2_OFFSET2_CH_Pos)      ;!< 0x10000000
ADC_OFR2_OFFSET2_CH_3          EQU (0x08 :SHL: ADC_OFR2_OFFSET2_CH_Pos)      ;!< 0x20000000
ADC_OFR2_OFFSET2_CH_4          EQU (0x10 :SHL: ADC_OFR2_OFFSET2_CH_Pos)      ;!< 0x40000000

ADC_OFR2_OFFSET2_EN_Pos        EQU (31)
ADC_OFR2_OFFSET2_EN_Msk        EQU (0x1 :SHL: ADC_OFR2_OFFSET2_EN_Pos)       ;!< 0x80000000
ADC_OFR2_OFFSET2_EN            EQU ADC_OFR2_OFFSET2_EN_Msk                 ;!< ADC offset number 2 enable

;*******************  Bit definition for ADC_OFR3 register  *****************
ADC_OFR3_OFFSET3_Pos           EQU (0)
ADC_OFR3_OFFSET3_Msk           EQU (0xFFF :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000FFF
ADC_OFR3_OFFSET3               EQU ADC_OFR3_OFFSET3_Msk                    ;!< ADC offset number 3 offset level
ADC_OFR3_OFFSET3_0             EQU (0x001 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000001
ADC_OFR3_OFFSET3_1             EQU (0x002 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000002
ADC_OFR3_OFFSET3_2             EQU (0x004 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000004
ADC_OFR3_OFFSET3_3             EQU (0x008 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000008
ADC_OFR3_OFFSET3_4             EQU (0x010 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000010
ADC_OFR3_OFFSET3_5             EQU (0x020 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000020
ADC_OFR3_OFFSET3_6             EQU (0x040 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000040
ADC_OFR3_OFFSET3_7             EQU (0x080 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000080
ADC_OFR3_OFFSET3_8             EQU (0x100 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000100
ADC_OFR3_OFFSET3_9             EQU (0x200 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000200
ADC_OFR3_OFFSET3_10            EQU (0x400 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000400
ADC_OFR3_OFFSET3_11            EQU (0x800 :SHL: ADC_OFR3_OFFSET3_Pos)        ;!< 0x00000800

ADC_OFR3_OFFSET3_CH_Pos        EQU (26)
ADC_OFR3_OFFSET3_CH_Msk        EQU (0x1F :SHL: ADC_OFR3_OFFSET3_CH_Pos)      ;!< 0x7C000000
ADC_OFR3_OFFSET3_CH            EQU ADC_OFR3_OFFSET3_CH_Msk                 ;!< ADC offset number 3 channel selection
ADC_OFR3_OFFSET3_CH_0          EQU (0x01 :SHL: ADC_OFR3_OFFSET3_CH_Pos)      ;!< 0x04000000
ADC_OFR3_OFFSET3_CH_1          EQU (0x02 :SHL: ADC_OFR3_OFFSET3_CH_Pos)      ;!< 0x08000000
ADC_OFR3_OFFSET3_CH_2          EQU (0x04 :SHL: ADC_OFR3_OFFSET3_CH_Pos)      ;!< 0x10000000
ADC_OFR3_OFFSET3_CH_3          EQU (0x08 :SHL: ADC_OFR3_OFFSET3_CH_Pos)      ;!< 0x20000000
ADC_OFR3_OFFSET3_CH_4          EQU (0x10 :SHL: ADC_OFR3_OFFSET3_CH_Pos)      ;!< 0x40000000

ADC_OFR3_OFFSET3_EN_Pos        EQU (31)
ADC_OFR3_OFFSET3_EN_Msk        EQU (0x1 :SHL: ADC_OFR3_OFFSET3_EN_Pos)       ;!< 0x80000000
ADC_OFR3_OFFSET3_EN            EQU ADC_OFR3_OFFSET3_EN_Msk                 ;!< ADC offset number 3 enable

;*******************  Bit definition for ADC_OFR4 register  *****************
ADC_OFR4_OFFSET4_Pos           EQU (0)
ADC_OFR4_OFFSET4_Msk           EQU (0xFFF :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000FFF
ADC_OFR4_OFFSET4               EQU ADC_OFR4_OFFSET4_Msk                    ;!< ADC offset number 4 offset level
ADC_OFR4_OFFSET4_0             EQU (0x001 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000001
ADC_OFR4_OFFSET4_1             EQU (0x002 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000002
ADC_OFR4_OFFSET4_2             EQU (0x004 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000004
ADC_OFR4_OFFSET4_3             EQU (0x008 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000008
ADC_OFR4_OFFSET4_4             EQU (0x010 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000010
ADC_OFR4_OFFSET4_5             EQU (0x020 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000020
ADC_OFR4_OFFSET4_6             EQU (0x040 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000040
ADC_OFR4_OFFSET4_7             EQU (0x080 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000080
ADC_OFR4_OFFSET4_8             EQU (0x100 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000100
ADC_OFR4_OFFSET4_9             EQU (0x200 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000200
ADC_OFR4_OFFSET4_10            EQU (0x400 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000400
ADC_OFR4_OFFSET4_11            EQU (0x800 :SHL: ADC_OFR4_OFFSET4_Pos)        ;!< 0x00000800

ADC_OFR4_OFFSET4_CH_Pos        EQU (26)
ADC_OFR4_OFFSET4_CH_Msk        EQU (0x1F :SHL: ADC_OFR4_OFFSET4_CH_Pos)      ;!< 0x7C000000
ADC_OFR4_OFFSET4_CH            EQU ADC_OFR4_OFFSET4_CH_Msk                 ;!< ADC offset number 4 channel selection
ADC_OFR4_OFFSET4_CH_0          EQU (0x01 :SHL: ADC_OFR4_OFFSET4_CH_Pos)      ;!< 0x04000000
ADC_OFR4_OFFSET4_CH_1          EQU (0x02 :SHL: ADC_OFR4_OFFSET4_CH_Pos)      ;!< 0x08000000
ADC_OFR4_OFFSET4_CH_2          EQU (0x04 :SHL: ADC_OFR4_OFFSET4_CH_Pos)      ;!< 0x10000000
ADC_OFR4_OFFSET4_CH_3          EQU (0x08 :SHL: ADC_OFR4_OFFSET4_CH_Pos)      ;!< 0x20000000
ADC_OFR4_OFFSET4_CH_4          EQU (0x10 :SHL: ADC_OFR4_OFFSET4_CH_Pos)      ;!< 0x40000000

ADC_OFR4_OFFSET4_EN_Pos        EQU (31)
ADC_OFR4_OFFSET4_EN_Msk        EQU (0x1 :SHL: ADC_OFR4_OFFSET4_EN_Pos)       ;!< 0x80000000
ADC_OFR4_OFFSET4_EN            EQU ADC_OFR4_OFFSET4_EN_Msk                 ;!< ADC offset number 4 enable

;*******************  Bit definition for ADC_JDR1 register  *****************
ADC_JDR1_JDATA_Pos             EQU (0)
ADC_JDR1_JDATA_Msk             EQU (0xFFFF :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x0000FFFF
ADC_JDR1_JDATA                 EQU ADC_JDR1_JDATA_Msk                      ;!< ADC group injected sequencer rank 1 conversion data
ADC_JDR1_JDATA_0               EQU (0x0001 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000001
ADC_JDR1_JDATA_1               EQU (0x0002 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000002
ADC_JDR1_JDATA_2               EQU (0x0004 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000004
ADC_JDR1_JDATA_3               EQU (0x0008 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000008
ADC_JDR1_JDATA_4               EQU (0x0010 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000010
ADC_JDR1_JDATA_5               EQU (0x0020 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000020
ADC_JDR1_JDATA_6               EQU (0x0040 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000040
ADC_JDR1_JDATA_7               EQU (0x0080 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000080
ADC_JDR1_JDATA_8               EQU (0x0100 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000100
ADC_JDR1_JDATA_9               EQU (0x0200 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000200
ADC_JDR1_JDATA_10              EQU (0x0400 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000400
ADC_JDR1_JDATA_11              EQU (0x0800 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00000800
ADC_JDR1_JDATA_12              EQU (0x1000 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00001000
ADC_JDR1_JDATA_13              EQU (0x2000 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00002000
ADC_JDR1_JDATA_14              EQU (0x4000 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00004000
ADC_JDR1_JDATA_15              EQU (0x8000 :SHL: ADC_JDR1_JDATA_Pos)         ;!< 0x00008000

;*******************  Bit definition for ADC_JDR2 register  *****************
ADC_JDR2_JDATA_Pos             EQU (0)
ADC_JDR2_JDATA_Msk             EQU (0xFFFF :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x0000FFFF
ADC_JDR2_JDATA                 EQU ADC_JDR2_JDATA_Msk                      ;!< ADC group injected sequencer rank 2 conversion data
ADC_JDR2_JDATA_0               EQU (0x0001 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000001
ADC_JDR2_JDATA_1               EQU (0x0002 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000002
ADC_JDR2_JDATA_2               EQU (0x0004 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000004
ADC_JDR2_JDATA_3               EQU (0x0008 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000008
ADC_JDR2_JDATA_4               EQU (0x0010 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000010
ADC_JDR2_JDATA_5               EQU (0x0020 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000020
ADC_JDR2_JDATA_6               EQU (0x0040 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000040
ADC_JDR2_JDATA_7               EQU (0x0080 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000080
ADC_JDR2_JDATA_8               EQU (0x0100 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000100
ADC_JDR2_JDATA_9               EQU (0x0200 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000200
ADC_JDR2_JDATA_10              EQU (0x0400 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000400
ADC_JDR2_JDATA_11              EQU (0x0800 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00000800
ADC_JDR2_JDATA_12              EQU (0x1000 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00001000
ADC_JDR2_JDATA_13              EQU (0x2000 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00002000
ADC_JDR2_JDATA_14              EQU (0x4000 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00004000
ADC_JDR2_JDATA_15              EQU (0x8000 :SHL: ADC_JDR2_JDATA_Pos)         ;!< 0x00008000

;*******************  Bit definition for ADC_JDR3 register  *****************
ADC_JDR3_JDATA_Pos             EQU (0)
ADC_JDR3_JDATA_Msk             EQU (0xFFFF :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x0000FFFF
ADC_JDR3_JDATA                 EQU ADC_JDR3_JDATA_Msk                      ;!< ADC group injected sequencer rank 3 conversion data
ADC_JDR3_JDATA_0               EQU (0x0001 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000001
ADC_JDR3_JDATA_1               EQU (0x0002 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000002
ADC_JDR3_JDATA_2               EQU (0x0004 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000004
ADC_JDR3_JDATA_3               EQU (0x0008 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000008
ADC_JDR3_JDATA_4               EQU (0x0010 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000010
ADC_JDR3_JDATA_5               EQU (0x0020 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000020
ADC_JDR3_JDATA_6               EQU (0x0040 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000040
ADC_JDR3_JDATA_7               EQU (0x0080 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000080
ADC_JDR3_JDATA_8               EQU (0x0100 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000100
ADC_JDR3_JDATA_9               EQU (0x0200 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000200
ADC_JDR3_JDATA_10              EQU (0x0400 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000400
ADC_JDR3_JDATA_11              EQU (0x0800 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00000800
ADC_JDR3_JDATA_12              EQU (0x1000 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00001000
ADC_JDR3_JDATA_13              EQU (0x2000 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00002000
ADC_JDR3_JDATA_14              EQU (0x4000 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00004000
ADC_JDR3_JDATA_15              EQU (0x8000 :SHL: ADC_JDR3_JDATA_Pos)         ;!< 0x00008000

;*******************  Bit definition for ADC_JDR4 register  *****************
ADC_JDR4_JDATA_Pos             EQU (0)
ADC_JDR4_JDATA_Msk             EQU (0xFFFF :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x0000FFFF
ADC_JDR4_JDATA                 EQU ADC_JDR4_JDATA_Msk                      ;!< ADC group injected sequencer rank 4 conversion data
ADC_JDR4_JDATA_0               EQU (0x0001 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000001
ADC_JDR4_JDATA_1               EQU (0x0002 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000002
ADC_JDR4_JDATA_2               EQU (0x0004 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000004
ADC_JDR4_JDATA_3               EQU (0x0008 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000008
ADC_JDR4_JDATA_4               EQU (0x0010 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000010
ADC_JDR4_JDATA_5               EQU (0x0020 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000020
ADC_JDR4_JDATA_6               EQU (0x0040 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000040
ADC_JDR4_JDATA_7               EQU (0x0080 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000080
ADC_JDR4_JDATA_8               EQU (0x0100 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000100
ADC_JDR4_JDATA_9               EQU (0x0200 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000200
ADC_JDR4_JDATA_10              EQU (0x0400 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000400
ADC_JDR4_JDATA_11              EQU (0x0800 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00000800
ADC_JDR4_JDATA_12              EQU (0x1000 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00001000
ADC_JDR4_JDATA_13              EQU (0x2000 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00002000
ADC_JDR4_JDATA_14              EQU (0x4000 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00004000
ADC_JDR4_JDATA_15              EQU (0x8000 :SHL: ADC_JDR4_JDATA_Pos)         ;!< 0x00008000

;*******************  Bit definition for ADC_AWD2CR register  ***************
ADC_AWD2CR_AWD2CH_Pos          EQU (0)
ADC_AWD2CR_AWD2CH_Msk          EQU (0x7FFFF :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x0007FFFF
ADC_AWD2CR_AWD2CH              EQU ADC_AWD2CR_AWD2CH_Msk                   ;!< ADC analog watchdog 2 monitored channel selection
ADC_AWD2CR_AWD2CH_0            EQU (0x00001 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000001
ADC_AWD2CR_AWD2CH_1            EQU (0x00002 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000002
ADC_AWD2CR_AWD2CH_2            EQU (0x00004 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000004
ADC_AWD2CR_AWD2CH_3            EQU (0x00008 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000008
ADC_AWD2CR_AWD2CH_4            EQU (0x00010 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000010
ADC_AWD2CR_AWD2CH_5            EQU (0x00020 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000020
ADC_AWD2CR_AWD2CH_6            EQU (0x00040 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000040
ADC_AWD2CR_AWD2CH_7            EQU (0x00080 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000080
ADC_AWD2CR_AWD2CH_8            EQU (0x00100 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000100
ADC_AWD2CR_AWD2CH_9            EQU (0x00200 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000200
ADC_AWD2CR_AWD2CH_10           EQU (0x00400 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000400
ADC_AWD2CR_AWD2CH_11           EQU (0x00800 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00000800
ADC_AWD2CR_AWD2CH_12           EQU (0x01000 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00001000
ADC_AWD2CR_AWD2CH_13           EQU (0x02000 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00002000
ADC_AWD2CR_AWD2CH_14           EQU (0x04000 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00004000
ADC_AWD2CR_AWD2CH_15           EQU (0x08000 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00008000
ADC_AWD2CR_AWD2CH_16           EQU (0x10000 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00010000
ADC_AWD2CR_AWD2CH_17           EQU (0x20000 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00020000
ADC_AWD2CR_AWD2CH_18           EQU (0x40000 :SHL: ADC_AWD2CR_AWD2CH_Pos)     ;!< 0x00040000

;*******************  Bit definition for ADC_AWD3CR register  ***************
ADC_AWD3CR_AWD3CH_Pos          EQU (0)
ADC_AWD3CR_AWD3CH_Msk          EQU (0x7FFFF :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x0007FFFF
ADC_AWD3CR_AWD3CH              EQU ADC_AWD3CR_AWD3CH_Msk                   ;!< ADC analog watchdog 3 monitored channel selection
ADC_AWD3CR_AWD3CH_0            EQU (0x00001 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000001
ADC_AWD3CR_AWD3CH_1            EQU (0x00002 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000002
ADC_AWD3CR_AWD3CH_2            EQU (0x00004 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000004
ADC_AWD3CR_AWD3CH_3            EQU (0x00008 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000008
ADC_AWD3CR_AWD3CH_4            EQU (0x00010 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000010
ADC_AWD3CR_AWD3CH_5            EQU (0x00020 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000020
ADC_AWD3CR_AWD3CH_6            EQU (0x00040 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000040
ADC_AWD3CR_AWD3CH_7            EQU (0x00080 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000080
ADC_AWD3CR_AWD3CH_8            EQU (0x00100 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000100
ADC_AWD3CR_AWD3CH_9            EQU (0x00200 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000200
ADC_AWD3CR_AWD3CH_10           EQU (0x00400 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000400
ADC_AWD3CR_AWD3CH_11           EQU (0x00800 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00000800
ADC_AWD3CR_AWD3CH_12           EQU (0x01000 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00001000
ADC_AWD3CR_AWD3CH_13           EQU (0x02000 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00002000
ADC_AWD3CR_AWD3CH_14           EQU (0x04000 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00004000
ADC_AWD3CR_AWD3CH_15           EQU (0x08000 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00008000
ADC_AWD3CR_AWD3CH_16           EQU (0x10000 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00010000
ADC_AWD3CR_AWD3CH_17           EQU (0x20000 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00020000
ADC_AWD3CR_AWD3CH_18           EQU (0x40000 :SHL: ADC_AWD3CR_AWD3CH_Pos)     ;!< 0x00040000

;*******************  Bit definition for ADC_DIFSEL register  ***************
ADC_DIFSEL_DIFSEL_Pos          EQU (0)
ADC_DIFSEL_DIFSEL_Msk          EQU (0x7FFFF :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x0007FFFF
ADC_DIFSEL_DIFSEL              EQU ADC_DIFSEL_DIFSEL_Msk                   ;!< ADC channel differential or single-ended mode
ADC_DIFSEL_DIFSEL_0            EQU (0x00001 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000001
ADC_DIFSEL_DIFSEL_1            EQU (0x00002 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000002
ADC_DIFSEL_DIFSEL_2            EQU (0x00004 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000004
ADC_DIFSEL_DIFSEL_3            EQU (0x00008 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000008
ADC_DIFSEL_DIFSEL_4            EQU (0x00010 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000010
ADC_DIFSEL_DIFSEL_5            EQU (0x00020 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000020
ADC_DIFSEL_DIFSEL_6            EQU (0x00040 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000040
ADC_DIFSEL_DIFSEL_7            EQU (0x00080 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000080
ADC_DIFSEL_DIFSEL_8            EQU (0x00100 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000100
ADC_DIFSEL_DIFSEL_9            EQU (0x00200 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000200
ADC_DIFSEL_DIFSEL_10           EQU (0x00400 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000400
ADC_DIFSEL_DIFSEL_11           EQU (0x00800 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00000800
ADC_DIFSEL_DIFSEL_12           EQU (0x01000 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00001000
ADC_DIFSEL_DIFSEL_13           EQU (0x02000 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00002000
ADC_DIFSEL_DIFSEL_14           EQU (0x04000 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00004000
ADC_DIFSEL_DIFSEL_15           EQU (0x08000 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00008000
ADC_DIFSEL_DIFSEL_16           EQU (0x10000 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00010000
ADC_DIFSEL_DIFSEL_17           EQU (0x20000 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00020000
ADC_DIFSEL_DIFSEL_18           EQU (0x40000 :SHL: ADC_DIFSEL_DIFSEL_Pos)     ;!< 0x00040000

;*******************  Bit definition for ADC_CALFACT register  **************
ADC_CALFACT_CALFACT_S_Pos      EQU (0)
ADC_CALFACT_CALFACT_S_Msk      EQU (0x7F :SHL: ADC_CALFACT_CALFACT_S_Pos)    ;!< 0x0000007F
ADC_CALFACT_CALFACT_S          EQU ADC_CALFACT_CALFACT_S_Msk               ;!< ADC calibration factor in single-ended mode
ADC_CALFACT_CALFACT_S_0        EQU (0x01 :SHL: ADC_CALFACT_CALFACT_S_Pos)    ;!< 0x00000001
ADC_CALFACT_CALFACT_S_1        EQU (0x02 :SHL: ADC_CALFACT_CALFACT_S_Pos)    ;!< 0x00000002
ADC_CALFACT_CALFACT_S_2        EQU (0x04 :SHL: ADC_CALFACT_CALFACT_S_Pos)    ;!< 0x00000004
ADC_CALFACT_CALFACT_S_3        EQU (0x08 :SHL: ADC_CALFACT_CALFACT_S_Pos)    ;!< 0x00000008
ADC_CALFACT_CALFACT_S_4        EQU (0x10 :SHL: ADC_CALFACT_CALFACT_S_Pos)    ;!< 0x00000010
ADC_CALFACT_CALFACT_S_5        EQU (0x20 :SHL: ADC_CALFACT_CALFACT_S_Pos)    ;!< 0x00000020
ADC_CALFACT_CALFACT_S_6        EQU (0x40 :SHL: ADC_CALFACT_CALFACT_S_Pos)    ;!< 0x00000040

ADC_CALFACT_CALFACT_D_Pos      EQU (16)
ADC_CALFACT_CALFACT_D_Msk      EQU (0x7F :SHL: ADC_CALFACT_CALFACT_D_Pos)    ;!< 0x007F0000
ADC_CALFACT_CALFACT_D          EQU ADC_CALFACT_CALFACT_D_Msk               ;!< ADC calibration factor in differential mode
ADC_CALFACT_CALFACT_D_0        EQU (0x01 :SHL: ADC_CALFACT_CALFACT_D_Pos)    ;!< 0x00010000
ADC_CALFACT_CALFACT_D_1        EQU (0x02 :SHL: ADC_CALFACT_CALFACT_D_Pos)    ;!< 0x00020000
ADC_CALFACT_CALFACT_D_2        EQU (0x04 :SHL: ADC_CALFACT_CALFACT_D_Pos)    ;!< 0x00040000
ADC_CALFACT_CALFACT_D_3        EQU (0x08 :SHL: ADC_CALFACT_CALFACT_D_Pos)    ;!< 0x00080000
ADC_CALFACT_CALFACT_D_4        EQU (0x10 :SHL: ADC_CALFACT_CALFACT_D_Pos)    ;!< 0x00100000
ADC_CALFACT_CALFACT_D_5        EQU (0x20 :SHL: ADC_CALFACT_CALFACT_D_Pos)    ;!< 0x00200000
ADC_CALFACT_CALFACT_D_6        EQU (0x40 :SHL: ADC_CALFACT_CALFACT_D_Pos)    ;!< 0x00400000

;************************  ADC Common registers  ****************************
;**************  Bit definition for ADC12_COMMON_CSR register  **************
ADC12_CSR_ADRDY_MST_Pos          EQU (0)
ADC12_CSR_ADRDY_MST_Msk          EQU (0x1 :SHL: ADC12_CSR_ADRDY_MST_Pos)     ;!< 0x00000001
ADC12_CSR_ADRDY_MST              EQU ADC12_CSR_ADRDY_MST_Msk               ;!< Master ADC ready
ADC12_CSR_ADRDY_EOSMP_MST_Pos    EQU (1)
ADC12_CSR_ADRDY_EOSMP_MST_Msk    EQU (0x1 :SHL: ADC12_CSR_ADRDY_EOSMP_MST_Pos) ;!< 0x00000002
ADC12_CSR_ADRDY_EOSMP_MST        EQU ADC12_CSR_ADRDY_EOSMP_MST_Msk         ;!< End of sampling phase flag of the master ADC
ADC12_CSR_ADRDY_EOC_MST_Pos      EQU (2)
ADC12_CSR_ADRDY_EOC_MST_Msk      EQU (0x1 :SHL: ADC12_CSR_ADRDY_EOC_MST_Pos) ;!< 0x00000004
ADC12_CSR_ADRDY_EOC_MST          EQU ADC12_CSR_ADRDY_EOC_MST_Msk           ;!< End of regular conversion of the master ADC
ADC12_CSR_ADRDY_EOS_MST_Pos      EQU (3)
ADC12_CSR_ADRDY_EOS_MST_Msk      EQU (0x1 :SHL: ADC12_CSR_ADRDY_EOS_MST_Pos) ;!< 0x00000008
ADC12_CSR_ADRDY_EOS_MST          EQU ADC12_CSR_ADRDY_EOS_MST_Msk           ;!< End of regular sequence flag of the master ADC
ADC12_CSR_ADRDY_OVR_MST_Pos      EQU (4)
ADC12_CSR_ADRDY_OVR_MST_Msk      EQU (0x1 :SHL: ADC12_CSR_ADRDY_OVR_MST_Pos) ;!< 0x00000010
ADC12_CSR_ADRDY_OVR_MST          EQU ADC12_CSR_ADRDY_OVR_MST_Msk           ;!< Overrun flag of the master ADC
ADC12_CSR_ADRDY_JEOC_MST_Pos     EQU (5)
ADC12_CSR_ADRDY_JEOC_MST_Msk     EQU (0x1 :SHL: ADC12_CSR_ADRDY_JEOC_MST_Pos) ;!< 0x00000020
ADC12_CSR_ADRDY_JEOC_MST         EQU ADC12_CSR_ADRDY_JEOC_MST_Msk          ;!< End of injected conversion of the master ADC
ADC12_CSR_ADRDY_JEOS_MST_Pos     EQU (6)
ADC12_CSR_ADRDY_JEOS_MST_Msk     EQU (0x1 :SHL: ADC12_CSR_ADRDY_JEOS_MST_Pos) ;!< 0x00000040
ADC12_CSR_ADRDY_JEOS_MST         EQU ADC12_CSR_ADRDY_JEOS_MST_Msk          ;!< End of injected sequence flag of the master ADC
ADC12_CSR_AWD1_MST_Pos           EQU (7)
ADC12_CSR_AWD1_MST_Msk           EQU (0x1 :SHL: ADC12_CSR_AWD1_MST_Pos)      ;!< 0x00000080
ADC12_CSR_AWD1_MST               EQU ADC12_CSR_AWD1_MST_Msk                ;!< Analog watchdog 1 flag of the master ADC
ADC12_CSR_AWD2_MST_Pos           EQU (8)
ADC12_CSR_AWD2_MST_Msk           EQU (0x1 :SHL: ADC12_CSR_AWD2_MST_Pos)      ;!< 0x00000100
ADC12_CSR_AWD2_MST               EQU ADC12_CSR_AWD2_MST_Msk                ;!< Analog watchdog 2 flag of the master ADC
ADC12_CSR_AWD3_MST_Pos           EQU (9)
ADC12_CSR_AWD3_MST_Msk           EQU (0x1 :SHL: ADC12_CSR_AWD3_MST_Pos)      ;!< 0x00000200
ADC12_CSR_AWD3_MST               EQU ADC12_CSR_AWD3_MST_Msk                ;!< Analog watchdog 3 flag of the master ADC
ADC12_CSR_JQOVF_MST_Pos          EQU (10)
ADC12_CSR_JQOVF_MST_Msk          EQU (0x1 :SHL: ADC12_CSR_JQOVF_MST_Pos)     ;!< 0x00000400
ADC12_CSR_JQOVF_MST              EQU ADC12_CSR_JQOVF_MST_Msk               ;!< Injected context queue overflow flag of the master ADC
ADC12_CSR_ADRDY_SLV_Pos          EQU (16)
ADC12_CSR_ADRDY_SLV_Msk          EQU (0x1 :SHL: ADC12_CSR_ADRDY_SLV_Pos)     ;!< 0x00010000
ADC12_CSR_ADRDY_SLV              EQU ADC12_CSR_ADRDY_SLV_Msk               ;!< Slave ADC ready
ADC12_CSR_ADRDY_EOSMP_SLV_Pos    EQU (17)
ADC12_CSR_ADRDY_EOSMP_SLV_Msk    EQU (0x1 :SHL: ADC12_CSR_ADRDY_EOSMP_SLV_Pos) ;!< 0x00020000
ADC12_CSR_ADRDY_EOSMP_SLV        EQU ADC12_CSR_ADRDY_EOSMP_SLV_Msk         ;!< End of sampling phase flag of the slave ADC
ADC12_CSR_ADRDY_EOC_SLV_Pos      EQU (18)
ADC12_CSR_ADRDY_EOC_SLV_Msk      EQU (0x1 :SHL: ADC12_CSR_ADRDY_EOC_SLV_Pos) ;!< 0x00040000
ADC12_CSR_ADRDY_EOC_SLV          EQU ADC12_CSR_ADRDY_EOC_SLV_Msk           ;!< End of regular conversion of the slave ADC
ADC12_CSR_ADRDY_EOS_SLV_Pos      EQU (19)
ADC12_CSR_ADRDY_EOS_SLV_Msk      EQU (0x1 :SHL: ADC12_CSR_ADRDY_EOS_SLV_Pos) ;!< 0x00080000
ADC12_CSR_ADRDY_EOS_SLV          EQU ADC12_CSR_ADRDY_EOS_SLV_Msk           ;!< End of regular sequence flag of the slave ADC
ADC12_CSR_ADRDY_OVR_SLV_Pos      EQU (20)
ADC12_CSR_ADRDY_OVR_SLV_Msk      EQU (0x1 :SHL: ADC12_CSR_ADRDY_OVR_SLV_Pos) ;!< 0x00100000
ADC12_CSR_ADRDY_OVR_SLV          EQU ADC12_CSR_ADRDY_OVR_SLV_Msk           ;!< Overrun flag of the slave ADC
ADC12_CSR_ADRDY_JEOC_SLV_Pos     EQU (21)
ADC12_CSR_ADRDY_JEOC_SLV_Msk     EQU (0x1 :SHL: ADC12_CSR_ADRDY_JEOC_SLV_Pos) ;!< 0x00200000
ADC12_CSR_ADRDY_JEOC_SLV         EQU ADC12_CSR_ADRDY_JEOC_SLV_Msk          ;!< End of injected conversion of the slave ADC
ADC12_CSR_ADRDY_JEOS_SLV_Pos     EQU (22)
ADC12_CSR_ADRDY_JEOS_SLV_Msk     EQU (0x1 :SHL: ADC12_CSR_ADRDY_JEOS_SLV_Pos) ;!< 0x00400000
ADC12_CSR_ADRDY_JEOS_SLV         EQU ADC12_CSR_ADRDY_JEOS_SLV_Msk          ;!< End of injected sequence flag of the slave ADC
ADC12_CSR_AWD1_SLV_Pos           EQU (23)
ADC12_CSR_AWD1_SLV_Msk           EQU (0x1 :SHL: ADC12_CSR_AWD1_SLV_Pos)      ;!< 0x00800000
ADC12_CSR_AWD1_SLV               EQU ADC12_CSR_AWD1_SLV_Msk                ;!< Analog watchdog 1 flag of the slave ADC
ADC12_CSR_AWD2_SLV_Pos           EQU (24)
ADC12_CSR_AWD2_SLV_Msk           EQU (0x1 :SHL: ADC12_CSR_AWD2_SLV_Pos)      ;!< 0x01000000
ADC12_CSR_AWD2_SLV               EQU ADC12_CSR_AWD2_SLV_Msk                ;!< Analog watchdog 2 flag of the slave ADC
ADC12_CSR_AWD3_SLV_Pos           EQU (25)
ADC12_CSR_AWD3_SLV_Msk           EQU (0x1 :SHL: ADC12_CSR_AWD3_SLV_Pos)      ;!< 0x02000000
ADC12_CSR_AWD3_SLV               EQU ADC12_CSR_AWD3_SLV_Msk                ;!< Analog watchdog 3 flag of the slave ADC
ADC12_CSR_JQOVF_SLV_Pos          EQU (26)
ADC12_CSR_JQOVF_SLV_Msk          EQU (0x1 :SHL: ADC12_CSR_JQOVF_SLV_Pos)     ;!< 0x04000000
ADC12_CSR_JQOVF_SLV              EQU ADC12_CSR_JQOVF_SLV_Msk               ;!< Injected context queue overflow flag of the slave ADC

;**************  Bit definition for ADC34_COMMON_CSR register  **************
ADC34_CSR_ADRDY_MST_Pos          EQU (0)
ADC34_CSR_ADRDY_MST_Msk          EQU (0x1 :SHL: ADC34_CSR_ADRDY_MST_Pos)     ;!< 0x00000001
ADC34_CSR_ADRDY_MST              EQU ADC34_CSR_ADRDY_MST_Msk               ;!< Master ADC ready
ADC34_CSR_ADRDY_EOSMP_MST_Pos    EQU (1)
ADC34_CSR_ADRDY_EOSMP_MST_Msk    EQU (0x1 :SHL: ADC34_CSR_ADRDY_EOSMP_MST_Pos) ;!< 0x00000002
ADC34_CSR_ADRDY_EOSMP_MST        EQU ADC34_CSR_ADRDY_EOSMP_MST_Msk         ;!< End of sampling phase flag of the master ADC
ADC34_CSR_ADRDY_EOC_MST_Pos      EQU (2)
ADC34_CSR_ADRDY_EOC_MST_Msk      EQU (0x1 :SHL: ADC34_CSR_ADRDY_EOC_MST_Pos) ;!< 0x00000004
ADC34_CSR_ADRDY_EOC_MST          EQU ADC34_CSR_ADRDY_EOC_MST_Msk           ;!< End of regular conversion of the master ADC
ADC34_CSR_ADRDY_EOS_MST_Pos      EQU (3)
ADC34_CSR_ADRDY_EOS_MST_Msk      EQU (0x1 :SHL: ADC34_CSR_ADRDY_EOS_MST_Pos) ;!< 0x00000008
ADC34_CSR_ADRDY_EOS_MST          EQU ADC34_CSR_ADRDY_EOS_MST_Msk           ;!< End of regular sequence flag of the master ADC
ADC34_CSR_ADRDY_OVR_MST_Pos      EQU (4)
ADC34_CSR_ADRDY_OVR_MST_Msk      EQU (0x1 :SHL: ADC34_CSR_ADRDY_OVR_MST_Pos) ;!< 0x00000010
ADC34_CSR_ADRDY_OVR_MST          EQU ADC34_CSR_ADRDY_OVR_MST_Msk           ;!< Overrun flag of the master ADC
ADC34_CSR_ADRDY_JEOC_MST_Pos     EQU (5)
ADC34_CSR_ADRDY_JEOC_MST_Msk     EQU (0x1 :SHL: ADC34_CSR_ADRDY_JEOC_MST_Pos) ;!< 0x00000020
ADC34_CSR_ADRDY_JEOC_MST         EQU ADC34_CSR_ADRDY_JEOC_MST_Msk          ;!< End of injected conversion of the master ADC
ADC34_CSR_ADRDY_JEOS_MST_Pos     EQU (6)
ADC34_CSR_ADRDY_JEOS_MST_Msk     EQU (0x1 :SHL: ADC34_CSR_ADRDY_JEOS_MST_Pos) ;!< 0x00000040
ADC34_CSR_ADRDY_JEOS_MST         EQU ADC34_CSR_ADRDY_JEOS_MST_Msk          ;!< End of injected sequence flag of the master ADC
ADC34_CSR_AWD1_MST_Pos           EQU (7)
ADC34_CSR_AWD1_MST_Msk           EQU (0x1 :SHL: ADC34_CSR_AWD1_MST_Pos)      ;!< 0x00000080
ADC34_CSR_AWD1_MST               EQU ADC34_CSR_AWD1_MST_Msk                ;!< Analog watchdog 1 flag of the master ADC
ADC34_CSR_AWD2_MST_Pos           EQU (8)
ADC34_CSR_AWD2_MST_Msk           EQU (0x1 :SHL: ADC34_CSR_AWD2_MST_Pos)      ;!< 0x00000100
ADC34_CSR_AWD2_MST               EQU ADC34_CSR_AWD2_MST_Msk                ;!< Analog watchdog 2 flag of the master ADC
ADC34_CSR_AWD3_MST_Pos           EQU (9)
ADC34_CSR_AWD3_MST_Msk           EQU (0x1 :SHL: ADC34_CSR_AWD3_MST_Pos)      ;!< 0x00000200
ADC34_CSR_AWD3_MST               EQU ADC34_CSR_AWD3_MST_Msk                ;!< Analog watchdog 3 flag of the master ADC
ADC34_CSR_JQOVF_MST_Pos          EQU (10)
ADC34_CSR_JQOVF_MST_Msk          EQU (0x1 :SHL: ADC34_CSR_JQOVF_MST_Pos)     ;!< 0x00000400
ADC34_CSR_JQOVF_MST              EQU ADC34_CSR_JQOVF_MST_Msk               ;!< Injected context queue overflow flag of the master ADC
ADC34_CSR_ADRDY_SLV_Pos          EQU (16)
ADC34_CSR_ADRDY_SLV_Msk          EQU (0x1 :SHL: ADC34_CSR_ADRDY_SLV_Pos)     ;!< 0x00010000
ADC34_CSR_ADRDY_SLV              EQU ADC34_CSR_ADRDY_SLV_Msk               ;!< Slave ADC ready
ADC34_CSR_ADRDY_EOSMP_SLV_Pos    EQU (17)
ADC34_CSR_ADRDY_EOSMP_SLV_Msk    EQU (0x1 :SHL: ADC34_CSR_ADRDY_EOSMP_SLV_Pos) ;!< 0x00020000
ADC34_CSR_ADRDY_EOSMP_SLV        EQU ADC34_CSR_ADRDY_EOSMP_SLV_Msk         ;!< End of sampling phase flag of the slave ADC
ADC34_CSR_ADRDY_EOC_SLV_Pos      EQU (18)
ADC34_CSR_ADRDY_EOC_SLV_Msk      EQU (0x1 :SHL: ADC34_CSR_ADRDY_EOC_SLV_Pos) ;!< 0x00040000
ADC34_CSR_ADRDY_EOC_SLV          EQU ADC34_CSR_ADRDY_EOC_SLV_Msk           ;!< End of regular conversion of the slave ADC
ADC34_CSR_ADRDY_EOS_SLV_Pos      EQU (19)
ADC34_CSR_ADRDY_EOS_SLV_Msk      EQU (0x1 :SHL: ADC34_CSR_ADRDY_EOS_SLV_Pos) ;!< 0x00080000
ADC34_CSR_ADRDY_EOS_SLV          EQU ADC34_CSR_ADRDY_EOS_SLV_Msk           ;!< End of regular sequence flag of the slave ADC
ADC34_CSR_ADRDY_OVR_SLV_Pos      EQU (20)
ADC34_CSR_ADRDY_OVR_SLV_Msk      EQU (0x1 :SHL: ADC12_CSR_ADRDY_OVR_SLV_Pos) ;!< 0x00100000
ADC34_CSR_ADRDY_OVR_SLV          EQU ADC12_CSR_ADRDY_OVR_SLV_Msk           ;!< Overrun flag of the slave ADC
ADC34_CSR_ADRDY_JEOC_SLV_Pos     EQU (21)
ADC34_CSR_ADRDY_JEOC_SLV_Msk     EQU (0x1 :SHL: ADC34_CSR_ADRDY_JEOC_SLV_Pos) ;!< 0x00200000
ADC34_CSR_ADRDY_JEOC_SLV         EQU ADC34_CSR_ADRDY_JEOC_SLV_Msk          ;!< End of injected conversion of the slave ADC
ADC34_CSR_ADRDY_JEOS_SLV_Pos     EQU (22)
ADC34_CSR_ADRDY_JEOS_SLV_Msk     EQU (0x1 :SHL: ADC34_CSR_ADRDY_JEOS_SLV_Pos) ;!< 0x00400000
ADC34_CSR_ADRDY_JEOS_SLV         EQU ADC34_CSR_ADRDY_JEOS_SLV_Msk          ;!< End of injected sequence flag of the slave ADC
ADC34_CSR_AWD1_SLV_Pos           EQU (23)
ADC34_CSR_AWD1_SLV_Msk           EQU (0x1 :SHL: ADC34_CSR_AWD1_SLV_Pos)      ;!< 0x00800000
ADC34_CSR_AWD1_SLV               EQU ADC34_CSR_AWD1_SLV_Msk                ;!< Analog watchdog 1 flag of the slave ADC
ADC34_CSR_AWD2_SLV_Pos           EQU (24)
ADC34_CSR_AWD2_SLV_Msk           EQU (0x1 :SHL: ADC34_CSR_AWD2_SLV_Pos)      ;!< 0x01000000
ADC34_CSR_AWD2_SLV               EQU ADC34_CSR_AWD2_SLV_Msk                ;!< Analog watchdog 2 flag of the slave ADC
ADC34_CSR_AWD3_SLV_Pos           EQU (25)
ADC34_CSR_AWD3_SLV_Msk           EQU (0x1 :SHL: ADC34_CSR_AWD3_SLV_Pos)      ;!< 0x02000000
ADC34_CSR_AWD3_SLV               EQU ADC34_CSR_AWD3_SLV_Msk                ;!< Analog watchdog 3 flag of the slave ADC
ADC34_CSR_JQOVF_SLV_Pos          EQU (26)
ADC34_CSR_JQOVF_SLV_Msk          EQU (0x1 :SHL: ADC34_CSR_JQOVF_SLV_Pos)     ;!< 0x04000000
ADC34_CSR_JQOVF_SLV              EQU ADC34_CSR_JQOVF_SLV_Msk               ;!< Injected context queue overflow flag of the slave ADC

;**************  Bit definition for ADC12_COMMON_CCR register  **************
ADC12_CCR_MULTI_Pos              EQU (0)
ADC12_CCR_MULTI_Msk              EQU (0x1F :SHL: ADC12_CCR_MULTI_Pos)        ;!< 0x0000001F
ADC12_CCR_MULTI                  EQU ADC12_CCR_MULTI_Msk                   ;!< Multi ADC mode selection
ADC12_CCR_MULTI_0                EQU (0x01 :SHL: ADC12_CCR_MULTI_Pos)        ;!< 0x00000001
ADC12_CCR_MULTI_1                EQU (0x02 :SHL: ADC12_CCR_MULTI_Pos)        ;!< 0x00000002
ADC12_CCR_MULTI_2                EQU (0x04 :SHL: ADC12_CCR_MULTI_Pos)        ;!< 0x00000004
ADC12_CCR_MULTI_3                EQU (0x08 :SHL: ADC12_CCR_MULTI_Pos)        ;!< 0x00000008
ADC12_CCR_MULTI_4                EQU (0x10 :SHL: ADC12_CCR_MULTI_Pos)        ;!< 0x00000010
ADC12_CCR_DELAY_Pos              EQU (8)
ADC12_CCR_DELAY_Msk              EQU (0xF :SHL: ADC12_CCR_DELAY_Pos)         ;!< 0x00000F00
ADC12_CCR_DELAY                  EQU ADC12_CCR_DELAY_Msk                   ;!< Delay between 2 sampling phases
ADC12_CCR_DELAY_0                EQU (0x1 :SHL: ADC12_CCR_DELAY_Pos)         ;!< 0x00000100
ADC12_CCR_DELAY_1                EQU (0x2 :SHL: ADC12_CCR_DELAY_Pos)         ;!< 0x00000200
ADC12_CCR_DELAY_2                EQU (0x4 :SHL: ADC12_CCR_DELAY_Pos)         ;!< 0x00000400
ADC12_CCR_DELAY_3                EQU (0x8 :SHL: ADC12_CCR_DELAY_Pos)         ;!< 0x00000800
ADC12_CCR_DMACFG_Pos             EQU (13)
ADC12_CCR_DMACFG_Msk             EQU (0x1 :SHL: ADC12_CCR_DMACFG_Pos)        ;!< 0x00002000
ADC12_CCR_DMACFG                 EQU ADC12_CCR_DMACFG_Msk                  ;!< DMA configuration for multi-ADC mode
ADC12_CCR_MDMA_Pos               EQU (14)
ADC12_CCR_MDMA_Msk               EQU (0x3 :SHL: ADC12_CCR_MDMA_Pos)          ;!< 0x0000C000
ADC12_CCR_MDMA                   EQU ADC12_CCR_MDMA_Msk                    ;!< DMA mode for multi-ADC mode
ADC12_CCR_MDMA_0                 EQU (0x1 :SHL: ADC12_CCR_MDMA_Pos)          ;!< 0x00004000
ADC12_CCR_MDMA_1                 EQU (0x2 :SHL: ADC12_CCR_MDMA_Pos)          ;!< 0x00008000
ADC12_CCR_CKMODE_Pos             EQU (16)
ADC12_CCR_CKMODE_Msk             EQU (0x3 :SHL: ADC12_CCR_CKMODE_Pos)        ;!< 0x00030000
ADC12_CCR_CKMODE                 EQU ADC12_CCR_CKMODE_Msk                  ;!< ADC clock mode
ADC12_CCR_CKMODE_0               EQU (0x1 :SHL: ADC12_CCR_CKMODE_Pos)        ;!< 0x00010000
ADC12_CCR_CKMODE_1               EQU (0x2 :SHL: ADC12_CCR_CKMODE_Pos)        ;!< 0x00020000
ADC12_CCR_VREFEN_Pos             EQU (22)
ADC12_CCR_VREFEN_Msk             EQU (0x1 :SHL: ADC12_CCR_VREFEN_Pos)        ;!< 0x00400000
ADC12_CCR_VREFEN                 EQU ADC12_CCR_VREFEN_Msk                  ;!< VREFINT enable
ADC12_CCR_TSEN_Pos               EQU (23)
ADC12_CCR_TSEN_Msk               EQU (0x1 :SHL: ADC12_CCR_TSEN_Pos)          ;!< 0x00800000
ADC12_CCR_TSEN                   EQU ADC12_CCR_TSEN_Msk                    ;!< Temperature sensor enable
ADC12_CCR_VBATEN_Pos             EQU (24)
ADC12_CCR_VBATEN_Msk             EQU (0x1 :SHL: ADC12_CCR_VBATEN_Pos)        ;!< 0x01000000
ADC12_CCR_VBATEN                 EQU ADC12_CCR_VBATEN_Msk                  ;!< VBAT enable

;**************  Bit definition for ADC34_COMMON_CCR register  **************
ADC34_CCR_MULTI_Pos              EQU (0)
ADC34_CCR_MULTI_Msk              EQU (0x1F :SHL: ADC34_CCR_MULTI_Pos)        ;!< 0x0000001F
ADC34_CCR_MULTI                  EQU ADC34_CCR_MULTI_Msk                   ;!< Multi ADC mode selection
ADC34_CCR_MULTI_0                EQU (0x01 :SHL: ADC34_CCR_MULTI_Pos)        ;!< 0x00000001
ADC34_CCR_MULTI_1                EQU (0x02 :SHL: ADC34_CCR_MULTI_Pos)        ;!< 0x00000002
ADC34_CCR_MULTI_2                EQU (0x04 :SHL: ADC34_CCR_MULTI_Pos)        ;!< 0x00000004
ADC34_CCR_MULTI_3                EQU (0x08 :SHL: ADC34_CCR_MULTI_Pos)        ;!< 0x00000008
ADC34_CCR_MULTI_4                EQU (0x10 :SHL: ADC34_CCR_MULTI_Pos)        ;!< 0x00000010

ADC34_CCR_DELAY_Pos              EQU (8)
ADC34_CCR_DELAY_Msk              EQU (0xF :SHL: ADC34_CCR_DELAY_Pos)         ;!< 0x00000F00
ADC34_CCR_DELAY                  EQU ADC34_CCR_DELAY_Msk                   ;!< Delay between 2 sampling phases
ADC34_CCR_DELAY_0                EQU (0x1 :SHL: ADC34_CCR_DELAY_Pos)         ;!< 0x00000100
ADC34_CCR_DELAY_1                EQU (0x2 :SHL: ADC34_CCR_DELAY_Pos)         ;!< 0x00000200
ADC34_CCR_DELAY_2                EQU (0x4 :SHL: ADC34_CCR_DELAY_Pos)         ;!< 0x00000400
ADC34_CCR_DELAY_3                EQU (0x8 :SHL: ADC34_CCR_DELAY_Pos)         ;!< 0x00000800

ADC34_CCR_DMACFG_Pos             EQU (13)
ADC34_CCR_DMACFG_Msk             EQU (0x1 :SHL: ADC34_CCR_DMACFG_Pos)        ;!< 0x00002000
ADC34_CCR_DMACFG                 EQU ADC34_CCR_DMACFG_Msk                  ;!< DMA configuration for multi-ADC mode
ADC34_CCR_MDMA_Pos               EQU (14)
ADC34_CCR_MDMA_Msk               EQU (0x3 :SHL: ADC34_CCR_MDMA_Pos)          ;!< 0x0000C000
ADC34_CCR_MDMA                   EQU ADC34_CCR_MDMA_Msk                    ;!< DMA mode for multi-ADC mode
ADC34_CCR_MDMA_0                 EQU (0x1 :SHL: ADC34_CCR_MDMA_Pos)          ;!< 0x00004000
ADC34_CCR_MDMA_1                 EQU (0x2 :SHL: ADC34_CCR_MDMA_Pos)          ;!< 0x00008000

ADC34_CCR_CKMODE_Pos             EQU (16)
ADC34_CCR_CKMODE_Msk             EQU (0x3 :SHL: ADC34_CCR_CKMODE_Pos)        ;!< 0x00030000
ADC34_CCR_CKMODE                 EQU ADC34_CCR_CKMODE_Msk                  ;!< ADC clock mode
ADC34_CCR_CKMODE_0               EQU (0x1 :SHL: ADC34_CCR_CKMODE_Pos)        ;!< 0x00010000
ADC34_CCR_CKMODE_1               EQU (0x2 :SHL: ADC34_CCR_CKMODE_Pos)        ;!< 0x00020000

ADC34_CCR_VREFEN_Pos             EQU (22)
ADC34_CCR_VREFEN_Msk             EQU (0x1 :SHL: ADC34_CCR_VREFEN_Pos)        ;!< 0x00400000
ADC34_CCR_VREFEN                 EQU ADC34_CCR_VREFEN_Msk                  ;!< VREFINT enable
ADC34_CCR_TSEN_Pos               EQU (23)
ADC34_CCR_TSEN_Msk               EQU (0x1 :SHL: ADC34_CCR_TSEN_Pos)          ;!< 0x00800000
ADC34_CCR_TSEN                   EQU ADC34_CCR_TSEN_Msk                    ;!< Temperature sensor enable
ADC34_CCR_VBATEN_Pos             EQU (24)
ADC34_CCR_VBATEN_Msk             EQU (0x1 :SHL: ADC34_CCR_VBATEN_Pos)        ;!< 0x01000000
ADC34_CCR_VBATEN                 EQU ADC34_CCR_VBATEN_Msk                  ;!< VBAT enable

;**************  Bit definition for ADC12_COMMON_CDR register  **************
ADC12_CDR_RDATA_MST_Pos          EQU (0)
ADC12_CDR_RDATA_MST_Msk          EQU (0xFFFF :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x0000FFFF
ADC12_CDR_RDATA_MST              EQU ADC12_CDR_RDATA_MST_Msk               ;!< Regular Data of the master ADC
ADC12_CDR_RDATA_MST_0            EQU (0x0001 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000001
ADC12_CDR_RDATA_MST_1            EQU (0x0002 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000002
ADC12_CDR_RDATA_MST_2            EQU (0x0004 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000004
ADC12_CDR_RDATA_MST_3            EQU (0x0008 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000008
ADC12_CDR_RDATA_MST_4            EQU (0x0010 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000010
ADC12_CDR_RDATA_MST_5            EQU (0x0020 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000020
ADC12_CDR_RDATA_MST_6            EQU (0x0040 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000040
ADC12_CDR_RDATA_MST_7            EQU (0x0080 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000080
ADC12_CDR_RDATA_MST_8            EQU (0x0100 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000100
ADC12_CDR_RDATA_MST_9            EQU (0x0200 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000200
ADC12_CDR_RDATA_MST_10           EQU (0x0400 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000400
ADC12_CDR_RDATA_MST_11           EQU (0x0800 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00000800
ADC12_CDR_RDATA_MST_12           EQU (0x1000 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00001000
ADC12_CDR_RDATA_MST_13           EQU (0x2000 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00002000
ADC12_CDR_RDATA_MST_14           EQU (0x4000 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00004000
ADC12_CDR_RDATA_MST_15           EQU (0x8000 :SHL: ADC12_CDR_RDATA_MST_Pos)  ;!< 0x00008000

ADC12_CDR_RDATA_SLV_Pos          EQU (16)
ADC12_CDR_RDATA_SLV_Msk          EQU (0xFFFF :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0xFFFF0000
ADC12_CDR_RDATA_SLV              EQU ADC12_CDR_RDATA_SLV_Msk               ;!< Regular Data of the master ADC
ADC12_CDR_RDATA_SLV_0            EQU (0x0001 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x00010000
ADC12_CDR_RDATA_SLV_1            EQU (0x0002 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x00020000
ADC12_CDR_RDATA_SLV_2            EQU (0x0004 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x00040000
ADC12_CDR_RDATA_SLV_3            EQU (0x0008 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x00080000
ADC12_CDR_RDATA_SLV_4            EQU (0x0010 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x00100000
ADC12_CDR_RDATA_SLV_5            EQU (0x0020 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x00200000
ADC12_CDR_RDATA_SLV_6            EQU (0x0040 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x00400000
ADC12_CDR_RDATA_SLV_7            EQU (0x0080 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x00800000
ADC12_CDR_RDATA_SLV_8            EQU (0x0100 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x01000000
ADC12_CDR_RDATA_SLV_9            EQU (0x0200 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x02000000
ADC12_CDR_RDATA_SLV_10           EQU (0x0400 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x04000000
ADC12_CDR_RDATA_SLV_11           EQU (0x0800 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x08000000
ADC12_CDR_RDATA_SLV_12           EQU (0x1000 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x10000000
ADC12_CDR_RDATA_SLV_13           EQU (0x2000 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x20000000
ADC12_CDR_RDATA_SLV_14           EQU (0x4000 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x40000000
ADC12_CDR_RDATA_SLV_15           EQU (0x8000 :SHL: ADC12_CDR_RDATA_SLV_Pos)  ;!< 0x80000000

;**************  Bit definition for ADC34_COMMON_CDR register  **************
ADC34_CDR_RDATA_MST_Pos          EQU (0)
ADC34_CDR_RDATA_MST_Msk          EQU (0xFFFF :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x0000FFFF
ADC34_CDR_RDATA_MST              EQU ADC34_CDR_RDATA_MST_Msk               ;!< Regular Data of the master ADC
ADC34_CDR_RDATA_MST_0            EQU (0x0001 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000001
ADC34_CDR_RDATA_MST_1            EQU (0x0002 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000002
ADC34_CDR_RDATA_MST_2            EQU (0x0004 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000004
ADC34_CDR_RDATA_MST_3            EQU (0x0008 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000008
ADC34_CDR_RDATA_MST_4            EQU (0x0010 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000010
ADC34_CDR_RDATA_MST_5            EQU (0x0020 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000020
ADC34_CDR_RDATA_MST_6            EQU (0x0040 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000040
ADC34_CDR_RDATA_MST_7            EQU (0x0080 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000080
ADC34_CDR_RDATA_MST_8            EQU (0x0100 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000100
ADC34_CDR_RDATA_MST_9            EQU (0x0200 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000200
ADC34_CDR_RDATA_MST_10           EQU (0x0400 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000400
ADC34_CDR_RDATA_MST_11           EQU (0x0800 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00000800
ADC34_CDR_RDATA_MST_12           EQU (0x1000 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00001000
ADC34_CDR_RDATA_MST_13           EQU (0x2000 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00002000
ADC34_CDR_RDATA_MST_14           EQU (0x4000 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00004000
ADC34_CDR_RDATA_MST_15           EQU (0x8000 :SHL: ADC34_CDR_RDATA_MST_Pos)  ;!< 0x00008000

ADC34_CDR_RDATA_SLV_Pos          EQU (16)
ADC34_CDR_RDATA_SLV_Msk          EQU (0xFFFF :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0xFFFF0000
ADC34_CDR_RDATA_SLV              EQU ADC34_CDR_RDATA_SLV_Msk               ;!< Regular Data of the master ADC
ADC34_CDR_RDATA_SLV_0            EQU (0x0001 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x00010000
ADC34_CDR_RDATA_SLV_1            EQU (0x0002 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x00020000
ADC34_CDR_RDATA_SLV_2            EQU (0x0004 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x00040000
ADC34_CDR_RDATA_SLV_3            EQU (0x0008 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x00080000
ADC34_CDR_RDATA_SLV_4            EQU (0x0010 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x00100000
ADC34_CDR_RDATA_SLV_5            EQU (0x0020 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x00200000
ADC34_CDR_RDATA_SLV_6            EQU (0x0040 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x00400000
ADC34_CDR_RDATA_SLV_7            EQU (0x0080 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x00800000
ADC34_CDR_RDATA_SLV_8            EQU (0x0100 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x01000000
ADC34_CDR_RDATA_SLV_9            EQU (0x0200 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x02000000
ADC34_CDR_RDATA_SLV_10           EQU (0x0400 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x04000000
ADC34_CDR_RDATA_SLV_11           EQU (0x0800 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x08000000
ADC34_CDR_RDATA_SLV_12           EQU (0x1000 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x10000000
ADC34_CDR_RDATA_SLV_13           EQU (0x2000 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x20000000
ADC34_CDR_RDATA_SLV_14           EQU (0x4000 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x40000000
ADC34_CDR_RDATA_SLV_15           EQU (0x8000 :SHL: ADC34_CDR_RDATA_SLV_Pos)  ;!< 0x80000000

;*******************  Bit definition for ADC_CSR register  ******************
ADC_CSR_ADRDY_MST_Pos          EQU (0)
ADC_CSR_ADRDY_MST_Msk          EQU (0x1 :SHL: ADC_CSR_ADRDY_MST_Pos)         ;!< 0x00000001
ADC_CSR_ADRDY_MST              EQU ADC_CSR_ADRDY_MST_Msk                   ;!< ADC multimode master ready flag
ADC_CSR_EOSMP_MST_Pos          EQU (1)
ADC_CSR_EOSMP_MST_Msk          EQU (0x1 :SHL: ADC_CSR_EOSMP_MST_Pos)         ;!< 0x00000002
ADC_CSR_EOSMP_MST              EQU ADC_CSR_EOSMP_MST_Msk                   ;!< ADC multimode master group regular end of sampling flag
ADC_CSR_EOC_MST_Pos            EQU (2)
ADC_CSR_EOC_MST_Msk            EQU (0x1 :SHL: ADC_CSR_EOC_MST_Pos)           ;!< 0x00000004
ADC_CSR_EOC_MST                EQU ADC_CSR_EOC_MST_Msk                     ;!< ADC multimode master group regular end of unitary conversion flag
ADC_CSR_EOS_MST_Pos            EQU (3)
ADC_CSR_EOS_MST_Msk            EQU (0x1 :SHL: ADC_CSR_EOS_MST_Pos)           ;!< 0x00000008
ADC_CSR_EOS_MST                EQU ADC_CSR_EOS_MST_Msk                     ;!< ADC multimode master group regular end of sequence conversions flag
ADC_CSR_OVR_MST_Pos            EQU (4)
ADC_CSR_OVR_MST_Msk            EQU (0x1 :SHL: ADC_CSR_OVR_MST_Pos)           ;!< 0x00000010
ADC_CSR_OVR_MST                EQU ADC_CSR_OVR_MST_Msk                     ;!< ADC multimode master group regular overrun flag
ADC_CSR_JEOC_MST_Pos           EQU (5)
ADC_CSR_JEOC_MST_Msk           EQU (0x1 :SHL: ADC_CSR_JEOC_MST_Pos)          ;!< 0x00000020
ADC_CSR_JEOC_MST               EQU ADC_CSR_JEOC_MST_Msk                    ;!< ADC multimode master group injected end of unitary conversion flag
ADC_CSR_JEOS_MST_Pos           EQU (6)
ADC_CSR_JEOS_MST_Msk           EQU (0x1 :SHL: ADC_CSR_JEOS_MST_Pos)          ;!< 0x00000040
ADC_CSR_JEOS_MST               EQU ADC_CSR_JEOS_MST_Msk                    ;!< ADC multimode master group injected end of sequence conversions flag
ADC_CSR_AWD1_MST_Pos           EQU (7)
ADC_CSR_AWD1_MST_Msk           EQU (0x1 :SHL: ADC_CSR_AWD1_MST_Pos)          ;!< 0x00000080
ADC_CSR_AWD1_MST               EQU ADC_CSR_AWD1_MST_Msk                    ;!< ADC multimode master analog watchdog 1 flag
ADC_CSR_AWD2_MST_Pos           EQU (8)
ADC_CSR_AWD2_MST_Msk           EQU (0x1 :SHL: ADC_CSR_AWD2_MST_Pos)          ;!< 0x00000100
ADC_CSR_AWD2_MST               EQU ADC_CSR_AWD2_MST_Msk                    ;!< ADC multimode master analog watchdog 2 flag
ADC_CSR_AWD3_MST_Pos           EQU (9)
ADC_CSR_AWD3_MST_Msk           EQU (0x1 :SHL: ADC_CSR_AWD3_MST_Pos)          ;!< 0x00000200
ADC_CSR_AWD3_MST               EQU ADC_CSR_AWD3_MST_Msk                    ;!< ADC multimode master analog watchdog 3 flag
ADC_CSR_JQOVF_MST_Pos          EQU (10)
ADC_CSR_JQOVF_MST_Msk          EQU (0x1 :SHL: ADC_CSR_JQOVF_MST_Pos)         ;!< 0x00000400
ADC_CSR_JQOVF_MST              EQU ADC_CSR_JQOVF_MST_Msk                   ;!< ADC multimode master group injected contexts queue overflow flag

ADC_CSR_ADRDY_SLV_Pos          EQU (16)
ADC_CSR_ADRDY_SLV_Msk          EQU (0x1 :SHL: ADC_CSR_ADRDY_SLV_Pos)         ;!< 0x00010000
ADC_CSR_ADRDY_SLV              EQU ADC_CSR_ADRDY_SLV_Msk                   ;!< ADC multimode slave ready flag
ADC_CSR_EOSMP_SLV_Pos          EQU (17)
ADC_CSR_EOSMP_SLV_Msk          EQU (0x1 :SHL: ADC_CSR_EOSMP_SLV_Pos)         ;!< 0x00020000
ADC_CSR_EOSMP_SLV              EQU ADC_CSR_EOSMP_SLV_Msk                   ;!< ADC multimode slave group regular end of sampling flag
ADC_CSR_EOC_SLV_Pos            EQU (18)
ADC_CSR_EOC_SLV_Msk            EQU (0x1 :SHL: ADC_CSR_EOC_SLV_Pos)           ;!< 0x00040000
ADC_CSR_EOC_SLV                EQU ADC_CSR_EOC_SLV_Msk                     ;!< ADC multimode slave group regular end of unitary conversion flag
ADC_CSR_EOS_SLV_Pos            EQU (19)
ADC_CSR_EOS_SLV_Msk            EQU (0x1 :SHL: ADC_CSR_EOS_SLV_Pos)           ;!< 0x00080000
ADC_CSR_EOS_SLV                EQU ADC_CSR_EOS_SLV_Msk                     ;!< ADC multimode slave group regular end of sequence conversions flag
ADC_CSR_OVR_SLV_Pos            EQU (20)
ADC_CSR_OVR_SLV_Msk            EQU (0x1 :SHL: ADC_CSR_OVR_SLV_Pos)           ;!< 0x00100000
ADC_CSR_OVR_SLV                EQU ADC_CSR_OVR_SLV_Msk                     ;!< ADC multimode slave group regular overrun flag
ADC_CSR_JEOC_SLV_Pos           EQU (21)
ADC_CSR_JEOC_SLV_Msk           EQU (0x1 :SHL: ADC_CSR_JEOC_SLV_Pos)          ;!< 0x00200000
ADC_CSR_JEOC_SLV               EQU ADC_CSR_JEOC_SLV_Msk                    ;!< ADC multimode slave group injected end of unitary conversion flag
ADC_CSR_JEOS_SLV_Pos           EQU (22)
ADC_CSR_JEOS_SLV_Msk           EQU (0x1 :SHL: ADC_CSR_JEOS_SLV_Pos)          ;!< 0x00400000
ADC_CSR_JEOS_SLV               EQU ADC_CSR_JEOS_SLV_Msk                    ;!< ADC multimode slave group injected end of sequence conversions flag
ADC_CSR_AWD1_SLV_Pos           EQU (23)
ADC_CSR_AWD1_SLV_Msk           EQU (0x1 :SHL: ADC_CSR_AWD1_SLV_Pos)          ;!< 0x00800000
ADC_CSR_AWD1_SLV               EQU ADC_CSR_AWD1_SLV_Msk                    ;!< ADC multimode slave analog watchdog 1 flag
ADC_CSR_AWD2_SLV_Pos           EQU (24)
ADC_CSR_AWD2_SLV_Msk           EQU (0x1 :SHL: ADC_CSR_AWD2_SLV_Pos)          ;!< 0x01000000
ADC_CSR_AWD2_SLV               EQU ADC_CSR_AWD2_SLV_Msk                    ;!< ADC multimode slave analog watchdog 2 flag
ADC_CSR_AWD3_SLV_Pos           EQU (25)
ADC_CSR_AWD3_SLV_Msk           EQU (0x1 :SHL: ADC_CSR_AWD3_SLV_Pos)          ;!< 0x02000000
ADC_CSR_AWD3_SLV               EQU ADC_CSR_AWD3_SLV_Msk                    ;!< ADC multimode slave analog watchdog 3 flag
ADC_CSR_JQOVF_SLV_Pos          EQU (26)
ADC_CSR_JQOVF_SLV_Msk          EQU (0x1 :SHL: ADC_CSR_JQOVF_SLV_Pos)         ;!< 0x04000000
ADC_CSR_JQOVF_SLV              EQU ADC_CSR_JQOVF_SLV_Msk                   ;!< ADC multimode slave group injected contexts queue overflow flag

; Legacy defines
ADC_CSR_ADRDY_EOSMP_MST   EQU ADC_CSR_EOSMP_MST
ADC_CSR_ADRDY_EOC_MST     EQU ADC_CSR_EOC_MST
ADC_CSR_ADRDY_EOS_MST     EQU ADC_CSR_EOS_MST
ADC_CSR_ADRDY_OVR_MST     EQU ADC_CSR_OVR_MST
ADC_CSR_ADRDY_JEOC_MST    EQU ADC_CSR_JEOC_MST
ADC_CSR_ADRDY_JEOS_MST    EQU ADC_CSR_JEOS_MST

ADC_CSR_ADRDY_EOSMP_SLV   EQU ADC_CSR_EOSMP_SLV
ADC_CSR_ADRDY_EOC_SLV     EQU ADC_CSR_EOC_SLV
ADC_CSR_ADRDY_EOS_SLV     EQU ADC_CSR_EOS_SLV
ADC_CSR_ADRDY_OVR_SLV     EQU ADC_CSR_OVR_SLV
ADC_CSR_ADRDY_JEOC_SLV    EQU ADC_CSR_JEOC_SLV
ADC_CSR_ADRDY_JEOS_SLV    EQU ADC_CSR_JEOS_SLV

;*******************  Bit definition for ADC_CCR register  ******************
ADC_CCR_DUAL_Pos               EQU (0)
ADC_CCR_DUAL_Msk               EQU (0x1F :SHL: ADC_CCR_DUAL_Pos)             ;!< 0x0000001F
ADC_CCR_DUAL                   EQU ADC_CCR_DUAL_Msk                        ;!< ADC multimode mode selection
ADC_CCR_DUAL_0                 EQU (0x01 :SHL: ADC_CCR_DUAL_Pos)             ;!< 0x00000001
ADC_CCR_DUAL_1                 EQU (0x02 :SHL: ADC_CCR_DUAL_Pos)             ;!< 0x00000002
ADC_CCR_DUAL_2                 EQU (0x04 :SHL: ADC_CCR_DUAL_Pos)             ;!< 0x00000004
ADC_CCR_DUAL_3                 EQU (0x08 :SHL: ADC_CCR_DUAL_Pos)             ;!< 0x00000008
ADC_CCR_DUAL_4                 EQU (0x10 :SHL: ADC_CCR_DUAL_Pos)             ;!< 0x00000010

ADC_CCR_DELAY_Pos              EQU (8)
ADC_CCR_DELAY_Msk              EQU (0xF :SHL: ADC_CCR_DELAY_Pos)             ;!< 0x00000F00
ADC_CCR_DELAY                  EQU ADC_CCR_DELAY_Msk                       ;!< ADC multimode delay between 2 sampling phases
ADC_CCR_DELAY_0                EQU (0x1 :SHL: ADC_CCR_DELAY_Pos)             ;!< 0x00000100
ADC_CCR_DELAY_1                EQU (0x2 :SHL: ADC_CCR_DELAY_Pos)             ;!< 0x00000200
ADC_CCR_DELAY_2                EQU (0x4 :SHL: ADC_CCR_DELAY_Pos)             ;!< 0x00000400
ADC_CCR_DELAY_3                EQU (0x8 :SHL: ADC_CCR_DELAY_Pos)             ;!< 0x00000800

ADC_CCR_DMACFG_Pos             EQU (13)
ADC_CCR_DMACFG_Msk             EQU (0x1 :SHL: ADC_CCR_DMACFG_Pos)            ;!< 0x00002000
ADC_CCR_DMACFG                 EQU ADC_CCR_DMACFG_Msk                      ;!< ADC multimode DMA transfer configuration

ADC_CCR_MDMA_Pos               EQU (14)
ADC_CCR_MDMA_Msk               EQU (0x3 :SHL: ADC_CCR_MDMA_Pos)              ;!< 0x0000C000
ADC_CCR_MDMA                   EQU ADC_CCR_MDMA_Msk                        ;!< ADC multimode DMA transfer enable
ADC_CCR_MDMA_0                 EQU (0x1 :SHL: ADC_CCR_MDMA_Pos)              ;!< 0x00004000
ADC_CCR_MDMA_1                 EQU (0x2 :SHL: ADC_CCR_MDMA_Pos)              ;!< 0x00008000

ADC_CCR_CKMODE_Pos             EQU (16)
ADC_CCR_CKMODE_Msk             EQU (0x3 :SHL: ADC_CCR_CKMODE_Pos)            ;!< 0x00030000
ADC_CCR_CKMODE                 EQU ADC_CCR_CKMODE_Msk                      ;!< ADC common clock source and prescaler (prescaler only for clock source synchronous)
ADC_CCR_CKMODE_0               EQU (0x1 :SHL: ADC_CCR_CKMODE_Pos)            ;!< 0x00010000
ADC_CCR_CKMODE_1               EQU (0x2 :SHL: ADC_CCR_CKMODE_Pos)            ;!< 0x00020000

ADC_CCR_VREFEN_Pos             EQU (22)
ADC_CCR_VREFEN_Msk             EQU (0x1 :SHL: ADC_CCR_VREFEN_Pos)            ;!< 0x00400000
ADC_CCR_VREFEN                 EQU ADC_CCR_VREFEN_Msk                      ;!< ADC internal path to VrefInt enable
ADC_CCR_TSEN_Pos               EQU (23)
ADC_CCR_TSEN_Msk               EQU (0x1 :SHL: ADC_CCR_TSEN_Pos)              ;!< 0x00800000
ADC_CCR_TSEN                   EQU ADC_CCR_TSEN_Msk                        ;!< ADC internal path to temperature sensor enable
ADC_CCR_VBATEN_Pos             EQU (24)
ADC_CCR_VBATEN_Msk             EQU (0x1 :SHL: ADC_CCR_VBATEN_Pos)            ;!< 0x01000000
ADC_CCR_VBATEN                 EQU ADC_CCR_VBATEN_Msk                      ;!< ADC internal path to battery voltage enable

; Legacy defines
ADC_CCR_MULTI           EQU (ADC_CCR_DUAL)
ADC_CCR_MULTI_0         EQU (ADC_CCR_DUAL_0)
ADC_CCR_MULTI_1         EQU (ADC_CCR_DUAL_1)
ADC_CCR_MULTI_2         EQU (ADC_CCR_DUAL_2)
ADC_CCR_MULTI_3         EQU (ADC_CCR_DUAL_3)
ADC_CCR_MULTI_4         EQU (ADC_CCR_DUAL_4)

;*******************  Bit definition for ADC_CDR register  ******************
ADC_CDR_RDATA_MST_Pos          EQU (0)
ADC_CDR_RDATA_MST_Msk          EQU (0xFFFF :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x0000FFFF
ADC_CDR_RDATA_MST              EQU ADC_CDR_RDATA_MST_Msk                   ;!< ADC multimode master group regular conversion data
ADC_CDR_RDATA_MST_0            EQU (0x0001 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000001
ADC_CDR_RDATA_MST_1            EQU (0x0002 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000002
ADC_CDR_RDATA_MST_2            EQU (0x0004 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000004
ADC_CDR_RDATA_MST_3            EQU (0x0008 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000008
ADC_CDR_RDATA_MST_4            EQU (0x0010 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000010
ADC_CDR_RDATA_MST_5            EQU (0x0020 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000020
ADC_CDR_RDATA_MST_6            EQU (0x0040 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000040
ADC_CDR_RDATA_MST_7            EQU (0x0080 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000080
ADC_CDR_RDATA_MST_8            EQU (0x0100 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000100
ADC_CDR_RDATA_MST_9            EQU (0x0200 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000200
ADC_CDR_RDATA_MST_10           EQU (0x0400 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000400
ADC_CDR_RDATA_MST_11           EQU (0x0800 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00000800
ADC_CDR_RDATA_MST_12           EQU (0x1000 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00001000
ADC_CDR_RDATA_MST_13           EQU (0x2000 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00002000
ADC_CDR_RDATA_MST_14           EQU (0x4000 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00004000
ADC_CDR_RDATA_MST_15           EQU (0x8000 :SHL: ADC_CDR_RDATA_MST_Pos)      ;!< 0x00008000

ADC_CDR_RDATA_SLV_Pos          EQU (16)
ADC_CDR_RDATA_SLV_Msk          EQU (0xFFFF :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0xFFFF0000
ADC_CDR_RDATA_SLV              EQU ADC_CDR_RDATA_SLV_Msk                   ;!< ADC multimode slave group regular conversion data
ADC_CDR_RDATA_SLV_0            EQU (0x0001 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x00010000
ADC_CDR_RDATA_SLV_1            EQU (0x0002 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x00020000
ADC_CDR_RDATA_SLV_2            EQU (0x0004 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x00040000
ADC_CDR_RDATA_SLV_3            EQU (0x0008 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x00080000
ADC_CDR_RDATA_SLV_4            EQU (0x0010 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x00100000
ADC_CDR_RDATA_SLV_5            EQU (0x0020 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x00200000
ADC_CDR_RDATA_SLV_6            EQU (0x0040 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x00400000
ADC_CDR_RDATA_SLV_7            EQU (0x0080 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x00800000
ADC_CDR_RDATA_SLV_8            EQU (0x0100 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x01000000
ADC_CDR_RDATA_SLV_9            EQU (0x0200 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x02000000
ADC_CDR_RDATA_SLV_10           EQU (0x0400 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x04000000
ADC_CDR_RDATA_SLV_11           EQU (0x0800 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x08000000
ADC_CDR_RDATA_SLV_12           EQU (0x1000 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x10000000
ADC_CDR_RDATA_SLV_13           EQU (0x2000 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x20000000
ADC_CDR_RDATA_SLV_14           EQU (0x4000 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x40000000
ADC_CDR_RDATA_SLV_15           EQU (0x8000 :SHL: ADC_CDR_RDATA_SLV_Pos)      ;!< 0x80000000

;****************************************************************************
;
;                      Analog Comparators (COMP)
;
;****************************************************************************

;*********************  Bit definition for COMP1_CSR register  **************
COMP1_CSR_COMP1EN_Pos            EQU (0)
COMP1_CSR_COMP1EN_Msk            EQU (0x1 :SHL: COMP1_CSR_COMP1EN_Pos)       ;!< 0x00000001
COMP1_CSR_COMP1EN                EQU COMP1_CSR_COMP1EN_Msk                 ;!< COMP1 enable
COMP1_CSR_COMP1SW1_Pos           EQU (1)
COMP1_CSR_COMP1SW1_Msk           EQU (0x1 :SHL: COMP1_CSR_COMP1SW1_Pos)      ;!< 0x00000002
COMP1_CSR_COMP1SW1               EQU COMP1_CSR_COMP1SW1_Msk                ;!< COMP1 SW1 switch control
; Legacy defines
COMP_CSR_COMP1SW1                EQU COMP1_CSR_COMP1SW1
COMP1_CSR_COMP1INSEL_Pos         EQU (4)
COMP1_CSR_COMP1INSEL_Msk         EQU (0x7 :SHL: COMP1_CSR_COMP1INSEL_Pos)    ;!< 0x00000070
COMP1_CSR_COMP1INSEL             EQU COMP1_CSR_COMP1INSEL_Msk              ;!< COMP1 inverting input select
COMP1_CSR_COMP1INSEL_0           EQU (0x1 :SHL: COMP1_CSR_COMP1INSEL_Pos)    ;!< 0x00000010
COMP1_CSR_COMP1INSEL_1           EQU (0x2 :SHL: COMP1_CSR_COMP1INSEL_Pos)    ;!< 0x00000020
COMP1_CSR_COMP1INSEL_2           EQU (0x4 :SHL: COMP1_CSR_COMP1INSEL_Pos)    ;!< 0x00000040
COMP1_CSR_COMP1OUTSEL_Pos        EQU (10)
COMP1_CSR_COMP1OUTSEL_Msk        EQU (0xF :SHL: COMP1_CSR_COMP1OUTSEL_Pos)   ;!< 0x00003C00
COMP1_CSR_COMP1OUTSEL            EQU COMP1_CSR_COMP1OUTSEL_Msk             ;!< COMP1 output select
COMP1_CSR_COMP1OUTSEL_0          EQU (0x1 :SHL: COMP1_CSR_COMP1OUTSEL_Pos)   ;!< 0x00000400
COMP1_CSR_COMP1OUTSEL_1          EQU (0x2 :SHL: COMP1_CSR_COMP1OUTSEL_Pos)   ;!< 0x00000800
COMP1_CSR_COMP1OUTSEL_2          EQU (0x4 :SHL: COMP1_CSR_COMP1OUTSEL_Pos)   ;!< 0x00001000
COMP1_CSR_COMP1OUTSEL_3          EQU (0x8 :SHL: COMP1_CSR_COMP1OUTSEL_Pos)   ;!< 0x00002000
COMP1_CSR_COMP1POL_Pos           EQU (15)
COMP1_CSR_COMP1POL_Msk           EQU (0x1 :SHL: COMP1_CSR_COMP1POL_Pos)      ;!< 0x00008000
COMP1_CSR_COMP1POL               EQU COMP1_CSR_COMP1POL_Msk                ;!< COMP1 output polarity
COMP1_CSR_COMP1BLANKING_Pos      EQU (18)
COMP1_CSR_COMP1BLANKING_Msk      EQU (0x3 :SHL: COMP1_CSR_COMP1BLANKING_Pos) ;!< 0x000C0000
COMP1_CSR_COMP1BLANKING          EQU COMP1_CSR_COMP1BLANKING_Msk           ;!< COMP1 blanking
COMP1_CSR_COMP1BLANKING_0        EQU (0x1 :SHL: COMP1_CSR_COMP1BLANKING_Pos) ;!< 0x00040000
COMP1_CSR_COMP1BLANKING_1        EQU (0x2 :SHL: COMP1_CSR_COMP1BLANKING_Pos) ;!< 0x00080000
COMP1_CSR_COMP1BLANKING_2        EQU (0x4 :SHL: COMP1_CSR_COMP1BLANKING_Pos) ;!< 0x00100000
COMP1_CSR_COMP1OUT_Pos           EQU (30)
COMP1_CSR_COMP1OUT_Msk           EQU (0x1 :SHL: COMP1_CSR_COMP1OUT_Pos)      ;!< 0x40000000
COMP1_CSR_COMP1OUT               EQU COMP1_CSR_COMP1OUT_Msk                ;!< COMP1 output level
COMP1_CSR_COMP1LOCK_Pos          EQU (31)
COMP1_CSR_COMP1LOCK_Msk          EQU (0x1 :SHL: COMP1_CSR_COMP1LOCK_Pos)     ;!< 0x80000000
COMP1_CSR_COMP1LOCK              EQU COMP1_CSR_COMP1LOCK_Msk               ;!< COMP1 lock

;*********************  Bit definition for COMP2_CSR register  **************
COMP2_CSR_COMP2EN_Pos            EQU (0)
COMP2_CSR_COMP2EN_Msk            EQU (0x1 :SHL: COMP2_CSR_COMP2EN_Pos)       ;!< 0x00000001
COMP2_CSR_COMP2EN                EQU COMP2_CSR_COMP2EN_Msk                 ;!< COMP2 enable
COMP2_CSR_COMP2INSEL_Pos         EQU (4)
COMP2_CSR_COMP2INSEL_Msk         EQU (0x7 :SHL: COMP2_CSR_COMP2INSEL_Pos)    ;!< 0x00000070
COMP2_CSR_COMP2INSEL             EQU COMP2_CSR_COMP2INSEL_Msk              ;!< COMP2 inverting input select
COMP2_CSR_COMP2INSEL_0           EQU (0x00000010)                         ;!< COMP2 inverting input select bit 0
COMP2_CSR_COMP2INSEL_1           EQU (0x00000020)                         ;!< COMP2 inverting input select bit 1
COMP2_CSR_COMP2INSEL_2           EQU (0x00000040)                         ;!< COMP2 inverting input select bit 2
COMP2_CSR_COMP2OUTSEL_Pos        EQU (10)
COMP2_CSR_COMP2OUTSEL_Msk        EQU (0xF :SHL: COMP2_CSR_COMP2OUTSEL_Pos)   ;!< 0x00003C00
COMP2_CSR_COMP2OUTSEL            EQU COMP2_CSR_COMP2OUTSEL_Msk             ;!< COMP2 output select
COMP2_CSR_COMP2OUTSEL_0          EQU (0x1 :SHL: COMP2_CSR_COMP2OUTSEL_Pos)   ;!< 0x00000400
COMP2_CSR_COMP2OUTSEL_1          EQU (0x2 :SHL: COMP2_CSR_COMP2OUTSEL_Pos)   ;!< 0x00000800
COMP2_CSR_COMP2OUTSEL_2          EQU (0x4 :SHL: COMP2_CSR_COMP2OUTSEL_Pos)   ;!< 0x00001000
COMP2_CSR_COMP2OUTSEL_3          EQU (0x8 :SHL: COMP2_CSR_COMP2OUTSEL_Pos)   ;!< 0x00002000
COMP2_CSR_COMP2POL_Pos           EQU (15)
COMP2_CSR_COMP2POL_Msk           EQU (0x1 :SHL: COMP2_CSR_COMP2POL_Pos)      ;!< 0x00008000
COMP2_CSR_COMP2POL               EQU COMP2_CSR_COMP2POL_Msk                ;!< COMP2 output polarity
COMP2_CSR_COMP2BLANKING_Pos      EQU (18)
COMP2_CSR_COMP2BLANKING_Msk      EQU (0x3 :SHL: COMP2_CSR_COMP2BLANKING_Pos) ;!< 0x000C0000
COMP2_CSR_COMP2BLANKING          EQU COMP2_CSR_COMP2BLANKING_Msk           ;!< COMP2 blanking
COMP2_CSR_COMP2BLANKING_0        EQU (0x1 :SHL: COMP2_CSR_COMP2BLANKING_Pos) ;!< 0x00040000
COMP2_CSR_COMP2BLANKING_1        EQU (0x2 :SHL: COMP2_CSR_COMP2BLANKING_Pos) ;!< 0x00080000
COMP2_CSR_COMP2BLANKING_2        EQU (0x4 :SHL: COMP2_CSR_COMP2BLANKING_Pos) ;!< 0x00100000
COMP2_CSR_COMP2OUT_Pos           EQU (30)
COMP2_CSR_COMP2OUT_Msk           EQU (0x1 :SHL: COMP2_CSR_COMP2OUT_Pos)      ;!< 0x40000000
COMP2_CSR_COMP2OUT               EQU COMP2_CSR_COMP2OUT_Msk                ;!< COMP2 output level
COMP2_CSR_COMP2LOCK_Pos          EQU (31)
COMP2_CSR_COMP2LOCK_Msk          EQU (0x1 :SHL: COMP2_CSR_COMP2LOCK_Pos)     ;!< 0x80000000
COMP2_CSR_COMP2LOCK              EQU COMP2_CSR_COMP2LOCK_Msk               ;!< COMP2 lock

;*********************  Bit definition for COMP3_CSR register  **************
COMP3_CSR_COMP3EN_Pos            EQU (0)
COMP3_CSR_COMP3EN_Msk            EQU (0x1 :SHL: COMP3_CSR_COMP3EN_Pos)       ;!< 0x00000001
COMP3_CSR_COMP3EN                EQU COMP3_CSR_COMP3EN_Msk                 ;!< COMP3 enable
COMP3_CSR_COMP3INSEL_Pos         EQU (4)
COMP3_CSR_COMP3INSEL_Msk         EQU (0x7 :SHL: COMP3_CSR_COMP3INSEL_Pos)    ;!< 0x00000070
COMP3_CSR_COMP3INSEL             EQU COMP3_CSR_COMP3INSEL_Msk              ;!< COMP3 inverting input select
COMP3_CSR_COMP3INSEL_0           EQU (0x1 :SHL: COMP3_CSR_COMP3INSEL_Pos)    ;!< 0x00000010
COMP3_CSR_COMP3INSEL_1           EQU (0x2 :SHL: COMP3_CSR_COMP3INSEL_Pos)    ;!< 0x00000020
COMP3_CSR_COMP3INSEL_2           EQU (0x4 :SHL: COMP3_CSR_COMP3INSEL_Pos)    ;!< 0x00000040
COMP3_CSR_COMP3OUTSEL_Pos        EQU (10)
COMP3_CSR_COMP3OUTSEL_Msk        EQU (0xF :SHL: COMP3_CSR_COMP3OUTSEL_Pos)   ;!< 0x00003C00
COMP3_CSR_COMP3OUTSEL            EQU COMP3_CSR_COMP3OUTSEL_Msk             ;!< COMP3 output select
COMP3_CSR_COMP3OUTSEL_0          EQU (0x1 :SHL: COMP3_CSR_COMP3OUTSEL_Pos)   ;!< 0x00000400
COMP3_CSR_COMP3OUTSEL_1          EQU (0x2 :SHL: COMP3_CSR_COMP3OUTSEL_Pos)   ;!< 0x00000800
COMP3_CSR_COMP3OUTSEL_2          EQU (0x4 :SHL: COMP3_CSR_COMP3OUTSEL_Pos)   ;!< 0x00001000
COMP3_CSR_COMP3OUTSEL_3          EQU (0x8 :SHL: COMP3_CSR_COMP3OUTSEL_Pos)   ;!< 0x00002000
COMP3_CSR_COMP3POL_Pos           EQU (15)
COMP3_CSR_COMP3POL_Msk           EQU (0x1 :SHL: COMP3_CSR_COMP3POL_Pos)      ;!< 0x00008000
COMP3_CSR_COMP3POL               EQU COMP3_CSR_COMP3POL_Msk                ;!< COMP3 output polarity
COMP3_CSR_COMP3BLANKING_Pos      EQU (18)
COMP3_CSR_COMP3BLANKING_Msk      EQU (0x3 :SHL: COMP3_CSR_COMP3BLANKING_Pos) ;!< 0x000C0000
COMP3_CSR_COMP3BLANKING          EQU COMP3_CSR_COMP3BLANKING_Msk           ;!< COMP3 blanking
COMP3_CSR_COMP3BLANKING_0        EQU (0x1 :SHL: COMP3_CSR_COMP3BLANKING_Pos) ;!< 0x00040000
COMP3_CSR_COMP3BLANKING_1        EQU (0x2 :SHL: COMP3_CSR_COMP3BLANKING_Pos) ;!< 0x00080000
COMP3_CSR_COMP3BLANKING_2        EQU (0x4 :SHL: COMP3_CSR_COMP3BLANKING_Pos) ;!< 0x00100000
COMP3_CSR_COMP3OUT_Pos           EQU (30)
COMP3_CSR_COMP3OUT_Msk           EQU (0x1 :SHL: COMP3_CSR_COMP3OUT_Pos)      ;!< 0x40000000
COMP3_CSR_COMP3OUT               EQU COMP3_CSR_COMP3OUT_Msk                ;!< COMP3 output level
COMP3_CSR_COMP3LOCK_Pos          EQU (31)
COMP3_CSR_COMP3LOCK_Msk          EQU (0x1 :SHL: COMP3_CSR_COMP3LOCK_Pos)     ;!< 0x80000000
COMP3_CSR_COMP3LOCK              EQU COMP3_CSR_COMP3LOCK_Msk               ;!< COMP3 lock

;*********************  Bit definition for COMP4_CSR register  **************
COMP4_CSR_COMP4EN_Pos            EQU (0)
COMP4_CSR_COMP4EN_Msk            EQU (0x1 :SHL: COMP4_CSR_COMP4EN_Pos)       ;!< 0x00000001
COMP4_CSR_COMP4EN                EQU COMP4_CSR_COMP4EN_Msk                 ;!< COMP4 enable
COMP4_CSR_COMP4INSEL_Pos         EQU (4)
COMP4_CSR_COMP4INSEL_Msk         EQU (0x7 :SHL: COMP4_CSR_COMP4INSEL_Pos)    ;!< 0x00000070
COMP4_CSR_COMP4INSEL             EQU COMP4_CSR_COMP4INSEL_Msk              ;!< COMP4 inverting input select
COMP4_CSR_COMP4INSEL_0           EQU (0x00000010)                         ;!< COMP4 inverting input select bit 0
COMP4_CSR_COMP4INSEL_1           EQU (0x00000020)                         ;!< COMP4 inverting input select bit 1
COMP4_CSR_COMP4INSEL_2           EQU (0x00000040)                         ;!< COMP4 inverting input select bit 2
COMP4_CSR_COMP4OUTSEL_Pos        EQU (10)
COMP4_CSR_COMP4OUTSEL_Msk        EQU (0xF :SHL: COMP4_CSR_COMP4OUTSEL_Pos)   ;!< 0x00003C00
COMP4_CSR_COMP4OUTSEL            EQU COMP4_CSR_COMP4OUTSEL_Msk             ;!< COMP4 output select
COMP4_CSR_COMP4OUTSEL_0          EQU (0x1 :SHL: COMP4_CSR_COMP4OUTSEL_Pos)   ;!< 0x00000400
COMP4_CSR_COMP4OUTSEL_1          EQU (0x2 :SHL: COMP4_CSR_COMP4OUTSEL_Pos)   ;!< 0x00000800
COMP4_CSR_COMP4OUTSEL_2          EQU (0x4 :SHL: COMP4_CSR_COMP4OUTSEL_Pos)   ;!< 0x00001000
COMP4_CSR_COMP4OUTSEL_3          EQU (0x8 :SHL: COMP4_CSR_COMP4OUTSEL_Pos)   ;!< 0x00002000
COMP4_CSR_COMP4POL_Pos           EQU (15)
COMP4_CSR_COMP4POL_Msk           EQU (0x1 :SHL: COMP4_CSR_COMP4POL_Pos)      ;!< 0x00008000
COMP4_CSR_COMP4POL               EQU COMP4_CSR_COMP4POL_Msk                ;!< COMP4 output polarity
COMP4_CSR_COMP4BLANKING_Pos      EQU (18)
COMP4_CSR_COMP4BLANKING_Msk      EQU (0x3 :SHL: COMP4_CSR_COMP4BLANKING_Pos) ;!< 0x000C0000
COMP4_CSR_COMP4BLANKING          EQU COMP4_CSR_COMP4BLANKING_Msk           ;!< COMP4 blanking
COMP4_CSR_COMP4BLANKING_0        EQU (0x1 :SHL: COMP4_CSR_COMP4BLANKING_Pos) ;!< 0x00040000
COMP4_CSR_COMP4BLANKING_1        EQU (0x2 :SHL: COMP4_CSR_COMP4BLANKING_Pos) ;!< 0x00080000
COMP4_CSR_COMP4BLANKING_2        EQU (0x4 :SHL: COMP4_CSR_COMP4BLANKING_Pos) ;!< 0x00100000
COMP4_CSR_COMP4OUT_Pos           EQU (30)
COMP4_CSR_COMP4OUT_Msk           EQU (0x1 :SHL: COMP4_CSR_COMP4OUT_Pos)      ;!< 0x40000000
COMP4_CSR_COMP4OUT               EQU COMP4_CSR_COMP4OUT_Msk                ;!< COMP4 output level
COMP4_CSR_COMP4LOCK_Pos          EQU (31)
COMP4_CSR_COMP4LOCK_Msk          EQU (0x1 :SHL: COMP4_CSR_COMP4LOCK_Pos)     ;!< 0x80000000
COMP4_CSR_COMP4LOCK              EQU COMP4_CSR_COMP4LOCK_Msk               ;!< COMP4 lock

;*********************  Bit definition for COMP5_CSR register  **************
COMP5_CSR_COMP5EN_Pos            EQU (0)
COMP5_CSR_COMP5EN_Msk            EQU (0x1 :SHL: COMP5_CSR_COMP5EN_Pos)       ;!< 0x00000001
COMP5_CSR_COMP5EN                EQU COMP5_CSR_COMP5EN_Msk                 ;!< COMP5 enable
COMP5_CSR_COMP5INSEL_Pos         EQU (4)
COMP5_CSR_COMP5INSEL_Msk         EQU (0x7 :SHL: COMP5_CSR_COMP5INSEL_Pos)    ;!< 0x00000070
COMP5_CSR_COMP5INSEL             EQU COMP5_CSR_COMP5INSEL_Msk              ;!< COMP5 inverting input select
COMP5_CSR_COMP5INSEL_0           EQU (0x1 :SHL: COMP5_CSR_COMP5INSEL_Pos)    ;!< 0x00000010
COMP5_CSR_COMP5INSEL_1           EQU (0x2 :SHL: COMP5_CSR_COMP5INSEL_Pos)    ;!< 0x00000020
COMP5_CSR_COMP5INSEL_2           EQU (0x4 :SHL: COMP5_CSR_COMP5INSEL_Pos)    ;!< 0x00000040
COMP5_CSR_COMP5OUTSEL_Pos        EQU (10)
COMP5_CSR_COMP5OUTSEL_Msk        EQU (0xF :SHL: COMP5_CSR_COMP5OUTSEL_Pos)   ;!< 0x00003C00
COMP5_CSR_COMP5OUTSEL            EQU COMP5_CSR_COMP5OUTSEL_Msk             ;!< COMP5 output select
COMP5_CSR_COMP5OUTSEL_0          EQU (0x1 :SHL: COMP5_CSR_COMP5OUTSEL_Pos)   ;!< 0x00000400
COMP5_CSR_COMP5OUTSEL_1          EQU (0x2 :SHL: COMP5_CSR_COMP5OUTSEL_Pos)   ;!< 0x00000800
COMP5_CSR_COMP5OUTSEL_2          EQU (0x4 :SHL: COMP5_CSR_COMP5OUTSEL_Pos)   ;!< 0x00001000
COMP5_CSR_COMP5OUTSEL_3          EQU (0x8 :SHL: COMP5_CSR_COMP5OUTSEL_Pos)   ;!< 0x00002000
COMP5_CSR_COMP5POL_Pos           EQU (15)
COMP5_CSR_COMP5POL_Msk           EQU (0x1 :SHL: COMP5_CSR_COMP5POL_Pos)      ;!< 0x00008000
COMP5_CSR_COMP5POL               EQU COMP5_CSR_COMP5POL_Msk                ;!< COMP5 output polarity
COMP5_CSR_COMP5BLANKING_Pos      EQU (18)
COMP5_CSR_COMP5BLANKING_Msk      EQU (0x3 :SHL: COMP5_CSR_COMP5BLANKING_Pos) ;!< 0x000C0000
COMP5_CSR_COMP5BLANKING          EQU COMP5_CSR_COMP5BLANKING_Msk           ;!< COMP5 blanking
COMP5_CSR_COMP5BLANKING_0        EQU (0x1 :SHL: COMP5_CSR_COMP5BLANKING_Pos) ;!< 0x00040000
COMP5_CSR_COMP5BLANKING_1        EQU (0x2 :SHL: COMP5_CSR_COMP5BLANKING_Pos) ;!< 0x00080000
COMP5_CSR_COMP5BLANKING_2        EQU (0x4 :SHL: COMP5_CSR_COMP5BLANKING_Pos) ;!< 0x00100000
COMP5_CSR_COMP5OUT_Pos           EQU (30)
COMP5_CSR_COMP5OUT_Msk           EQU (0x1 :SHL: COMP5_CSR_COMP5OUT_Pos)      ;!< 0x40000000
COMP5_CSR_COMP5OUT               EQU COMP5_CSR_COMP5OUT_Msk                ;!< COMP5 output level
COMP5_CSR_COMP5LOCK_Pos          EQU (31)
COMP5_CSR_COMP5LOCK_Msk          EQU (0x1 :SHL: COMP5_CSR_COMP5LOCK_Pos)     ;!< 0x80000000
COMP5_CSR_COMP5LOCK              EQU COMP5_CSR_COMP5LOCK_Msk               ;!< COMP5 lock

;*********************  Bit definition for COMP6_CSR register  **************
COMP6_CSR_COMP6EN_Pos            EQU (0)
COMP6_CSR_COMP6EN_Msk            EQU (0x1 :SHL: COMP6_CSR_COMP6EN_Pos)       ;!< 0x00000001
COMP6_CSR_COMP6EN                EQU COMP6_CSR_COMP6EN_Msk                 ;!< COMP6 enable
COMP6_CSR_COMP6INSEL_Pos         EQU (4)
COMP6_CSR_COMP6INSEL_Msk         EQU (0x7 :SHL: COMP6_CSR_COMP6INSEL_Pos)    ;!< 0x00000070
COMP6_CSR_COMP6INSEL             EQU COMP6_CSR_COMP6INSEL_Msk              ;!< COMP6 inverting input select
COMP6_CSR_COMP6INSEL_0           EQU (0x00000010)                         ;!< COMP6 inverting input select bit 0
COMP6_CSR_COMP6INSEL_1           EQU (0x00000020)                         ;!< COMP6 inverting input select bit 1
COMP6_CSR_COMP6INSEL_2           EQU (0x00000040)                         ;!< COMP6 inverting input select bit 2
COMP6_CSR_COMP6OUTSEL_Pos        EQU (10)
COMP6_CSR_COMP6OUTSEL_Msk        EQU (0xF :SHL: COMP6_CSR_COMP6OUTSEL_Pos)   ;!< 0x00003C00
COMP6_CSR_COMP6OUTSEL            EQU COMP6_CSR_COMP6OUTSEL_Msk             ;!< COMP6 output select
COMP6_CSR_COMP6OUTSEL_0          EQU (0x1 :SHL: COMP6_CSR_COMP6OUTSEL_Pos)   ;!< 0x00000400
COMP6_CSR_COMP6OUTSEL_1          EQU (0x2 :SHL: COMP6_CSR_COMP6OUTSEL_Pos)   ;!< 0x00000800
COMP6_CSR_COMP6OUTSEL_2          EQU (0x4 :SHL: COMP6_CSR_COMP6OUTSEL_Pos)   ;!< 0x00001000
COMP6_CSR_COMP6OUTSEL_3          EQU (0x8 :SHL: COMP6_CSR_COMP6OUTSEL_Pos)   ;!< 0x00002000
COMP6_CSR_COMP6POL_Pos           EQU (15)
COMP6_CSR_COMP6POL_Msk           EQU (0x1 :SHL: COMP6_CSR_COMP6POL_Pos)      ;!< 0x00008000
COMP6_CSR_COMP6POL               EQU COMP6_CSR_COMP6POL_Msk                ;!< COMP6 output polarity
COMP6_CSR_COMP6BLANKING_Pos      EQU (18)
COMP6_CSR_COMP6BLANKING_Msk      EQU (0x3 :SHL: COMP6_CSR_COMP6BLANKING_Pos) ;!< 0x000C0000
COMP6_CSR_COMP6BLANKING          EQU COMP6_CSR_COMP6BLANKING_Msk           ;!< COMP6 blanking
COMP6_CSR_COMP6BLANKING_0        EQU (0x1 :SHL: COMP6_CSR_COMP6BLANKING_Pos) ;!< 0x00040000
COMP6_CSR_COMP6BLANKING_1        EQU (0x2 :SHL: COMP6_CSR_COMP6BLANKING_Pos) ;!< 0x00080000
COMP6_CSR_COMP6BLANKING_2        EQU (0x4 :SHL: COMP6_CSR_COMP6BLANKING_Pos) ;!< 0x00100000
COMP6_CSR_COMP6OUT_Pos           EQU (30)
COMP6_CSR_COMP6OUT_Msk           EQU (0x1 :SHL: COMP6_CSR_COMP6OUT_Pos)      ;!< 0x40000000
COMP6_CSR_COMP6OUT               EQU COMP6_CSR_COMP6OUT_Msk                ;!< COMP6 output level
COMP6_CSR_COMP6LOCK_Pos          EQU (31)
COMP6_CSR_COMP6LOCK_Msk          EQU (0x1 :SHL: COMP6_CSR_COMP6LOCK_Pos)     ;!< 0x80000000
COMP6_CSR_COMP6LOCK              EQU COMP6_CSR_COMP6LOCK_Msk               ;!< COMP6 lock

;*********************  Bit definition for COMP7_CSR register  **************
COMP7_CSR_COMP7EN_Pos            EQU (0)
COMP7_CSR_COMP7EN_Msk            EQU (0x1 :SHL: COMP7_CSR_COMP7EN_Pos)       ;!< 0x00000001
COMP7_CSR_COMP7EN                EQU COMP7_CSR_COMP7EN_Msk                 ;!< COMP7 enable
COMP7_CSR_COMP7INSEL_Pos         EQU (4)
COMP7_CSR_COMP7INSEL_Msk         EQU (0x7 :SHL: COMP7_CSR_COMP7INSEL_Pos)    ;!< 0x00000070
COMP7_CSR_COMP7INSEL             EQU COMP7_CSR_COMP7INSEL_Msk              ;!< COMP7 inverting input select
COMP7_CSR_COMP7INSEL_0           EQU (0x1 :SHL: COMP7_CSR_COMP7INSEL_Pos)    ;!< 0x00000010
COMP7_CSR_COMP7INSEL_1           EQU (0x2 :SHL: COMP7_CSR_COMP7INSEL_Pos)    ;!< 0x00000020
COMP7_CSR_COMP7INSEL_2           EQU (0x4 :SHL: COMP7_CSR_COMP7INSEL_Pos)    ;!< 0x00000040
COMP7_CSR_COMP7OUTSEL_Pos        EQU (10)
COMP7_CSR_COMP7OUTSEL_Msk        EQU (0xF :SHL: COMP7_CSR_COMP7OUTSEL_Pos)   ;!< 0x00003C00
COMP7_CSR_COMP7OUTSEL            EQU COMP7_CSR_COMP7OUTSEL_Msk             ;!< COMP7 output select
COMP7_CSR_COMP7OUTSEL_0          EQU (0x1 :SHL: COMP7_CSR_COMP7OUTSEL_Pos)   ;!< 0x00000400
COMP7_CSR_COMP7OUTSEL_1          EQU (0x2 :SHL: COMP7_CSR_COMP7OUTSEL_Pos)   ;!< 0x00000800
COMP7_CSR_COMP7OUTSEL_2          EQU (0x4 :SHL: COMP7_CSR_COMP7OUTSEL_Pos)   ;!< 0x00001000
COMP7_CSR_COMP7OUTSEL_3          EQU (0x8 :SHL: COMP7_CSR_COMP7OUTSEL_Pos)   ;!< 0x00002000
COMP7_CSR_COMP7POL_Pos           EQU (15)
COMP7_CSR_COMP7POL_Msk           EQU (0x1 :SHL: COMP7_CSR_COMP7POL_Pos)      ;!< 0x00008000
COMP7_CSR_COMP7POL               EQU COMP7_CSR_COMP7POL_Msk                ;!< COMP7 output polarity
COMP7_CSR_COMP7BLANKING_Pos      EQU (18)
COMP7_CSR_COMP7BLANKING_Msk      EQU (0x3 :SHL: COMP7_CSR_COMP7BLANKING_Pos) ;!< 0x000C0000
COMP7_CSR_COMP7BLANKING          EQU COMP7_CSR_COMP7BLANKING_Msk           ;!< COMP7 blanking
COMP7_CSR_COMP7BLANKING_0        EQU (0x1 :SHL: COMP7_CSR_COMP7BLANKING_Pos) ;!< 0x00040000
COMP7_CSR_COMP7BLANKING_1        EQU (0x2 :SHL: COMP7_CSR_COMP7BLANKING_Pos) ;!< 0x00080000
COMP7_CSR_COMP7BLANKING_2        EQU (0x4 :SHL: COMP7_CSR_COMP7BLANKING_Pos) ;!< 0x00100000
COMP7_CSR_COMP7OUT_Pos           EQU (30)
COMP7_CSR_COMP7OUT_Msk           EQU (0x1 :SHL: COMP7_CSR_COMP7OUT_Pos)      ;!< 0x40000000
COMP7_CSR_COMP7OUT               EQU COMP7_CSR_COMP7OUT_Msk                ;!< COMP7 output level
COMP7_CSR_COMP7LOCK_Pos          EQU (31)
COMP7_CSR_COMP7LOCK_Msk          EQU (0x1 :SHL: COMP7_CSR_COMP7LOCK_Pos)     ;!< 0x80000000
COMP7_CSR_COMP7LOCK              EQU COMP7_CSR_COMP7LOCK_Msk               ;!< COMP7 lock

;*********************  Bit definition for COMP_CSR register  ***************
COMP_CSR_COMPxEN_Pos            EQU (0)
COMP_CSR_COMPxEN_Msk            EQU (0x1 :SHL: COMP_CSR_COMPxEN_Pos)         ;!< 0x00000001
COMP_CSR_COMPxEN                EQU COMP_CSR_COMPxEN_Msk                   ;!< COMPx enable
COMP_CSR_COMPxSW1_Pos           EQU (1)
COMP_CSR_COMPxSW1_Msk           EQU (0x1 :SHL: COMP_CSR_COMPxSW1_Pos)        ;!< 0x00000002
COMP_CSR_COMPxSW1               EQU COMP_CSR_COMPxSW1_Msk                  ;!< COMPx SW1 switch control
COMP_CSR_COMPxINSEL_Pos         EQU (4)
COMP_CSR_COMPxINSEL_Msk         EQU (0x7 :SHL: COMP_CSR_COMPxINSEL_Pos)      ;!< 0x00000070
COMP_CSR_COMPxINSEL             EQU COMP_CSR_COMPxINSEL_Msk                ;!< COMPx inverting input select
COMP_CSR_COMPxINSEL_0           EQU (0x00000010)                          ;!< COMPx inverting input select bit 0
COMP_CSR_COMPxINSEL_1           EQU (0x00000020)                          ;!< COMPx inverting input select bit 1
COMP_CSR_COMPxINSEL_2           EQU (0x00000040)                          ;!< COMPx inverting input select bit 2
COMP_CSR_COMPxOUTSEL_Pos        EQU (10)
COMP_CSR_COMPxOUTSEL_Msk        EQU (0xF :SHL: COMP_CSR_COMPxOUTSEL_Pos)     ;!< 0x00003C00
COMP_CSR_COMPxOUTSEL            EQU COMP_CSR_COMPxOUTSEL_Msk               ;!< COMPx output select
COMP_CSR_COMPxOUTSEL_0          EQU (0x1 :SHL: COMP_CSR_COMPxOUTSEL_Pos)     ;!< 0x00000400
COMP_CSR_COMPxOUTSEL_1          EQU (0x2 :SHL: COMP_CSR_COMPxOUTSEL_Pos)     ;!< 0x00000800
COMP_CSR_COMPxOUTSEL_2          EQU (0x4 :SHL: COMP_CSR_COMPxOUTSEL_Pos)     ;!< 0x00001000
COMP_CSR_COMPxOUTSEL_3          EQU (0x8 :SHL: COMP_CSR_COMPxOUTSEL_Pos)     ;!< 0x00002000
COMP_CSR_COMPxPOL_Pos           EQU (15)
COMP_CSR_COMPxPOL_Msk           EQU (0x1 :SHL: COMP_CSR_COMPxPOL_Pos)        ;!< 0x00008000
COMP_CSR_COMPxPOL               EQU COMP_CSR_COMPxPOL_Msk                  ;!< COMPx output polarity
COMP_CSR_COMPxBLANKING_Pos      EQU (18)
COMP_CSR_COMPxBLANKING_Msk      EQU (0x3 :SHL: COMP_CSR_COMPxBLANKING_Pos)   ;!< 0x000C0000
COMP_CSR_COMPxBLANKING          EQU COMP_CSR_COMPxBLANKING_Msk             ;!< COMPx blanking
COMP_CSR_COMPxBLANKING_0        EQU (0x1 :SHL: COMP_CSR_COMPxBLANKING_Pos)   ;!< 0x00040000
COMP_CSR_COMPxBLANKING_1        EQU (0x2 :SHL: COMP_CSR_COMPxBLANKING_Pos)   ;!< 0x00080000
COMP_CSR_COMPxBLANKING_2        EQU (0x4 :SHL: COMP_CSR_COMPxBLANKING_Pos)   ;!< 0x00100000
COMP_CSR_COMPxOUT_Pos           EQU (30)
COMP_CSR_COMPxOUT_Msk           EQU (0x1 :SHL: COMP_CSR_COMPxOUT_Pos)        ;!< 0x40000000
COMP_CSR_COMPxOUT               EQU COMP_CSR_COMPxOUT_Msk                  ;!< COMPx output level
COMP_CSR_COMPxLOCK_Pos          EQU (31)
COMP_CSR_COMPxLOCK_Msk          EQU (0x1 :SHL: COMP_CSR_COMPxLOCK_Pos)       ;!< 0x80000000
COMP_CSR_COMPxLOCK              EQU COMP_CSR_COMPxLOCK_Msk                 ;!< COMPx lock

;****************************************************************************
;
;                     Operational Amplifier (OPAMP)
;
;****************************************************************************
;********************  Bit definition for OPAMP1_CSR register  **************
OPAMP1_CSR_OPAMP1EN_Pos       EQU (0)
OPAMP1_CSR_OPAMP1EN_Msk       EQU (0x1 :SHL: OPAMP1_CSR_OPAMP1EN_Pos)        ;!< 0x00000001
OPAMP1_CSR_OPAMP1EN           EQU OPAMP1_CSR_OPAMP1EN_Msk                  ;!< OPAMP1 enable
OPAMP1_CSR_FORCEVP_Pos        EQU (1)
OPAMP1_CSR_FORCEVP_Msk        EQU (0x1 :SHL: OPAMP1_CSR_FORCEVP_Pos)         ;!< 0x00000002
OPAMP1_CSR_FORCEVP            EQU OPAMP1_CSR_FORCEVP_Msk                   ;!< Connect the internal references to the plus input of the OPAMPX
OPAMP1_CSR_VPSEL_Pos          EQU (2)
OPAMP1_CSR_VPSEL_Msk          EQU (0x3 :SHL: OPAMP1_CSR_VPSEL_Pos)           ;!< 0x0000000C
OPAMP1_CSR_VPSEL              EQU OPAMP1_CSR_VPSEL_Msk                     ;!< Non inverting input selection
OPAMP1_CSR_VPSEL_0            EQU (0x1 :SHL: OPAMP1_CSR_VPSEL_Pos)           ;!< 0x00000004
OPAMP1_CSR_VPSEL_1            EQU (0x2 :SHL: OPAMP1_CSR_VPSEL_Pos)           ;!< 0x00000008
OPAMP1_CSR_VMSEL_Pos          EQU (5)
OPAMP1_CSR_VMSEL_Msk          EQU (0x3 :SHL: OPAMP1_CSR_VMSEL_Pos)           ;!< 0x00000060
OPAMP1_CSR_VMSEL              EQU OPAMP1_CSR_VMSEL_Msk                     ;!< Inverting input selection
OPAMP1_CSR_VMSEL_0            EQU (0x1 :SHL: OPAMP1_CSR_VMSEL_Pos)           ;!< 0x00000020
OPAMP1_CSR_VMSEL_1            EQU (0x2 :SHL: OPAMP1_CSR_VMSEL_Pos)           ;!< 0x00000040
OPAMP1_CSR_TCMEN_Pos          EQU (7)
OPAMP1_CSR_TCMEN_Msk          EQU (0x1 :SHL: OPAMP1_CSR_TCMEN_Pos)           ;!< 0x00000080
OPAMP1_CSR_TCMEN              EQU OPAMP1_CSR_TCMEN_Msk                     ;!< Timer-Controlled Mux mode enable
OPAMP1_CSR_VMSSEL_Pos         EQU (8)
OPAMP1_CSR_VMSSEL_Msk         EQU (0x1 :SHL: OPAMP1_CSR_VMSSEL_Pos)          ;!< 0x00000100
OPAMP1_CSR_VMSSEL             EQU OPAMP1_CSR_VMSSEL_Msk                    ;!< Inverting input secondary selection
OPAMP1_CSR_VPSSEL_Pos         EQU (9)
OPAMP1_CSR_VPSSEL_Msk         EQU (0x3 :SHL: OPAMP1_CSR_VPSSEL_Pos)          ;!< 0x00000600
OPAMP1_CSR_VPSSEL             EQU OPAMP1_CSR_VPSSEL_Msk                    ;!< Non inverting input secondary selection
OPAMP1_CSR_VPSSEL_0           EQU (0x1 :SHL: OPAMP1_CSR_VPSSEL_Pos)          ;!< 0x00000200
OPAMP1_CSR_VPSSEL_1           EQU (0x2 :SHL: OPAMP1_CSR_VPSSEL_Pos)          ;!< 0x00000400
OPAMP1_CSR_CALON_Pos          EQU (11)
OPAMP1_CSR_CALON_Msk          EQU (0x1 :SHL: OPAMP1_CSR_CALON_Pos)           ;!< 0x00000800
OPAMP1_CSR_CALON              EQU OPAMP1_CSR_CALON_Msk                     ;!< Calibration mode enable
OPAMP1_CSR_CALSEL_Pos         EQU (12)
OPAMP1_CSR_CALSEL_Msk         EQU (0x3 :SHL: OPAMP1_CSR_CALSEL_Pos)          ;!< 0x00003000
OPAMP1_CSR_CALSEL             EQU OPAMP1_CSR_CALSEL_Msk                    ;!< Calibration selection
OPAMP1_CSR_CALSEL_0           EQU (0x1 :SHL: OPAMP1_CSR_CALSEL_Pos)          ;!< 0x00001000
OPAMP1_CSR_CALSEL_1           EQU (0x2 :SHL: OPAMP1_CSR_CALSEL_Pos)          ;!< 0x00002000
OPAMP1_CSR_PGGAIN_Pos         EQU (14)
OPAMP1_CSR_PGGAIN_Msk         EQU (0xF :SHL: OPAMP1_CSR_PGGAIN_Pos)          ;!< 0x0003C000
OPAMP1_CSR_PGGAIN             EQU OPAMP1_CSR_PGGAIN_Msk                    ;!< Gain in PGA mode
OPAMP1_CSR_PGGAIN_0           EQU (0x1 :SHL: OPAMP1_CSR_PGGAIN_Pos)          ;!< 0x00004000
OPAMP1_CSR_PGGAIN_1           EQU (0x2 :SHL: OPAMP1_CSR_PGGAIN_Pos)          ;!< 0x00008000
OPAMP1_CSR_PGGAIN_2           EQU (0x4 :SHL: OPAMP1_CSR_PGGAIN_Pos)          ;!< 0x00010000
OPAMP1_CSR_PGGAIN_3           EQU (0x8 :SHL: OPAMP1_CSR_PGGAIN_Pos)          ;!< 0x00020000
OPAMP1_CSR_USERTRIM_Pos       EQU (18)
OPAMP1_CSR_USERTRIM_Msk       EQU (0x1 :SHL: OPAMP1_CSR_USERTRIM_Pos)        ;!< 0x00040000
OPAMP1_CSR_USERTRIM           EQU OPAMP1_CSR_USERTRIM_Msk                  ;!< User trimming enable
OPAMP1_CSR_TRIMOFFSETP_Pos    EQU (19)
OPAMP1_CSR_TRIMOFFSETP_Msk    EQU (0x1F :SHL: OPAMP1_CSR_TRIMOFFSETP_Pos)    ;!< 0x00F80000
OPAMP1_CSR_TRIMOFFSETP        EQU OPAMP1_CSR_TRIMOFFSETP_Msk               ;!< Offset trimming value (PMOS)
OPAMP1_CSR_TRIMOFFSETN_Pos    EQU (24)
OPAMP1_CSR_TRIMOFFSETN_Msk    EQU (0x1F :SHL: OPAMP1_CSR_TRIMOFFSETN_Pos)    ;!< 0x1F000000
OPAMP1_CSR_TRIMOFFSETN        EQU OPAMP1_CSR_TRIMOFFSETN_Msk               ;!< Offset trimming value (NMOS)
OPAMP1_CSR_TSTREF_Pos         EQU (29)
OPAMP1_CSR_TSTREF_Msk         EQU (0x1 :SHL: OPAMP1_CSR_TSTREF_Pos)          ;!< 0x20000000
OPAMP1_CSR_TSTREF             EQU OPAMP1_CSR_TSTREF_Msk                    ;!< It enables the switch to put out the internal reference
OPAMP1_CSR_OUTCAL_Pos         EQU (30)
OPAMP1_CSR_OUTCAL_Msk         EQU (0x1 :SHL: OPAMP1_CSR_OUTCAL_Pos)          ;!< 0x40000000
OPAMP1_CSR_OUTCAL             EQU OPAMP1_CSR_OUTCAL_Msk                    ;!< OPAMP ouput status flag
OPAMP1_CSR_LOCK_Pos           EQU (31)
OPAMP1_CSR_LOCK_Msk           EQU (0x1 :SHL: OPAMP1_CSR_LOCK_Pos)            ;!< 0x80000000
OPAMP1_CSR_LOCK               EQU OPAMP1_CSR_LOCK_Msk                      ;!< OPAMP lock

;********************  Bit definition for OPAMP2_CSR register  **************
OPAMP2_CSR_OPAMP2EN_Pos       EQU (0)
OPAMP2_CSR_OPAMP2EN_Msk       EQU (0x1 :SHL: OPAMP2_CSR_OPAMP2EN_Pos)        ;!< 0x00000001
OPAMP2_CSR_OPAMP2EN           EQU OPAMP2_CSR_OPAMP2EN_Msk                  ;!< OPAMP2 enable
OPAMP2_CSR_FORCEVP_Pos        EQU (1)
OPAMP2_CSR_FORCEVP_Msk        EQU (0x1 :SHL: OPAMP2_CSR_FORCEVP_Pos)         ;!< 0x00000002
OPAMP2_CSR_FORCEVP            EQU OPAMP2_CSR_FORCEVP_Msk                   ;!< Connect the internal references to the plus input of the OPAMPX
OPAMP2_CSR_VPSEL_Pos          EQU (2)
OPAMP2_CSR_VPSEL_Msk          EQU (0x3 :SHL: OPAMP2_CSR_VPSEL_Pos)           ;!< 0x0000000C
OPAMP2_CSR_VPSEL              EQU OPAMP2_CSR_VPSEL_Msk                     ;!< Non inverting input selection
OPAMP2_CSR_VPSEL_0            EQU (0x1 :SHL: OPAMP2_CSR_VPSEL_Pos)           ;!< 0x00000004
OPAMP2_CSR_VPSEL_1            EQU (0x2 :SHL: OPAMP2_CSR_VPSEL_Pos)           ;!< 0x00000008
OPAMP2_CSR_VMSEL_Pos          EQU (5)
OPAMP2_CSR_VMSEL_Msk          EQU (0x3 :SHL: OPAMP2_CSR_VMSEL_Pos)           ;!< 0x00000060
OPAMP2_CSR_VMSEL              EQU OPAMP2_CSR_VMSEL_Msk                     ;!< Inverting input selection
OPAMP2_CSR_VMSEL_0            EQU (0x1 :SHL: OPAMP2_CSR_VMSEL_Pos)           ;!< 0x00000020
OPAMP2_CSR_VMSEL_1            EQU (0x2 :SHL: OPAMP2_CSR_VMSEL_Pos)           ;!< 0x00000040
OPAMP2_CSR_TCMEN_Pos          EQU (7)
OPAMP2_CSR_TCMEN_Msk          EQU (0x1 :SHL: OPAMP2_CSR_TCMEN_Pos)           ;!< 0x00000080
OPAMP2_CSR_TCMEN              EQU OPAMP2_CSR_TCMEN_Msk                     ;!< Timer-Controlled Mux mode enable
OPAMP2_CSR_VMSSEL_Pos         EQU (8)
OPAMP2_CSR_VMSSEL_Msk         EQU (0x1 :SHL: OPAMP2_CSR_VMSSEL_Pos)          ;!< 0x00000100
OPAMP2_CSR_VMSSEL             EQU OPAMP2_CSR_VMSSEL_Msk                    ;!< Inverting input secondary selection
OPAMP2_CSR_VPSSEL_Pos         EQU (9)
OPAMP2_CSR_VPSSEL_Msk         EQU (0x3 :SHL: OPAMP2_CSR_VPSSEL_Pos)          ;!< 0x00000600
OPAMP2_CSR_VPSSEL             EQU OPAMP2_CSR_VPSSEL_Msk                    ;!< Non inverting input secondary selection
OPAMP2_CSR_VPSSEL_0           EQU (0x1 :SHL: OPAMP2_CSR_VPSSEL_Pos)          ;!< 0x00000200
OPAMP2_CSR_VPSSEL_1           EQU (0x2 :SHL: OPAMP2_CSR_VPSSEL_Pos)          ;!< 0x00000400
OPAMP2_CSR_CALON_Pos          EQU (11)
OPAMP2_CSR_CALON_Msk          EQU (0x1 :SHL: OPAMP2_CSR_CALON_Pos)           ;!< 0x00000800
OPAMP2_CSR_CALON              EQU OPAMP2_CSR_CALON_Msk                     ;!< Calibration mode enable
OPAMP2_CSR_CALSEL_Pos         EQU (12)
OPAMP2_CSR_CALSEL_Msk         EQU (0x3 :SHL: OPAMP2_CSR_CALSEL_Pos)          ;!< 0x00003000
OPAMP2_CSR_CALSEL             EQU OPAMP2_CSR_CALSEL_Msk                    ;!< Calibration selection
OPAMP2_CSR_CALSEL_0           EQU (0x1 :SHL: OPAMP2_CSR_CALSEL_Pos)          ;!< 0x00001000
OPAMP2_CSR_CALSEL_1           EQU (0x2 :SHL: OPAMP2_CSR_CALSEL_Pos)          ;!< 0x00002000
OPAMP2_CSR_PGGAIN_Pos         EQU (14)
OPAMP2_CSR_PGGAIN_Msk         EQU (0xF :SHL: OPAMP2_CSR_PGGAIN_Pos)          ;!< 0x0003C000
OPAMP2_CSR_PGGAIN             EQU OPAMP2_CSR_PGGAIN_Msk                    ;!< Gain in PGA mode
OPAMP2_CSR_PGGAIN_0           EQU (0x1 :SHL: OPAMP2_CSR_PGGAIN_Pos)          ;!< 0x00004000
OPAMP2_CSR_PGGAIN_1           EQU (0x2 :SHL: OPAMP2_CSR_PGGAIN_Pos)          ;!< 0x00008000
OPAMP2_CSR_PGGAIN_2           EQU (0x4 :SHL: OPAMP2_CSR_PGGAIN_Pos)          ;!< 0x00010000
OPAMP2_CSR_PGGAIN_3           EQU (0x8 :SHL: OPAMP2_CSR_PGGAIN_Pos)          ;!< 0x00020000
OPAMP2_CSR_USERTRIM_Pos       EQU (18)
OPAMP2_CSR_USERTRIM_Msk       EQU (0x1 :SHL: OPAMP2_CSR_USERTRIM_Pos)        ;!< 0x00040000
OPAMP2_CSR_USERTRIM           EQU OPAMP2_CSR_USERTRIM_Msk                  ;!< User trimming enable
OPAMP2_CSR_TRIMOFFSETP_Pos    EQU (19)
OPAMP2_CSR_TRIMOFFSETP_Msk    EQU (0x1F :SHL: OPAMP2_CSR_TRIMOFFSETP_Pos)    ;!< 0x00F80000
OPAMP2_CSR_TRIMOFFSETP        EQU OPAMP2_CSR_TRIMOFFSETP_Msk               ;!< Offset trimming value (PMOS)
OPAMP2_CSR_TRIMOFFSETN_Pos    EQU (24)
OPAMP2_CSR_TRIMOFFSETN_Msk    EQU (0x1F :SHL: OPAMP2_CSR_TRIMOFFSETN_Pos)    ;!< 0x1F000000
OPAMP2_CSR_TRIMOFFSETN        EQU OPAMP2_CSR_TRIMOFFSETN_Msk               ;!< Offset trimming value (NMOS)
OPAMP2_CSR_TSTREF_Pos         EQU (29)
OPAMP2_CSR_TSTREF_Msk         EQU (0x1 :SHL: OPAMP2_CSR_TSTREF_Pos)          ;!< 0x20000000
OPAMP2_CSR_TSTREF             EQU OPAMP2_CSR_TSTREF_Msk                    ;!< It enables the switch to put out the internal reference
OPAMP2_CSR_OUTCAL_Pos         EQU (30)
OPAMP2_CSR_OUTCAL_Msk         EQU (0x1 :SHL: OPAMP2_CSR_OUTCAL_Pos)          ;!< 0x40000000
OPAMP2_CSR_OUTCAL             EQU OPAMP2_CSR_OUTCAL_Msk                    ;!< OPAMP ouput status flag
OPAMP2_CSR_LOCK_Pos           EQU (31)
OPAMP2_CSR_LOCK_Msk           EQU (0x1 :SHL: OPAMP2_CSR_LOCK_Pos)            ;!< 0x80000000
OPAMP2_CSR_LOCK               EQU OPAMP2_CSR_LOCK_Msk                      ;!< OPAMP lock

;********************  Bit definition for OPAMP3_CSR register  **************
OPAMP3_CSR_OPAMP3EN_Pos       EQU (0)
OPAMP3_CSR_OPAMP3EN_Msk       EQU (0x1 :SHL: OPAMP3_CSR_OPAMP3EN_Pos)        ;!< 0x00000001
OPAMP3_CSR_OPAMP3EN           EQU OPAMP3_CSR_OPAMP3EN_Msk                  ;!< OPAMP3 enable
OPAMP3_CSR_FORCEVP_Pos        EQU (1)
OPAMP3_CSR_FORCEVP_Msk        EQU (0x1 :SHL: OPAMP3_CSR_FORCEVP_Pos)         ;!< 0x00000002
OPAMP3_CSR_FORCEVP            EQU OPAMP3_CSR_FORCEVP_Msk                   ;!< Connect the internal references to the plus input of the OPAMPX
OPAMP3_CSR_VPSEL_Pos          EQU (2)
OPAMP3_CSR_VPSEL_Msk          EQU (0x3 :SHL: OPAMP3_CSR_VPSEL_Pos)           ;!< 0x0000000C
OPAMP3_CSR_VPSEL              EQU OPAMP3_CSR_VPSEL_Msk                     ;!< Non inverting input selection
OPAMP3_CSR_VPSEL_0            EQU (0x1 :SHL: OPAMP3_CSR_VPSEL_Pos)           ;!< 0x00000004
OPAMP3_CSR_VPSEL_1            EQU (0x2 :SHL: OPAMP3_CSR_VPSEL_Pos)           ;!< 0x00000008
OPAMP3_CSR_VMSEL_Pos          EQU (5)
OPAMP3_CSR_VMSEL_Msk          EQU (0x3 :SHL: OPAMP3_CSR_VMSEL_Pos)           ;!< 0x00000060
OPAMP3_CSR_VMSEL              EQU OPAMP3_CSR_VMSEL_Msk                     ;!< Inverting input selection
OPAMP3_CSR_VMSEL_0            EQU (0x1 :SHL: OPAMP3_CSR_VMSEL_Pos)           ;!< 0x00000020
OPAMP3_CSR_VMSEL_1            EQU (0x2 :SHL: OPAMP3_CSR_VMSEL_Pos)           ;!< 0x00000040
OPAMP3_CSR_TCMEN_Pos          EQU (7)
OPAMP3_CSR_TCMEN_Msk          EQU (0x1 :SHL: OPAMP3_CSR_TCMEN_Pos)           ;!< 0x00000080
OPAMP3_CSR_TCMEN              EQU OPAMP3_CSR_TCMEN_Msk                     ;!< Timer-Controlled Mux mode enable
OPAMP3_CSR_VMSSEL_Pos         EQU (8)
OPAMP3_CSR_VMSSEL_Msk         EQU (0x1 :SHL: OPAMP3_CSR_VMSSEL_Pos)          ;!< 0x00000100
OPAMP3_CSR_VMSSEL             EQU OPAMP3_CSR_VMSSEL_Msk                    ;!< Inverting input secondary selection
OPAMP3_CSR_VPSSEL_Pos         EQU (9)
OPAMP3_CSR_VPSSEL_Msk         EQU (0x3 :SHL: OPAMP3_CSR_VPSSEL_Pos)          ;!< 0x00000600
OPAMP3_CSR_VPSSEL             EQU OPAMP3_CSR_VPSSEL_Msk                    ;!< Non inverting input secondary selection
OPAMP3_CSR_VPSSEL_0           EQU (0x1 :SHL: OPAMP3_CSR_VPSSEL_Pos)          ;!< 0x00000200
OPAMP3_CSR_VPSSEL_1           EQU (0x2 :SHL: OPAMP3_CSR_VPSSEL_Pos)          ;!< 0x00000400
OPAMP3_CSR_CALON_Pos          EQU (11)
OPAMP3_CSR_CALON_Msk          EQU (0x1 :SHL: OPAMP3_CSR_CALON_Pos)           ;!< 0x00000800
OPAMP3_CSR_CALON              EQU OPAMP3_CSR_CALON_Msk                     ;!< Calibration mode enable
OPAMP3_CSR_CALSEL_Pos         EQU (12)
OPAMP3_CSR_CALSEL_Msk         EQU (0x3 :SHL: OPAMP3_CSR_CALSEL_Pos)          ;!< 0x00003000
OPAMP3_CSR_CALSEL             EQU OPAMP3_CSR_CALSEL_Msk                    ;!< Calibration selection
OPAMP3_CSR_CALSEL_0           EQU (0x1 :SHL: OPAMP3_CSR_CALSEL_Pos)          ;!< 0x00001000
OPAMP3_CSR_CALSEL_1           EQU (0x2 :SHL: OPAMP3_CSR_CALSEL_Pos)          ;!< 0x00002000
OPAMP3_CSR_PGGAIN_Pos         EQU (14)
OPAMP3_CSR_PGGAIN_Msk         EQU (0xF :SHL: OPAMP3_CSR_PGGAIN_Pos)          ;!< 0x0003C000
OPAMP3_CSR_PGGAIN             EQU OPAMP3_CSR_PGGAIN_Msk                    ;!< Gain in PGA mode
OPAMP3_CSR_PGGAIN_0           EQU (0x1 :SHL: OPAMP3_CSR_PGGAIN_Pos)          ;!< 0x00004000
OPAMP3_CSR_PGGAIN_1           EQU (0x2 :SHL: OPAMP3_CSR_PGGAIN_Pos)          ;!< 0x00008000
OPAMP3_CSR_PGGAIN_2           EQU (0x4 :SHL: OPAMP3_CSR_PGGAIN_Pos)          ;!< 0x00010000
OPAMP3_CSR_PGGAIN_3           EQU (0x8 :SHL: OPAMP3_CSR_PGGAIN_Pos)          ;!< 0x00020000
OPAMP3_CSR_USERTRIM_Pos       EQU (18)
OPAMP3_CSR_USERTRIM_Msk       EQU (0x1 :SHL: OPAMP3_CSR_USERTRIM_Pos)        ;!< 0x00040000
OPAMP3_CSR_USERTRIM           EQU OPAMP3_CSR_USERTRIM_Msk                  ;!< User trimming enable
OPAMP3_CSR_TRIMOFFSETP_Pos    EQU (19)
OPAMP3_CSR_TRIMOFFSETP_Msk    EQU (0x1F :SHL: OPAMP3_CSR_TRIMOFFSETP_Pos)    ;!< 0x00F80000
OPAMP3_CSR_TRIMOFFSETP        EQU OPAMP3_CSR_TRIMOFFSETP_Msk               ;!< Offset trimming value (PMOS)
OPAMP3_CSR_TRIMOFFSETN_Pos    EQU (24)
OPAMP3_CSR_TRIMOFFSETN_Msk    EQU (0x1F :SHL: OPAMP3_CSR_TRIMOFFSETN_Pos)    ;!< 0x1F000000
OPAMP3_CSR_TRIMOFFSETN        EQU OPAMP3_CSR_TRIMOFFSETN_Msk               ;!< Offset trimming value (NMOS)
OPAMP3_CSR_TSTREF_Pos         EQU (29)
OPAMP3_CSR_TSTREF_Msk         EQU (0x1 :SHL: OPAMP3_CSR_TSTREF_Pos)          ;!< 0x20000000
OPAMP3_CSR_TSTREF             EQU OPAMP3_CSR_TSTREF_Msk                    ;!< It enables the switch to put out the internal reference
OPAMP3_CSR_OUTCAL_Pos         EQU (30)
OPAMP3_CSR_OUTCAL_Msk         EQU (0x1 :SHL: OPAMP3_CSR_OUTCAL_Pos)          ;!< 0x40000000
OPAMP3_CSR_OUTCAL             EQU OPAMP3_CSR_OUTCAL_Msk                    ;!< OPAMP ouput status flag
OPAMP3_CSR_LOCK_Pos           EQU (31)
OPAMP3_CSR_LOCK_Msk           EQU (0x1 :SHL: OPAMP3_CSR_LOCK_Pos)            ;!< 0x80000000
OPAMP3_CSR_LOCK               EQU OPAMP3_CSR_LOCK_Msk                      ;!< OPAMP lock

;********************  Bit definition for OPAMP4_CSR register  **************
OPAMP4_CSR_OPAMP4EN_Pos       EQU (0)
OPAMP4_CSR_OPAMP4EN_Msk       EQU (0x1 :SHL: OPAMP4_CSR_OPAMP4EN_Pos)        ;!< 0x00000001
OPAMP4_CSR_OPAMP4EN           EQU OPAMP4_CSR_OPAMP4EN_Msk                  ;!< OPAMP4 enable
OPAMP4_CSR_FORCEVP_Pos        EQU (1)
OPAMP4_CSR_FORCEVP_Msk        EQU (0x1 :SHL: OPAMP4_CSR_FORCEVP_Pos)         ;!< 0x00000002
OPAMP4_CSR_FORCEVP            EQU OPAMP4_CSR_FORCEVP_Msk                   ;!< Connect the internal references to the plus input of the OPAMPX
OPAMP4_CSR_VPSEL_Pos          EQU (2)
OPAMP4_CSR_VPSEL_Msk          EQU (0x3 :SHL: OPAMP4_CSR_VPSEL_Pos)           ;!< 0x0000000C
OPAMP4_CSR_VPSEL              EQU OPAMP4_CSR_VPSEL_Msk                     ;!< Non inverting input selection
OPAMP4_CSR_VPSEL_0            EQU (0x1 :SHL: OPAMP4_CSR_VPSEL_Pos)           ;!< 0x00000004
OPAMP4_CSR_VPSEL_1            EQU (0x2 :SHL: OPAMP4_CSR_VPSEL_Pos)           ;!< 0x00000008
OPAMP4_CSR_VMSEL_Pos          EQU (5)
OPAMP4_CSR_VMSEL_Msk          EQU (0x3 :SHL: OPAMP4_CSR_VMSEL_Pos)           ;!< 0x00000060
OPAMP4_CSR_VMSEL              EQU OPAMP4_CSR_VMSEL_Msk                     ;!< Inverting input selection
OPAMP4_CSR_VMSEL_0            EQU (0x1 :SHL: OPAMP4_CSR_VMSEL_Pos)           ;!< 0x00000020
OPAMP4_CSR_VMSEL_1            EQU (0x2 :SHL: OPAMP4_CSR_VMSEL_Pos)           ;!< 0x00000040
OPAMP4_CSR_TCMEN_Pos          EQU (7)
OPAMP4_CSR_TCMEN_Msk          EQU (0x1 :SHL: OPAMP4_CSR_TCMEN_Pos)           ;!< 0x00000080
OPAMP4_CSR_TCMEN              EQU OPAMP4_CSR_TCMEN_Msk                     ;!< Timer-Controlled Mux mode enable
OPAMP4_CSR_VMSSEL_Pos         EQU (8)
OPAMP4_CSR_VMSSEL_Msk         EQU (0x1 :SHL: OPAMP4_CSR_VMSSEL_Pos)          ;!< 0x00000100
OPAMP4_CSR_VMSSEL             EQU OPAMP4_CSR_VMSSEL_Msk                    ;!< Inverting input secondary selection
OPAMP4_CSR_VPSSEL_Pos         EQU (9)
OPAMP4_CSR_VPSSEL_Msk         EQU (0x3 :SHL: OPAMP4_CSR_VPSSEL_Pos)          ;!< 0x00000600
OPAMP4_CSR_VPSSEL             EQU OPAMP4_CSR_VPSSEL_Msk                    ;!< Non inverting input secondary selection
OPAMP4_CSR_VPSSEL_0           EQU (0x1 :SHL: OPAMP4_CSR_VPSSEL_Pos)          ;!< 0x00000200
OPAMP4_CSR_VPSSEL_1           EQU (0x2 :SHL: OPAMP4_CSR_VPSSEL_Pos)          ;!< 0x00000400
OPAMP4_CSR_CALON_Pos          EQU (11)
OPAMP4_CSR_CALON_Msk          EQU (0x1 :SHL: OPAMP4_CSR_CALON_Pos)           ;!< 0x00000800
OPAMP4_CSR_CALON              EQU OPAMP4_CSR_CALON_Msk                     ;!< Calibration mode enable
OPAMP4_CSR_CALSEL_Pos         EQU (12)
OPAMP4_CSR_CALSEL_Msk         EQU (0x3 :SHL: OPAMP4_CSR_CALSEL_Pos)          ;!< 0x00003000
OPAMP4_CSR_CALSEL             EQU OPAMP4_CSR_CALSEL_Msk                    ;!< Calibration selection
OPAMP4_CSR_CALSEL_0           EQU (0x1 :SHL: OPAMP4_CSR_CALSEL_Pos)          ;!< 0x00001000
OPAMP4_CSR_CALSEL_1           EQU (0x2 :SHL: OPAMP4_CSR_CALSEL_Pos)          ;!< 0x00002000
OPAMP4_CSR_PGGAIN_Pos         EQU (14)
OPAMP4_CSR_PGGAIN_Msk         EQU (0xF :SHL: OPAMP4_CSR_PGGAIN_Pos)          ;!< 0x0003C000
OPAMP4_CSR_PGGAIN             EQU OPAMP4_CSR_PGGAIN_Msk                    ;!< Gain in PGA mode
OPAMP4_CSR_PGGAIN_0           EQU (0x1 :SHL: OPAMP4_CSR_PGGAIN_Pos)          ;!< 0x00004000
OPAMP4_CSR_PGGAIN_1           EQU (0x2 :SHL: OPAMP4_CSR_PGGAIN_Pos)          ;!< 0x00008000
OPAMP4_CSR_PGGAIN_2           EQU (0x4 :SHL: OPAMP4_CSR_PGGAIN_Pos)          ;!< 0x00010000
OPAMP4_CSR_PGGAIN_3           EQU (0x8 :SHL: OPAMP4_CSR_PGGAIN_Pos)          ;!< 0x00020000
OPAMP4_CSR_USERTRIM_Pos       EQU (18)
OPAMP4_CSR_USERTRIM_Msk       EQU (0x1 :SHL: OPAMP4_CSR_USERTRIM_Pos)        ;!< 0x00040000
OPAMP4_CSR_USERTRIM           EQU OPAMP4_CSR_USERTRIM_Msk                  ;!< User trimming enable
OPAMP4_CSR_TRIMOFFSETP_Pos    EQU (19)
OPAMP4_CSR_TRIMOFFSETP_Msk    EQU (0x1F :SHL: OPAMP4_CSR_TRIMOFFSETP_Pos)    ;!< 0x00F80000
OPAMP4_CSR_TRIMOFFSETP        EQU OPAMP4_CSR_TRIMOFFSETP_Msk               ;!< Offset trimming value (PMOS)
OPAMP4_CSR_TRIMOFFSETN_Pos    EQU (24)
OPAMP4_CSR_TRIMOFFSETN_Msk    EQU (0x1F :SHL: OPAMP4_CSR_TRIMOFFSETN_Pos)    ;!< 0x1F000000
OPAMP4_CSR_TRIMOFFSETN        EQU OPAMP4_CSR_TRIMOFFSETN_Msk               ;!< Offset trimming value (NMOS)
OPAMP4_CSR_TSTREF_Pos         EQU (29)
OPAMP4_CSR_TSTREF_Msk         EQU (0x1 :SHL: OPAMP4_CSR_TSTREF_Pos)          ;!< 0x20000000
OPAMP4_CSR_TSTREF             EQU OPAMP4_CSR_TSTREF_Msk                    ;!< It enables the switch to put out the internal reference
OPAMP4_CSR_OUTCAL_Pos         EQU (30)
OPAMP4_CSR_OUTCAL_Msk         EQU (0x1 :SHL: OPAMP4_CSR_OUTCAL_Pos)          ;!< 0x40000000
OPAMP4_CSR_OUTCAL             EQU OPAMP4_CSR_OUTCAL_Msk                    ;!< OPAMP ouput status flag
OPAMP4_CSR_LOCK_Pos           EQU (31)
OPAMP4_CSR_LOCK_Msk           EQU (0x1 :SHL: OPAMP4_CSR_LOCK_Pos)            ;!< 0x80000000
OPAMP4_CSR_LOCK               EQU OPAMP4_CSR_LOCK_Msk                      ;!< OPAMP lock

;********************  Bit definition for OPAMPx_CSR register  **************
OPAMP_CSR_OPAMPxEN_Pos       EQU (0)
OPAMP_CSR_OPAMPxEN_Msk       EQU (0x1 :SHL: OPAMP_CSR_OPAMPxEN_Pos)          ;!< 0x00000001
OPAMP_CSR_OPAMPxEN           EQU OPAMP_CSR_OPAMPxEN_Msk                    ;!< OPAMP enable
OPAMP_CSR_FORCEVP_Pos        EQU (1)
OPAMP_CSR_FORCEVP_Msk        EQU (0x1 :SHL: OPAMP_CSR_FORCEVP_Pos)           ;!< 0x00000002
OPAMP_CSR_FORCEVP            EQU OPAMP_CSR_FORCEVP_Msk                     ;!< Connect the internal references to the plus input of the OPAMPX
OPAMP_CSR_VPSEL_Pos          EQU (2)
OPAMP_CSR_VPSEL_Msk          EQU (0x3 :SHL: OPAMP_CSR_VPSEL_Pos)             ;!< 0x0000000C
OPAMP_CSR_VPSEL              EQU OPAMP_CSR_VPSEL_Msk                       ;!< Non inverting input selection
OPAMP_CSR_VPSEL_0            EQU (0x1 :SHL: OPAMP_CSR_VPSEL_Pos)             ;!< 0x00000004
OPAMP_CSR_VPSEL_1            EQU (0x2 :SHL: OPAMP_CSR_VPSEL_Pos)             ;!< 0x00000008
OPAMP_CSR_VMSEL_Pos          EQU (5)
OPAMP_CSR_VMSEL_Msk          EQU (0x3 :SHL: OPAMP_CSR_VMSEL_Pos)             ;!< 0x00000060
OPAMP_CSR_VMSEL              EQU OPAMP_CSR_VMSEL_Msk                       ;!< Inverting input selection
OPAMP_CSR_VMSEL_0            EQU (0x1 :SHL: OPAMP_CSR_VMSEL_Pos)             ;!< 0x00000020
OPAMP_CSR_VMSEL_1            EQU (0x2 :SHL: OPAMP_CSR_VMSEL_Pos)             ;!< 0x00000040
OPAMP_CSR_TCMEN_Pos          EQU (7)
OPAMP_CSR_TCMEN_Msk          EQU (0x1 :SHL: OPAMP_CSR_TCMEN_Pos)             ;!< 0x00000080
OPAMP_CSR_TCMEN              EQU OPAMP_CSR_TCMEN_Msk                       ;!< Timer-Controlled Mux mode enable
OPAMP_CSR_VMSSEL_Pos         EQU (8)
OPAMP_CSR_VMSSEL_Msk         EQU (0x1 :SHL: OPAMP_CSR_VMSSEL_Pos)            ;!< 0x00000100
OPAMP_CSR_VMSSEL             EQU OPAMP_CSR_VMSSEL_Msk                      ;!< Inverting input secondary selection
OPAMP_CSR_VPSSEL_Pos         EQU (9)
OPAMP_CSR_VPSSEL_Msk         EQU (0x3 :SHL: OPAMP_CSR_VPSSEL_Pos)            ;!< 0x00000600
OPAMP_CSR_VPSSEL             EQU OPAMP_CSR_VPSSEL_Msk                      ;!< Non inverting input secondary selection
OPAMP_CSR_VPSSEL_0           EQU (0x1 :SHL: OPAMP_CSR_VPSSEL_Pos)            ;!< 0x00000200
OPAMP_CSR_VPSSEL_1           EQU (0x2 :SHL: OPAMP_CSR_VPSSEL_Pos)            ;!< 0x00000400
OPAMP_CSR_CALON_Pos          EQU (11)
OPAMP_CSR_CALON_Msk          EQU (0x1 :SHL: OPAMP_CSR_CALON_Pos)             ;!< 0x00000800
OPAMP_CSR_CALON              EQU OPAMP_CSR_CALON_Msk                       ;!< Calibration mode enable
OPAMP_CSR_CALSEL_Pos         EQU (12)
OPAMP_CSR_CALSEL_Msk         EQU (0x3 :SHL: OPAMP_CSR_CALSEL_Pos)            ;!< 0x00003000
OPAMP_CSR_CALSEL             EQU OPAMP_CSR_CALSEL_Msk                      ;!< Calibration selection
OPAMP_CSR_CALSEL_0           EQU (0x1 :SHL: OPAMP_CSR_CALSEL_Pos)            ;!< 0x00001000
OPAMP_CSR_CALSEL_1           EQU (0x2 :SHL: OPAMP_CSR_CALSEL_Pos)            ;!< 0x00002000
OPAMP_CSR_PGGAIN_Pos         EQU (14)
OPAMP_CSR_PGGAIN_Msk         EQU (0xF :SHL: OPAMP_CSR_PGGAIN_Pos)            ;!< 0x0003C000
OPAMP_CSR_PGGAIN             EQU OPAMP_CSR_PGGAIN_Msk                      ;!< Gain in PGA mode
OPAMP_CSR_PGGAIN_0           EQU (0x1 :SHL: OPAMP_CSR_PGGAIN_Pos)            ;!< 0x00004000
OPAMP_CSR_PGGAIN_1           EQU (0x2 :SHL: OPAMP_CSR_PGGAIN_Pos)            ;!< 0x00008000
OPAMP_CSR_PGGAIN_2           EQU (0x4 :SHL: OPAMP_CSR_PGGAIN_Pos)            ;!< 0x00010000
OPAMP_CSR_PGGAIN_3           EQU (0x8 :SHL: OPAMP_CSR_PGGAIN_Pos)            ;!< 0x00020000
OPAMP_CSR_USERTRIM_Pos       EQU (18)
OPAMP_CSR_USERTRIM_Msk       EQU (0x1 :SHL: OPAMP_CSR_USERTRIM_Pos)          ;!< 0x00040000
OPAMP_CSR_USERTRIM           EQU OPAMP_CSR_USERTRIM_Msk                    ;!< User trimming enable
OPAMP_CSR_TRIMOFFSETP_Pos    EQU (19)
OPAMP_CSR_TRIMOFFSETP_Msk    EQU (0x1F :SHL: OPAMP_CSR_TRIMOFFSETP_Pos)      ;!< 0x00F80000
OPAMP_CSR_TRIMOFFSETP        EQU OPAMP_CSR_TRIMOFFSETP_Msk                 ;!< Offset trimming value (PMOS)
OPAMP_CSR_TRIMOFFSETN_Pos    EQU (24)
OPAMP_CSR_TRIMOFFSETN_Msk    EQU (0x1F :SHL: OPAMP_CSR_TRIMOFFSETN_Pos)      ;!< 0x1F000000
OPAMP_CSR_TRIMOFFSETN        EQU OPAMP_CSR_TRIMOFFSETN_Msk                 ;!< Offset trimming value (NMOS)
OPAMP_CSR_TSTREF_Pos         EQU (29)
OPAMP_CSR_TSTREF_Msk         EQU (0x1 :SHL: OPAMP_CSR_TSTREF_Pos)            ;!< 0x20000000
OPAMP_CSR_TSTREF             EQU OPAMP_CSR_TSTREF_Msk                      ;!< It enables the switch to put out the internal reference
OPAMP_CSR_OUTCAL_Pos         EQU (30)
OPAMP_CSR_OUTCAL_Msk         EQU (0x1 :SHL: OPAMP_CSR_OUTCAL_Pos)            ;!< 0x40000000
OPAMP_CSR_OUTCAL             EQU OPAMP_CSR_OUTCAL_Msk                      ;!< OPAMP ouput status flag
OPAMP_CSR_LOCK_Pos           EQU (31)
OPAMP_CSR_LOCK_Msk           EQU (0x1 :SHL: OPAMP_CSR_LOCK_Pos)              ;!< 0x80000000
OPAMP_CSR_LOCK               EQU OPAMP_CSR_LOCK_Msk                        ;!< OPAMP lock

;****************************************************************************
;
;                   Controller Area Network (CAN )
;
;****************************************************************************
;******************  Bit definition for CAN_MCR register  *******************
CAN_MCR_INRQ_Pos       EQU (0)
CAN_MCR_INRQ_Msk       EQU (0x1 :SHL: CAN_MCR_INRQ_Pos)                      ;!< 0x00000001
CAN_MCR_INRQ           EQU CAN_MCR_INRQ_Msk                                ;!<Initialization Request
CAN_MCR_SLEEP_Pos      EQU (1)
CAN_MCR_SLEEP_Msk      EQU (0x1 :SHL: CAN_MCR_SLEEP_Pos)                     ;!< 0x00000002
CAN_MCR_SLEEP          EQU CAN_MCR_SLEEP_Msk                               ;!<Sleep Mode Request
CAN_MCR_TXFP_Pos       EQU (2)
CAN_MCR_TXFP_Msk       EQU (0x1 :SHL: CAN_MCR_TXFP_Pos)                      ;!< 0x00000004
CAN_MCR_TXFP           EQU CAN_MCR_TXFP_Msk                                ;!<Transmit FIFO Priority
CAN_MCR_RFLM_Pos       EQU (3)
CAN_MCR_RFLM_Msk       EQU (0x1 :SHL: CAN_MCR_RFLM_Pos)                      ;!< 0x00000008
CAN_MCR_RFLM           EQU CAN_MCR_RFLM_Msk                                ;!<Receive FIFO Locked Mode
CAN_MCR_NART_Pos       EQU (4)
CAN_MCR_NART_Msk       EQU (0x1 :SHL: CAN_MCR_NART_Pos)                      ;!< 0x00000010
CAN_MCR_NART           EQU CAN_MCR_NART_Msk                                ;!<No Automatic Retransmission
CAN_MCR_AWUM_Pos       EQU (5)
CAN_MCR_AWUM_Msk       EQU (0x1 :SHL: CAN_MCR_AWUM_Pos)                      ;!< 0x00000020
CAN_MCR_AWUM           EQU CAN_MCR_AWUM_Msk                                ;!<Automatic Wakeup Mode
CAN_MCR_ABOM_Pos       EQU (6)
CAN_MCR_ABOM_Msk       EQU (0x1 :SHL: CAN_MCR_ABOM_Pos)                      ;!< 0x00000040
CAN_MCR_ABOM           EQU CAN_MCR_ABOM_Msk                                ;!<Automatic Bus-Off Management
CAN_MCR_TTCM_Pos       EQU (7)
CAN_MCR_TTCM_Msk       EQU (0x1 :SHL: CAN_MCR_TTCM_Pos)                      ;!< 0x00000080
CAN_MCR_TTCM           EQU CAN_MCR_TTCM_Msk                                ;!<Time Triggered Communication Mode
CAN_MCR_RESET_Pos      EQU (15)
CAN_MCR_RESET_Msk      EQU (0x1 :SHL: CAN_MCR_RESET_Pos)                     ;!< 0x00008000
CAN_MCR_RESET          EQU CAN_MCR_RESET_Msk                               ;!<bxCAN software master reset

;******************  Bit definition for CAN_MSR register  *******************
CAN_MSR_INAK_Pos       EQU (0)
CAN_MSR_INAK_Msk       EQU (0x1 :SHL: CAN_MSR_INAK_Pos)                      ;!< 0x00000001
CAN_MSR_INAK           EQU CAN_MSR_INAK_Msk                                ;!<Initialization Acknowledge
CAN_MSR_SLAK_Pos       EQU (1)
CAN_MSR_SLAK_Msk       EQU (0x1 :SHL: CAN_MSR_SLAK_Pos)                      ;!< 0x00000002
CAN_MSR_SLAK           EQU CAN_MSR_SLAK_Msk                                ;!<Sleep Acknowledge
CAN_MSR_ERRI_Pos       EQU (2)
CAN_MSR_ERRI_Msk       EQU (0x1 :SHL: CAN_MSR_ERRI_Pos)                      ;!< 0x00000004
CAN_MSR_ERRI           EQU CAN_MSR_ERRI_Msk                                ;!<Error Interrupt
CAN_MSR_WKUI_Pos       EQU (3)
CAN_MSR_WKUI_Msk       EQU (0x1 :SHL: CAN_MSR_WKUI_Pos)                      ;!< 0x00000008
CAN_MSR_WKUI           EQU CAN_MSR_WKUI_Msk                                ;!<Wakeup Interrupt
CAN_MSR_SLAKI_Pos      EQU (4)
CAN_MSR_SLAKI_Msk      EQU (0x1 :SHL: CAN_MSR_SLAKI_Pos)                     ;!< 0x00000010
CAN_MSR_SLAKI          EQU CAN_MSR_SLAKI_Msk                               ;!<Sleep Acknowledge Interrupt
CAN_MSR_TXM_Pos        EQU (8)
CAN_MSR_TXM_Msk        EQU (0x1 :SHL: CAN_MSR_TXM_Pos)                       ;!< 0x00000100
CAN_MSR_TXM            EQU CAN_MSR_TXM_Msk                                 ;!<Transmit Mode
CAN_MSR_RXM_Pos        EQU (9)
CAN_MSR_RXM_Msk        EQU (0x1 :SHL: CAN_MSR_RXM_Pos)                       ;!< 0x00000200
CAN_MSR_RXM            EQU CAN_MSR_RXM_Msk                                 ;!<Receive Mode
CAN_MSR_SAMP_Pos       EQU (10)
CAN_MSR_SAMP_Msk       EQU (0x1 :SHL: CAN_MSR_SAMP_Pos)                      ;!< 0x00000400
CAN_MSR_SAMP           EQU CAN_MSR_SAMP_Msk                                ;!<Last Sample Point
CAN_MSR_RX_Pos         EQU (11)
CAN_MSR_RX_Msk         EQU (0x1 :SHL: CAN_MSR_RX_Pos)                        ;!< 0x00000800
CAN_MSR_RX             EQU CAN_MSR_RX_Msk                                  ;!<CAN Rx Signal

;******************  Bit definition for CAN_TSR register  *******************
CAN_TSR_RQCP0_Pos      EQU (0)
CAN_TSR_RQCP0_Msk      EQU (0x1 :SHL: CAN_TSR_RQCP0_Pos)                     ;!< 0x00000001
CAN_TSR_RQCP0          EQU CAN_TSR_RQCP0_Msk                               ;!<Request Completed Mailbox0
CAN_TSR_TXOK0_Pos      EQU (1)
CAN_TSR_TXOK0_Msk      EQU (0x1 :SHL: CAN_TSR_TXOK0_Pos)                     ;!< 0x00000002
CAN_TSR_TXOK0          EQU CAN_TSR_TXOK0_Msk                               ;!<Transmission OK of Mailbox0
CAN_TSR_ALST0_Pos      EQU (2)
CAN_TSR_ALST0_Msk      EQU (0x1 :SHL: CAN_TSR_ALST0_Pos)                     ;!< 0x00000004
CAN_TSR_ALST0          EQU CAN_TSR_ALST0_Msk                               ;!<Arbitration Lost for Mailbox0
CAN_TSR_TERR0_Pos      EQU (3)
CAN_TSR_TERR0_Msk      EQU (0x1 :SHL: CAN_TSR_TERR0_Pos)                     ;!< 0x00000008
CAN_TSR_TERR0          EQU CAN_TSR_TERR0_Msk                               ;!<Transmission Error of Mailbox0
CAN_TSR_ABRQ0_Pos      EQU (7)
CAN_TSR_ABRQ0_Msk      EQU (0x1 :SHL: CAN_TSR_ABRQ0_Pos)                     ;!< 0x00000080
CAN_TSR_ABRQ0          EQU CAN_TSR_ABRQ0_Msk                               ;!<Abort Request for Mailbox0
CAN_TSR_RQCP1_Pos      EQU (8)
CAN_TSR_RQCP1_Msk      EQU (0x1 :SHL: CAN_TSR_RQCP1_Pos)                     ;!< 0x00000100
CAN_TSR_RQCP1          EQU CAN_TSR_RQCP1_Msk                               ;!<Request Completed Mailbox1
CAN_TSR_TXOK1_Pos      EQU (9)
CAN_TSR_TXOK1_Msk      EQU (0x1 :SHL: CAN_TSR_TXOK1_Pos)                     ;!< 0x00000200
CAN_TSR_TXOK1          EQU CAN_TSR_TXOK1_Msk                               ;!<Transmission OK of Mailbox1
CAN_TSR_ALST1_Pos      EQU (10)
CAN_TSR_ALST1_Msk      EQU (0x1 :SHL: CAN_TSR_ALST1_Pos)                     ;!< 0x00000400
CAN_TSR_ALST1          EQU CAN_TSR_ALST1_Msk                               ;!<Arbitration Lost for Mailbox1
CAN_TSR_TERR1_Pos      EQU (11)
CAN_TSR_TERR1_Msk      EQU (0x1 :SHL: CAN_TSR_TERR1_Pos)                     ;!< 0x00000800
CAN_TSR_TERR1          EQU CAN_TSR_TERR1_Msk                               ;!<Transmission Error of Mailbox1
CAN_TSR_ABRQ1_Pos      EQU (15)
CAN_TSR_ABRQ1_Msk      EQU (0x1 :SHL: CAN_TSR_ABRQ1_Pos)                     ;!< 0x00008000
CAN_TSR_ABRQ1          EQU CAN_TSR_ABRQ1_Msk                               ;!<Abort Request for Mailbox 1
CAN_TSR_RQCP2_Pos      EQU (16)
CAN_TSR_RQCP2_Msk      EQU (0x1 :SHL: CAN_TSR_RQCP2_Pos)                     ;!< 0x00010000
CAN_TSR_RQCP2          EQU CAN_TSR_RQCP2_Msk                               ;!<Request Completed Mailbox2
CAN_TSR_TXOK2_Pos      EQU (17)
CAN_TSR_TXOK2_Msk      EQU (0x1 :SHL: CAN_TSR_TXOK2_Pos)                     ;!< 0x00020000
CAN_TSR_TXOK2          EQU CAN_TSR_TXOK2_Msk                               ;!<Transmission OK of Mailbox 2
CAN_TSR_ALST2_Pos      EQU (18)
CAN_TSR_ALST2_Msk      EQU (0x1 :SHL: CAN_TSR_ALST2_Pos)                     ;!< 0x00040000
CAN_TSR_ALST2          EQU CAN_TSR_ALST2_Msk                               ;!<Arbitration Lost for mailbox 2
CAN_TSR_TERR2_Pos      EQU (19)
CAN_TSR_TERR2_Msk      EQU (0x1 :SHL: CAN_TSR_TERR2_Pos)                     ;!< 0x00080000
CAN_TSR_TERR2          EQU CAN_TSR_TERR2_Msk                               ;!<Transmission Error of Mailbox 2
CAN_TSR_ABRQ2_Pos      EQU (23)
CAN_TSR_ABRQ2_Msk      EQU (0x1 :SHL: CAN_TSR_ABRQ2_Pos)                     ;!< 0x00800000
CAN_TSR_ABRQ2          EQU CAN_TSR_ABRQ2_Msk                               ;!<Abort Request for Mailbox 2
CAN_TSR_CODE_Pos       EQU (24)
CAN_TSR_CODE_Msk       EQU (0x3 :SHL: CAN_TSR_CODE_Pos)                      ;!< 0x03000000
CAN_TSR_CODE           EQU CAN_TSR_CODE_Msk                                ;!<Mailbox Code

CAN_TSR_TME_Pos        EQU (26)
CAN_TSR_TME_Msk        EQU (0x7 :SHL: CAN_TSR_TME_Pos)                       ;!< 0x1C000000
CAN_TSR_TME            EQU CAN_TSR_TME_Msk                                 ;!<TME[2:0] bits
CAN_TSR_TME0_Pos       EQU (26)
CAN_TSR_TME0_Msk       EQU (0x1 :SHL: CAN_TSR_TME0_Pos)                      ;!< 0x04000000
CAN_TSR_TME0           EQU CAN_TSR_TME0_Msk                                ;!<Transmit Mailbox 0 Empty
CAN_TSR_TME1_Pos       EQU (27)
CAN_TSR_TME1_Msk       EQU (0x1 :SHL: CAN_TSR_TME1_Pos)                      ;!< 0x08000000
CAN_TSR_TME1           EQU CAN_TSR_TME1_Msk                                ;!<Transmit Mailbox 1 Empty
CAN_TSR_TME2_Pos       EQU (28)
CAN_TSR_TME2_Msk       EQU (0x1 :SHL: CAN_TSR_TME2_Pos)                      ;!< 0x10000000
CAN_TSR_TME2           EQU CAN_TSR_TME2_Msk                                ;!<Transmit Mailbox 2 Empty

CAN_TSR_LOW_Pos        EQU (29)
CAN_TSR_LOW_Msk        EQU (0x7 :SHL: CAN_TSR_LOW_Pos)                       ;!< 0xE0000000
CAN_TSR_LOW            EQU CAN_TSR_LOW_Msk                                 ;!<LOW[2:0] bits
CAN_TSR_LOW0_Pos       EQU (29)
CAN_TSR_LOW0_Msk       EQU (0x1 :SHL: CAN_TSR_LOW0_Pos)                      ;!< 0x20000000
CAN_TSR_LOW0           EQU CAN_TSR_LOW0_Msk                                ;!<Lowest Priority Flag for Mailbox 0
CAN_TSR_LOW1_Pos       EQU (30)
CAN_TSR_LOW1_Msk       EQU (0x1 :SHL: CAN_TSR_LOW1_Pos)                      ;!< 0x40000000
CAN_TSR_LOW1           EQU CAN_TSR_LOW1_Msk                                ;!<Lowest Priority Flag for Mailbox 1
CAN_TSR_LOW2_Pos       EQU (31)
CAN_TSR_LOW2_Msk       EQU (0x1 :SHL: CAN_TSR_LOW2_Pos)                      ;!< 0x80000000
CAN_TSR_LOW2           EQU CAN_TSR_LOW2_Msk                                ;!<Lowest Priority Flag for Mailbox 2

;******************  Bit definition for CAN_RF0R register  ******************
CAN_RF0R_FMP0_Pos      EQU (0)
CAN_RF0R_FMP0_Msk      EQU (0x3 :SHL: CAN_RF0R_FMP0_Pos)                     ;!< 0x00000003
CAN_RF0R_FMP0          EQU CAN_RF0R_FMP0_Msk                               ;!<FIFO 0 Message Pending
CAN_RF0R_FULL0_Pos     EQU (3)
CAN_RF0R_FULL0_Msk     EQU (0x1 :SHL: CAN_RF0R_FULL0_Pos)                    ;!< 0x00000008
CAN_RF0R_FULL0         EQU CAN_RF0R_FULL0_Msk                              ;!<FIFO 0 Full
CAN_RF0R_FOVR0_Pos     EQU (4)
CAN_RF0R_FOVR0_Msk     EQU (0x1 :SHL: CAN_RF0R_FOVR0_Pos)                    ;!< 0x00000010
CAN_RF0R_FOVR0         EQU CAN_RF0R_FOVR0_Msk                              ;!<FIFO 0 Overrun
CAN_RF0R_RFOM0_Pos     EQU (5)
CAN_RF0R_RFOM0_Msk     EQU (0x1 :SHL: CAN_RF0R_RFOM0_Pos)                    ;!< 0x00000020
CAN_RF0R_RFOM0         EQU CAN_RF0R_RFOM0_Msk                              ;!<Release FIFO 0 Output Mailbox

;******************  Bit definition for CAN_RF1R register  ******************
CAN_RF1R_FMP1_Pos      EQU (0)
CAN_RF1R_FMP1_Msk      EQU (0x3 :SHL: CAN_RF1R_FMP1_Pos)                     ;!< 0x00000003
CAN_RF1R_FMP1          EQU CAN_RF1R_FMP1_Msk                               ;!<FIFO 1 Message Pending
CAN_RF1R_FULL1_Pos     EQU (3)
CAN_RF1R_FULL1_Msk     EQU (0x1 :SHL: CAN_RF1R_FULL1_Pos)                    ;!< 0x00000008
CAN_RF1R_FULL1         EQU CAN_RF1R_FULL1_Msk                              ;!<FIFO 1 Full
CAN_RF1R_FOVR1_Pos     EQU (4)
CAN_RF1R_FOVR1_Msk     EQU (0x1 :SHL: CAN_RF1R_FOVR1_Pos)                    ;!< 0x00000010
CAN_RF1R_FOVR1         EQU CAN_RF1R_FOVR1_Msk                              ;!<FIFO 1 Overrun
CAN_RF1R_RFOM1_Pos     EQU (5)
CAN_RF1R_RFOM1_Msk     EQU (0x1 :SHL: CAN_RF1R_RFOM1_Pos)                    ;!< 0x00000020
CAN_RF1R_RFOM1         EQU CAN_RF1R_RFOM1_Msk                              ;!<Release FIFO 1 Output Mailbox

;*******************  Bit definition for CAN_IER register  ******************
CAN_IER_TMEIE_Pos      EQU (0)
CAN_IER_TMEIE_Msk      EQU (0x1 :SHL: CAN_IER_TMEIE_Pos)                     ;!< 0x00000001
CAN_IER_TMEIE          EQU CAN_IER_TMEIE_Msk                               ;!<Transmit Mailbox Empty Interrupt Enable
CAN_IER_FMPIE0_Pos     EQU (1)
CAN_IER_FMPIE0_Msk     EQU (0x1 :SHL: CAN_IER_FMPIE0_Pos)                    ;!< 0x00000002
CAN_IER_FMPIE0         EQU CAN_IER_FMPIE0_Msk                              ;!<FIFO Message Pending Interrupt Enable
CAN_IER_FFIE0_Pos      EQU (2)
CAN_IER_FFIE0_Msk      EQU (0x1 :SHL: CAN_IER_FFIE0_Pos)                     ;!< 0x00000004
CAN_IER_FFIE0          EQU CAN_IER_FFIE0_Msk                               ;!<FIFO Full Interrupt Enable
CAN_IER_FOVIE0_Pos     EQU (3)
CAN_IER_FOVIE0_Msk     EQU (0x1 :SHL: CAN_IER_FOVIE0_Pos)                    ;!< 0x00000008
CAN_IER_FOVIE0         EQU CAN_IER_FOVIE0_Msk                              ;!<FIFO Overrun Interrupt Enable
CAN_IER_FMPIE1_Pos     EQU (4)
CAN_IER_FMPIE1_Msk     EQU (0x1 :SHL: CAN_IER_FMPIE1_Pos)                    ;!< 0x00000010
CAN_IER_FMPIE1         EQU CAN_IER_FMPIE1_Msk                              ;!<FIFO Message Pending Interrupt Enable
CAN_IER_FFIE1_Pos      EQU (5)
CAN_IER_FFIE1_Msk      EQU (0x1 :SHL: CAN_IER_FFIE1_Pos)                     ;!< 0x00000020
CAN_IER_FFIE1          EQU CAN_IER_FFIE1_Msk                               ;!<FIFO Full Interrupt Enable
CAN_IER_FOVIE1_Pos     EQU (6)
CAN_IER_FOVIE1_Msk     EQU (0x1 :SHL: CAN_IER_FOVIE1_Pos)                    ;!< 0x00000040
CAN_IER_FOVIE1         EQU CAN_IER_FOVIE1_Msk                              ;!<FIFO Overrun Interrupt Enable
CAN_IER_EWGIE_Pos      EQU (8)
CAN_IER_EWGIE_Msk      EQU (0x1 :SHL: CAN_IER_EWGIE_Pos)                     ;!< 0x00000100
CAN_IER_EWGIE          EQU CAN_IER_EWGIE_Msk                               ;!<Error Warning Interrupt Enable
CAN_IER_EPVIE_Pos      EQU (9)
CAN_IER_EPVIE_Msk      EQU (0x1 :SHL: CAN_IER_EPVIE_Pos)                     ;!< 0x00000200
CAN_IER_EPVIE          EQU CAN_IER_EPVIE_Msk                               ;!<Error Passive Interrupt Enable
CAN_IER_BOFIE_Pos      EQU (10)
CAN_IER_BOFIE_Msk      EQU (0x1 :SHL: CAN_IER_BOFIE_Pos)                     ;!< 0x00000400
CAN_IER_BOFIE          EQU CAN_IER_BOFIE_Msk                               ;!<Bus-Off Interrupt Enable
CAN_IER_LECIE_Pos      EQU (11)
CAN_IER_LECIE_Msk      EQU (0x1 :SHL: CAN_IER_LECIE_Pos)                     ;!< 0x00000800
CAN_IER_LECIE          EQU CAN_IER_LECIE_Msk                               ;!<Last Error Code Interrupt Enable
CAN_IER_ERRIE_Pos      EQU (15)
CAN_IER_ERRIE_Msk      EQU (0x1 :SHL: CAN_IER_ERRIE_Pos)                     ;!< 0x00008000
CAN_IER_ERRIE          EQU CAN_IER_ERRIE_Msk                               ;!<Error Interrupt Enable
CAN_IER_WKUIE_Pos      EQU (16)
CAN_IER_WKUIE_Msk      EQU (0x1 :SHL: CAN_IER_WKUIE_Pos)                     ;!< 0x00010000
CAN_IER_WKUIE          EQU CAN_IER_WKUIE_Msk                               ;!<Wakeup Interrupt Enable
CAN_IER_SLKIE_Pos      EQU (17)
CAN_IER_SLKIE_Msk      EQU (0x1 :SHL: CAN_IER_SLKIE_Pos)                     ;!< 0x00020000
CAN_IER_SLKIE          EQU CAN_IER_SLKIE_Msk                               ;!<Sleep Interrupt Enable

;*******************  Bit definition for CAN_ESR register  ******************
CAN_ESR_EWGF_Pos       EQU (0)
CAN_ESR_EWGF_Msk       EQU (0x1 :SHL: CAN_ESR_EWGF_Pos)                      ;!< 0x00000001
CAN_ESR_EWGF           EQU CAN_ESR_EWGF_Msk                                ;!<Error Warning Flag
CAN_ESR_EPVF_Pos       EQU (1)
CAN_ESR_EPVF_Msk       EQU (0x1 :SHL: CAN_ESR_EPVF_Pos)                      ;!< 0x00000002
CAN_ESR_EPVF           EQU CAN_ESR_EPVF_Msk                                ;!<Error Passive Flag
CAN_ESR_BOFF_Pos       EQU (2)
CAN_ESR_BOFF_Msk       EQU (0x1 :SHL: CAN_ESR_BOFF_Pos)                      ;!< 0x00000004
CAN_ESR_BOFF           EQU CAN_ESR_BOFF_Msk                                ;!<Bus-Off Flag

CAN_ESR_LEC_Pos        EQU (4)
CAN_ESR_LEC_Msk        EQU (0x7 :SHL: CAN_ESR_LEC_Pos)                       ;!< 0x00000070
CAN_ESR_LEC            EQU CAN_ESR_LEC_Msk                                 ;!<LEC[2:0] bits (Last Error Code)
CAN_ESR_LEC_0          EQU (0x1 :SHL: CAN_ESR_LEC_Pos)                       ;!< 0x00000010
CAN_ESR_LEC_1          EQU (0x2 :SHL: CAN_ESR_LEC_Pos)                       ;!< 0x00000020
CAN_ESR_LEC_2          EQU (0x4 :SHL: CAN_ESR_LEC_Pos)                       ;!< 0x00000040

CAN_ESR_TEC_Pos        EQU (16)
CAN_ESR_TEC_Msk        EQU (0xFF :SHL: CAN_ESR_TEC_Pos)                      ;!< 0x00FF0000
CAN_ESR_TEC            EQU CAN_ESR_TEC_Msk                                 ;!<Least significant byte of the 9-bit Transmit Error Counter
CAN_ESR_REC_Pos        EQU (24)
CAN_ESR_REC_Msk        EQU (0xFF :SHL: CAN_ESR_REC_Pos)                      ;!< 0xFF000000
CAN_ESR_REC            EQU CAN_ESR_REC_Msk                                 ;!<Receive Error Counter

;******************  Bit definition for CAN_BTR register  *******************
CAN_BTR_BRP_Pos        EQU (0)
CAN_BTR_BRP_Msk        EQU (0x3FF :SHL: CAN_BTR_BRP_Pos)                     ;!< 0x000003FF
CAN_BTR_BRP            EQU CAN_BTR_BRP_Msk                                 ;!<Baud Rate Prescaler
CAN_BTR_TS1_Pos        EQU (16)
CAN_BTR_TS1_Msk        EQU (0xF :SHL: CAN_BTR_TS1_Pos)                       ;!< 0x000F0000
CAN_BTR_TS1            EQU CAN_BTR_TS1_Msk                                 ;!<Time Segment 1
CAN_BTR_TS1_0          EQU (0x1 :SHL: CAN_BTR_TS1_Pos)                       ;!< 0x00010000
CAN_BTR_TS1_1          EQU (0x2 :SHL: CAN_BTR_TS1_Pos)                       ;!< 0x00020000
CAN_BTR_TS1_2          EQU (0x4 :SHL: CAN_BTR_TS1_Pos)                       ;!< 0x00040000
CAN_BTR_TS1_3          EQU (0x8 :SHL: CAN_BTR_TS1_Pos)                       ;!< 0x00080000
CAN_BTR_TS2_Pos        EQU (20)
CAN_BTR_TS2_Msk        EQU (0x7 :SHL: CAN_BTR_TS2_Pos)                       ;!< 0x00700000
CAN_BTR_TS2            EQU CAN_BTR_TS2_Msk                                 ;!<Time Segment 2
CAN_BTR_TS2_0          EQU (0x1 :SHL: CAN_BTR_TS2_Pos)                       ;!< 0x00100000
CAN_BTR_TS2_1          EQU (0x2 :SHL: CAN_BTR_TS2_Pos)                       ;!< 0x00200000
CAN_BTR_TS2_2          EQU (0x4 :SHL: CAN_BTR_TS2_Pos)                       ;!< 0x00400000
CAN_BTR_SJW_Pos        EQU (24)
CAN_BTR_SJW_Msk        EQU (0x3 :SHL: CAN_BTR_SJW_Pos)                       ;!< 0x03000000
CAN_BTR_SJW            EQU CAN_BTR_SJW_Msk                                 ;!<Resynchronization Jump Width
CAN_BTR_SJW_0          EQU (0x1 :SHL: CAN_BTR_SJW_Pos)                       ;!< 0x01000000
CAN_BTR_SJW_1          EQU (0x2 :SHL: CAN_BTR_SJW_Pos)                       ;!< 0x02000000
CAN_BTR_LBKM_Pos       EQU (30)
CAN_BTR_LBKM_Msk       EQU (0x1 :SHL: CAN_BTR_LBKM_Pos)                      ;!< 0x40000000
CAN_BTR_LBKM           EQU CAN_BTR_LBKM_Msk                                ;!<Loop Back Mode (Debug)
CAN_BTR_SILM_Pos       EQU (31)
CAN_BTR_SILM_Msk       EQU (0x1 :SHL: CAN_BTR_SILM_Pos)                      ;!< 0x80000000
CAN_BTR_SILM           EQU CAN_BTR_SILM_Msk                                ;!<Silent Mode

;!<Mailbox registers
;*****************  Bit definition for CAN_TI0R register  *******************
CAN_TI0R_TXRQ_Pos      EQU (0)
CAN_TI0R_TXRQ_Msk      EQU (0x1 :SHL: CAN_TI0R_TXRQ_Pos)                     ;!< 0x00000001
CAN_TI0R_TXRQ          EQU CAN_TI0R_TXRQ_Msk                               ;!<Transmit Mailbox Request
CAN_TI0R_RTR_Pos       EQU (1)
CAN_TI0R_RTR_Msk       EQU (0x1 :SHL: CAN_TI0R_RTR_Pos)                      ;!< 0x00000002
CAN_TI0R_RTR           EQU CAN_TI0R_RTR_Msk                                ;!<Remote Transmission Request
CAN_TI0R_IDE_Pos       EQU (2)
CAN_TI0R_IDE_Msk       EQU (0x1 :SHL: CAN_TI0R_IDE_Pos)                      ;!< 0x00000004
CAN_TI0R_IDE           EQU CAN_TI0R_IDE_Msk                                ;!<Identifier Extension
CAN_TI0R_EXID_Pos      EQU (3)
CAN_TI0R_EXID_Msk      EQU (0x3FFFF :SHL: CAN_TI0R_EXID_Pos)                 ;!< 0x001FFFF8
CAN_TI0R_EXID          EQU CAN_TI0R_EXID_Msk                               ;!<Extended Identifier
CAN_TI0R_STID_Pos      EQU (21)
CAN_TI0R_STID_Msk      EQU (0x7FF :SHL: CAN_TI0R_STID_Pos)                   ;!< 0xFFE00000
CAN_TI0R_STID          EQU CAN_TI0R_STID_Msk                               ;!<Standard Identifier or Extended Identifier

;*****************  Bit definition for CAN_TDT0R register  ******************
CAN_TDT0R_DLC_Pos      EQU (0)
CAN_TDT0R_DLC_Msk      EQU (0xF :SHL: CAN_TDT0R_DLC_Pos)                     ;!< 0x0000000F
CAN_TDT0R_DLC          EQU CAN_TDT0R_DLC_Msk                               ;!<Data Length Code
CAN_TDT0R_TGT_Pos      EQU (8)
CAN_TDT0R_TGT_Msk      EQU (0x1 :SHL: CAN_TDT0R_TGT_Pos)                     ;!< 0x00000100
CAN_TDT0R_TGT          EQU CAN_TDT0R_TGT_Msk                               ;!<Transmit Global Time
CAN_TDT0R_TIME_Pos     EQU (16)
CAN_TDT0R_TIME_Msk     EQU (0xFFFF :SHL: CAN_TDT0R_TIME_Pos)                 ;!< 0xFFFF0000
CAN_TDT0R_TIME         EQU CAN_TDT0R_TIME_Msk                              ;!<Message Time Stamp

;*****************  Bit definition for CAN_TDL0R register  ******************
CAN_TDL0R_DATA0_Pos    EQU (0)
CAN_TDL0R_DATA0_Msk    EQU (0xFF :SHL: CAN_TDL0R_DATA0_Pos)                  ;!< 0x000000FF
CAN_TDL0R_DATA0        EQU CAN_TDL0R_DATA0_Msk                             ;!<Data byte 0
CAN_TDL0R_DATA1_Pos    EQU (8)
CAN_TDL0R_DATA1_Msk    EQU (0xFF :SHL: CAN_TDL0R_DATA1_Pos)                  ;!< 0x0000FF00
CAN_TDL0R_DATA1        EQU CAN_TDL0R_DATA1_Msk                             ;!<Data byte 1
CAN_TDL0R_DATA2_Pos    EQU (16)
CAN_TDL0R_DATA2_Msk    EQU (0xFF :SHL: CAN_TDL0R_DATA2_Pos)                  ;!< 0x00FF0000
CAN_TDL0R_DATA2        EQU CAN_TDL0R_DATA2_Msk                             ;!<Data byte 2
CAN_TDL0R_DATA3_Pos    EQU (24)
CAN_TDL0R_DATA3_Msk    EQU (0xFF :SHL: CAN_TDL0R_DATA3_Pos)                  ;!< 0xFF000000
CAN_TDL0R_DATA3        EQU CAN_TDL0R_DATA3_Msk                             ;!<Data byte 3

;*****************  Bit definition for CAN_TDH0R register  ******************
CAN_TDH0R_DATA4_Pos    EQU (0)
CAN_TDH0R_DATA4_Msk    EQU (0xFF :SHL: CAN_TDH0R_DATA4_Pos)                  ;!< 0x000000FF
CAN_TDH0R_DATA4        EQU CAN_TDH0R_DATA4_Msk                             ;!<Data byte 4
CAN_TDH0R_DATA5_Pos    EQU (8)
CAN_TDH0R_DATA5_Msk    EQU (0xFF :SHL: CAN_TDH0R_DATA5_Pos)                  ;!< 0x0000FF00
CAN_TDH0R_DATA5        EQU CAN_TDH0R_DATA5_Msk                             ;!<Data byte 5
CAN_TDH0R_DATA6_Pos    EQU (16)
CAN_TDH0R_DATA6_Msk    EQU (0xFF :SHL: CAN_TDH0R_DATA6_Pos)                  ;!< 0x00FF0000
CAN_TDH0R_DATA6        EQU CAN_TDH0R_DATA6_Msk                             ;!<Data byte 6
CAN_TDH0R_DATA7_Pos    EQU (24)
CAN_TDH0R_DATA7_Msk    EQU (0xFF :SHL: CAN_TDH0R_DATA7_Pos)                  ;!< 0xFF000000
CAN_TDH0R_DATA7        EQU CAN_TDH0R_DATA7_Msk                             ;!<Data byte 7

;******************  Bit definition for CAN_TI1R register  ******************
CAN_TI1R_TXRQ_Pos      EQU (0)
CAN_TI1R_TXRQ_Msk      EQU (0x1 :SHL: CAN_TI1R_TXRQ_Pos)                     ;!< 0x00000001
CAN_TI1R_TXRQ          EQU CAN_TI1R_TXRQ_Msk                               ;!<Transmit Mailbox Request
CAN_TI1R_RTR_Pos       EQU (1)
CAN_TI1R_RTR_Msk       EQU (0x1 :SHL: CAN_TI1R_RTR_Pos)                      ;!< 0x00000002
CAN_TI1R_RTR           EQU CAN_TI1R_RTR_Msk                                ;!<Remote Transmission Request
CAN_TI1R_IDE_Pos       EQU (2)
CAN_TI1R_IDE_Msk       EQU (0x1 :SHL: CAN_TI1R_IDE_Pos)                      ;!< 0x00000004
CAN_TI1R_IDE           EQU CAN_TI1R_IDE_Msk                                ;!<Identifier Extension
CAN_TI1R_EXID_Pos      EQU (3)
CAN_TI1R_EXID_Msk      EQU (0x3FFFF :SHL: CAN_TI1R_EXID_Pos)                 ;!< 0x001FFFF8
CAN_TI1R_EXID          EQU CAN_TI1R_EXID_Msk                               ;!<Extended Identifier
CAN_TI1R_STID_Pos      EQU (21)
CAN_TI1R_STID_Msk      EQU (0x7FF :SHL: CAN_TI1R_STID_Pos)                   ;!< 0xFFE00000
CAN_TI1R_STID          EQU CAN_TI1R_STID_Msk                               ;!<Standard Identifier or Extended Identifier

;******************  Bit definition for CAN_TDT1R register  *****************
CAN_TDT1R_DLC_Pos      EQU (0)
CAN_TDT1R_DLC_Msk      EQU (0xF :SHL: CAN_TDT1R_DLC_Pos)                     ;!< 0x0000000F
CAN_TDT1R_DLC          EQU CAN_TDT1R_DLC_Msk                               ;!<Data Length Code
CAN_TDT1R_TGT_Pos      EQU (8)
CAN_TDT1R_TGT_Msk      EQU (0x1 :SHL: CAN_TDT1R_TGT_Pos)                     ;!< 0x00000100
CAN_TDT1R_TGT          EQU CAN_TDT1R_TGT_Msk                               ;!<Transmit Global Time
CAN_TDT1R_TIME_Pos     EQU (16)
CAN_TDT1R_TIME_Msk     EQU (0xFFFF :SHL: CAN_TDT1R_TIME_Pos)                 ;!< 0xFFFF0000
CAN_TDT1R_TIME         EQU CAN_TDT1R_TIME_Msk                              ;!<Message Time Stamp

;******************  Bit definition for CAN_TDL1R register  *****************
CAN_TDL1R_DATA0_Pos    EQU (0)
CAN_TDL1R_DATA0_Msk    EQU (0xFF :SHL: CAN_TDL1R_DATA0_Pos)                  ;!< 0x000000FF
CAN_TDL1R_DATA0        EQU CAN_TDL1R_DATA0_Msk                             ;!<Data byte 0
CAN_TDL1R_DATA1_Pos    EQU (8)
CAN_TDL1R_DATA1_Msk    EQU (0xFF :SHL: CAN_TDL1R_DATA1_Pos)                  ;!< 0x0000FF00
CAN_TDL1R_DATA1        EQU CAN_TDL1R_DATA1_Msk                             ;!<Data byte 1
CAN_TDL1R_DATA2_Pos    EQU (16)
CAN_TDL1R_DATA2_Msk    EQU (0xFF :SHL: CAN_TDL1R_DATA2_Pos)                  ;!< 0x00FF0000
CAN_TDL1R_DATA2        EQU CAN_TDL1R_DATA2_Msk                             ;!<Data byte 2
CAN_TDL1R_DATA3_Pos    EQU (24)
CAN_TDL1R_DATA3_Msk    EQU (0xFF :SHL: CAN_TDL1R_DATA3_Pos)                  ;!< 0xFF000000
CAN_TDL1R_DATA3        EQU CAN_TDL1R_DATA3_Msk                             ;!<Data byte 3

;******************  Bit definition for CAN_TDH1R register  *****************
CAN_TDH1R_DATA4_Pos    EQU (0)
CAN_TDH1R_DATA4_Msk    EQU (0xFF :SHL: CAN_TDH1R_DATA4_Pos)                  ;!< 0x000000FF
CAN_TDH1R_DATA4        EQU CAN_TDH1R_DATA4_Msk                             ;!<Data byte 4
CAN_TDH1R_DATA5_Pos    EQU (8)
CAN_TDH1R_DATA5_Msk    EQU (0xFF :SHL: CAN_TDH1R_DATA5_Pos)                  ;!< 0x0000FF00
CAN_TDH1R_DATA5        EQU CAN_TDH1R_DATA5_Msk                             ;!<Data byte 5
CAN_TDH1R_DATA6_Pos    EQU (16)
CAN_TDH1R_DATA6_Msk    EQU (0xFF :SHL: CAN_TDH1R_DATA6_Pos)                  ;!< 0x00FF0000
CAN_TDH1R_DATA6        EQU CAN_TDH1R_DATA6_Msk                             ;!<Data byte 6
CAN_TDH1R_DATA7_Pos    EQU (24)
CAN_TDH1R_DATA7_Msk    EQU (0xFF :SHL: CAN_TDH1R_DATA7_Pos)                  ;!< 0xFF000000
CAN_TDH1R_DATA7        EQU CAN_TDH1R_DATA7_Msk                             ;!<Data byte 7

;******************  Bit definition for CAN_TI2R register  ******************
CAN_TI2R_TXRQ_Pos      EQU (0)
CAN_TI2R_TXRQ_Msk      EQU (0x1 :SHL: CAN_TI2R_TXRQ_Pos)                     ;!< 0x00000001
CAN_TI2R_TXRQ          EQU CAN_TI2R_TXRQ_Msk                               ;!<Transmit Mailbox Request
CAN_TI2R_RTR_Pos       EQU (1)
CAN_TI2R_RTR_Msk       EQU (0x1 :SHL: CAN_TI2R_RTR_Pos)                      ;!< 0x00000002
CAN_TI2R_RTR           EQU CAN_TI2R_RTR_Msk                                ;!<Remote Transmission Request
CAN_TI2R_IDE_Pos       EQU (2)
CAN_TI2R_IDE_Msk       EQU (0x1 :SHL: CAN_TI2R_IDE_Pos)                      ;!< 0x00000004
CAN_TI2R_IDE           EQU CAN_TI2R_IDE_Msk                                ;!<Identifier Extension
CAN_TI2R_EXID_Pos      EQU (3)
CAN_TI2R_EXID_Msk      EQU (0x3FFFF :SHL: CAN_TI2R_EXID_Pos)                 ;!< 0x001FFFF8
CAN_TI2R_EXID          EQU CAN_TI2R_EXID_Msk                               ;!<Extended identifier
CAN_TI2R_STID_Pos      EQU (21)
CAN_TI2R_STID_Msk      EQU (0x7FF :SHL: CAN_TI2R_STID_Pos)                   ;!< 0xFFE00000
CAN_TI2R_STID          EQU CAN_TI2R_STID_Msk                               ;!<Standard Identifier or Extended Identifier

;******************  Bit definition for CAN_TDT2R register  *****************
CAN_TDT2R_DLC_Pos      EQU (0)
CAN_TDT2R_DLC_Msk      EQU (0xF :SHL: CAN_TDT2R_DLC_Pos)                     ;!< 0x0000000F
CAN_TDT2R_DLC          EQU CAN_TDT2R_DLC_Msk                               ;!<Data Length Code
CAN_TDT2R_TGT_Pos      EQU (8)
CAN_TDT2R_TGT_Msk      EQU (0x1 :SHL: CAN_TDT2R_TGT_Pos)                     ;!< 0x00000100
CAN_TDT2R_TGT          EQU CAN_TDT2R_TGT_Msk                               ;!<Transmit Global Time
CAN_TDT2R_TIME_Pos     EQU (16)
CAN_TDT2R_TIME_Msk     EQU (0xFFFF :SHL: CAN_TDT2R_TIME_Pos)                 ;!< 0xFFFF0000
CAN_TDT2R_TIME         EQU CAN_TDT2R_TIME_Msk                              ;!<Message Time Stamp

;******************  Bit definition for CAN_TDL2R register  *****************
CAN_TDL2R_DATA0_Pos    EQU (0)
CAN_TDL2R_DATA0_Msk    EQU (0xFF :SHL: CAN_TDL2R_DATA0_Pos)                  ;!< 0x000000FF
CAN_TDL2R_DATA0        EQU CAN_TDL2R_DATA0_Msk                             ;!<Data byte 0
CAN_TDL2R_DATA1_Pos    EQU (8)
CAN_TDL2R_DATA1_Msk    EQU (0xFF :SHL: CAN_TDL2R_DATA1_Pos)                  ;!< 0x0000FF00
CAN_TDL2R_DATA1        EQU CAN_TDL2R_DATA1_Msk                             ;!<Data byte 1
CAN_TDL2R_DATA2_Pos    EQU (16)
CAN_TDL2R_DATA2_Msk    EQU (0xFF :SHL: CAN_TDL2R_DATA2_Pos)                  ;!< 0x00FF0000
CAN_TDL2R_DATA2        EQU CAN_TDL2R_DATA2_Msk                             ;!<Data byte 2
CAN_TDL2R_DATA3_Pos    EQU (24)
CAN_TDL2R_DATA3_Msk    EQU (0xFF :SHL: CAN_TDL2R_DATA3_Pos)                  ;!< 0xFF000000
CAN_TDL2R_DATA3        EQU CAN_TDL2R_DATA3_Msk                             ;!<Data byte 3

;******************  Bit definition for CAN_TDH2R register  *****************
CAN_TDH2R_DATA4_Pos    EQU (0)
CAN_TDH2R_DATA4_Msk    EQU (0xFF :SHL: CAN_TDH2R_DATA4_Pos)                  ;!< 0x000000FF
CAN_TDH2R_DATA4        EQU CAN_TDH2R_DATA4_Msk                             ;!<Data byte 4
CAN_TDH2R_DATA5_Pos    EQU (8)
CAN_TDH2R_DATA5_Msk    EQU (0xFF :SHL: CAN_TDH2R_DATA5_Pos)                  ;!< 0x0000FF00
CAN_TDH2R_DATA5        EQU CAN_TDH2R_DATA5_Msk                             ;!<Data byte 5
CAN_TDH2R_DATA6_Pos    EQU (16)
CAN_TDH2R_DATA6_Msk    EQU (0xFF :SHL: CAN_TDH2R_DATA6_Pos)                  ;!< 0x00FF0000
CAN_TDH2R_DATA6        EQU CAN_TDH2R_DATA6_Msk                             ;!<Data byte 6
CAN_TDH2R_DATA7_Pos    EQU (24)
CAN_TDH2R_DATA7_Msk    EQU (0xFF :SHL: CAN_TDH2R_DATA7_Pos)                  ;!< 0xFF000000
CAN_TDH2R_DATA7        EQU CAN_TDH2R_DATA7_Msk                             ;!<Data byte 7

;******************  Bit definition for CAN_RI0R register  ******************
CAN_RI0R_RTR_Pos       EQU (1)
CAN_RI0R_RTR_Msk       EQU (0x1 :SHL: CAN_RI0R_RTR_Pos)                      ;!< 0x00000002
CAN_RI0R_RTR           EQU CAN_RI0R_RTR_Msk                                ;!<Remote Transmission Request
CAN_RI0R_IDE_Pos       EQU (2)
CAN_RI0R_IDE_Msk       EQU (0x1 :SHL: CAN_RI0R_IDE_Pos)                      ;!< 0x00000004
CAN_RI0R_IDE           EQU CAN_RI0R_IDE_Msk                                ;!<Identifier Extension
CAN_RI0R_EXID_Pos      EQU (3)
CAN_RI0R_EXID_Msk      EQU (0x3FFFF :SHL: CAN_RI0R_EXID_Pos)                 ;!< 0x001FFFF8
CAN_RI0R_EXID          EQU CAN_RI0R_EXID_Msk                               ;!<Extended Identifier
CAN_RI0R_STID_Pos      EQU (21)
CAN_RI0R_STID_Msk      EQU (0x7FF :SHL: CAN_RI0R_STID_Pos)                   ;!< 0xFFE00000
CAN_RI0R_STID          EQU CAN_RI0R_STID_Msk                               ;!<Standard Identifier or Extended Identifier

;******************  Bit definition for CAN_RDT0R register  *****************
CAN_RDT0R_DLC_Pos      EQU (0)
CAN_RDT0R_DLC_Msk      EQU (0xF :SHL: CAN_RDT0R_DLC_Pos)                     ;!< 0x0000000F
CAN_RDT0R_DLC          EQU CAN_RDT0R_DLC_Msk                               ;!<Data Length Code
CAN_RDT0R_FMI_Pos      EQU (8)
CAN_RDT0R_FMI_Msk      EQU (0xFF :SHL: CAN_RDT0R_FMI_Pos)                    ;!< 0x0000FF00
CAN_RDT0R_FMI          EQU CAN_RDT0R_FMI_Msk                               ;!<Filter Match Index
CAN_RDT0R_TIME_Pos     EQU (16)
CAN_RDT0R_TIME_Msk     EQU (0xFFFF :SHL: CAN_RDT0R_TIME_Pos)                 ;!< 0xFFFF0000
CAN_RDT0R_TIME         EQU CAN_RDT0R_TIME_Msk                              ;!<Message Time Stamp

;******************  Bit definition for CAN_RDL0R register  *****************
CAN_RDL0R_DATA0_Pos    EQU (0)
CAN_RDL0R_DATA0_Msk    EQU (0xFF :SHL: CAN_RDL0R_DATA0_Pos)                  ;!< 0x000000FF
CAN_RDL0R_DATA0        EQU CAN_RDL0R_DATA0_Msk                             ;!<Data byte 0
CAN_RDL0R_DATA1_Pos    EQU (8)
CAN_RDL0R_DATA1_Msk    EQU (0xFF :SHL: CAN_RDL0R_DATA1_Pos)                  ;!< 0x0000FF00
CAN_RDL0R_DATA1        EQU CAN_RDL0R_DATA1_Msk                             ;!<Data byte 1
CAN_RDL0R_DATA2_Pos    EQU (16)
CAN_RDL0R_DATA2_Msk    EQU (0xFF :SHL: CAN_RDL0R_DATA2_Pos)                  ;!< 0x00FF0000
CAN_RDL0R_DATA2        EQU CAN_RDL0R_DATA2_Msk                             ;!<Data byte 2
CAN_RDL0R_DATA3_Pos    EQU (24)
CAN_RDL0R_DATA3_Msk    EQU (0xFF :SHL: CAN_RDL0R_DATA3_Pos)                  ;!< 0xFF000000
CAN_RDL0R_DATA3        EQU CAN_RDL0R_DATA3_Msk                             ;!<Data byte 3

;******************  Bit definition for CAN_RDH0R register  *****************
CAN_RDH0R_DATA4_Pos    EQU (0)
CAN_RDH0R_DATA4_Msk    EQU (0xFF :SHL: CAN_RDH0R_DATA4_Pos)                  ;!< 0x000000FF
CAN_RDH0R_DATA4        EQU CAN_RDH0R_DATA4_Msk                             ;!<Data byte 4
CAN_RDH0R_DATA5_Pos    EQU (8)
CAN_RDH0R_DATA5_Msk    EQU (0xFF :SHL: CAN_RDH0R_DATA5_Pos)                  ;!< 0x0000FF00
CAN_RDH0R_DATA5        EQU CAN_RDH0R_DATA5_Msk                             ;!<Data byte 5
CAN_RDH0R_DATA6_Pos    EQU (16)
CAN_RDH0R_DATA6_Msk    EQU (0xFF :SHL: CAN_RDH0R_DATA6_Pos)                  ;!< 0x00FF0000
CAN_RDH0R_DATA6        EQU CAN_RDH0R_DATA6_Msk                             ;!<Data byte 6
CAN_RDH0R_DATA7_Pos    EQU (24)
CAN_RDH0R_DATA7_Msk    EQU (0xFF :SHL: CAN_RDH0R_DATA7_Pos)                  ;!< 0xFF000000
CAN_RDH0R_DATA7        EQU CAN_RDH0R_DATA7_Msk                             ;!<Data byte 7

;******************  Bit definition for CAN_RI1R register  ******************
CAN_RI1R_RTR_Pos       EQU (1)
CAN_RI1R_RTR_Msk       EQU (0x1 :SHL: CAN_RI1R_RTR_Pos)                      ;!< 0x00000002
CAN_RI1R_RTR           EQU CAN_RI1R_RTR_Msk                                ;!<Remote Transmission Request
CAN_RI1R_IDE_Pos       EQU (2)
CAN_RI1R_IDE_Msk       EQU (0x1 :SHL: CAN_RI1R_IDE_Pos)                      ;!< 0x00000004
CAN_RI1R_IDE           EQU CAN_RI1R_IDE_Msk                                ;!<Identifier Extension
CAN_RI1R_EXID_Pos      EQU (3)
CAN_RI1R_EXID_Msk      EQU (0x3FFFF :SHL: CAN_RI1R_EXID_Pos)                 ;!< 0x001FFFF8
CAN_RI1R_EXID          EQU CAN_RI1R_EXID_Msk                               ;!<Extended identifier
CAN_RI1R_STID_Pos      EQU (21)
CAN_RI1R_STID_Msk      EQU (0x7FF :SHL: CAN_RI1R_STID_Pos)                   ;!< 0xFFE00000
CAN_RI1R_STID          EQU CAN_RI1R_STID_Msk                               ;!<Standard Identifier or Extended Identifier

;******************  Bit definition for CAN_RDT1R register  *****************
CAN_RDT1R_DLC_Pos      EQU (0)
CAN_RDT1R_DLC_Msk      EQU (0xF :SHL: CAN_RDT1R_DLC_Pos)                     ;!< 0x0000000F
CAN_RDT1R_DLC          EQU CAN_RDT1R_DLC_Msk                               ;!<Data Length Code
CAN_RDT1R_FMI_Pos      EQU (8)
CAN_RDT1R_FMI_Msk      EQU (0xFF :SHL: CAN_RDT1R_FMI_Pos)                    ;!< 0x0000FF00
CAN_RDT1R_FMI          EQU CAN_RDT1R_FMI_Msk                               ;!<Filter Match Index
CAN_RDT1R_TIME_Pos     EQU (16)
CAN_RDT1R_TIME_Msk     EQU (0xFFFF :SHL: CAN_RDT1R_TIME_Pos)                 ;!< 0xFFFF0000
CAN_RDT1R_TIME         EQU CAN_RDT1R_TIME_Msk                              ;!<Message Time Stamp

;******************  Bit definition for CAN_RDL1R register  *****************
CAN_RDL1R_DATA0_Pos    EQU (0)
CAN_RDL1R_DATA0_Msk    EQU (0xFF :SHL: CAN_RDL1R_DATA0_Pos)                  ;!< 0x000000FF
CAN_RDL1R_DATA0        EQU CAN_RDL1R_DATA0_Msk                             ;!<Data byte 0
CAN_RDL1R_DATA1_Pos    EQU (8)
CAN_RDL1R_DATA1_Msk    EQU (0xFF :SHL: CAN_RDL1R_DATA1_Pos)                  ;!< 0x0000FF00
CAN_RDL1R_DATA1        EQU CAN_RDL1R_DATA1_Msk                             ;!<Data byte 1
CAN_RDL1R_DATA2_Pos    EQU (16)
CAN_RDL1R_DATA2_Msk    EQU (0xFF :SHL: CAN_RDL1R_DATA2_Pos)                  ;!< 0x00FF0000
CAN_RDL1R_DATA2        EQU CAN_RDL1R_DATA2_Msk                             ;!<Data byte 2
CAN_RDL1R_DATA3_Pos    EQU (24)
CAN_RDL1R_DATA3_Msk    EQU (0xFF :SHL: CAN_RDL1R_DATA3_Pos)                  ;!< 0xFF000000
CAN_RDL1R_DATA3        EQU CAN_RDL1R_DATA3_Msk                             ;!<Data byte 3

;******************  Bit definition for CAN_RDH1R register  *****************
CAN_RDH1R_DATA4_Pos    EQU (0)
CAN_RDH1R_DATA4_Msk    EQU (0xFF :SHL: CAN_RDH1R_DATA4_Pos)                  ;!< 0x000000FF
CAN_RDH1R_DATA4        EQU CAN_RDH1R_DATA4_Msk                             ;!<Data byte 4
CAN_RDH1R_DATA5_Pos    EQU (8)
CAN_RDH1R_DATA5_Msk    EQU (0xFF :SHL: CAN_RDH1R_DATA5_Pos)                  ;!< 0x0000FF00
CAN_RDH1R_DATA5        EQU CAN_RDH1R_DATA5_Msk                             ;!<Data byte 5
CAN_RDH1R_DATA6_Pos    EQU (16)
CAN_RDH1R_DATA6_Msk    EQU (0xFF :SHL: CAN_RDH1R_DATA6_Pos)                  ;!< 0x00FF0000
CAN_RDH1R_DATA6        EQU CAN_RDH1R_DATA6_Msk                             ;!<Data byte 6
CAN_RDH1R_DATA7_Pos    EQU (24)
CAN_RDH1R_DATA7_Msk    EQU (0xFF :SHL: CAN_RDH1R_DATA7_Pos)                  ;!< 0xFF000000
CAN_RDH1R_DATA7        EQU CAN_RDH1R_DATA7_Msk                             ;!<Data byte 7

;!<CAN filter registers
;******************  Bit definition for CAN_FMR register  *******************
CAN_FMR_FINIT_Pos      EQU (0)
CAN_FMR_FINIT_Msk      EQU (0x1 :SHL: CAN_FMR_FINIT_Pos)                     ;!< 0x00000001
CAN_FMR_FINIT          EQU CAN_FMR_FINIT_Msk                               ;!<Filter Init Mode

;******************  Bit definition for CAN_FM1R register  ******************
CAN_FM1R_FBM_Pos       EQU (0)
CAN_FM1R_FBM_Msk       EQU (0x3FFF :SHL: CAN_FM1R_FBM_Pos)                   ;!< 0x00003FFF
CAN_FM1R_FBM           EQU CAN_FM1R_FBM_Msk                                ;!<Filter Mode
CAN_FM1R_FBM0_Pos      EQU (0)
CAN_FM1R_FBM0_Msk      EQU (0x1 :SHL: CAN_FM1R_FBM0_Pos)                     ;!< 0x00000001
CAN_FM1R_FBM0          EQU CAN_FM1R_FBM0_Msk                               ;!<Filter Init Mode bit 0
CAN_FM1R_FBM1_Pos      EQU (1)
CAN_FM1R_FBM1_Msk      EQU (0x1 :SHL: CAN_FM1R_FBM1_Pos)                     ;!< 0x00000002
CAN_FM1R_FBM1          EQU CAN_FM1R_FBM1_Msk                               ;!<Filter Init Mode bit 1
CAN_FM1R_FBM2_Pos      EQU (2)
CAN_FM1R_FBM2_Msk      EQU (0x1 :SHL: CAN_FM1R_FBM2_Pos)                     ;!< 0x00000004
CAN_FM1R_FBM2          EQU CAN_FM1R_FBM2_Msk                               ;!<Filter Init Mode bit 2
CAN_FM1R_FBM3_Pos      EQU (3)
CAN_FM1R_FBM3_Msk      EQU (0x1 :SHL: CAN_FM1R_FBM3_Pos)                     ;!< 0x00000008
CAN_FM1R_FBM3          EQU CAN_FM1R_FBM3_Msk                               ;!<Filter Init Mode bit 3
CAN_FM1R_FBM4_Pos      EQU (4)
CAN_FM1R_FBM4_Msk      EQU (0x1 :SHL: CAN_FM1R_FBM4_Pos)                     ;!< 0x00000010
CAN_FM1R_FBM4          EQU CAN_FM1R_FBM4_Msk                               ;!<Filter Init Mode bit 4
CAN_FM1R_FBM5_Pos      EQU (5)
CAN_FM1R_FBM5_Msk      EQU (0x1 :SHL: CAN_FM1R_FBM5_Pos)                     ;!< 0x00000020
CAN_FM1R_FBM5          EQU CAN_FM1R_FBM5_Msk                               ;!<Filter Init Mode bit 5
CAN_FM1R_FBM6_Pos      EQU (6)
CAN_FM1R_FBM6_Msk      EQU (0x1 :SHL: CAN_FM1R_FBM6_Pos)                     ;!< 0x00000040
CAN_FM1R_FBM6          EQU CAN_FM1R_FBM6_Msk                               ;!<Filter Init Mode bit 6
CAN_FM1R_FBM7_Pos      EQU (7)
CAN_FM1R_FBM7_Msk      EQU (0x1 :SHL: CAN_FM1R_FBM7_Pos)                     ;!< 0x00000080
CAN_FM1R_FBM7          EQU CAN_FM1R_FBM7_Msk                               ;!<Filter Init Mode bit 7
CAN_FM1R_FBM8_Pos      EQU (8)
CAN_FM1R_FBM8_Msk      EQU (0x1 :SHL: CAN_FM1R_FBM8_Pos)                     ;!< 0x00000100
CAN_FM1R_FBM8          EQU CAN_FM1R_FBM8_Msk                               ;!<Filter Init Mode bit 8
CAN_FM1R_FBM9_Pos      EQU (9)
CAN_FM1R_FBM9_Msk      EQU (0x1 :SHL: CAN_FM1R_FBM9_Pos)                     ;!< 0x00000200
CAN_FM1R_FBM9          EQU CAN_FM1R_FBM9_Msk                               ;!<Filter Init Mode bit 9
CAN_FM1R_FBM10_Pos     EQU (10)
CAN_FM1R_FBM10_Msk     EQU (0x1 :SHL: CAN_FM1R_FBM10_Pos)                    ;!< 0x00000400
CAN_FM1R_FBM10         EQU CAN_FM1R_FBM10_Msk                              ;!<Filter Init Mode bit 10
CAN_FM1R_FBM11_Pos     EQU (11)
CAN_FM1R_FBM11_Msk     EQU (0x1 :SHL: CAN_FM1R_FBM11_Pos)                    ;!< 0x00000800
CAN_FM1R_FBM11         EQU CAN_FM1R_FBM11_Msk                              ;!<Filter Init Mode bit 11
CAN_FM1R_FBM12_Pos     EQU (12)
CAN_FM1R_FBM12_Msk     EQU (0x1 :SHL: CAN_FM1R_FBM12_Pos)                    ;!< 0x00001000
CAN_FM1R_FBM12         EQU CAN_FM1R_FBM12_Msk                              ;!<Filter Init Mode bit 12
CAN_FM1R_FBM13_Pos     EQU (13)
CAN_FM1R_FBM13_Msk     EQU (0x1 :SHL: CAN_FM1R_FBM13_Pos)                    ;!< 0x00002000
CAN_FM1R_FBM13         EQU CAN_FM1R_FBM13_Msk                              ;!<Filter Init Mode bit 13

;******************  Bit definition for CAN_FS1R register  ******************
CAN_FS1R_FSC_Pos       EQU (0)
CAN_FS1R_FSC_Msk       EQU (0x3FFF :SHL: CAN_FS1R_FSC_Pos)                   ;!< 0x00003FFF
CAN_FS1R_FSC           EQU CAN_FS1R_FSC_Msk                                ;!<Filter Scale Configuration
CAN_FS1R_FSC0_Pos      EQU (0)
CAN_FS1R_FSC0_Msk      EQU (0x1 :SHL: CAN_FS1R_FSC0_Pos)                     ;!< 0x00000001
CAN_FS1R_FSC0          EQU CAN_FS1R_FSC0_Msk                               ;!<Filter Scale Configuration bit 0
CAN_FS1R_FSC1_Pos      EQU (1)
CAN_FS1R_FSC1_Msk      EQU (0x1 :SHL: CAN_FS1R_FSC1_Pos)                     ;!< 0x00000002
CAN_FS1R_FSC1          EQU CAN_FS1R_FSC1_Msk                               ;!<Filter Scale Configuration bit 1
CAN_FS1R_FSC2_Pos      EQU (2)
CAN_FS1R_FSC2_Msk      EQU (0x1 :SHL: CAN_FS1R_FSC2_Pos)                     ;!< 0x00000004
CAN_FS1R_FSC2          EQU CAN_FS1R_FSC2_Msk                               ;!<Filter Scale Configuration bit 2
CAN_FS1R_FSC3_Pos      EQU (3)
CAN_FS1R_FSC3_Msk      EQU (0x1 :SHL: CAN_FS1R_FSC3_Pos)                     ;!< 0x00000008
CAN_FS1R_FSC3          EQU CAN_FS1R_FSC3_Msk                               ;!<Filter Scale Configuration bit 3
CAN_FS1R_FSC4_Pos      EQU (4)
CAN_FS1R_FSC4_Msk      EQU (0x1 :SHL: CAN_FS1R_FSC4_Pos)                     ;!< 0x00000010
CAN_FS1R_FSC4          EQU CAN_FS1R_FSC4_Msk                               ;!<Filter Scale Configuration bit 4
CAN_FS1R_FSC5_Pos      EQU (5)
CAN_FS1R_FSC5_Msk      EQU (0x1 :SHL: CAN_FS1R_FSC5_Pos)                     ;!< 0x00000020
CAN_FS1R_FSC5          EQU CAN_FS1R_FSC5_Msk                               ;!<Filter Scale Configuration bit 5
CAN_FS1R_FSC6_Pos      EQU (6)
CAN_FS1R_FSC6_Msk      EQU (0x1 :SHL: CAN_FS1R_FSC6_Pos)                     ;!< 0x00000040
CAN_FS1R_FSC6          EQU CAN_FS1R_FSC6_Msk                               ;!<Filter Scale Configuration bit 6
CAN_FS1R_FSC7_Pos      EQU (7)
CAN_FS1R_FSC7_Msk      EQU (0x1 :SHL: CAN_FS1R_FSC7_Pos)                     ;!< 0x00000080
CAN_FS1R_FSC7          EQU CAN_FS1R_FSC7_Msk                               ;!<Filter Scale Configuration bit 7
CAN_FS1R_FSC8_Pos      EQU (8)
CAN_FS1R_FSC8_Msk      EQU (0x1 :SHL: CAN_FS1R_FSC8_Pos)                     ;!< 0x00000100
CAN_FS1R_FSC8          EQU CAN_FS1R_FSC8_Msk                               ;!<Filter Scale Configuration bit 8
CAN_FS1R_FSC9_Pos      EQU (9)
CAN_FS1R_FSC9_Msk      EQU (0x1 :SHL: CAN_FS1R_FSC9_Pos)                     ;!< 0x00000200
CAN_FS1R_FSC9          EQU CAN_FS1R_FSC9_Msk                               ;!<Filter Scale Configuration bit 9
CAN_FS1R_FSC10_Pos     EQU (10)
CAN_FS1R_FSC10_Msk     EQU (0x1 :SHL: CAN_FS1R_FSC10_Pos)                    ;!< 0x00000400
CAN_FS1R_FSC10         EQU CAN_FS1R_FSC10_Msk                              ;!<Filter Scale Configuration bit 10
CAN_FS1R_FSC11_Pos     EQU (11)
CAN_FS1R_FSC11_Msk     EQU (0x1 :SHL: CAN_FS1R_FSC11_Pos)                    ;!< 0x00000800
CAN_FS1R_FSC11         EQU CAN_FS1R_FSC11_Msk                              ;!<Filter Scale Configuration bit 11
CAN_FS1R_FSC12_Pos     EQU (12)
CAN_FS1R_FSC12_Msk     EQU (0x1 :SHL: CAN_FS1R_FSC12_Pos)                    ;!< 0x00001000
CAN_FS1R_FSC12         EQU CAN_FS1R_FSC12_Msk                              ;!<Filter Scale Configuration bit 12
CAN_FS1R_FSC13_Pos     EQU (13)
CAN_FS1R_FSC13_Msk     EQU (0x1 :SHL: CAN_FS1R_FSC13_Pos)                    ;!< 0x00002000
CAN_FS1R_FSC13         EQU CAN_FS1R_FSC13_Msk                              ;!<Filter Scale Configuration bit 13

;*****************  Bit definition for CAN_FFA1R register  ******************
CAN_FFA1R_FFA_Pos      EQU (0)
CAN_FFA1R_FFA_Msk      EQU (0x3FFF :SHL: CAN_FFA1R_FFA_Pos)                  ;!< 0x00003FFF
CAN_FFA1R_FFA          EQU CAN_FFA1R_FFA_Msk                               ;!<Filter FIFO Assignment
CAN_FFA1R_FFA0_Pos     EQU (0)
CAN_FFA1R_FFA0_Msk     EQU (0x1 :SHL: CAN_FFA1R_FFA0_Pos)                    ;!< 0x00000001
CAN_FFA1R_FFA0         EQU CAN_FFA1R_FFA0_Msk                              ;!<Filter FIFO Assignment for Filter 0
CAN_FFA1R_FFA1_Pos     EQU (1)
CAN_FFA1R_FFA1_Msk     EQU (0x1 :SHL: CAN_FFA1R_FFA1_Pos)                    ;!< 0x00000002
CAN_FFA1R_FFA1         EQU CAN_FFA1R_FFA1_Msk                              ;!<Filter FIFO Assignment for Filter 1
CAN_FFA1R_FFA2_Pos     EQU (2)
CAN_FFA1R_FFA2_Msk     EQU (0x1 :SHL: CAN_FFA1R_FFA2_Pos)                    ;!< 0x00000004
CAN_FFA1R_FFA2         EQU CAN_FFA1R_FFA2_Msk                              ;!<Filter FIFO Assignment for Filter 2
CAN_FFA1R_FFA3_Pos     EQU (3)
CAN_FFA1R_FFA3_Msk     EQU (0x1 :SHL: CAN_FFA1R_FFA3_Pos)                    ;!< 0x00000008
CAN_FFA1R_FFA3         EQU CAN_FFA1R_FFA3_Msk                              ;!<Filter FIFO Assignment for Filter 3
CAN_FFA1R_FFA4_Pos     EQU (4)
CAN_FFA1R_FFA4_Msk     EQU (0x1 :SHL: CAN_FFA1R_FFA4_Pos)                    ;!< 0x00000010
CAN_FFA1R_FFA4         EQU CAN_FFA1R_FFA4_Msk                              ;!<Filter FIFO Assignment for Filter 4
CAN_FFA1R_FFA5_Pos     EQU (5)
CAN_FFA1R_FFA5_Msk     EQU (0x1 :SHL: CAN_FFA1R_FFA5_Pos)                    ;!< 0x00000020
CAN_FFA1R_FFA5         EQU CAN_FFA1R_FFA5_Msk                              ;!<Filter FIFO Assignment for Filter 5
CAN_FFA1R_FFA6_Pos     EQU (6)
CAN_FFA1R_FFA6_Msk     EQU (0x1 :SHL: CAN_FFA1R_FFA6_Pos)                    ;!< 0x00000040
CAN_FFA1R_FFA6         EQU CAN_FFA1R_FFA6_Msk                              ;!<Filter FIFO Assignment for Filter 6
CAN_FFA1R_FFA7_Pos     EQU (7)
CAN_FFA1R_FFA7_Msk     EQU (0x1 :SHL: CAN_FFA1R_FFA7_Pos)                    ;!< 0x00000080
CAN_FFA1R_FFA7         EQU CAN_FFA1R_FFA7_Msk                              ;!<Filter FIFO Assignment for Filter 7
CAN_FFA1R_FFA8_Pos     EQU (8)
CAN_FFA1R_FFA8_Msk     EQU (0x1 :SHL: CAN_FFA1R_FFA8_Pos)                    ;!< 0x00000100
CAN_FFA1R_FFA8         EQU CAN_FFA1R_FFA8_Msk                              ;!<Filter FIFO Assignment for Filter 8
CAN_FFA1R_FFA9_Pos     EQU (9)
CAN_FFA1R_FFA9_Msk     EQU (0x1 :SHL: CAN_FFA1R_FFA9_Pos)                    ;!< 0x00000200
CAN_FFA1R_FFA9         EQU CAN_FFA1R_FFA9_Msk                              ;!<Filter FIFO Assignment for Filter 9
CAN_FFA1R_FFA10_Pos    EQU (10)
CAN_FFA1R_FFA10_Msk    EQU (0x1 :SHL: CAN_FFA1R_FFA10_Pos)                   ;!< 0x00000400
CAN_FFA1R_FFA10        EQU CAN_FFA1R_FFA10_Msk                             ;!<Filter FIFO Assignment for Filter 10
CAN_FFA1R_FFA11_Pos    EQU (11)
CAN_FFA1R_FFA11_Msk    EQU (0x1 :SHL: CAN_FFA1R_FFA11_Pos)                   ;!< 0x00000800
CAN_FFA1R_FFA11        EQU CAN_FFA1R_FFA11_Msk                             ;!<Filter FIFO Assignment for Filter 11
CAN_FFA1R_FFA12_Pos    EQU (12)
CAN_FFA1R_FFA12_Msk    EQU (0x1 :SHL: CAN_FFA1R_FFA12_Pos)                   ;!< 0x00001000
CAN_FFA1R_FFA12        EQU CAN_FFA1R_FFA12_Msk                             ;!<Filter FIFO Assignment for Filter 12
CAN_FFA1R_FFA13_Pos    EQU (13)
CAN_FFA1R_FFA13_Msk    EQU (0x1 :SHL: CAN_FFA1R_FFA13_Pos)                   ;!< 0x00002000
CAN_FFA1R_FFA13        EQU CAN_FFA1R_FFA13_Msk                             ;!<Filter FIFO Assignment for Filter 13

;******************  Bit definition for CAN_FA1R register  ******************
CAN_FA1R_FACT_Pos      EQU (0)
CAN_FA1R_FACT_Msk      EQU (0x3FFF :SHL: CAN_FA1R_FACT_Pos)                  ;!< 0x00003FFF
CAN_FA1R_FACT          EQU CAN_FA1R_FACT_Msk                               ;!<Filter Active
CAN_FA1R_FACT0_Pos     EQU (0)
CAN_FA1R_FACT0_Msk     EQU (0x1 :SHL: CAN_FA1R_FACT0_Pos)                    ;!< 0x00000001
CAN_FA1R_FACT0         EQU CAN_FA1R_FACT0_Msk                              ;!<Filter 0 Active
CAN_FA1R_FACT1_Pos     EQU (1)
CAN_FA1R_FACT1_Msk     EQU (0x1 :SHL: CAN_FA1R_FACT1_Pos)                    ;!< 0x00000002
CAN_FA1R_FACT1         EQU CAN_FA1R_FACT1_Msk                              ;!<Filter 1 Active
CAN_FA1R_FACT2_Pos     EQU (2)
CAN_FA1R_FACT2_Msk     EQU (0x1 :SHL: CAN_FA1R_FACT2_Pos)                    ;!< 0x00000004
CAN_FA1R_FACT2         EQU CAN_FA1R_FACT2_Msk                              ;!<Filter 2 Active
CAN_FA1R_FACT3_Pos     EQU (3)
CAN_FA1R_FACT3_Msk     EQU (0x1 :SHL: CAN_FA1R_FACT3_Pos)                    ;!< 0x00000008
CAN_FA1R_FACT3         EQU CAN_FA1R_FACT3_Msk                              ;!<Filter 3 Active
CAN_FA1R_FACT4_Pos     EQU (4)
CAN_FA1R_FACT4_Msk     EQU (0x1 :SHL: CAN_FA1R_FACT4_Pos)                    ;!< 0x00000010
CAN_FA1R_FACT4         EQU CAN_FA1R_FACT4_Msk                              ;!<Filter 4 Active
CAN_FA1R_FACT5_Pos     EQU (5)
CAN_FA1R_FACT5_Msk     EQU (0x1 :SHL: CAN_FA1R_FACT5_Pos)                    ;!< 0x00000020
CAN_FA1R_FACT5         EQU CAN_FA1R_FACT5_Msk                              ;!<Filter 5 Active
CAN_FA1R_FACT6_Pos     EQU (6)
CAN_FA1R_FACT6_Msk     EQU (0x1 :SHL: CAN_FA1R_FACT6_Pos)                    ;!< 0x00000040
CAN_FA1R_FACT6         EQU CAN_FA1R_FACT6_Msk                              ;!<Filter 6 Active
CAN_FA1R_FACT7_Pos     EQU (7)
CAN_FA1R_FACT7_Msk     EQU (0x1 :SHL: CAN_FA1R_FACT7_Pos)                    ;!< 0x00000080
CAN_FA1R_FACT7         EQU CAN_FA1R_FACT7_Msk                              ;!<Filter 7 Active
CAN_FA1R_FACT8_Pos     EQU (8)
CAN_FA1R_FACT8_Msk     EQU (0x1 :SHL: CAN_FA1R_FACT8_Pos)                    ;!< 0x00000100
CAN_FA1R_FACT8         EQU CAN_FA1R_FACT8_Msk                              ;!<Filter 8 Active
CAN_FA1R_FACT9_Pos     EQU (9)
CAN_FA1R_FACT9_Msk     EQU (0x1 :SHL: CAN_FA1R_FACT9_Pos)                    ;!< 0x00000200
CAN_FA1R_FACT9         EQU CAN_FA1R_FACT9_Msk                              ;!<Filter 9 Active
CAN_FA1R_FACT10_Pos    EQU (10)
CAN_FA1R_FACT10_Msk    EQU (0x1 :SHL: CAN_FA1R_FACT10_Pos)                   ;!< 0x00000400
CAN_FA1R_FACT10        EQU CAN_FA1R_FACT10_Msk                             ;!<Filter 10 Active
CAN_FA1R_FACT11_Pos    EQU (11)
CAN_FA1R_FACT11_Msk    EQU (0x1 :SHL: CAN_FA1R_FACT11_Pos)                   ;!< 0x00000800
CAN_FA1R_FACT11        EQU CAN_FA1R_FACT11_Msk                             ;!<Filter 11 Active
CAN_FA1R_FACT12_Pos    EQU (12)
CAN_FA1R_FACT12_Msk    EQU (0x1 :SHL: CAN_FA1R_FACT12_Pos)                   ;!< 0x00001000
CAN_FA1R_FACT12        EQU CAN_FA1R_FACT12_Msk                             ;!<Filter 12 Active
CAN_FA1R_FACT13_Pos    EQU (13)
CAN_FA1R_FACT13_Msk    EQU (0x1 :SHL: CAN_FA1R_FACT13_Pos)                   ;!< 0x00002000
CAN_FA1R_FACT13        EQU CAN_FA1R_FACT13_Msk                             ;!<Filter 13 Active

;******************  Bit definition for CAN_F0R1 register  ******************
CAN_F0R1_FB0_Pos       EQU (0)
CAN_F0R1_FB0_Msk       EQU (0x1 :SHL: CAN_F0R1_FB0_Pos)                      ;!< 0x00000001
CAN_F0R1_FB0           EQU CAN_F0R1_FB0_Msk                                ;!<Filter bit 0
CAN_F0R1_FB1_Pos       EQU (1)
CAN_F0R1_FB1_Msk       EQU (0x1 :SHL: CAN_F0R1_FB1_Pos)                      ;!< 0x00000002
CAN_F0R1_FB1           EQU CAN_F0R1_FB1_Msk                                ;!<Filter bit 1
CAN_F0R1_FB2_Pos       EQU (2)
CAN_F0R1_FB2_Msk       EQU (0x1 :SHL: CAN_F0R1_FB2_Pos)                      ;!< 0x00000004
CAN_F0R1_FB2           EQU CAN_F0R1_FB2_Msk                                ;!<Filter bit 2
CAN_F0R1_FB3_Pos       EQU (3)
CAN_F0R1_FB3_Msk       EQU (0x1 :SHL: CAN_F0R1_FB3_Pos)                      ;!< 0x00000008
CAN_F0R1_FB3           EQU CAN_F0R1_FB3_Msk                                ;!<Filter bit 3
CAN_F0R1_FB4_Pos       EQU (4)
CAN_F0R1_FB4_Msk       EQU (0x1 :SHL: CAN_F0R1_FB4_Pos)                      ;!< 0x00000010
CAN_F0R1_FB4           EQU CAN_F0R1_FB4_Msk                                ;!<Filter bit 4
CAN_F0R1_FB5_Pos       EQU (5)
CAN_F0R1_FB5_Msk       EQU (0x1 :SHL: CAN_F0R1_FB5_Pos)                      ;!< 0x00000020
CAN_F0R1_FB5           EQU CAN_F0R1_FB5_Msk                                ;!<Filter bit 5
CAN_F0R1_FB6_Pos       EQU (6)
CAN_F0R1_FB6_Msk       EQU (0x1 :SHL: CAN_F0R1_FB6_Pos)                      ;!< 0x00000040
CAN_F0R1_FB6           EQU CAN_F0R1_FB6_Msk                                ;!<Filter bit 6
CAN_F0R1_FB7_Pos       EQU (7)
CAN_F0R1_FB7_Msk       EQU (0x1 :SHL: CAN_F0R1_FB7_Pos)                      ;!< 0x00000080
CAN_F0R1_FB7           EQU CAN_F0R1_FB7_Msk                                ;!<Filter bit 7
CAN_F0R1_FB8_Pos       EQU (8)
CAN_F0R1_FB8_Msk       EQU (0x1 :SHL: CAN_F0R1_FB8_Pos)                      ;!< 0x00000100
CAN_F0R1_FB8           EQU CAN_F0R1_FB8_Msk                                ;!<Filter bit 8
CAN_F0R1_FB9_Pos       EQU (9)
CAN_F0R1_FB9_Msk       EQU (0x1 :SHL: CAN_F0R1_FB9_Pos)                      ;!< 0x00000200
CAN_F0R1_FB9           EQU CAN_F0R1_FB9_Msk                                ;!<Filter bit 9
CAN_F0R1_FB10_Pos      EQU (10)
CAN_F0R1_FB10_Msk      EQU (0x1 :SHL: CAN_F0R1_FB10_Pos)                     ;!< 0x00000400
CAN_F0R1_FB10          EQU CAN_F0R1_FB10_Msk                               ;!<Filter bit 10
CAN_F0R1_FB11_Pos      EQU (11)
CAN_F0R1_FB11_Msk      EQU (0x1 :SHL: CAN_F0R1_FB11_Pos)                     ;!< 0x00000800
CAN_F0R1_FB11          EQU CAN_F0R1_FB11_Msk                               ;!<Filter bit 11
CAN_F0R1_FB12_Pos      EQU (12)
CAN_F0R1_FB12_Msk      EQU (0x1 :SHL: CAN_F0R1_FB12_Pos)                     ;!< 0x00001000
CAN_F0R1_FB12          EQU CAN_F0R1_FB12_Msk                               ;!<Filter bit 12
CAN_F0R1_FB13_Pos      EQU (13)
CAN_F0R1_FB13_Msk      EQU (0x1 :SHL: CAN_F0R1_FB13_Pos)                     ;!< 0x00002000
CAN_F0R1_FB13          EQU CAN_F0R1_FB13_Msk                               ;!<Filter bit 13
CAN_F0R1_FB14_Pos      EQU (14)
CAN_F0R1_FB14_Msk      EQU (0x1 :SHL: CAN_F0R1_FB14_Pos)                     ;!< 0x00004000
CAN_F0R1_FB14          EQU CAN_F0R1_FB14_Msk                               ;!<Filter bit 14
CAN_F0R1_FB15_Pos      EQU (15)
CAN_F0R1_FB15_Msk      EQU (0x1 :SHL: CAN_F0R1_FB15_Pos)                     ;!< 0x00008000
CAN_F0R1_FB15          EQU CAN_F0R1_FB15_Msk                               ;!<Filter bit 15
CAN_F0R1_FB16_Pos      EQU (16)
CAN_F0R1_FB16_Msk      EQU (0x1 :SHL: CAN_F0R1_FB16_Pos)                     ;!< 0x00010000
CAN_F0R1_FB16          EQU CAN_F0R1_FB16_Msk                               ;!<Filter bit 16
CAN_F0R1_FB17_Pos      EQU (17)
CAN_F0R1_FB17_Msk      EQU (0x1 :SHL: CAN_F0R1_FB17_Pos)                     ;!< 0x00020000
CAN_F0R1_FB17          EQU CAN_F0R1_FB17_Msk                               ;!<Filter bit 17
CAN_F0R1_FB18_Pos      EQU (18)
CAN_F0R1_FB18_Msk      EQU (0x1 :SHL: CAN_F0R1_FB18_Pos)                     ;!< 0x00040000
CAN_F0R1_FB18          EQU CAN_F0R1_FB18_Msk                               ;!<Filter bit 18
CAN_F0R1_FB19_Pos      EQU (19)
CAN_F0R1_FB19_Msk      EQU (0x1 :SHL: CAN_F0R1_FB19_Pos)                     ;!< 0x00080000
CAN_F0R1_FB19          EQU CAN_F0R1_FB19_Msk                               ;!<Filter bit 19
CAN_F0R1_FB20_Pos      EQU (20)
CAN_F0R1_FB20_Msk      EQU (0x1 :SHL: CAN_F0R1_FB20_Pos)                     ;!< 0x00100000
CAN_F0R1_FB20          EQU CAN_F0R1_FB20_Msk                               ;!<Filter bit 20
CAN_F0R1_FB21_Pos      EQU (21)
CAN_F0R1_FB21_Msk      EQU (0x1 :SHL: CAN_F0R1_FB21_Pos)                     ;!< 0x00200000
CAN_F0R1_FB21          EQU CAN_F0R1_FB21_Msk                               ;!<Filter bit 21
CAN_F0R1_FB22_Pos      EQU (22)
CAN_F0R1_FB22_Msk      EQU (0x1 :SHL: CAN_F0R1_FB22_Pos)                     ;!< 0x00400000
CAN_F0R1_FB22          EQU CAN_F0R1_FB22_Msk                               ;!<Filter bit 22
CAN_F0R1_FB23_Pos      EQU (23)
CAN_F0R1_FB23_Msk      EQU (0x1 :SHL: CAN_F0R1_FB23_Pos)                     ;!< 0x00800000
CAN_F0R1_FB23          EQU CAN_F0R1_FB23_Msk                               ;!<Filter bit 23
CAN_F0R1_FB24_Pos      EQU (24)
CAN_F0R1_FB24_Msk      EQU (0x1 :SHL: CAN_F0R1_FB24_Pos)                     ;!< 0x01000000
CAN_F0R1_FB24          EQU CAN_F0R1_FB24_Msk                               ;!<Filter bit 24
CAN_F0R1_FB25_Pos      EQU (25)
CAN_F0R1_FB25_Msk      EQU (0x1 :SHL: CAN_F0R1_FB25_Pos)                     ;!< 0x02000000
CAN_F0R1_FB25          EQU CAN_F0R1_FB25_Msk                               ;!<Filter bit 25
CAN_F0R1_FB26_Pos      EQU (26)
CAN_F0R1_FB26_Msk      EQU (0x1 :SHL: CAN_F0R1_FB26_Pos)                     ;!< 0x04000000
CAN_F0R1_FB26          EQU CAN_F0R1_FB26_Msk                               ;!<Filter bit 26
CAN_F0R1_FB27_Pos      EQU (27)
CAN_F0R1_FB27_Msk      EQU (0x1 :SHL: CAN_F0R1_FB27_Pos)                     ;!< 0x08000000
CAN_F0R1_FB27          EQU CAN_F0R1_FB27_Msk                               ;!<Filter bit 27
CAN_F0R1_FB28_Pos      EQU (28)
CAN_F0R1_FB28_Msk      EQU (0x1 :SHL: CAN_F0R1_FB28_Pos)                     ;!< 0x10000000
CAN_F0R1_FB28          EQU CAN_F0R1_FB28_Msk                               ;!<Filter bit 28
CAN_F0R1_FB29_Pos      EQU (29)
CAN_F0R1_FB29_Msk      EQU (0x1 :SHL: CAN_F0R1_FB29_Pos)                     ;!< 0x20000000
CAN_F0R1_FB29          EQU CAN_F0R1_FB29_Msk                               ;!<Filter bit 29
CAN_F0R1_FB30_Pos      EQU (30)
CAN_F0R1_FB30_Msk      EQU (0x1 :SHL: CAN_F0R1_FB30_Pos)                     ;!< 0x40000000
CAN_F0R1_FB30          EQU CAN_F0R1_FB30_Msk                               ;!<Filter bit 30
CAN_F0R1_FB31_Pos      EQU (31)
CAN_F0R1_FB31_Msk      EQU (0x1 :SHL: CAN_F0R1_FB31_Pos)                     ;!< 0x80000000
CAN_F0R1_FB31          EQU CAN_F0R1_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F1R1 register  ******************
CAN_F1R1_FB0_Pos       EQU (0)
CAN_F1R1_FB0_Msk       EQU (0x1 :SHL: CAN_F1R1_FB0_Pos)                      ;!< 0x00000001
CAN_F1R1_FB0           EQU CAN_F1R1_FB0_Msk                                ;!<Filter bit 0
CAN_F1R1_FB1_Pos       EQU (1)
CAN_F1R1_FB1_Msk       EQU (0x1 :SHL: CAN_F1R1_FB1_Pos)                      ;!< 0x00000002
CAN_F1R1_FB1           EQU CAN_F1R1_FB1_Msk                                ;!<Filter bit 1
CAN_F1R1_FB2_Pos       EQU (2)
CAN_F1R1_FB2_Msk       EQU (0x1 :SHL: CAN_F1R1_FB2_Pos)                      ;!< 0x00000004
CAN_F1R1_FB2           EQU CAN_F1R1_FB2_Msk                                ;!<Filter bit 2
CAN_F1R1_FB3_Pos       EQU (3)
CAN_F1R1_FB3_Msk       EQU (0x1 :SHL: CAN_F1R1_FB3_Pos)                      ;!< 0x00000008
CAN_F1R1_FB3           EQU CAN_F1R1_FB3_Msk                                ;!<Filter bit 3
CAN_F1R1_FB4_Pos       EQU (4)
CAN_F1R1_FB4_Msk       EQU (0x1 :SHL: CAN_F1R1_FB4_Pos)                      ;!< 0x00000010
CAN_F1R1_FB4           EQU CAN_F1R1_FB4_Msk                                ;!<Filter bit 4
CAN_F1R1_FB5_Pos       EQU (5)
CAN_F1R1_FB5_Msk       EQU (0x1 :SHL: CAN_F1R1_FB5_Pos)                      ;!< 0x00000020
CAN_F1R1_FB5           EQU CAN_F1R1_FB5_Msk                                ;!<Filter bit 5
CAN_F1R1_FB6_Pos       EQU (6)
CAN_F1R1_FB6_Msk       EQU (0x1 :SHL: CAN_F1R1_FB6_Pos)                      ;!< 0x00000040
CAN_F1R1_FB6           EQU CAN_F1R1_FB6_Msk                                ;!<Filter bit 6
CAN_F1R1_FB7_Pos       EQU (7)
CAN_F1R1_FB7_Msk       EQU (0x1 :SHL: CAN_F1R1_FB7_Pos)                      ;!< 0x00000080
CAN_F1R1_FB7           EQU CAN_F1R1_FB7_Msk                                ;!<Filter bit 7
CAN_F1R1_FB8_Pos       EQU (8)
CAN_F1R1_FB8_Msk       EQU (0x1 :SHL: CAN_F1R1_FB8_Pos)                      ;!< 0x00000100
CAN_F1R1_FB8           EQU CAN_F1R1_FB8_Msk                                ;!<Filter bit 8
CAN_F1R1_FB9_Pos       EQU (9)
CAN_F1R1_FB9_Msk       EQU (0x1 :SHL: CAN_F1R1_FB9_Pos)                      ;!< 0x00000200
CAN_F1R1_FB9           EQU CAN_F1R1_FB9_Msk                                ;!<Filter bit 9
CAN_F1R1_FB10_Pos      EQU (10)
CAN_F1R1_FB10_Msk      EQU (0x1 :SHL: CAN_F1R1_FB10_Pos)                     ;!< 0x00000400
CAN_F1R1_FB10          EQU CAN_F1R1_FB10_Msk                               ;!<Filter bit 10
CAN_F1R1_FB11_Pos      EQU (11)
CAN_F1R1_FB11_Msk      EQU (0x1 :SHL: CAN_F1R1_FB11_Pos)                     ;!< 0x00000800
CAN_F1R1_FB11          EQU CAN_F1R1_FB11_Msk                               ;!<Filter bit 11
CAN_F1R1_FB12_Pos      EQU (12)
CAN_F1R1_FB12_Msk      EQU (0x1 :SHL: CAN_F1R1_FB12_Pos)                     ;!< 0x00001000
CAN_F1R1_FB12          EQU CAN_F1R1_FB12_Msk                               ;!<Filter bit 12
CAN_F1R1_FB13_Pos      EQU (13)
CAN_F1R1_FB13_Msk      EQU (0x1 :SHL: CAN_F1R1_FB13_Pos)                     ;!< 0x00002000
CAN_F1R1_FB13          EQU CAN_F1R1_FB13_Msk                               ;!<Filter bit 13
CAN_F1R1_FB14_Pos      EQU (14)
CAN_F1R1_FB14_Msk      EQU (0x1 :SHL: CAN_F1R1_FB14_Pos)                     ;!< 0x00004000
CAN_F1R1_FB14          EQU CAN_F1R1_FB14_Msk                               ;!<Filter bit 14
CAN_F1R1_FB15_Pos      EQU (15)
CAN_F1R1_FB15_Msk      EQU (0x1 :SHL: CAN_F1R1_FB15_Pos)                     ;!< 0x00008000
CAN_F1R1_FB15          EQU CAN_F1R1_FB15_Msk                               ;!<Filter bit 15
CAN_F1R1_FB16_Pos      EQU (16)
CAN_F1R1_FB16_Msk      EQU (0x1 :SHL: CAN_F1R1_FB16_Pos)                     ;!< 0x00010000
CAN_F1R1_FB16          EQU CAN_F1R1_FB16_Msk                               ;!<Filter bit 16
CAN_F1R1_FB17_Pos      EQU (17)
CAN_F1R1_FB17_Msk      EQU (0x1 :SHL: CAN_F1R1_FB17_Pos)                     ;!< 0x00020000
CAN_F1R1_FB17          EQU CAN_F1R1_FB17_Msk                               ;!<Filter bit 17
CAN_F1R1_FB18_Pos      EQU (18)
CAN_F1R1_FB18_Msk      EQU (0x1 :SHL: CAN_F1R1_FB18_Pos)                     ;!< 0x00040000
CAN_F1R1_FB18          EQU CAN_F1R1_FB18_Msk                               ;!<Filter bit 18
CAN_F1R1_FB19_Pos      EQU (19)
CAN_F1R1_FB19_Msk      EQU (0x1 :SHL: CAN_F1R1_FB19_Pos)                     ;!< 0x00080000
CAN_F1R1_FB19          EQU CAN_F1R1_FB19_Msk                               ;!<Filter bit 19
CAN_F1R1_FB20_Pos      EQU (20)
CAN_F1R1_FB20_Msk      EQU (0x1 :SHL: CAN_F1R1_FB20_Pos)                     ;!< 0x00100000
CAN_F1R1_FB20          EQU CAN_F1R1_FB20_Msk                               ;!<Filter bit 20
CAN_F1R1_FB21_Pos      EQU (21)
CAN_F1R1_FB21_Msk      EQU (0x1 :SHL: CAN_F1R1_FB21_Pos)                     ;!< 0x00200000
CAN_F1R1_FB21          EQU CAN_F1R1_FB21_Msk                               ;!<Filter bit 21
CAN_F1R1_FB22_Pos      EQU (22)
CAN_F1R1_FB22_Msk      EQU (0x1 :SHL: CAN_F1R1_FB22_Pos)                     ;!< 0x00400000
CAN_F1R1_FB22          EQU CAN_F1R1_FB22_Msk                               ;!<Filter bit 22
CAN_F1R1_FB23_Pos      EQU (23)
CAN_F1R1_FB23_Msk      EQU (0x1 :SHL: CAN_F1R1_FB23_Pos)                     ;!< 0x00800000
CAN_F1R1_FB23          EQU CAN_F1R1_FB23_Msk                               ;!<Filter bit 23
CAN_F1R1_FB24_Pos      EQU (24)
CAN_F1R1_FB24_Msk      EQU (0x1 :SHL: CAN_F1R1_FB24_Pos)                     ;!< 0x01000000
CAN_F1R1_FB24          EQU CAN_F1R1_FB24_Msk                               ;!<Filter bit 24
CAN_F1R1_FB25_Pos      EQU (25)
CAN_F1R1_FB25_Msk      EQU (0x1 :SHL: CAN_F1R1_FB25_Pos)                     ;!< 0x02000000
CAN_F1R1_FB25          EQU CAN_F1R1_FB25_Msk                               ;!<Filter bit 25
CAN_F1R1_FB26_Pos      EQU (26)
CAN_F1R1_FB26_Msk      EQU (0x1 :SHL: CAN_F1R1_FB26_Pos)                     ;!< 0x04000000
CAN_F1R1_FB26          EQU CAN_F1R1_FB26_Msk                               ;!<Filter bit 26
CAN_F1R1_FB27_Pos      EQU (27)
CAN_F1R1_FB27_Msk      EQU (0x1 :SHL: CAN_F1R1_FB27_Pos)                     ;!< 0x08000000
CAN_F1R1_FB27          EQU CAN_F1R1_FB27_Msk                               ;!<Filter bit 27
CAN_F1R1_FB28_Pos      EQU (28)
CAN_F1R1_FB28_Msk      EQU (0x1 :SHL: CAN_F1R1_FB28_Pos)                     ;!< 0x10000000
CAN_F1R1_FB28          EQU CAN_F1R1_FB28_Msk                               ;!<Filter bit 28
CAN_F1R1_FB29_Pos      EQU (29)
CAN_F1R1_FB29_Msk      EQU (0x1 :SHL: CAN_F1R1_FB29_Pos)                     ;!< 0x20000000
CAN_F1R1_FB29          EQU CAN_F1R1_FB29_Msk                               ;!<Filter bit 29
CAN_F1R1_FB30_Pos      EQU (30)
CAN_F1R1_FB30_Msk      EQU (0x1 :SHL: CAN_F1R1_FB30_Pos)                     ;!< 0x40000000
CAN_F1R1_FB30          EQU CAN_F1R1_FB30_Msk                               ;!<Filter bit 30
CAN_F1R1_FB31_Pos      EQU (31)
CAN_F1R1_FB31_Msk      EQU (0x1 :SHL: CAN_F1R1_FB31_Pos)                     ;!< 0x80000000
CAN_F1R1_FB31          EQU CAN_F1R1_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F2R1 register  ******************
CAN_F2R1_FB0_Pos       EQU (0)
CAN_F2R1_FB0_Msk       EQU (0x1 :SHL: CAN_F2R1_FB0_Pos)                      ;!< 0x00000001
CAN_F2R1_FB0           EQU CAN_F2R1_FB0_Msk                                ;!<Filter bit 0
CAN_F2R1_FB1_Pos       EQU (1)
CAN_F2R1_FB1_Msk       EQU (0x1 :SHL: CAN_F2R1_FB1_Pos)                      ;!< 0x00000002
CAN_F2R1_FB1           EQU CAN_F2R1_FB1_Msk                                ;!<Filter bit 1
CAN_F2R1_FB2_Pos       EQU (2)
CAN_F2R1_FB2_Msk       EQU (0x1 :SHL: CAN_F2R1_FB2_Pos)                      ;!< 0x00000004
CAN_F2R1_FB2           EQU CAN_F2R1_FB2_Msk                                ;!<Filter bit 2
CAN_F2R1_FB3_Pos       EQU (3)
CAN_F2R1_FB3_Msk       EQU (0x1 :SHL: CAN_F2R1_FB3_Pos)                      ;!< 0x00000008
CAN_F2R1_FB3           EQU CAN_F2R1_FB3_Msk                                ;!<Filter bit 3
CAN_F2R1_FB4_Pos       EQU (4)
CAN_F2R1_FB4_Msk       EQU (0x1 :SHL: CAN_F2R1_FB4_Pos)                      ;!< 0x00000010
CAN_F2R1_FB4           EQU CAN_F2R1_FB4_Msk                                ;!<Filter bit 4
CAN_F2R1_FB5_Pos       EQU (5)
CAN_F2R1_FB5_Msk       EQU (0x1 :SHL: CAN_F2R1_FB5_Pos)                      ;!< 0x00000020
CAN_F2R1_FB5           EQU CAN_F2R1_FB5_Msk                                ;!<Filter bit 5
CAN_F2R1_FB6_Pos       EQU (6)
CAN_F2R1_FB6_Msk       EQU (0x1 :SHL: CAN_F2R1_FB6_Pos)                      ;!< 0x00000040
CAN_F2R1_FB6           EQU CAN_F2R1_FB6_Msk                                ;!<Filter bit 6
CAN_F2R1_FB7_Pos       EQU (7)
CAN_F2R1_FB7_Msk       EQU (0x1 :SHL: CAN_F2R1_FB7_Pos)                      ;!< 0x00000080
CAN_F2R1_FB7           EQU CAN_F2R1_FB7_Msk                                ;!<Filter bit 7
CAN_F2R1_FB8_Pos       EQU (8)
CAN_F2R1_FB8_Msk       EQU (0x1 :SHL: CAN_F2R1_FB8_Pos)                      ;!< 0x00000100
CAN_F2R1_FB8           EQU CAN_F2R1_FB8_Msk                                ;!<Filter bit 8
CAN_F2R1_FB9_Pos       EQU (9)
CAN_F2R1_FB9_Msk       EQU (0x1 :SHL: CAN_F2R1_FB9_Pos)                      ;!< 0x00000200
CAN_F2R1_FB9           EQU CAN_F2R1_FB9_Msk                                ;!<Filter bit 9
CAN_F2R1_FB10_Pos      EQU (10)
CAN_F2R1_FB10_Msk      EQU (0x1 :SHL: CAN_F2R1_FB10_Pos)                     ;!< 0x00000400
CAN_F2R1_FB10          EQU CAN_F2R1_FB10_Msk                               ;!<Filter bit 10
CAN_F2R1_FB11_Pos      EQU (11)
CAN_F2R1_FB11_Msk      EQU (0x1 :SHL: CAN_F2R1_FB11_Pos)                     ;!< 0x00000800
CAN_F2R1_FB11          EQU CAN_F2R1_FB11_Msk                               ;!<Filter bit 11
CAN_F2R1_FB12_Pos      EQU (12)
CAN_F2R1_FB12_Msk      EQU (0x1 :SHL: CAN_F2R1_FB12_Pos)                     ;!< 0x00001000
CAN_F2R1_FB12          EQU CAN_F2R1_FB12_Msk                               ;!<Filter bit 12
CAN_F2R1_FB13_Pos      EQU (13)
CAN_F2R1_FB13_Msk      EQU (0x1 :SHL: CAN_F2R1_FB13_Pos)                     ;!< 0x00002000
CAN_F2R1_FB13          EQU CAN_F2R1_FB13_Msk                               ;!<Filter bit 13
CAN_F2R1_FB14_Pos      EQU (14)
CAN_F2R1_FB14_Msk      EQU (0x1 :SHL: CAN_F2R1_FB14_Pos)                     ;!< 0x00004000
CAN_F2R1_FB14          EQU CAN_F2R1_FB14_Msk                               ;!<Filter bit 14
CAN_F2R1_FB15_Pos      EQU (15)
CAN_F2R1_FB15_Msk      EQU (0x1 :SHL: CAN_F2R1_FB15_Pos)                     ;!< 0x00008000
CAN_F2R1_FB15          EQU CAN_F2R1_FB15_Msk                               ;!<Filter bit 15
CAN_F2R1_FB16_Pos      EQU (16)
CAN_F2R1_FB16_Msk      EQU (0x1 :SHL: CAN_F2R1_FB16_Pos)                     ;!< 0x00010000
CAN_F2R1_FB16          EQU CAN_F2R1_FB16_Msk                               ;!<Filter bit 16
CAN_F2R1_FB17_Pos      EQU (17)
CAN_F2R1_FB17_Msk      EQU (0x1 :SHL: CAN_F2R1_FB17_Pos)                     ;!< 0x00020000
CAN_F2R1_FB17          EQU CAN_F2R1_FB17_Msk                               ;!<Filter bit 17
CAN_F2R1_FB18_Pos      EQU (18)
CAN_F2R1_FB18_Msk      EQU (0x1 :SHL: CAN_F2R1_FB18_Pos)                     ;!< 0x00040000
CAN_F2R1_FB18          EQU CAN_F2R1_FB18_Msk                               ;!<Filter bit 18
CAN_F2R1_FB19_Pos      EQU (19)
CAN_F2R1_FB19_Msk      EQU (0x1 :SHL: CAN_F2R1_FB19_Pos)                     ;!< 0x00080000
CAN_F2R1_FB19          EQU CAN_F2R1_FB19_Msk                               ;!<Filter bit 19
CAN_F2R1_FB20_Pos      EQU (20)
CAN_F2R1_FB20_Msk      EQU (0x1 :SHL: CAN_F2R1_FB20_Pos)                     ;!< 0x00100000
CAN_F2R1_FB20          EQU CAN_F2R1_FB20_Msk                               ;!<Filter bit 20
CAN_F2R1_FB21_Pos      EQU (21)
CAN_F2R1_FB21_Msk      EQU (0x1 :SHL: CAN_F2R1_FB21_Pos)                     ;!< 0x00200000
CAN_F2R1_FB21          EQU CAN_F2R1_FB21_Msk                               ;!<Filter bit 21
CAN_F2R1_FB22_Pos      EQU (22)
CAN_F2R1_FB22_Msk      EQU (0x1 :SHL: CAN_F2R1_FB22_Pos)                     ;!< 0x00400000
CAN_F2R1_FB22          EQU CAN_F2R1_FB22_Msk                               ;!<Filter bit 22
CAN_F2R1_FB23_Pos      EQU (23)
CAN_F2R1_FB23_Msk      EQU (0x1 :SHL: CAN_F2R1_FB23_Pos)                     ;!< 0x00800000
CAN_F2R1_FB23          EQU CAN_F2R1_FB23_Msk                               ;!<Filter bit 23
CAN_F2R1_FB24_Pos      EQU (24)
CAN_F2R1_FB24_Msk      EQU (0x1 :SHL: CAN_F2R1_FB24_Pos)                     ;!< 0x01000000
CAN_F2R1_FB24          EQU CAN_F2R1_FB24_Msk                               ;!<Filter bit 24
CAN_F2R1_FB25_Pos      EQU (25)
CAN_F2R1_FB25_Msk      EQU (0x1 :SHL: CAN_F2R1_FB25_Pos)                     ;!< 0x02000000
CAN_F2R1_FB25          EQU CAN_F2R1_FB25_Msk                               ;!<Filter bit 25
CAN_F2R1_FB26_Pos      EQU (26)
CAN_F2R1_FB26_Msk      EQU (0x1 :SHL: CAN_F2R1_FB26_Pos)                     ;!< 0x04000000
CAN_F2R1_FB26          EQU CAN_F2R1_FB26_Msk                               ;!<Filter bit 26
CAN_F2R1_FB27_Pos      EQU (27)
CAN_F2R1_FB27_Msk      EQU (0x1 :SHL: CAN_F2R1_FB27_Pos)                     ;!< 0x08000000
CAN_F2R1_FB27          EQU CAN_F2R1_FB27_Msk                               ;!<Filter bit 27
CAN_F2R1_FB28_Pos      EQU (28)
CAN_F2R1_FB28_Msk      EQU (0x1 :SHL: CAN_F2R1_FB28_Pos)                     ;!< 0x10000000
CAN_F2R1_FB28          EQU CAN_F2R1_FB28_Msk                               ;!<Filter bit 28
CAN_F2R1_FB29_Pos      EQU (29)
CAN_F2R1_FB29_Msk      EQU (0x1 :SHL: CAN_F2R1_FB29_Pos)                     ;!< 0x20000000
CAN_F2R1_FB29          EQU CAN_F2R1_FB29_Msk                               ;!<Filter bit 29
CAN_F2R1_FB30_Pos      EQU (30)
CAN_F2R1_FB30_Msk      EQU (0x1 :SHL: CAN_F2R1_FB30_Pos)                     ;!< 0x40000000
CAN_F2R1_FB30          EQU CAN_F2R1_FB30_Msk                               ;!<Filter bit 30
CAN_F2R1_FB31_Pos      EQU (31)
CAN_F2R1_FB31_Msk      EQU (0x1 :SHL: CAN_F2R1_FB31_Pos)                     ;!< 0x80000000
CAN_F2R1_FB31          EQU CAN_F2R1_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F3R1 register  ******************
CAN_F3R1_FB0_Pos       EQU (0)
CAN_F3R1_FB0_Msk       EQU (0x1 :SHL: CAN_F3R1_FB0_Pos)                      ;!< 0x00000001
CAN_F3R1_FB0           EQU CAN_F3R1_FB0_Msk                                ;!<Filter bit 0
CAN_F3R1_FB1_Pos       EQU (1)
CAN_F3R1_FB1_Msk       EQU (0x1 :SHL: CAN_F3R1_FB1_Pos)                      ;!< 0x00000002
CAN_F3R1_FB1           EQU CAN_F3R1_FB1_Msk                                ;!<Filter bit 1
CAN_F3R1_FB2_Pos       EQU (2)
CAN_F3R1_FB2_Msk       EQU (0x1 :SHL: CAN_F3R1_FB2_Pos)                      ;!< 0x00000004
CAN_F3R1_FB2           EQU CAN_F3R1_FB2_Msk                                ;!<Filter bit 2
CAN_F3R1_FB3_Pos       EQU (3)
CAN_F3R1_FB3_Msk       EQU (0x1 :SHL: CAN_F3R1_FB3_Pos)                      ;!< 0x00000008
CAN_F3R1_FB3           EQU CAN_F3R1_FB3_Msk                                ;!<Filter bit 3
CAN_F3R1_FB4_Pos       EQU (4)
CAN_F3R1_FB4_Msk       EQU (0x1 :SHL: CAN_F3R1_FB4_Pos)                      ;!< 0x00000010
CAN_F3R1_FB4           EQU CAN_F3R1_FB4_Msk                                ;!<Filter bit 4
CAN_F3R1_FB5_Pos       EQU (5)
CAN_F3R1_FB5_Msk       EQU (0x1 :SHL: CAN_F3R1_FB5_Pos)                      ;!< 0x00000020
CAN_F3R1_FB5           EQU CAN_F3R1_FB5_Msk                                ;!<Filter bit 5
CAN_F3R1_FB6_Pos       EQU (6)
CAN_F3R1_FB6_Msk       EQU (0x1 :SHL: CAN_F3R1_FB6_Pos)                      ;!< 0x00000040
CAN_F3R1_FB6           EQU CAN_F3R1_FB6_Msk                                ;!<Filter bit 6
CAN_F3R1_FB7_Pos       EQU (7)
CAN_F3R1_FB7_Msk       EQU (0x1 :SHL: CAN_F3R1_FB7_Pos)                      ;!< 0x00000080
CAN_F3R1_FB7           EQU CAN_F3R1_FB7_Msk                                ;!<Filter bit 7
CAN_F3R1_FB8_Pos       EQU (8)
CAN_F3R1_FB8_Msk       EQU (0x1 :SHL: CAN_F3R1_FB8_Pos)                      ;!< 0x00000100
CAN_F3R1_FB8           EQU CAN_F3R1_FB8_Msk                                ;!<Filter bit 8
CAN_F3R1_FB9_Pos       EQU (9)
CAN_F3R1_FB9_Msk       EQU (0x1 :SHL: CAN_F3R1_FB9_Pos)                      ;!< 0x00000200
CAN_F3R1_FB9           EQU CAN_F3R1_FB9_Msk                                ;!<Filter bit 9
CAN_F3R1_FB10_Pos      EQU (10)
CAN_F3R1_FB10_Msk      EQU (0x1 :SHL: CAN_F3R1_FB10_Pos)                     ;!< 0x00000400
CAN_F3R1_FB10          EQU CAN_F3R1_FB10_Msk                               ;!<Filter bit 10
CAN_F3R1_FB11_Pos      EQU (11)
CAN_F3R1_FB11_Msk      EQU (0x1 :SHL: CAN_F3R1_FB11_Pos)                     ;!< 0x00000800
CAN_F3R1_FB11          EQU CAN_F3R1_FB11_Msk                               ;!<Filter bit 11
CAN_F3R1_FB12_Pos      EQU (12)
CAN_F3R1_FB12_Msk      EQU (0x1 :SHL: CAN_F3R1_FB12_Pos)                     ;!< 0x00001000
CAN_F3R1_FB12          EQU CAN_F3R1_FB12_Msk                               ;!<Filter bit 12
CAN_F3R1_FB13_Pos      EQU (13)
CAN_F3R1_FB13_Msk      EQU (0x1 :SHL: CAN_F3R1_FB13_Pos)                     ;!< 0x00002000
CAN_F3R1_FB13          EQU CAN_F3R1_FB13_Msk                               ;!<Filter bit 13
CAN_F3R1_FB14_Pos      EQU (14)
CAN_F3R1_FB14_Msk      EQU (0x1 :SHL: CAN_F3R1_FB14_Pos)                     ;!< 0x00004000
CAN_F3R1_FB14          EQU CAN_F3R1_FB14_Msk                               ;!<Filter bit 14
CAN_F3R1_FB15_Pos      EQU (15)
CAN_F3R1_FB15_Msk      EQU (0x1 :SHL: CAN_F3R1_FB15_Pos)                     ;!< 0x00008000
CAN_F3R1_FB15          EQU CAN_F3R1_FB15_Msk                               ;!<Filter bit 15
CAN_F3R1_FB16_Pos      EQU (16)
CAN_F3R1_FB16_Msk      EQU (0x1 :SHL: CAN_F3R1_FB16_Pos)                     ;!< 0x00010000
CAN_F3R1_FB16          EQU CAN_F3R1_FB16_Msk                               ;!<Filter bit 16
CAN_F3R1_FB17_Pos      EQU (17)
CAN_F3R1_FB17_Msk      EQU (0x1 :SHL: CAN_F3R1_FB17_Pos)                     ;!< 0x00020000
CAN_F3R1_FB17          EQU CAN_F3R1_FB17_Msk                               ;!<Filter bit 17
CAN_F3R1_FB18_Pos      EQU (18)
CAN_F3R1_FB18_Msk      EQU (0x1 :SHL: CAN_F3R1_FB18_Pos)                     ;!< 0x00040000
CAN_F3R1_FB18          EQU CAN_F3R1_FB18_Msk                               ;!<Filter bit 18
CAN_F3R1_FB19_Pos      EQU (19)
CAN_F3R1_FB19_Msk      EQU (0x1 :SHL: CAN_F3R1_FB19_Pos)                     ;!< 0x00080000
CAN_F3R1_FB19          EQU CAN_F3R1_FB19_Msk                               ;!<Filter bit 19
CAN_F3R1_FB20_Pos      EQU (20)
CAN_F3R1_FB20_Msk      EQU (0x1 :SHL: CAN_F3R1_FB20_Pos)                     ;!< 0x00100000
CAN_F3R1_FB20          EQU CAN_F3R1_FB20_Msk                               ;!<Filter bit 20
CAN_F3R1_FB21_Pos      EQU (21)
CAN_F3R1_FB21_Msk      EQU (0x1 :SHL: CAN_F3R1_FB21_Pos)                     ;!< 0x00200000
CAN_F3R1_FB21          EQU CAN_F3R1_FB21_Msk                               ;!<Filter bit 21
CAN_F3R1_FB22_Pos      EQU (22)
CAN_F3R1_FB22_Msk      EQU (0x1 :SHL: CAN_F3R1_FB22_Pos)                     ;!< 0x00400000
CAN_F3R1_FB22          EQU CAN_F3R1_FB22_Msk                               ;!<Filter bit 22
CAN_F3R1_FB23_Pos      EQU (23)
CAN_F3R1_FB23_Msk      EQU (0x1 :SHL: CAN_F3R1_FB23_Pos)                     ;!< 0x00800000
CAN_F3R1_FB23          EQU CAN_F3R1_FB23_Msk                               ;!<Filter bit 23
CAN_F3R1_FB24_Pos      EQU (24)
CAN_F3R1_FB24_Msk      EQU (0x1 :SHL: CAN_F3R1_FB24_Pos)                     ;!< 0x01000000
CAN_F3R1_FB24          EQU CAN_F3R1_FB24_Msk                               ;!<Filter bit 24
CAN_F3R1_FB25_Pos      EQU (25)
CAN_F3R1_FB25_Msk      EQU (0x1 :SHL: CAN_F3R1_FB25_Pos)                     ;!< 0x02000000
CAN_F3R1_FB25          EQU CAN_F3R1_FB25_Msk                               ;!<Filter bit 25
CAN_F3R1_FB26_Pos      EQU (26)
CAN_F3R1_FB26_Msk      EQU (0x1 :SHL: CAN_F3R1_FB26_Pos)                     ;!< 0x04000000
CAN_F3R1_FB26          EQU CAN_F3R1_FB26_Msk                               ;!<Filter bit 26
CAN_F3R1_FB27_Pos      EQU (27)
CAN_F3R1_FB27_Msk      EQU (0x1 :SHL: CAN_F3R1_FB27_Pos)                     ;!< 0x08000000
CAN_F3R1_FB27          EQU CAN_F3R1_FB27_Msk                               ;!<Filter bit 27
CAN_F3R1_FB28_Pos      EQU (28)
CAN_F3R1_FB28_Msk      EQU (0x1 :SHL: CAN_F3R1_FB28_Pos)                     ;!< 0x10000000
CAN_F3R1_FB28          EQU CAN_F3R1_FB28_Msk                               ;!<Filter bit 28
CAN_F3R1_FB29_Pos      EQU (29)
CAN_F3R1_FB29_Msk      EQU (0x1 :SHL: CAN_F3R1_FB29_Pos)                     ;!< 0x20000000
CAN_F3R1_FB29          EQU CAN_F3R1_FB29_Msk                               ;!<Filter bit 29
CAN_F3R1_FB30_Pos      EQU (30)
CAN_F3R1_FB30_Msk      EQU (0x1 :SHL: CAN_F3R1_FB30_Pos)                     ;!< 0x40000000
CAN_F3R1_FB30          EQU CAN_F3R1_FB30_Msk                               ;!<Filter bit 30
CAN_F3R1_FB31_Pos      EQU (31)
CAN_F3R1_FB31_Msk      EQU (0x1 :SHL: CAN_F3R1_FB31_Pos)                     ;!< 0x80000000
CAN_F3R1_FB31          EQU CAN_F3R1_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F4R1 register  ******************
CAN_F4R1_FB0_Pos       EQU (0)
CAN_F4R1_FB0_Msk       EQU (0x1 :SHL: CAN_F4R1_FB0_Pos)                      ;!< 0x00000001
CAN_F4R1_FB0           EQU CAN_F4R1_FB0_Msk                                ;!<Filter bit 0
CAN_F4R1_FB1_Pos       EQU (1)
CAN_F4R1_FB1_Msk       EQU (0x1 :SHL: CAN_F4R1_FB1_Pos)                      ;!< 0x00000002
CAN_F4R1_FB1           EQU CAN_F4R1_FB1_Msk                                ;!<Filter bit 1
CAN_F4R1_FB2_Pos       EQU (2)
CAN_F4R1_FB2_Msk       EQU (0x1 :SHL: CAN_F4R1_FB2_Pos)                      ;!< 0x00000004
CAN_F4R1_FB2           EQU CAN_F4R1_FB2_Msk                                ;!<Filter bit 2
CAN_F4R1_FB3_Pos       EQU (3)
CAN_F4R1_FB3_Msk       EQU (0x1 :SHL: CAN_F4R1_FB3_Pos)                      ;!< 0x00000008
CAN_F4R1_FB3           EQU CAN_F4R1_FB3_Msk                                ;!<Filter bit 3
CAN_F4R1_FB4_Pos       EQU (4)
CAN_F4R1_FB4_Msk       EQU (0x1 :SHL: CAN_F4R1_FB4_Pos)                      ;!< 0x00000010
CAN_F4R1_FB4           EQU CAN_F4R1_FB4_Msk                                ;!<Filter bit 4
CAN_F4R1_FB5_Pos       EQU (5)
CAN_F4R1_FB5_Msk       EQU (0x1 :SHL: CAN_F4R1_FB5_Pos)                      ;!< 0x00000020
CAN_F4R1_FB5           EQU CAN_F4R1_FB5_Msk                                ;!<Filter bit 5
CAN_F4R1_FB6_Pos       EQU (6)
CAN_F4R1_FB6_Msk       EQU (0x1 :SHL: CAN_F4R1_FB6_Pos)                      ;!< 0x00000040
CAN_F4R1_FB6           EQU CAN_F4R1_FB6_Msk                                ;!<Filter bit 6
CAN_F4R1_FB7_Pos       EQU (7)
CAN_F4R1_FB7_Msk       EQU (0x1 :SHL: CAN_F4R1_FB7_Pos)                      ;!< 0x00000080
CAN_F4R1_FB7           EQU CAN_F4R1_FB7_Msk                                ;!<Filter bit 7
CAN_F4R1_FB8_Pos       EQU (8)
CAN_F4R1_FB8_Msk       EQU (0x1 :SHL: CAN_F4R1_FB8_Pos)                      ;!< 0x00000100
CAN_F4R1_FB8           EQU CAN_F4R1_FB8_Msk                                ;!<Filter bit 8
CAN_F4R1_FB9_Pos       EQU (9)
CAN_F4R1_FB9_Msk       EQU (0x1 :SHL: CAN_F4R1_FB9_Pos)                      ;!< 0x00000200
CAN_F4R1_FB9           EQU CAN_F4R1_FB9_Msk                                ;!<Filter bit 9
CAN_F4R1_FB10_Pos      EQU (10)
CAN_F4R1_FB10_Msk      EQU (0x1 :SHL: CAN_F4R1_FB10_Pos)                     ;!< 0x00000400
CAN_F4R1_FB10          EQU CAN_F4R1_FB10_Msk                               ;!<Filter bit 10
CAN_F4R1_FB11_Pos      EQU (11)
CAN_F4R1_FB11_Msk      EQU (0x1 :SHL: CAN_F4R1_FB11_Pos)                     ;!< 0x00000800
CAN_F4R1_FB11          EQU CAN_F4R1_FB11_Msk                               ;!<Filter bit 11
CAN_F4R1_FB12_Pos      EQU (12)
CAN_F4R1_FB12_Msk      EQU (0x1 :SHL: CAN_F4R1_FB12_Pos)                     ;!< 0x00001000
CAN_F4R1_FB12          EQU CAN_F4R1_FB12_Msk                               ;!<Filter bit 12
CAN_F4R1_FB13_Pos      EQU (13)
CAN_F4R1_FB13_Msk      EQU (0x1 :SHL: CAN_F4R1_FB13_Pos)                     ;!< 0x00002000
CAN_F4R1_FB13          EQU CAN_F4R1_FB13_Msk                               ;!<Filter bit 13
CAN_F4R1_FB14_Pos      EQU (14)
CAN_F4R1_FB14_Msk      EQU (0x1 :SHL: CAN_F4R1_FB14_Pos)                     ;!< 0x00004000
CAN_F4R1_FB14          EQU CAN_F4R1_FB14_Msk                               ;!<Filter bit 14
CAN_F4R1_FB15_Pos      EQU (15)
CAN_F4R1_FB15_Msk      EQU (0x1 :SHL: CAN_F4R1_FB15_Pos)                     ;!< 0x00008000
CAN_F4R1_FB15          EQU CAN_F4R1_FB15_Msk                               ;!<Filter bit 15
CAN_F4R1_FB16_Pos      EQU (16)
CAN_F4R1_FB16_Msk      EQU (0x1 :SHL: CAN_F4R1_FB16_Pos)                     ;!< 0x00010000
CAN_F4R1_FB16          EQU CAN_F4R1_FB16_Msk                               ;!<Filter bit 16
CAN_F4R1_FB17_Pos      EQU (17)
CAN_F4R1_FB17_Msk      EQU (0x1 :SHL: CAN_F4R1_FB17_Pos)                     ;!< 0x00020000
CAN_F4R1_FB17          EQU CAN_F4R1_FB17_Msk                               ;!<Filter bit 17
CAN_F4R1_FB18_Pos      EQU (18)
CAN_F4R1_FB18_Msk      EQU (0x1 :SHL: CAN_F4R1_FB18_Pos)                     ;!< 0x00040000
CAN_F4R1_FB18          EQU CAN_F4R1_FB18_Msk                               ;!<Filter bit 18
CAN_F4R1_FB19_Pos      EQU (19)
CAN_F4R1_FB19_Msk      EQU (0x1 :SHL: CAN_F4R1_FB19_Pos)                     ;!< 0x00080000
CAN_F4R1_FB19          EQU CAN_F4R1_FB19_Msk                               ;!<Filter bit 19
CAN_F4R1_FB20_Pos      EQU (20)
CAN_F4R1_FB20_Msk      EQU (0x1 :SHL: CAN_F4R1_FB20_Pos)                     ;!< 0x00100000
CAN_F4R1_FB20          EQU CAN_F4R1_FB20_Msk                               ;!<Filter bit 20
CAN_F4R1_FB21_Pos      EQU (21)
CAN_F4R1_FB21_Msk      EQU (0x1 :SHL: CAN_F4R1_FB21_Pos)                     ;!< 0x00200000
CAN_F4R1_FB21          EQU CAN_F4R1_FB21_Msk                               ;!<Filter bit 21
CAN_F4R1_FB22_Pos      EQU (22)
CAN_F4R1_FB22_Msk      EQU (0x1 :SHL: CAN_F4R1_FB22_Pos)                     ;!< 0x00400000
CAN_F4R1_FB22          EQU CAN_F4R1_FB22_Msk                               ;!<Filter bit 22
CAN_F4R1_FB23_Pos      EQU (23)
CAN_F4R1_FB23_Msk      EQU (0x1 :SHL: CAN_F4R1_FB23_Pos)                     ;!< 0x00800000
CAN_F4R1_FB23          EQU CAN_F4R1_FB23_Msk                               ;!<Filter bit 23
CAN_F4R1_FB24_Pos      EQU (24)
CAN_F4R1_FB24_Msk      EQU (0x1 :SHL: CAN_F4R1_FB24_Pos)                     ;!< 0x01000000
CAN_F4R1_FB24          EQU CAN_F4R1_FB24_Msk                               ;!<Filter bit 24
CAN_F4R1_FB25_Pos      EQU (25)
CAN_F4R1_FB25_Msk      EQU (0x1 :SHL: CAN_F4R1_FB25_Pos)                     ;!< 0x02000000
CAN_F4R1_FB25          EQU CAN_F4R1_FB25_Msk                               ;!<Filter bit 25
CAN_F4R1_FB26_Pos      EQU (26)
CAN_F4R1_FB26_Msk      EQU (0x1 :SHL: CAN_F4R1_FB26_Pos)                     ;!< 0x04000000
CAN_F4R1_FB26          EQU CAN_F4R1_FB26_Msk                               ;!<Filter bit 26
CAN_F4R1_FB27_Pos      EQU (27)
CAN_F4R1_FB27_Msk      EQU (0x1 :SHL: CAN_F4R1_FB27_Pos)                     ;!< 0x08000000
CAN_F4R1_FB27          EQU CAN_F4R1_FB27_Msk                               ;!<Filter bit 27
CAN_F4R1_FB28_Pos      EQU (28)
CAN_F4R1_FB28_Msk      EQU (0x1 :SHL: CAN_F4R1_FB28_Pos)                     ;!< 0x10000000
CAN_F4R1_FB28          EQU CAN_F4R1_FB28_Msk                               ;!<Filter bit 28
CAN_F4R1_FB29_Pos      EQU (29)
CAN_F4R1_FB29_Msk      EQU (0x1 :SHL: CAN_F4R1_FB29_Pos)                     ;!< 0x20000000
CAN_F4R1_FB29          EQU CAN_F4R1_FB29_Msk                               ;!<Filter bit 29
CAN_F4R1_FB30_Pos      EQU (30)
CAN_F4R1_FB30_Msk      EQU (0x1 :SHL: CAN_F4R1_FB30_Pos)                     ;!< 0x40000000
CAN_F4R1_FB30          EQU CAN_F4R1_FB30_Msk                               ;!<Filter bit 30
CAN_F4R1_FB31_Pos      EQU (31)
CAN_F4R1_FB31_Msk      EQU (0x1 :SHL: CAN_F4R1_FB31_Pos)                     ;!< 0x80000000
CAN_F4R1_FB31          EQU CAN_F4R1_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F5R1 register  ******************
CAN_F5R1_FB0_Pos       EQU (0)
CAN_F5R1_FB0_Msk       EQU (0x1 :SHL: CAN_F5R1_FB0_Pos)                      ;!< 0x00000001
CAN_F5R1_FB0           EQU CAN_F5R1_FB0_Msk                                ;!<Filter bit 0
CAN_F5R1_FB1_Pos       EQU (1)
CAN_F5R1_FB1_Msk       EQU (0x1 :SHL: CAN_F5R1_FB1_Pos)                      ;!< 0x00000002
CAN_F5R1_FB1           EQU CAN_F5R1_FB1_Msk                                ;!<Filter bit 1
CAN_F5R1_FB2_Pos       EQU (2)
CAN_F5R1_FB2_Msk       EQU (0x1 :SHL: CAN_F5R1_FB2_Pos)                      ;!< 0x00000004
CAN_F5R1_FB2           EQU CAN_F5R1_FB2_Msk                                ;!<Filter bit 2
CAN_F5R1_FB3_Pos       EQU (3)
CAN_F5R1_FB3_Msk       EQU (0x1 :SHL: CAN_F5R1_FB3_Pos)                      ;!< 0x00000008
CAN_F5R1_FB3           EQU CAN_F5R1_FB3_Msk                                ;!<Filter bit 3
CAN_F5R1_FB4_Pos       EQU (4)
CAN_F5R1_FB4_Msk       EQU (0x1 :SHL: CAN_F5R1_FB4_Pos)                      ;!< 0x00000010
CAN_F5R1_FB4           EQU CAN_F5R1_FB4_Msk                                ;!<Filter bit 4
CAN_F5R1_FB5_Pos       EQU (5)
CAN_F5R1_FB5_Msk       EQU (0x1 :SHL: CAN_F5R1_FB5_Pos)                      ;!< 0x00000020
CAN_F5R1_FB5           EQU CAN_F5R1_FB5_Msk                                ;!<Filter bit 5
CAN_F5R1_FB6_Pos       EQU (6)
CAN_F5R1_FB6_Msk       EQU (0x1 :SHL: CAN_F5R1_FB6_Pos)                      ;!< 0x00000040
CAN_F5R1_FB6           EQU CAN_F5R1_FB6_Msk                                ;!<Filter bit 6
CAN_F5R1_FB7_Pos       EQU (7)
CAN_F5R1_FB7_Msk       EQU (0x1 :SHL: CAN_F5R1_FB7_Pos)                      ;!< 0x00000080
CAN_F5R1_FB7           EQU CAN_F5R1_FB7_Msk                                ;!<Filter bit 7
CAN_F5R1_FB8_Pos       EQU (8)
CAN_F5R1_FB8_Msk       EQU (0x1 :SHL: CAN_F5R1_FB8_Pos)                      ;!< 0x00000100
CAN_F5R1_FB8           EQU CAN_F5R1_FB8_Msk                                ;!<Filter bit 8
CAN_F5R1_FB9_Pos       EQU (9)
CAN_F5R1_FB9_Msk       EQU (0x1 :SHL: CAN_F5R1_FB9_Pos)                      ;!< 0x00000200
CAN_F5R1_FB9           EQU CAN_F5R1_FB9_Msk                                ;!<Filter bit 9
CAN_F5R1_FB10_Pos      EQU (10)
CAN_F5R1_FB10_Msk      EQU (0x1 :SHL: CAN_F5R1_FB10_Pos)                     ;!< 0x00000400
CAN_F5R1_FB10          EQU CAN_F5R1_FB10_Msk                               ;!<Filter bit 10
CAN_F5R1_FB11_Pos      EQU (11)
CAN_F5R1_FB11_Msk      EQU (0x1 :SHL: CAN_F5R1_FB11_Pos)                     ;!< 0x00000800
CAN_F5R1_FB11          EQU CAN_F5R1_FB11_Msk                               ;!<Filter bit 11
CAN_F5R1_FB12_Pos      EQU (12)
CAN_F5R1_FB12_Msk      EQU (0x1 :SHL: CAN_F5R1_FB12_Pos)                     ;!< 0x00001000
CAN_F5R1_FB12          EQU CAN_F5R1_FB12_Msk                               ;!<Filter bit 12
CAN_F5R1_FB13_Pos      EQU (13)
CAN_F5R1_FB13_Msk      EQU (0x1 :SHL: CAN_F5R1_FB13_Pos)                     ;!< 0x00002000
CAN_F5R1_FB13          EQU CAN_F5R1_FB13_Msk                               ;!<Filter bit 13
CAN_F5R1_FB14_Pos      EQU (14)
CAN_F5R1_FB14_Msk      EQU (0x1 :SHL: CAN_F5R1_FB14_Pos)                     ;!< 0x00004000
CAN_F5R1_FB14          EQU CAN_F5R1_FB14_Msk                               ;!<Filter bit 14
CAN_F5R1_FB15_Pos      EQU (15)
CAN_F5R1_FB15_Msk      EQU (0x1 :SHL: CAN_F5R1_FB15_Pos)                     ;!< 0x00008000
CAN_F5R1_FB15          EQU CAN_F5R1_FB15_Msk                               ;!<Filter bit 15
CAN_F5R1_FB16_Pos      EQU (16)
CAN_F5R1_FB16_Msk      EQU (0x1 :SHL: CAN_F5R1_FB16_Pos)                     ;!< 0x00010000
CAN_F5R1_FB16          EQU CAN_F5R1_FB16_Msk                               ;!<Filter bit 16
CAN_F5R1_FB17_Pos      EQU (17)
CAN_F5R1_FB17_Msk      EQU (0x1 :SHL: CAN_F5R1_FB17_Pos)                     ;!< 0x00020000
CAN_F5R1_FB17          EQU CAN_F5R1_FB17_Msk                               ;!<Filter bit 17
CAN_F5R1_FB18_Pos      EQU (18)
CAN_F5R1_FB18_Msk      EQU (0x1 :SHL: CAN_F5R1_FB18_Pos)                     ;!< 0x00040000
CAN_F5R1_FB18          EQU CAN_F5R1_FB18_Msk                               ;!<Filter bit 18
CAN_F5R1_FB19_Pos      EQU (19)
CAN_F5R1_FB19_Msk      EQU (0x1 :SHL: CAN_F5R1_FB19_Pos)                     ;!< 0x00080000
CAN_F5R1_FB19          EQU CAN_F5R1_FB19_Msk                               ;!<Filter bit 19
CAN_F5R1_FB20_Pos      EQU (20)
CAN_F5R1_FB20_Msk      EQU (0x1 :SHL: CAN_F5R1_FB20_Pos)                     ;!< 0x00100000
CAN_F5R1_FB20          EQU CAN_F5R1_FB20_Msk                               ;!<Filter bit 20
CAN_F5R1_FB21_Pos      EQU (21)
CAN_F5R1_FB21_Msk      EQU (0x1 :SHL: CAN_F5R1_FB21_Pos)                     ;!< 0x00200000
CAN_F5R1_FB21          EQU CAN_F5R1_FB21_Msk                               ;!<Filter bit 21
CAN_F5R1_FB22_Pos      EQU (22)
CAN_F5R1_FB22_Msk      EQU (0x1 :SHL: CAN_F5R1_FB22_Pos)                     ;!< 0x00400000
CAN_F5R1_FB22          EQU CAN_F5R1_FB22_Msk                               ;!<Filter bit 22
CAN_F5R1_FB23_Pos      EQU (23)
CAN_F5R1_FB23_Msk      EQU (0x1 :SHL: CAN_F5R1_FB23_Pos)                     ;!< 0x00800000
CAN_F5R1_FB23          EQU CAN_F5R1_FB23_Msk                               ;!<Filter bit 23
CAN_F5R1_FB24_Pos      EQU (24)
CAN_F5R1_FB24_Msk      EQU (0x1 :SHL: CAN_F5R1_FB24_Pos)                     ;!< 0x01000000
CAN_F5R1_FB24          EQU CAN_F5R1_FB24_Msk                               ;!<Filter bit 24
CAN_F5R1_FB25_Pos      EQU (25)
CAN_F5R1_FB25_Msk      EQU (0x1 :SHL: CAN_F5R1_FB25_Pos)                     ;!< 0x02000000
CAN_F5R1_FB25          EQU CAN_F5R1_FB25_Msk                               ;!<Filter bit 25
CAN_F5R1_FB26_Pos      EQU (26)
CAN_F5R1_FB26_Msk      EQU (0x1 :SHL: CAN_F5R1_FB26_Pos)                     ;!< 0x04000000
CAN_F5R1_FB26          EQU CAN_F5R1_FB26_Msk                               ;!<Filter bit 26
CAN_F5R1_FB27_Pos      EQU (27)
CAN_F5R1_FB27_Msk      EQU (0x1 :SHL: CAN_F5R1_FB27_Pos)                     ;!< 0x08000000
CAN_F5R1_FB27          EQU CAN_F5R1_FB27_Msk                               ;!<Filter bit 27
CAN_F5R1_FB28_Pos      EQU (28)
CAN_F5R1_FB28_Msk      EQU (0x1 :SHL: CAN_F5R1_FB28_Pos)                     ;!< 0x10000000
CAN_F5R1_FB28          EQU CAN_F5R1_FB28_Msk                               ;!<Filter bit 28
CAN_F5R1_FB29_Pos      EQU (29)
CAN_F5R1_FB29_Msk      EQU (0x1 :SHL: CAN_F5R1_FB29_Pos)                     ;!< 0x20000000
CAN_F5R1_FB29          EQU CAN_F5R1_FB29_Msk                               ;!<Filter bit 29
CAN_F5R1_FB30_Pos      EQU (30)
CAN_F5R1_FB30_Msk      EQU (0x1 :SHL: CAN_F5R1_FB30_Pos)                     ;!< 0x40000000
CAN_F5R1_FB30          EQU CAN_F5R1_FB30_Msk                               ;!<Filter bit 30
CAN_F5R1_FB31_Pos      EQU (31)
CAN_F5R1_FB31_Msk      EQU (0x1 :SHL: CAN_F5R1_FB31_Pos)                     ;!< 0x80000000
CAN_F5R1_FB31          EQU CAN_F5R1_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F6R1 register  ******************
CAN_F6R1_FB0_Pos       EQU (0)
CAN_F6R1_FB0_Msk       EQU (0x1 :SHL: CAN_F6R1_FB0_Pos)                      ;!< 0x00000001
CAN_F6R1_FB0           EQU CAN_F6R1_FB0_Msk                                ;!<Filter bit 0
CAN_F6R1_FB1_Pos       EQU (1)
CAN_F6R1_FB1_Msk       EQU (0x1 :SHL: CAN_F6R1_FB1_Pos)                      ;!< 0x00000002
CAN_F6R1_FB1           EQU CAN_F6R1_FB1_Msk                                ;!<Filter bit 1
CAN_F6R1_FB2_Pos       EQU (2)
CAN_F6R1_FB2_Msk       EQU (0x1 :SHL: CAN_F6R1_FB2_Pos)                      ;!< 0x00000004
CAN_F6R1_FB2           EQU CAN_F6R1_FB2_Msk                                ;!<Filter bit 2
CAN_F6R1_FB3_Pos       EQU (3)
CAN_F6R1_FB3_Msk       EQU (0x1 :SHL: CAN_F6R1_FB3_Pos)                      ;!< 0x00000008
CAN_F6R1_FB3           EQU CAN_F6R1_FB3_Msk                                ;!<Filter bit 3
CAN_F6R1_FB4_Pos       EQU (4)
CAN_F6R1_FB4_Msk       EQU (0x1 :SHL: CAN_F6R1_FB4_Pos)                      ;!< 0x00000010
CAN_F6R1_FB4           EQU CAN_F6R1_FB4_Msk                                ;!<Filter bit 4
CAN_F6R1_FB5_Pos       EQU (5)
CAN_F6R1_FB5_Msk       EQU (0x1 :SHL: CAN_F6R1_FB5_Pos)                      ;!< 0x00000020
CAN_F6R1_FB5           EQU CAN_F6R1_FB5_Msk                                ;!<Filter bit 5
CAN_F6R1_FB6_Pos       EQU (6)
CAN_F6R1_FB6_Msk       EQU (0x1 :SHL: CAN_F6R1_FB6_Pos)                      ;!< 0x00000040
CAN_F6R1_FB6           EQU CAN_F6R1_FB6_Msk                                ;!<Filter bit 6
CAN_F6R1_FB7_Pos       EQU (7)
CAN_F6R1_FB7_Msk       EQU (0x1 :SHL: CAN_F6R1_FB7_Pos)                      ;!< 0x00000080
CAN_F6R1_FB7           EQU CAN_F6R1_FB7_Msk                                ;!<Filter bit 7
CAN_F6R1_FB8_Pos       EQU (8)
CAN_F6R1_FB8_Msk       EQU (0x1 :SHL: CAN_F6R1_FB8_Pos)                      ;!< 0x00000100
CAN_F6R1_FB8           EQU CAN_F6R1_FB8_Msk                                ;!<Filter bit 8
CAN_F6R1_FB9_Pos       EQU (9)
CAN_F6R1_FB9_Msk       EQU (0x1 :SHL: CAN_F6R1_FB9_Pos)                      ;!< 0x00000200
CAN_F6R1_FB9           EQU CAN_F6R1_FB9_Msk                                ;!<Filter bit 9
CAN_F6R1_FB10_Pos      EQU (10)
CAN_F6R1_FB10_Msk      EQU (0x1 :SHL: CAN_F6R1_FB10_Pos)                     ;!< 0x00000400
CAN_F6R1_FB10          EQU CAN_F6R1_FB10_Msk                               ;!<Filter bit 10
CAN_F6R1_FB11_Pos      EQU (11)
CAN_F6R1_FB11_Msk      EQU (0x1 :SHL: CAN_F6R1_FB11_Pos)                     ;!< 0x00000800
CAN_F6R1_FB11          EQU CAN_F6R1_FB11_Msk                               ;!<Filter bit 11
CAN_F6R1_FB12_Pos      EQU (12)
CAN_F6R1_FB12_Msk      EQU (0x1 :SHL: CAN_F6R1_FB12_Pos)                     ;!< 0x00001000
CAN_F6R1_FB12          EQU CAN_F6R1_FB12_Msk                               ;!<Filter bit 12
CAN_F6R1_FB13_Pos      EQU (13)
CAN_F6R1_FB13_Msk      EQU (0x1 :SHL: CAN_F6R1_FB13_Pos)                     ;!< 0x00002000
CAN_F6R1_FB13          EQU CAN_F6R1_FB13_Msk                               ;!<Filter bit 13
CAN_F6R1_FB14_Pos      EQU (14)
CAN_F6R1_FB14_Msk      EQU (0x1 :SHL: CAN_F6R1_FB14_Pos)                     ;!< 0x00004000
CAN_F6R1_FB14          EQU CAN_F6R1_FB14_Msk                               ;!<Filter bit 14
CAN_F6R1_FB15_Pos      EQU (15)
CAN_F6R1_FB15_Msk      EQU (0x1 :SHL: CAN_F6R1_FB15_Pos)                     ;!< 0x00008000
CAN_F6R1_FB15          EQU CAN_F6R1_FB15_Msk                               ;!<Filter bit 15
CAN_F6R1_FB16_Pos      EQU (16)
CAN_F6R1_FB16_Msk      EQU (0x1 :SHL: CAN_F6R1_FB16_Pos)                     ;!< 0x00010000
CAN_F6R1_FB16          EQU CAN_F6R1_FB16_Msk                               ;!<Filter bit 16
CAN_F6R1_FB17_Pos      EQU (17)
CAN_F6R1_FB17_Msk      EQU (0x1 :SHL: CAN_F6R1_FB17_Pos)                     ;!< 0x00020000
CAN_F6R1_FB17          EQU CAN_F6R1_FB17_Msk                               ;!<Filter bit 17
CAN_F6R1_FB18_Pos      EQU (18)
CAN_F6R1_FB18_Msk      EQU (0x1 :SHL: CAN_F6R1_FB18_Pos)                     ;!< 0x00040000
CAN_F6R1_FB18          EQU CAN_F6R1_FB18_Msk                               ;!<Filter bit 18
CAN_F6R1_FB19_Pos      EQU (19)
CAN_F6R1_FB19_Msk      EQU (0x1 :SHL: CAN_F6R1_FB19_Pos)                     ;!< 0x00080000
CAN_F6R1_FB19          EQU CAN_F6R1_FB19_Msk                               ;!<Filter bit 19
CAN_F6R1_FB20_Pos      EQU (20)
CAN_F6R1_FB20_Msk      EQU (0x1 :SHL: CAN_F6R1_FB20_Pos)                     ;!< 0x00100000
CAN_F6R1_FB20          EQU CAN_F6R1_FB20_Msk                               ;!<Filter bit 20
CAN_F6R1_FB21_Pos      EQU (21)
CAN_F6R1_FB21_Msk      EQU (0x1 :SHL: CAN_F6R1_FB21_Pos)                     ;!< 0x00200000
CAN_F6R1_FB21          EQU CAN_F6R1_FB21_Msk                               ;!<Filter bit 21
CAN_F6R1_FB22_Pos      EQU (22)
CAN_F6R1_FB22_Msk      EQU (0x1 :SHL: CAN_F6R1_FB22_Pos)                     ;!< 0x00400000
CAN_F6R1_FB22          EQU CAN_F6R1_FB22_Msk                               ;!<Filter bit 22
CAN_F6R1_FB23_Pos      EQU (23)
CAN_F6R1_FB23_Msk      EQU (0x1 :SHL: CAN_F6R1_FB23_Pos)                     ;!< 0x00800000
CAN_F6R1_FB23          EQU CAN_F6R1_FB23_Msk                               ;!<Filter bit 23
CAN_F6R1_FB24_Pos      EQU (24)
CAN_F6R1_FB24_Msk      EQU (0x1 :SHL: CAN_F6R1_FB24_Pos)                     ;!< 0x01000000
CAN_F6R1_FB24          EQU CAN_F6R1_FB24_Msk                               ;!<Filter bit 24
CAN_F6R1_FB25_Pos      EQU (25)
CAN_F6R1_FB25_Msk      EQU (0x1 :SHL: CAN_F6R1_FB25_Pos)                     ;!< 0x02000000
CAN_F6R1_FB25          EQU CAN_F6R1_FB25_Msk                               ;!<Filter bit 25
CAN_F6R1_FB26_Pos      EQU (26)
CAN_F6R1_FB26_Msk      EQU (0x1 :SHL: CAN_F6R1_FB26_Pos)                     ;!< 0x04000000
CAN_F6R1_FB26          EQU CAN_F6R1_FB26_Msk                               ;!<Filter bit 26
CAN_F6R1_FB27_Pos      EQU (27)
CAN_F6R1_FB27_Msk      EQU (0x1 :SHL: CAN_F6R1_FB27_Pos)                     ;!< 0x08000000
CAN_F6R1_FB27          EQU CAN_F6R1_FB27_Msk                               ;!<Filter bit 27
CAN_F6R1_FB28_Pos      EQU (28)
CAN_F6R1_FB28_Msk      EQU (0x1 :SHL: CAN_F6R1_FB28_Pos)                     ;!< 0x10000000
CAN_F6R1_FB28          EQU CAN_F6R1_FB28_Msk                               ;!<Filter bit 28
CAN_F6R1_FB29_Pos      EQU (29)
CAN_F6R1_FB29_Msk      EQU (0x1 :SHL: CAN_F6R1_FB29_Pos)                     ;!< 0x20000000
CAN_F6R1_FB29          EQU CAN_F6R1_FB29_Msk                               ;!<Filter bit 29
CAN_F6R1_FB30_Pos      EQU (30)
CAN_F6R1_FB30_Msk      EQU (0x1 :SHL: CAN_F6R1_FB30_Pos)                     ;!< 0x40000000
CAN_F6R1_FB30          EQU CAN_F6R1_FB30_Msk                               ;!<Filter bit 30
CAN_F6R1_FB31_Pos      EQU (31)
CAN_F6R1_FB31_Msk      EQU (0x1 :SHL: CAN_F6R1_FB31_Pos)                     ;!< 0x80000000
CAN_F6R1_FB31          EQU CAN_F6R1_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F7R1 register  ******************
CAN_F7R1_FB0_Pos       EQU (0)
CAN_F7R1_FB0_Msk       EQU (0x1 :SHL: CAN_F7R1_FB0_Pos)                      ;!< 0x00000001
CAN_F7R1_FB0           EQU CAN_F7R1_FB0_Msk                                ;!<Filter bit 0
CAN_F7R1_FB1_Pos       EQU (1)
CAN_F7R1_FB1_Msk       EQU (0x1 :SHL: CAN_F7R1_FB1_Pos)                      ;!< 0x00000002
CAN_F7R1_FB1           EQU CAN_F7R1_FB1_Msk                                ;!<Filter bit 1
CAN_F7R1_FB2_Pos       EQU (2)
CAN_F7R1_FB2_Msk       EQU (0x1 :SHL: CAN_F7R1_FB2_Pos)                      ;!< 0x00000004
CAN_F7R1_FB2           EQU CAN_F7R1_FB2_Msk                                ;!<Filter bit 2
CAN_F7R1_FB3_Pos       EQU (3)
CAN_F7R1_FB3_Msk       EQU (0x1 :SHL: CAN_F7R1_FB3_Pos)                      ;!< 0x00000008
CAN_F7R1_FB3           EQU CAN_F7R1_FB3_Msk                                ;!<Filter bit 3
CAN_F7R1_FB4_Pos       EQU (4)
CAN_F7R1_FB4_Msk       EQU (0x1 :SHL: CAN_F7R1_FB4_Pos)                      ;!< 0x00000010
CAN_F7R1_FB4           EQU CAN_F7R1_FB4_Msk                                ;!<Filter bit 4
CAN_F7R1_FB5_Pos       EQU (5)
CAN_F7R1_FB5_Msk       EQU (0x1 :SHL: CAN_F7R1_FB5_Pos)                      ;!< 0x00000020
CAN_F7R1_FB5           EQU CAN_F7R1_FB5_Msk                                ;!<Filter bit 5
CAN_F7R1_FB6_Pos       EQU (6)
CAN_F7R1_FB6_Msk       EQU (0x1 :SHL: CAN_F7R1_FB6_Pos)                      ;!< 0x00000040
CAN_F7R1_FB6           EQU CAN_F7R1_FB6_Msk                                ;!<Filter bit 6
CAN_F7R1_FB7_Pos       EQU (7)
CAN_F7R1_FB7_Msk       EQU (0x1 :SHL: CAN_F7R1_FB7_Pos)                      ;!< 0x00000080
CAN_F7R1_FB7           EQU CAN_F7R1_FB7_Msk                                ;!<Filter bit 7
CAN_F7R1_FB8_Pos       EQU (8)
CAN_F7R1_FB8_Msk       EQU (0x1 :SHL: CAN_F7R1_FB8_Pos)                      ;!< 0x00000100
CAN_F7R1_FB8           EQU CAN_F7R1_FB8_Msk                                ;!<Filter bit 8
CAN_F7R1_FB9_Pos       EQU (9)
CAN_F7R1_FB9_Msk       EQU (0x1 :SHL: CAN_F7R1_FB9_Pos)                      ;!< 0x00000200
CAN_F7R1_FB9           EQU CAN_F7R1_FB9_Msk                                ;!<Filter bit 9
CAN_F7R1_FB10_Pos      EQU (10)
CAN_F7R1_FB10_Msk      EQU (0x1 :SHL: CAN_F7R1_FB10_Pos)                     ;!< 0x00000400
CAN_F7R1_FB10          EQU CAN_F7R1_FB10_Msk                               ;!<Filter bit 10
CAN_F7R1_FB11_Pos      EQU (11)
CAN_F7R1_FB11_Msk      EQU (0x1 :SHL: CAN_F7R1_FB11_Pos)                     ;!< 0x00000800
CAN_F7R1_FB11          EQU CAN_F7R1_FB11_Msk                               ;!<Filter bit 11
CAN_F7R1_FB12_Pos      EQU (12)
CAN_F7R1_FB12_Msk      EQU (0x1 :SHL: CAN_F7R1_FB12_Pos)                     ;!< 0x00001000
CAN_F7R1_FB12          EQU CAN_F7R1_FB12_Msk                               ;!<Filter bit 12
CAN_F7R1_FB13_Pos      EQU (13)
CAN_F7R1_FB13_Msk      EQU (0x1 :SHL: CAN_F7R1_FB13_Pos)                     ;!< 0x00002000
CAN_F7R1_FB13          EQU CAN_F7R1_FB13_Msk                               ;!<Filter bit 13
CAN_F7R1_FB14_Pos      EQU (14)
CAN_F7R1_FB14_Msk      EQU (0x1 :SHL: CAN_F7R1_FB14_Pos)                     ;!< 0x00004000
CAN_F7R1_FB14          EQU CAN_F7R1_FB14_Msk                               ;!<Filter bit 14
CAN_F7R1_FB15_Pos      EQU (15)
CAN_F7R1_FB15_Msk      EQU (0x1 :SHL: CAN_F7R1_FB15_Pos)                     ;!< 0x00008000
CAN_F7R1_FB15          EQU CAN_F7R1_FB15_Msk                               ;!<Filter bit 15
CAN_F7R1_FB16_Pos      EQU (16)
CAN_F7R1_FB16_Msk      EQU (0x1 :SHL: CAN_F7R1_FB16_Pos)                     ;!< 0x00010000
CAN_F7R1_FB16          EQU CAN_F7R1_FB16_Msk                               ;!<Filter bit 16
CAN_F7R1_FB17_Pos      EQU (17)
CAN_F7R1_FB17_Msk      EQU (0x1 :SHL: CAN_F7R1_FB17_Pos)                     ;!< 0x00020000
CAN_F7R1_FB17          EQU CAN_F7R1_FB17_Msk                               ;!<Filter bit 17
CAN_F7R1_FB18_Pos      EQU (18)
CAN_F7R1_FB18_Msk      EQU (0x1 :SHL: CAN_F7R1_FB18_Pos)                     ;!< 0x00040000
CAN_F7R1_FB18          EQU CAN_F7R1_FB18_Msk                               ;!<Filter bit 18
CAN_F7R1_FB19_Pos      EQU (19)
CAN_F7R1_FB19_Msk      EQU (0x1 :SHL: CAN_F7R1_FB19_Pos)                     ;!< 0x00080000
CAN_F7R1_FB19          EQU CAN_F7R1_FB19_Msk                               ;!<Filter bit 19
CAN_F7R1_FB20_Pos      EQU (20)
CAN_F7R1_FB20_Msk      EQU (0x1 :SHL: CAN_F7R1_FB20_Pos)                     ;!< 0x00100000
CAN_F7R1_FB20          EQU CAN_F7R1_FB20_Msk                               ;!<Filter bit 20
CAN_F7R1_FB21_Pos      EQU (21)
CAN_F7R1_FB21_Msk      EQU (0x1 :SHL: CAN_F7R1_FB21_Pos)                     ;!< 0x00200000
CAN_F7R1_FB21          EQU CAN_F7R1_FB21_Msk                               ;!<Filter bit 21
CAN_F7R1_FB22_Pos      EQU (22)
CAN_F7R1_FB22_Msk      EQU (0x1 :SHL: CAN_F7R1_FB22_Pos)                     ;!< 0x00400000
CAN_F7R1_FB22          EQU CAN_F7R1_FB22_Msk                               ;!<Filter bit 22
CAN_F7R1_FB23_Pos      EQU (23)
CAN_F7R1_FB23_Msk      EQU (0x1 :SHL: CAN_F7R1_FB23_Pos)                     ;!< 0x00800000
CAN_F7R1_FB23          EQU CAN_F7R1_FB23_Msk                               ;!<Filter bit 23
CAN_F7R1_FB24_Pos      EQU (24)
CAN_F7R1_FB24_Msk      EQU (0x1 :SHL: CAN_F7R1_FB24_Pos)                     ;!< 0x01000000
CAN_F7R1_FB24          EQU CAN_F7R1_FB24_Msk                               ;!<Filter bit 24
CAN_F7R1_FB25_Pos      EQU (25)
CAN_F7R1_FB25_Msk      EQU (0x1 :SHL: CAN_F7R1_FB25_Pos)                     ;!< 0x02000000
CAN_F7R1_FB25          EQU CAN_F7R1_FB25_Msk                               ;!<Filter bit 25
CAN_F7R1_FB26_Pos      EQU (26)
CAN_F7R1_FB26_Msk      EQU (0x1 :SHL: CAN_F7R1_FB26_Pos)                     ;!< 0x04000000
CAN_F7R1_FB26          EQU CAN_F7R1_FB26_Msk                               ;!<Filter bit 26
CAN_F7R1_FB27_Pos      EQU (27)
CAN_F7R1_FB27_Msk      EQU (0x1 :SHL: CAN_F7R1_FB27_Pos)                     ;!< 0x08000000
CAN_F7R1_FB27          EQU CAN_F7R1_FB27_Msk                               ;!<Filter bit 27
CAN_F7R1_FB28_Pos      EQU (28)
CAN_F7R1_FB28_Msk      EQU (0x1 :SHL: CAN_F7R1_FB28_Pos)                     ;!< 0x10000000
CAN_F7R1_FB28          EQU CAN_F7R1_FB28_Msk                               ;!<Filter bit 28
CAN_F7R1_FB29_Pos      EQU (29)
CAN_F7R1_FB29_Msk      EQU (0x1 :SHL: CAN_F7R1_FB29_Pos)                     ;!< 0x20000000
CAN_F7R1_FB29          EQU CAN_F7R1_FB29_Msk                               ;!<Filter bit 29
CAN_F7R1_FB30_Pos      EQU (30)
CAN_F7R1_FB30_Msk      EQU (0x1 :SHL: CAN_F7R1_FB30_Pos)                     ;!< 0x40000000
CAN_F7R1_FB30          EQU CAN_F7R1_FB30_Msk                               ;!<Filter bit 30
CAN_F7R1_FB31_Pos      EQU (31)
CAN_F7R1_FB31_Msk      EQU (0x1 :SHL: CAN_F7R1_FB31_Pos)                     ;!< 0x80000000
CAN_F7R1_FB31          EQU CAN_F7R1_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F8R1 register  ******************
CAN_F8R1_FB0_Pos       EQU (0)
CAN_F8R1_FB0_Msk       EQU (0x1 :SHL: CAN_F8R1_FB0_Pos)                      ;!< 0x00000001
CAN_F8R1_FB0           EQU CAN_F8R1_FB0_Msk                                ;!<Filter bit 0
CAN_F8R1_FB1_Pos       EQU (1)
CAN_F8R1_FB1_Msk       EQU (0x1 :SHL: CAN_F8R1_FB1_Pos)                      ;!< 0x00000002
CAN_F8R1_FB1           EQU CAN_F8R1_FB1_Msk                                ;!<Filter bit 1
CAN_F8R1_FB2_Pos       EQU (2)
CAN_F8R1_FB2_Msk       EQU (0x1 :SHL: CAN_F8R1_FB2_Pos)                      ;!< 0x00000004
CAN_F8R1_FB2           EQU CAN_F8R1_FB2_Msk                                ;!<Filter bit 2
CAN_F8R1_FB3_Pos       EQU (3)
CAN_F8R1_FB3_Msk       EQU (0x1 :SHL: CAN_F8R1_FB3_Pos)                      ;!< 0x00000008
CAN_F8R1_FB3           EQU CAN_F8R1_FB3_Msk                                ;!<Filter bit 3
CAN_F8R1_FB4_Pos       EQU (4)
CAN_F8R1_FB4_Msk       EQU (0x1 :SHL: CAN_F8R1_FB4_Pos)                      ;!< 0x00000010
CAN_F8R1_FB4           EQU CAN_F8R1_FB4_Msk                                ;!<Filter bit 4
CAN_F8R1_FB5_Pos       EQU (5)
CAN_F8R1_FB5_Msk       EQU (0x1 :SHL: CAN_F8R1_FB5_Pos)                      ;!< 0x00000020
CAN_F8R1_FB5           EQU CAN_F8R1_FB5_Msk                                ;!<Filter bit 5
CAN_F8R1_FB6_Pos       EQU (6)
CAN_F8R1_FB6_Msk       EQU (0x1 :SHL: CAN_F8R1_FB6_Pos)                      ;!< 0x00000040
CAN_F8R1_FB6           EQU CAN_F8R1_FB6_Msk                                ;!<Filter bit 6
CAN_F8R1_FB7_Pos       EQU (7)
CAN_F8R1_FB7_Msk       EQU (0x1 :SHL: CAN_F8R1_FB7_Pos)                      ;!< 0x00000080
CAN_F8R1_FB7           EQU CAN_F8R1_FB7_Msk                                ;!<Filter bit 7
CAN_F8R1_FB8_Pos       EQU (8)
CAN_F8R1_FB8_Msk       EQU (0x1 :SHL: CAN_F8R1_FB8_Pos)                      ;!< 0x00000100
CAN_F8R1_FB8           EQU CAN_F8R1_FB8_Msk                                ;!<Filter bit 8
CAN_F8R1_FB9_Pos       EQU (9)
CAN_F8R1_FB9_Msk       EQU (0x1 :SHL: CAN_F8R1_FB9_Pos)                      ;!< 0x00000200
CAN_F8R1_FB9           EQU CAN_F8R1_FB9_Msk                                ;!<Filter bit 9
CAN_F8R1_FB10_Pos      EQU (10)
CAN_F8R1_FB10_Msk      EQU (0x1 :SHL: CAN_F8R1_FB10_Pos)                     ;!< 0x00000400
CAN_F8R1_FB10          EQU CAN_F8R1_FB10_Msk                               ;!<Filter bit 10
CAN_F8R1_FB11_Pos      EQU (11)
CAN_F8R1_FB11_Msk      EQU (0x1 :SHL: CAN_F8R1_FB11_Pos)                     ;!< 0x00000800
CAN_F8R1_FB11          EQU CAN_F8R1_FB11_Msk                               ;!<Filter bit 11
CAN_F8R1_FB12_Pos      EQU (12)
CAN_F8R1_FB12_Msk      EQU (0x1 :SHL: CAN_F8R1_FB12_Pos)                     ;!< 0x00001000
CAN_F8R1_FB12          EQU CAN_F8R1_FB12_Msk                               ;!<Filter bit 12
CAN_F8R1_FB13_Pos      EQU (13)
CAN_F8R1_FB13_Msk      EQU (0x1 :SHL: CAN_F8R1_FB13_Pos)                     ;!< 0x00002000
CAN_F8R1_FB13          EQU CAN_F8R1_FB13_Msk                               ;!<Filter bit 13
CAN_F8R1_FB14_Pos      EQU (14)
CAN_F8R1_FB14_Msk      EQU (0x1 :SHL: CAN_F8R1_FB14_Pos)                     ;!< 0x00004000
CAN_F8R1_FB14          EQU CAN_F8R1_FB14_Msk                               ;!<Filter bit 14
CAN_F8R1_FB15_Pos      EQU (15)
CAN_F8R1_FB15_Msk      EQU (0x1 :SHL: CAN_F8R1_FB15_Pos)                     ;!< 0x00008000
CAN_F8R1_FB15          EQU CAN_F8R1_FB15_Msk                               ;!<Filter bit 15
CAN_F8R1_FB16_Pos      EQU (16)
CAN_F8R1_FB16_Msk      EQU (0x1 :SHL: CAN_F8R1_FB16_Pos)                     ;!< 0x00010000
CAN_F8R1_FB16          EQU CAN_F8R1_FB16_Msk                               ;!<Filter bit 16
CAN_F8R1_FB17_Pos      EQU (17)
CAN_F8R1_FB17_Msk      EQU (0x1 :SHL: CAN_F8R1_FB17_Pos)                     ;!< 0x00020000
CAN_F8R1_FB17          EQU CAN_F8R1_FB17_Msk                               ;!<Filter bit 17
CAN_F8R1_FB18_Pos      EQU (18)
CAN_F8R1_FB18_Msk      EQU (0x1 :SHL: CAN_F8R1_FB18_Pos)                     ;!< 0x00040000
CAN_F8R1_FB18          EQU CAN_F8R1_FB18_Msk                               ;!<Filter bit 18
CAN_F8R1_FB19_Pos      EQU (19)
CAN_F8R1_FB19_Msk      EQU (0x1 :SHL: CAN_F8R1_FB19_Pos)                     ;!< 0x00080000
CAN_F8R1_FB19          EQU CAN_F8R1_FB19_Msk                               ;!<Filter bit 19
CAN_F8R1_FB20_Pos      EQU (20)
CAN_F8R1_FB20_Msk      EQU (0x1 :SHL: CAN_F8R1_FB20_Pos)                     ;!< 0x00100000
CAN_F8R1_FB20          EQU CAN_F8R1_FB20_Msk                               ;!<Filter bit 20
CAN_F8R1_FB21_Pos      EQU (21)
CAN_F8R1_FB21_Msk      EQU (0x1 :SHL: CAN_F8R1_FB21_Pos)                     ;!< 0x00200000
CAN_F8R1_FB21          EQU CAN_F8R1_FB21_Msk                               ;!<Filter bit 21
CAN_F8R1_FB22_Pos      EQU (22)
CAN_F8R1_FB22_Msk      EQU (0x1 :SHL: CAN_F8R1_FB22_Pos)                     ;!< 0x00400000
CAN_F8R1_FB22          EQU CAN_F8R1_FB22_Msk                               ;!<Filter bit 22
CAN_F8R1_FB23_Pos      EQU (23)
CAN_F8R1_FB23_Msk      EQU (0x1 :SHL: CAN_F8R1_FB23_Pos)                     ;!< 0x00800000
CAN_F8R1_FB23          EQU CAN_F8R1_FB23_Msk                               ;!<Filter bit 23
CAN_F8R1_FB24_Pos      EQU (24)
CAN_F8R1_FB24_Msk      EQU (0x1 :SHL: CAN_F8R1_FB24_Pos)                     ;!< 0x01000000
CAN_F8R1_FB24          EQU CAN_F8R1_FB24_Msk                               ;!<Filter bit 24
CAN_F8R1_FB25_Pos      EQU (25)
CAN_F8R1_FB25_Msk      EQU (0x1 :SHL: CAN_F8R1_FB25_Pos)                     ;!< 0x02000000
CAN_F8R1_FB25          EQU CAN_F8R1_FB25_Msk                               ;!<Filter bit 25
CAN_F8R1_FB26_Pos      EQU (26)
CAN_F8R1_FB26_Msk      EQU (0x1 :SHL: CAN_F8R1_FB26_Pos)                     ;!< 0x04000000
CAN_F8R1_FB26          EQU CAN_F8R1_FB26_Msk                               ;!<Filter bit 26
CAN_F8R1_FB27_Pos      EQU (27)
CAN_F8R1_FB27_Msk      EQU (0x1 :SHL: CAN_F8R1_FB27_Pos)                     ;!< 0x08000000
CAN_F8R1_FB27          EQU CAN_F8R1_FB27_Msk                               ;!<Filter bit 27
CAN_F8R1_FB28_Pos      EQU (28)
CAN_F8R1_FB28_Msk      EQU (0x1 :SHL: CAN_F8R1_FB28_Pos)                     ;!< 0x10000000
CAN_F8R1_FB28          EQU CAN_F8R1_FB28_Msk                               ;!<Filter bit 28
CAN_F8R1_FB29_Pos      EQU (29)
CAN_F8R1_FB29_Msk      EQU (0x1 :SHL: CAN_F8R1_FB29_Pos)                     ;!< 0x20000000
CAN_F8R1_FB29          EQU CAN_F8R1_FB29_Msk                               ;!<Filter bit 29
CAN_F8R1_FB30_Pos      EQU (30)
CAN_F8R1_FB30_Msk      EQU (0x1 :SHL: CAN_F8R1_FB30_Pos)                     ;!< 0x40000000
CAN_F8R1_FB30          EQU CAN_F8R1_FB30_Msk                               ;!<Filter bit 30
CAN_F8R1_FB31_Pos      EQU (31)
CAN_F8R1_FB31_Msk      EQU (0x1 :SHL: CAN_F8R1_FB31_Pos)                     ;!< 0x80000000
CAN_F8R1_FB31          EQU CAN_F8R1_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F9R1 register  ******************
CAN_F9R1_FB0_Pos       EQU (0)
CAN_F9R1_FB0_Msk       EQU (0x1 :SHL: CAN_F9R1_FB0_Pos)                      ;!< 0x00000001
CAN_F9R1_FB0           EQU CAN_F9R1_FB0_Msk                                ;!<Filter bit 0
CAN_F9R1_FB1_Pos       EQU (1)
CAN_F9R1_FB1_Msk       EQU (0x1 :SHL: CAN_F9R1_FB1_Pos)                      ;!< 0x00000002
CAN_F9R1_FB1           EQU CAN_F9R1_FB1_Msk                                ;!<Filter bit 1
CAN_F9R1_FB2_Pos       EQU (2)
CAN_F9R1_FB2_Msk       EQU (0x1 :SHL: CAN_F9R1_FB2_Pos)                      ;!< 0x00000004
CAN_F9R1_FB2           EQU CAN_F9R1_FB2_Msk                                ;!<Filter bit 2
CAN_F9R1_FB3_Pos       EQU (3)
CAN_F9R1_FB3_Msk       EQU (0x1 :SHL: CAN_F9R1_FB3_Pos)                      ;!< 0x00000008
CAN_F9R1_FB3           EQU CAN_F9R1_FB3_Msk                                ;!<Filter bit 3
CAN_F9R1_FB4_Pos       EQU (4)
CAN_F9R1_FB4_Msk       EQU (0x1 :SHL: CAN_F9R1_FB4_Pos)                      ;!< 0x00000010
CAN_F9R1_FB4           EQU CAN_F9R1_FB4_Msk                                ;!<Filter bit 4
CAN_F9R1_FB5_Pos       EQU (5)
CAN_F9R1_FB5_Msk       EQU (0x1 :SHL: CAN_F9R1_FB5_Pos)                      ;!< 0x00000020
CAN_F9R1_FB5           EQU CAN_F9R1_FB5_Msk                                ;!<Filter bit 5
CAN_F9R1_FB6_Pos       EQU (6)
CAN_F9R1_FB6_Msk       EQU (0x1 :SHL: CAN_F9R1_FB6_Pos)                      ;!< 0x00000040
CAN_F9R1_FB6           EQU CAN_F9R1_FB6_Msk                                ;!<Filter bit 6
CAN_F9R1_FB7_Pos       EQU (7)
CAN_F9R1_FB7_Msk       EQU (0x1 :SHL: CAN_F9R1_FB7_Pos)                      ;!< 0x00000080
CAN_F9R1_FB7           EQU CAN_F9R1_FB7_Msk                                ;!<Filter bit 7
CAN_F9R1_FB8_Pos       EQU (8)
CAN_F9R1_FB8_Msk       EQU (0x1 :SHL: CAN_F9R1_FB8_Pos)                      ;!< 0x00000100
CAN_F9R1_FB8           EQU CAN_F9R1_FB8_Msk                                ;!<Filter bit 8
CAN_F9R1_FB9_Pos       EQU (9)
CAN_F9R1_FB9_Msk       EQU (0x1 :SHL: CAN_F9R1_FB9_Pos)                      ;!< 0x00000200
CAN_F9R1_FB9           EQU CAN_F9R1_FB9_Msk                                ;!<Filter bit 9
CAN_F9R1_FB10_Pos      EQU (10)
CAN_F9R1_FB10_Msk      EQU (0x1 :SHL: CAN_F9R1_FB10_Pos)                     ;!< 0x00000400
CAN_F9R1_FB10          EQU CAN_F9R1_FB10_Msk                               ;!<Filter bit 10
CAN_F9R1_FB11_Pos      EQU (11)
CAN_F9R1_FB11_Msk      EQU (0x1 :SHL: CAN_F9R1_FB11_Pos)                     ;!< 0x00000800
CAN_F9R1_FB11          EQU CAN_F9R1_FB11_Msk                               ;!<Filter bit 11
CAN_F9R1_FB12_Pos      EQU (12)
CAN_F9R1_FB12_Msk      EQU (0x1 :SHL: CAN_F9R1_FB12_Pos)                     ;!< 0x00001000
CAN_F9R1_FB12          EQU CAN_F9R1_FB12_Msk                               ;!<Filter bit 12
CAN_F9R1_FB13_Pos      EQU (13)
CAN_F9R1_FB13_Msk      EQU (0x1 :SHL: CAN_F9R1_FB13_Pos)                     ;!< 0x00002000
CAN_F9R1_FB13          EQU CAN_F9R1_FB13_Msk                               ;!<Filter bit 13
CAN_F9R1_FB14_Pos      EQU (14)
CAN_F9R1_FB14_Msk      EQU (0x1 :SHL: CAN_F9R1_FB14_Pos)                     ;!< 0x00004000
CAN_F9R1_FB14          EQU CAN_F9R1_FB14_Msk                               ;!<Filter bit 14
CAN_F9R1_FB15_Pos      EQU (15)
CAN_F9R1_FB15_Msk      EQU (0x1 :SHL: CAN_F9R1_FB15_Pos)                     ;!< 0x00008000
CAN_F9R1_FB15          EQU CAN_F9R1_FB15_Msk                               ;!<Filter bit 15
CAN_F9R1_FB16_Pos      EQU (16)
CAN_F9R1_FB16_Msk      EQU (0x1 :SHL: CAN_F9R1_FB16_Pos)                     ;!< 0x00010000
CAN_F9R1_FB16          EQU CAN_F9R1_FB16_Msk                               ;!<Filter bit 16
CAN_F9R1_FB17_Pos      EQU (17)
CAN_F9R1_FB17_Msk      EQU (0x1 :SHL: CAN_F9R1_FB17_Pos)                     ;!< 0x00020000
CAN_F9R1_FB17          EQU CAN_F9R1_FB17_Msk                               ;!<Filter bit 17
CAN_F9R1_FB18_Pos      EQU (18)
CAN_F9R1_FB18_Msk      EQU (0x1 :SHL: CAN_F9R1_FB18_Pos)                     ;!< 0x00040000
CAN_F9R1_FB18          EQU CAN_F9R1_FB18_Msk                               ;!<Filter bit 18
CAN_F9R1_FB19_Pos      EQU (19)
CAN_F9R1_FB19_Msk      EQU (0x1 :SHL: CAN_F9R1_FB19_Pos)                     ;!< 0x00080000
CAN_F9R1_FB19          EQU CAN_F9R1_FB19_Msk                               ;!<Filter bit 19
CAN_F9R1_FB20_Pos      EQU (20)
CAN_F9R1_FB20_Msk      EQU (0x1 :SHL: CAN_F9R1_FB20_Pos)                     ;!< 0x00100000
CAN_F9R1_FB20          EQU CAN_F9R1_FB20_Msk                               ;!<Filter bit 20
CAN_F9R1_FB21_Pos      EQU (21)
CAN_F9R1_FB21_Msk      EQU (0x1 :SHL: CAN_F9R1_FB21_Pos)                     ;!< 0x00200000
CAN_F9R1_FB21          EQU CAN_F9R1_FB21_Msk                               ;!<Filter bit 21
CAN_F9R1_FB22_Pos      EQU (22)
CAN_F9R1_FB22_Msk      EQU (0x1 :SHL: CAN_F9R1_FB22_Pos)                     ;!< 0x00400000
CAN_F9R1_FB22          EQU CAN_F9R1_FB22_Msk                               ;!<Filter bit 22
CAN_F9R1_FB23_Pos      EQU (23)
CAN_F9R1_FB23_Msk      EQU (0x1 :SHL: CAN_F9R1_FB23_Pos)                     ;!< 0x00800000
CAN_F9R1_FB23          EQU CAN_F9R1_FB23_Msk                               ;!<Filter bit 23
CAN_F9R1_FB24_Pos      EQU (24)
CAN_F9R1_FB24_Msk      EQU (0x1 :SHL: CAN_F9R1_FB24_Pos)                     ;!< 0x01000000
CAN_F9R1_FB24          EQU CAN_F9R1_FB24_Msk                               ;!<Filter bit 24
CAN_F9R1_FB25_Pos      EQU (25)
CAN_F9R1_FB25_Msk      EQU (0x1 :SHL: CAN_F9R1_FB25_Pos)                     ;!< 0x02000000
CAN_F9R1_FB25          EQU CAN_F9R1_FB25_Msk                               ;!<Filter bit 25
CAN_F9R1_FB26_Pos      EQU (26)
CAN_F9R1_FB26_Msk      EQU (0x1 :SHL: CAN_F9R1_FB26_Pos)                     ;!< 0x04000000
CAN_F9R1_FB26          EQU CAN_F9R1_FB26_Msk                               ;!<Filter bit 26
CAN_F9R1_FB27_Pos      EQU (27)
CAN_F9R1_FB27_Msk      EQU (0x1 :SHL: CAN_F9R1_FB27_Pos)                     ;!< 0x08000000
CAN_F9R1_FB27          EQU CAN_F9R1_FB27_Msk                               ;!<Filter bit 27
CAN_F9R1_FB28_Pos      EQU (28)
CAN_F9R1_FB28_Msk      EQU (0x1 :SHL: CAN_F9R1_FB28_Pos)                     ;!< 0x10000000
CAN_F9R1_FB28          EQU CAN_F9R1_FB28_Msk                               ;!<Filter bit 28
CAN_F9R1_FB29_Pos      EQU (29)
CAN_F9R1_FB29_Msk      EQU (0x1 :SHL: CAN_F9R1_FB29_Pos)                     ;!< 0x20000000
CAN_F9R1_FB29          EQU CAN_F9R1_FB29_Msk                               ;!<Filter bit 29
CAN_F9R1_FB30_Pos      EQU (30)
CAN_F9R1_FB30_Msk      EQU (0x1 :SHL: CAN_F9R1_FB30_Pos)                     ;!< 0x40000000
CAN_F9R1_FB30          EQU CAN_F9R1_FB30_Msk                               ;!<Filter bit 30
CAN_F9R1_FB31_Pos      EQU (31)
CAN_F9R1_FB31_Msk      EQU (0x1 :SHL: CAN_F9R1_FB31_Pos)                     ;!< 0x80000000
CAN_F9R1_FB31          EQU CAN_F9R1_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F10R1 register  *****************
CAN_F10R1_FB0_Pos      EQU (0)
CAN_F10R1_FB0_Msk      EQU (0x1 :SHL: CAN_F10R1_FB0_Pos)                     ;!< 0x00000001
CAN_F10R1_FB0          EQU CAN_F10R1_FB0_Msk                               ;!<Filter bit 0
CAN_F10R1_FB1_Pos      EQU (1)
CAN_F10R1_FB1_Msk      EQU (0x1 :SHL: CAN_F10R1_FB1_Pos)                     ;!< 0x00000002
CAN_F10R1_FB1          EQU CAN_F10R1_FB1_Msk                               ;!<Filter bit 1
CAN_F10R1_FB2_Pos      EQU (2)
CAN_F10R1_FB2_Msk      EQU (0x1 :SHL: CAN_F10R1_FB2_Pos)                     ;!< 0x00000004
CAN_F10R1_FB2          EQU CAN_F10R1_FB2_Msk                               ;!<Filter bit 2
CAN_F10R1_FB3_Pos      EQU (3)
CAN_F10R1_FB3_Msk      EQU (0x1 :SHL: CAN_F10R1_FB3_Pos)                     ;!< 0x00000008
CAN_F10R1_FB3          EQU CAN_F10R1_FB3_Msk                               ;!<Filter bit 3
CAN_F10R1_FB4_Pos      EQU (4)
CAN_F10R1_FB4_Msk      EQU (0x1 :SHL: CAN_F10R1_FB4_Pos)                     ;!< 0x00000010
CAN_F10R1_FB4          EQU CAN_F10R1_FB4_Msk                               ;!<Filter bit 4
CAN_F10R1_FB5_Pos      EQU (5)
CAN_F10R1_FB5_Msk      EQU (0x1 :SHL: CAN_F10R1_FB5_Pos)                     ;!< 0x00000020
CAN_F10R1_FB5          EQU CAN_F10R1_FB5_Msk                               ;!<Filter bit 5
CAN_F10R1_FB6_Pos      EQU (6)
CAN_F10R1_FB6_Msk      EQU (0x1 :SHL: CAN_F10R1_FB6_Pos)                     ;!< 0x00000040
CAN_F10R1_FB6          EQU CAN_F10R1_FB6_Msk                               ;!<Filter bit 6
CAN_F10R1_FB7_Pos      EQU (7)
CAN_F10R1_FB7_Msk      EQU (0x1 :SHL: CAN_F10R1_FB7_Pos)                     ;!< 0x00000080
CAN_F10R1_FB7          EQU CAN_F10R1_FB7_Msk                               ;!<Filter bit 7
CAN_F10R1_FB8_Pos      EQU (8)
CAN_F10R1_FB8_Msk      EQU (0x1 :SHL: CAN_F10R1_FB8_Pos)                     ;!< 0x00000100
CAN_F10R1_FB8          EQU CAN_F10R1_FB8_Msk                               ;!<Filter bit 8
CAN_F10R1_FB9_Pos      EQU (9)
CAN_F10R1_FB9_Msk      EQU (0x1 :SHL: CAN_F10R1_FB9_Pos)                     ;!< 0x00000200
CAN_F10R1_FB9          EQU CAN_F10R1_FB9_Msk                               ;!<Filter bit 9
CAN_F10R1_FB10_Pos     EQU (10)
CAN_F10R1_FB10_Msk     EQU (0x1 :SHL: CAN_F10R1_FB10_Pos)                    ;!< 0x00000400
CAN_F10R1_FB10         EQU CAN_F10R1_FB10_Msk                              ;!<Filter bit 10
CAN_F10R1_FB11_Pos     EQU (11)
CAN_F10R1_FB11_Msk     EQU (0x1 :SHL: CAN_F10R1_FB11_Pos)                    ;!< 0x00000800
CAN_F10R1_FB11         EQU CAN_F10R1_FB11_Msk                              ;!<Filter bit 11
CAN_F10R1_FB12_Pos     EQU (12)
CAN_F10R1_FB12_Msk     EQU (0x1 :SHL: CAN_F10R1_FB12_Pos)                    ;!< 0x00001000
CAN_F10R1_FB12         EQU CAN_F10R1_FB12_Msk                              ;!<Filter bit 12
CAN_F10R1_FB13_Pos     EQU (13)
CAN_F10R1_FB13_Msk     EQU (0x1 :SHL: CAN_F10R1_FB13_Pos)                    ;!< 0x00002000
CAN_F10R1_FB13         EQU CAN_F10R1_FB13_Msk                              ;!<Filter bit 13
CAN_F10R1_FB14_Pos     EQU (14)
CAN_F10R1_FB14_Msk     EQU (0x1 :SHL: CAN_F10R1_FB14_Pos)                    ;!< 0x00004000
CAN_F10R1_FB14         EQU CAN_F10R1_FB14_Msk                              ;!<Filter bit 14
CAN_F10R1_FB15_Pos     EQU (15)
CAN_F10R1_FB15_Msk     EQU (0x1 :SHL: CAN_F10R1_FB15_Pos)                    ;!< 0x00008000
CAN_F10R1_FB15         EQU CAN_F10R1_FB15_Msk                              ;!<Filter bit 15
CAN_F10R1_FB16_Pos     EQU (16)
CAN_F10R1_FB16_Msk     EQU (0x1 :SHL: CAN_F10R1_FB16_Pos)                    ;!< 0x00010000
CAN_F10R1_FB16         EQU CAN_F10R1_FB16_Msk                              ;!<Filter bit 16
CAN_F10R1_FB17_Pos     EQU (17)
CAN_F10R1_FB17_Msk     EQU (0x1 :SHL: CAN_F10R1_FB17_Pos)                    ;!< 0x00020000
CAN_F10R1_FB17         EQU CAN_F10R1_FB17_Msk                              ;!<Filter bit 17
CAN_F10R1_FB18_Pos     EQU (18)
CAN_F10R1_FB18_Msk     EQU (0x1 :SHL: CAN_F10R1_FB18_Pos)                    ;!< 0x00040000
CAN_F10R1_FB18         EQU CAN_F10R1_FB18_Msk                              ;!<Filter bit 18
CAN_F10R1_FB19_Pos     EQU (19)
CAN_F10R1_FB19_Msk     EQU (0x1 :SHL: CAN_F10R1_FB19_Pos)                    ;!< 0x00080000
CAN_F10R1_FB19         EQU CAN_F10R1_FB19_Msk                              ;!<Filter bit 19
CAN_F10R1_FB20_Pos     EQU (20)
CAN_F10R1_FB20_Msk     EQU (0x1 :SHL: CAN_F10R1_FB20_Pos)                    ;!< 0x00100000
CAN_F10R1_FB20         EQU CAN_F10R1_FB20_Msk                              ;!<Filter bit 20
CAN_F10R1_FB21_Pos     EQU (21)
CAN_F10R1_FB21_Msk     EQU (0x1 :SHL: CAN_F10R1_FB21_Pos)                    ;!< 0x00200000
CAN_F10R1_FB21         EQU CAN_F10R1_FB21_Msk                              ;!<Filter bit 21
CAN_F10R1_FB22_Pos     EQU (22)
CAN_F10R1_FB22_Msk     EQU (0x1 :SHL: CAN_F10R1_FB22_Pos)                    ;!< 0x00400000
CAN_F10R1_FB22         EQU CAN_F10R1_FB22_Msk                              ;!<Filter bit 22
CAN_F10R1_FB23_Pos     EQU (23)
CAN_F10R1_FB23_Msk     EQU (0x1 :SHL: CAN_F10R1_FB23_Pos)                    ;!< 0x00800000
CAN_F10R1_FB23         EQU CAN_F10R1_FB23_Msk                              ;!<Filter bit 23
CAN_F10R1_FB24_Pos     EQU (24)
CAN_F10R1_FB24_Msk     EQU (0x1 :SHL: CAN_F10R1_FB24_Pos)                    ;!< 0x01000000
CAN_F10R1_FB24         EQU CAN_F10R1_FB24_Msk                              ;!<Filter bit 24
CAN_F10R1_FB25_Pos     EQU (25)
CAN_F10R1_FB25_Msk     EQU (0x1 :SHL: CAN_F10R1_FB25_Pos)                    ;!< 0x02000000
CAN_F10R1_FB25         EQU CAN_F10R1_FB25_Msk                              ;!<Filter bit 25
CAN_F10R1_FB26_Pos     EQU (26)
CAN_F10R1_FB26_Msk     EQU (0x1 :SHL: CAN_F10R1_FB26_Pos)                    ;!< 0x04000000
CAN_F10R1_FB26         EQU CAN_F10R1_FB26_Msk                              ;!<Filter bit 26
CAN_F10R1_FB27_Pos     EQU (27)
CAN_F10R1_FB27_Msk     EQU (0x1 :SHL: CAN_F10R1_FB27_Pos)                    ;!< 0x08000000
CAN_F10R1_FB27         EQU CAN_F10R1_FB27_Msk                              ;!<Filter bit 27
CAN_F10R1_FB28_Pos     EQU (28)
CAN_F10R1_FB28_Msk     EQU (0x1 :SHL: CAN_F10R1_FB28_Pos)                    ;!< 0x10000000
CAN_F10R1_FB28         EQU CAN_F10R1_FB28_Msk                              ;!<Filter bit 28
CAN_F10R1_FB29_Pos     EQU (29)
CAN_F10R1_FB29_Msk     EQU (0x1 :SHL: CAN_F10R1_FB29_Pos)                    ;!< 0x20000000
CAN_F10R1_FB29         EQU CAN_F10R1_FB29_Msk                              ;!<Filter bit 29
CAN_F10R1_FB30_Pos     EQU (30)
CAN_F10R1_FB30_Msk     EQU (0x1 :SHL: CAN_F10R1_FB30_Pos)                    ;!< 0x40000000
CAN_F10R1_FB30         EQU CAN_F10R1_FB30_Msk                              ;!<Filter bit 30
CAN_F10R1_FB31_Pos     EQU (31)
CAN_F10R1_FB31_Msk     EQU (0x1 :SHL: CAN_F10R1_FB31_Pos)                    ;!< 0x80000000
CAN_F10R1_FB31         EQU CAN_F10R1_FB31_Msk                              ;!<Filter bit 31

;******************  Bit definition for CAN_F11R1 register  *****************
CAN_F11R1_FB0_Pos      EQU (0)
CAN_F11R1_FB0_Msk      EQU (0x1 :SHL: CAN_F11R1_FB0_Pos)                     ;!< 0x00000001
CAN_F11R1_FB0          EQU CAN_F11R1_FB0_Msk                               ;!<Filter bit 0
CAN_F11R1_FB1_Pos      EQU (1)
CAN_F11R1_FB1_Msk      EQU (0x1 :SHL: CAN_F11R1_FB1_Pos)                     ;!< 0x00000002
CAN_F11R1_FB1          EQU CAN_F11R1_FB1_Msk                               ;!<Filter bit 1
CAN_F11R1_FB2_Pos      EQU (2)
CAN_F11R1_FB2_Msk      EQU (0x1 :SHL: CAN_F11R1_FB2_Pos)                     ;!< 0x00000004
CAN_F11R1_FB2          EQU CAN_F11R1_FB2_Msk                               ;!<Filter bit 2
CAN_F11R1_FB3_Pos      EQU (3)
CAN_F11R1_FB3_Msk      EQU (0x1 :SHL: CAN_F11R1_FB3_Pos)                     ;!< 0x00000008
CAN_F11R1_FB3          EQU CAN_F11R1_FB3_Msk                               ;!<Filter bit 3
CAN_F11R1_FB4_Pos      EQU (4)
CAN_F11R1_FB4_Msk      EQU (0x1 :SHL: CAN_F11R1_FB4_Pos)                     ;!< 0x00000010
CAN_F11R1_FB4          EQU CAN_F11R1_FB4_Msk                               ;!<Filter bit 4
CAN_F11R1_FB5_Pos      EQU (5)
CAN_F11R1_FB5_Msk      EQU (0x1 :SHL: CAN_F11R1_FB5_Pos)                     ;!< 0x00000020
CAN_F11R1_FB5          EQU CAN_F11R1_FB5_Msk                               ;!<Filter bit 5
CAN_F11R1_FB6_Pos      EQU (6)
CAN_F11R1_FB6_Msk      EQU (0x1 :SHL: CAN_F11R1_FB6_Pos)                     ;!< 0x00000040
CAN_F11R1_FB6          EQU CAN_F11R1_FB6_Msk                               ;!<Filter bit 6
CAN_F11R1_FB7_Pos      EQU (7)
CAN_F11R1_FB7_Msk      EQU (0x1 :SHL: CAN_F11R1_FB7_Pos)                     ;!< 0x00000080
CAN_F11R1_FB7          EQU CAN_F11R1_FB7_Msk                               ;!<Filter bit 7
CAN_F11R1_FB8_Pos      EQU (8)
CAN_F11R1_FB8_Msk      EQU (0x1 :SHL: CAN_F11R1_FB8_Pos)                     ;!< 0x00000100
CAN_F11R1_FB8          EQU CAN_F11R1_FB8_Msk                               ;!<Filter bit 8
CAN_F11R1_FB9_Pos      EQU (9)
CAN_F11R1_FB9_Msk      EQU (0x1 :SHL: CAN_F11R1_FB9_Pos)                     ;!< 0x00000200
CAN_F11R1_FB9          EQU CAN_F11R1_FB9_Msk                               ;!<Filter bit 9
CAN_F11R1_FB10_Pos     EQU (10)
CAN_F11R1_FB10_Msk     EQU (0x1 :SHL: CAN_F11R1_FB10_Pos)                    ;!< 0x00000400
CAN_F11R1_FB10         EQU CAN_F11R1_FB10_Msk                              ;!<Filter bit 10
CAN_F11R1_FB11_Pos     EQU (11)
CAN_F11R1_FB11_Msk     EQU (0x1 :SHL: CAN_F11R1_FB11_Pos)                    ;!< 0x00000800
CAN_F11R1_FB11         EQU CAN_F11R1_FB11_Msk                              ;!<Filter bit 11
CAN_F11R1_FB12_Pos     EQU (12)
CAN_F11R1_FB12_Msk     EQU (0x1 :SHL: CAN_F11R1_FB12_Pos)                    ;!< 0x00001000
CAN_F11R1_FB12         EQU CAN_F11R1_FB12_Msk                              ;!<Filter bit 12
CAN_F11R1_FB13_Pos     EQU (13)
CAN_F11R1_FB13_Msk     EQU (0x1 :SHL: CAN_F11R1_FB13_Pos)                    ;!< 0x00002000
CAN_F11R1_FB13         EQU CAN_F11R1_FB13_Msk                              ;!<Filter bit 13
CAN_F11R1_FB14_Pos     EQU (14)
CAN_F11R1_FB14_Msk     EQU (0x1 :SHL: CAN_F11R1_FB14_Pos)                    ;!< 0x00004000
CAN_F11R1_FB14         EQU CAN_F11R1_FB14_Msk                              ;!<Filter bit 14
CAN_F11R1_FB15_Pos     EQU (15)
CAN_F11R1_FB15_Msk     EQU (0x1 :SHL: CAN_F11R1_FB15_Pos)                    ;!< 0x00008000
CAN_F11R1_FB15         EQU CAN_F11R1_FB15_Msk                              ;!<Filter bit 15
CAN_F11R1_FB16_Pos     EQU (16)
CAN_F11R1_FB16_Msk     EQU (0x1 :SHL: CAN_F11R1_FB16_Pos)                    ;!< 0x00010000
CAN_F11R1_FB16         EQU CAN_F11R1_FB16_Msk                              ;!<Filter bit 16
CAN_F11R1_FB17_Pos     EQU (17)
CAN_F11R1_FB17_Msk     EQU (0x1 :SHL: CAN_F11R1_FB17_Pos)                    ;!< 0x00020000
CAN_F11R1_FB17         EQU CAN_F11R1_FB17_Msk                              ;!<Filter bit 17
CAN_F11R1_FB18_Pos     EQU (18)
CAN_F11R1_FB18_Msk     EQU (0x1 :SHL: CAN_F11R1_FB18_Pos)                    ;!< 0x00040000
CAN_F11R1_FB18         EQU CAN_F11R1_FB18_Msk                              ;!<Filter bit 18
CAN_F11R1_FB19_Pos     EQU (19)
CAN_F11R1_FB19_Msk     EQU (0x1 :SHL: CAN_F11R1_FB19_Pos)                    ;!< 0x00080000
CAN_F11R1_FB19         EQU CAN_F11R1_FB19_Msk                              ;!<Filter bit 19
CAN_F11R1_FB20_Pos     EQU (20)
CAN_F11R1_FB20_Msk     EQU (0x1 :SHL: CAN_F11R1_FB20_Pos)                    ;!< 0x00100000
CAN_F11R1_FB20         EQU CAN_F11R1_FB20_Msk                              ;!<Filter bit 20
CAN_F11R1_FB21_Pos     EQU (21)
CAN_F11R1_FB21_Msk     EQU (0x1 :SHL: CAN_F11R1_FB21_Pos)                    ;!< 0x00200000
CAN_F11R1_FB21         EQU CAN_F11R1_FB21_Msk                              ;!<Filter bit 21
CAN_F11R1_FB22_Pos     EQU (22)
CAN_F11R1_FB22_Msk     EQU (0x1 :SHL: CAN_F11R1_FB22_Pos)                    ;!< 0x00400000
CAN_F11R1_FB22         EQU CAN_F11R1_FB22_Msk                              ;!<Filter bit 22
CAN_F11R1_FB23_Pos     EQU (23)
CAN_F11R1_FB23_Msk     EQU (0x1 :SHL: CAN_F11R1_FB23_Pos)                    ;!< 0x00800000
CAN_F11R1_FB23         EQU CAN_F11R1_FB23_Msk                              ;!<Filter bit 23
CAN_F11R1_FB24_Pos     EQU (24)
CAN_F11R1_FB24_Msk     EQU (0x1 :SHL: CAN_F11R1_FB24_Pos)                    ;!< 0x01000000
CAN_F11R1_FB24         EQU CAN_F11R1_FB24_Msk                              ;!<Filter bit 24
CAN_F11R1_FB25_Pos     EQU (25)
CAN_F11R1_FB25_Msk     EQU (0x1 :SHL: CAN_F11R1_FB25_Pos)                    ;!< 0x02000000
CAN_F11R1_FB25         EQU CAN_F11R1_FB25_Msk                              ;!<Filter bit 25
CAN_F11R1_FB26_Pos     EQU (26)
CAN_F11R1_FB26_Msk     EQU (0x1 :SHL: CAN_F11R1_FB26_Pos)                    ;!< 0x04000000
CAN_F11R1_FB26         EQU CAN_F11R1_FB26_Msk                              ;!<Filter bit 26
CAN_F11R1_FB27_Pos     EQU (27)
CAN_F11R1_FB27_Msk     EQU (0x1 :SHL: CAN_F11R1_FB27_Pos)                    ;!< 0x08000000
CAN_F11R1_FB27         EQU CAN_F11R1_FB27_Msk                              ;!<Filter bit 27
CAN_F11R1_FB28_Pos     EQU (28)
CAN_F11R1_FB28_Msk     EQU (0x1 :SHL: CAN_F11R1_FB28_Pos)                    ;!< 0x10000000
CAN_F11R1_FB28         EQU CAN_F11R1_FB28_Msk                              ;!<Filter bit 28
CAN_F11R1_FB29_Pos     EQU (29)
CAN_F11R1_FB29_Msk     EQU (0x1 :SHL: CAN_F11R1_FB29_Pos)                    ;!< 0x20000000
CAN_F11R1_FB29         EQU CAN_F11R1_FB29_Msk                              ;!<Filter bit 29
CAN_F11R1_FB30_Pos     EQU (30)
CAN_F11R1_FB30_Msk     EQU (0x1 :SHL: CAN_F11R1_FB30_Pos)                    ;!< 0x40000000
CAN_F11R1_FB30         EQU CAN_F11R1_FB30_Msk                              ;!<Filter bit 30
CAN_F11R1_FB31_Pos     EQU (31)
CAN_F11R1_FB31_Msk     EQU (0x1 :SHL: CAN_F11R1_FB31_Pos)                    ;!< 0x80000000
CAN_F11R1_FB31         EQU CAN_F11R1_FB31_Msk                              ;!<Filter bit 31

;******************  Bit definition for CAN_F12R1 register  *****************
CAN_F12R1_FB0_Pos      EQU (0)
CAN_F12R1_FB0_Msk      EQU (0x1 :SHL: CAN_F12R1_FB0_Pos)                     ;!< 0x00000001
CAN_F12R1_FB0          EQU CAN_F12R1_FB0_Msk                               ;!<Filter bit 0
CAN_F12R1_FB1_Pos      EQU (1)
CAN_F12R1_FB1_Msk      EQU (0x1 :SHL: CAN_F12R1_FB1_Pos)                     ;!< 0x00000002
CAN_F12R1_FB1          EQU CAN_F12R1_FB1_Msk                               ;!<Filter bit 1
CAN_F12R1_FB2_Pos      EQU (2)
CAN_F12R1_FB2_Msk      EQU (0x1 :SHL: CAN_F12R1_FB2_Pos)                     ;!< 0x00000004
CAN_F12R1_FB2          EQU CAN_F12R1_FB2_Msk                               ;!<Filter bit 2
CAN_F12R1_FB3_Pos      EQU (3)
CAN_F12R1_FB3_Msk      EQU (0x1 :SHL: CAN_F12R1_FB3_Pos)                     ;!< 0x00000008
CAN_F12R1_FB3          EQU CAN_F12R1_FB3_Msk                               ;!<Filter bit 3
CAN_F12R1_FB4_Pos      EQU (4)
CAN_F12R1_FB4_Msk      EQU (0x1 :SHL: CAN_F12R1_FB4_Pos)                     ;!< 0x00000010
CAN_F12R1_FB4          EQU CAN_F12R1_FB4_Msk                               ;!<Filter bit 4
CAN_F12R1_FB5_Pos      EQU (5)
CAN_F12R1_FB5_Msk      EQU (0x1 :SHL: CAN_F12R1_FB5_Pos)                     ;!< 0x00000020
CAN_F12R1_FB5          EQU CAN_F12R1_FB5_Msk                               ;!<Filter bit 5
CAN_F12R1_FB6_Pos      EQU (6)
CAN_F12R1_FB6_Msk      EQU (0x1 :SHL: CAN_F12R1_FB6_Pos)                     ;!< 0x00000040
CAN_F12R1_FB6          EQU CAN_F12R1_FB6_Msk                               ;!<Filter bit 6
CAN_F12R1_FB7_Pos      EQU (7)
CAN_F12R1_FB7_Msk      EQU (0x1 :SHL: CAN_F12R1_FB7_Pos)                     ;!< 0x00000080
CAN_F12R1_FB7          EQU CAN_F12R1_FB7_Msk                               ;!<Filter bit 7
CAN_F12R1_FB8_Pos      EQU (8)
CAN_F12R1_FB8_Msk      EQU (0x1 :SHL: CAN_F12R1_FB8_Pos)                     ;!< 0x00000100
CAN_F12R1_FB8          EQU CAN_F12R1_FB8_Msk                               ;!<Filter bit 8
CAN_F12R1_FB9_Pos      EQU (9)
CAN_F12R1_FB9_Msk      EQU (0x1 :SHL: CAN_F12R1_FB9_Pos)                     ;!< 0x00000200
CAN_F12R1_FB9          EQU CAN_F12R1_FB9_Msk                               ;!<Filter bit 9
CAN_F12R1_FB10_Pos     EQU (10)
CAN_F12R1_FB10_Msk     EQU (0x1 :SHL: CAN_F12R1_FB10_Pos)                    ;!< 0x00000400
CAN_F12R1_FB10         EQU CAN_F12R1_FB10_Msk                              ;!<Filter bit 10
CAN_F12R1_FB11_Pos     EQU (11)
CAN_F12R1_FB11_Msk     EQU (0x1 :SHL: CAN_F12R1_FB11_Pos)                    ;!< 0x00000800
CAN_F12R1_FB11         EQU CAN_F12R1_FB11_Msk                              ;!<Filter bit 11
CAN_F12R1_FB12_Pos     EQU (12)
CAN_F12R1_FB12_Msk     EQU (0x1 :SHL: CAN_F12R1_FB12_Pos)                    ;!< 0x00001000
CAN_F12R1_FB12         EQU CAN_F12R1_FB12_Msk                              ;!<Filter bit 12
CAN_F12R1_FB13_Pos     EQU (13)
CAN_F12R1_FB13_Msk     EQU (0x1 :SHL: CAN_F12R1_FB13_Pos)                    ;!< 0x00002000
CAN_F12R1_FB13         EQU CAN_F12R1_FB13_Msk                              ;!<Filter bit 13
CAN_F12R1_FB14_Pos     EQU (14)
CAN_F12R1_FB14_Msk     EQU (0x1 :SHL: CAN_F12R1_FB14_Pos)                    ;!< 0x00004000
CAN_F12R1_FB14         EQU CAN_F12R1_FB14_Msk                              ;!<Filter bit 14
CAN_F12R1_FB15_Pos     EQU (15)
CAN_F12R1_FB15_Msk     EQU (0x1 :SHL: CAN_F12R1_FB15_Pos)                    ;!< 0x00008000
CAN_F12R1_FB15         EQU CAN_F12R1_FB15_Msk                              ;!<Filter bit 15
CAN_F12R1_FB16_Pos     EQU (16)
CAN_F12R1_FB16_Msk     EQU (0x1 :SHL: CAN_F12R1_FB16_Pos)                    ;!< 0x00010000
CAN_F12R1_FB16         EQU CAN_F12R1_FB16_Msk                              ;!<Filter bit 16
CAN_F12R1_FB17_Pos     EQU (17)
CAN_F12R1_FB17_Msk     EQU (0x1 :SHL: CAN_F12R1_FB17_Pos)                    ;!< 0x00020000
CAN_F12R1_FB17         EQU CAN_F12R1_FB17_Msk                              ;!<Filter bit 17
CAN_F12R1_FB18_Pos     EQU (18)
CAN_F12R1_FB18_Msk     EQU (0x1 :SHL: CAN_F12R1_FB18_Pos)                    ;!< 0x00040000
CAN_F12R1_FB18         EQU CAN_F12R1_FB18_Msk                              ;!<Filter bit 18
CAN_F12R1_FB19_Pos     EQU (19)
CAN_F12R1_FB19_Msk     EQU (0x1 :SHL: CAN_F12R1_FB19_Pos)                    ;!< 0x00080000
CAN_F12R1_FB19         EQU CAN_F12R1_FB19_Msk                              ;!<Filter bit 19
CAN_F12R1_FB20_Pos     EQU (20)
CAN_F12R1_FB20_Msk     EQU (0x1 :SHL: CAN_F12R1_FB20_Pos)                    ;!< 0x00100000
CAN_F12R1_FB20         EQU CAN_F12R1_FB20_Msk                              ;!<Filter bit 20
CAN_F12R1_FB21_Pos     EQU (21)
CAN_F12R1_FB21_Msk     EQU (0x1 :SHL: CAN_F12R1_FB21_Pos)                    ;!< 0x00200000
CAN_F12R1_FB21         EQU CAN_F12R1_FB21_Msk                              ;!<Filter bit 21
CAN_F12R1_FB22_Pos     EQU (22)
CAN_F12R1_FB22_Msk     EQU (0x1 :SHL: CAN_F12R1_FB22_Pos)                    ;!< 0x00400000
CAN_F12R1_FB22         EQU CAN_F12R1_FB22_Msk                              ;!<Filter bit 22
CAN_F12R1_FB23_Pos     EQU (23)
CAN_F12R1_FB23_Msk     EQU (0x1 :SHL: CAN_F12R1_FB23_Pos)                    ;!< 0x00800000
CAN_F12R1_FB23         EQU CAN_F12R1_FB23_Msk                              ;!<Filter bit 23
CAN_F12R1_FB24_Pos     EQU (24)
CAN_F12R1_FB24_Msk     EQU (0x1 :SHL: CAN_F12R1_FB24_Pos)                    ;!< 0x01000000
CAN_F12R1_FB24         EQU CAN_F12R1_FB24_Msk                              ;!<Filter bit 24
CAN_F12R1_FB25_Pos     EQU (25)
CAN_F12R1_FB25_Msk     EQU (0x1 :SHL: CAN_F12R1_FB25_Pos)                    ;!< 0x02000000
CAN_F12R1_FB25         EQU CAN_F12R1_FB25_Msk                              ;!<Filter bit 25
CAN_F12R1_FB26_Pos     EQU (26)
CAN_F12R1_FB26_Msk     EQU (0x1 :SHL: CAN_F12R1_FB26_Pos)                    ;!< 0x04000000
CAN_F12R1_FB26         EQU CAN_F12R1_FB26_Msk                              ;!<Filter bit 26
CAN_F12R1_FB27_Pos     EQU (27)
CAN_F12R1_FB27_Msk     EQU (0x1 :SHL: CAN_F12R1_FB27_Pos)                    ;!< 0x08000000
CAN_F12R1_FB27         EQU CAN_F12R1_FB27_Msk                              ;!<Filter bit 27
CAN_F12R1_FB28_Pos     EQU (28)
CAN_F12R1_FB28_Msk     EQU (0x1 :SHL: CAN_F12R1_FB28_Pos)                    ;!< 0x10000000
CAN_F12R1_FB28         EQU CAN_F12R1_FB28_Msk                              ;!<Filter bit 28
CAN_F12R1_FB29_Pos     EQU (29)
CAN_F12R1_FB29_Msk     EQU (0x1 :SHL: CAN_F12R1_FB29_Pos)                    ;!< 0x20000000
CAN_F12R1_FB29         EQU CAN_F12R1_FB29_Msk                              ;!<Filter bit 29
CAN_F12R1_FB30_Pos     EQU (30)
CAN_F12R1_FB30_Msk     EQU (0x1 :SHL: CAN_F12R1_FB30_Pos)                    ;!< 0x40000000
CAN_F12R1_FB30         EQU CAN_F12R1_FB30_Msk                              ;!<Filter bit 30
CAN_F12R1_FB31_Pos     EQU (31)
CAN_F12R1_FB31_Msk     EQU (0x1 :SHL: CAN_F12R1_FB31_Pos)                    ;!< 0x80000000
CAN_F12R1_FB31         EQU CAN_F12R1_FB31_Msk                              ;!<Filter bit 31

;******************  Bit definition for CAN_F13R1 register  *****************
CAN_F13R1_FB0_Pos      EQU (0)
CAN_F13R1_FB0_Msk      EQU (0x1 :SHL: CAN_F13R1_FB0_Pos)                     ;!< 0x00000001
CAN_F13R1_FB0          EQU CAN_F13R1_FB0_Msk                               ;!<Filter bit 0
CAN_F13R1_FB1_Pos      EQU (1)
CAN_F13R1_FB1_Msk      EQU (0x1 :SHL: CAN_F13R1_FB1_Pos)                     ;!< 0x00000002
CAN_F13R1_FB1          EQU CAN_F13R1_FB1_Msk                               ;!<Filter bit 1
CAN_F13R1_FB2_Pos      EQU (2)
CAN_F13R1_FB2_Msk      EQU (0x1 :SHL: CAN_F13R1_FB2_Pos)                     ;!< 0x00000004
CAN_F13R1_FB2          EQU CAN_F13R1_FB2_Msk                               ;!<Filter bit 2
CAN_F13R1_FB3_Pos      EQU (3)
CAN_F13R1_FB3_Msk      EQU (0x1 :SHL: CAN_F13R1_FB3_Pos)                     ;!< 0x00000008
CAN_F13R1_FB3          EQU CAN_F13R1_FB3_Msk                               ;!<Filter bit 3
CAN_F13R1_FB4_Pos      EQU (4)
CAN_F13R1_FB4_Msk      EQU (0x1 :SHL: CAN_F13R1_FB4_Pos)                     ;!< 0x00000010
CAN_F13R1_FB4          EQU CAN_F13R1_FB4_Msk                               ;!<Filter bit 4
CAN_F13R1_FB5_Pos      EQU (5)
CAN_F13R1_FB5_Msk      EQU (0x1 :SHL: CAN_F13R1_FB5_Pos)                     ;!< 0x00000020
CAN_F13R1_FB5          EQU CAN_F13R1_FB5_Msk                               ;!<Filter bit 5
CAN_F13R1_FB6_Pos      EQU (6)
CAN_F13R1_FB6_Msk      EQU (0x1 :SHL: CAN_F13R1_FB6_Pos)                     ;!< 0x00000040
CAN_F13R1_FB6          EQU CAN_F13R1_FB6_Msk                               ;!<Filter bit 6
CAN_F13R1_FB7_Pos      EQU (7)
CAN_F13R1_FB7_Msk      EQU (0x1 :SHL: CAN_F13R1_FB7_Pos)                     ;!< 0x00000080
CAN_F13R1_FB7          EQU CAN_F13R1_FB7_Msk                               ;!<Filter bit 7
CAN_F13R1_FB8_Pos      EQU (8)
CAN_F13R1_FB8_Msk      EQU (0x1 :SHL: CAN_F13R1_FB8_Pos)                     ;!< 0x00000100
CAN_F13R1_FB8          EQU CAN_F13R1_FB8_Msk                               ;!<Filter bit 8
CAN_F13R1_FB9_Pos      EQU (9)
CAN_F13R1_FB9_Msk      EQU (0x1 :SHL: CAN_F13R1_FB9_Pos)                     ;!< 0x00000200
CAN_F13R1_FB9          EQU CAN_F13R1_FB9_Msk                               ;!<Filter bit 9
CAN_F13R1_FB10_Pos     EQU (10)
CAN_F13R1_FB10_Msk     EQU (0x1 :SHL: CAN_F13R1_FB10_Pos)                    ;!< 0x00000400
CAN_F13R1_FB10         EQU CAN_F13R1_FB10_Msk                              ;!<Filter bit 10
CAN_F13R1_FB11_Pos     EQU (11)
CAN_F13R1_FB11_Msk     EQU (0x1 :SHL: CAN_F13R1_FB11_Pos)                    ;!< 0x00000800
CAN_F13R1_FB11         EQU CAN_F13R1_FB11_Msk                              ;!<Filter bit 11
CAN_F13R1_FB12_Pos     EQU (12)
CAN_F13R1_FB12_Msk     EQU (0x1 :SHL: CAN_F13R1_FB12_Pos)                    ;!< 0x00001000
CAN_F13R1_FB12         EQU CAN_F13R1_FB12_Msk                              ;!<Filter bit 12
CAN_F13R1_FB13_Pos     EQU (13)
CAN_F13R1_FB13_Msk     EQU (0x1 :SHL: CAN_F13R1_FB13_Pos)                    ;!< 0x00002000
CAN_F13R1_FB13         EQU CAN_F13R1_FB13_Msk                              ;!<Filter bit 13
CAN_F13R1_FB14_Pos     EQU (14)
CAN_F13R1_FB14_Msk     EQU (0x1 :SHL: CAN_F13R1_FB14_Pos)                    ;!< 0x00004000
CAN_F13R1_FB14         EQU CAN_F13R1_FB14_Msk                              ;!<Filter bit 14
CAN_F13R1_FB15_Pos     EQU (15)
CAN_F13R1_FB15_Msk     EQU (0x1 :SHL: CAN_F13R1_FB15_Pos)                    ;!< 0x00008000
CAN_F13R1_FB15         EQU CAN_F13R1_FB15_Msk                              ;!<Filter bit 15
CAN_F13R1_FB16_Pos     EQU (16)
CAN_F13R1_FB16_Msk     EQU (0x1 :SHL: CAN_F13R1_FB16_Pos)                    ;!< 0x00010000
CAN_F13R1_FB16         EQU CAN_F13R1_FB16_Msk                              ;!<Filter bit 16
CAN_F13R1_FB17_Pos     EQU (17)
CAN_F13R1_FB17_Msk     EQU (0x1 :SHL: CAN_F13R1_FB17_Pos)                    ;!< 0x00020000
CAN_F13R1_FB17         EQU CAN_F13R1_FB17_Msk                              ;!<Filter bit 17
CAN_F13R1_FB18_Pos     EQU (18)
CAN_F13R1_FB18_Msk     EQU (0x1 :SHL: CAN_F13R1_FB18_Pos)                    ;!< 0x00040000
CAN_F13R1_FB18         EQU CAN_F13R1_FB18_Msk                              ;!<Filter bit 18
CAN_F13R1_FB19_Pos     EQU (19)
CAN_F13R1_FB19_Msk     EQU (0x1 :SHL: CAN_F13R1_FB19_Pos)                    ;!< 0x00080000
CAN_F13R1_FB19         EQU CAN_F13R1_FB19_Msk                              ;!<Filter bit 19
CAN_F13R1_FB20_Pos     EQU (20)
CAN_F13R1_FB20_Msk     EQU (0x1 :SHL: CAN_F13R1_FB20_Pos)                    ;!< 0x00100000
CAN_F13R1_FB20         EQU CAN_F13R1_FB20_Msk                              ;!<Filter bit 20
CAN_F13R1_FB21_Pos     EQU (21)
CAN_F13R1_FB21_Msk     EQU (0x1 :SHL: CAN_F13R1_FB21_Pos)                    ;!< 0x00200000
CAN_F13R1_FB21         EQU CAN_F13R1_FB21_Msk                              ;!<Filter bit 21
CAN_F13R1_FB22_Pos     EQU (22)
CAN_F13R1_FB22_Msk     EQU (0x1 :SHL: CAN_F13R1_FB22_Pos)                    ;!< 0x00400000
CAN_F13R1_FB22         EQU CAN_F13R1_FB22_Msk                              ;!<Filter bit 22
CAN_F13R1_FB23_Pos     EQU (23)
CAN_F13R1_FB23_Msk     EQU (0x1 :SHL: CAN_F13R1_FB23_Pos)                    ;!< 0x00800000
CAN_F13R1_FB23         EQU CAN_F13R1_FB23_Msk                              ;!<Filter bit 23
CAN_F13R1_FB24_Pos     EQU (24)
CAN_F13R1_FB24_Msk     EQU (0x1 :SHL: CAN_F13R1_FB24_Pos)                    ;!< 0x01000000
CAN_F13R1_FB24         EQU CAN_F13R1_FB24_Msk                              ;!<Filter bit 24
CAN_F13R1_FB25_Pos     EQU (25)
CAN_F13R1_FB25_Msk     EQU (0x1 :SHL: CAN_F13R1_FB25_Pos)                    ;!< 0x02000000
CAN_F13R1_FB25         EQU CAN_F13R1_FB25_Msk                              ;!<Filter bit 25
CAN_F13R1_FB26_Pos     EQU (26)
CAN_F13R1_FB26_Msk     EQU (0x1 :SHL: CAN_F13R1_FB26_Pos)                    ;!< 0x04000000
CAN_F13R1_FB26         EQU CAN_F13R1_FB26_Msk                              ;!<Filter bit 26
CAN_F13R1_FB27_Pos     EQU (27)
CAN_F13R1_FB27_Msk     EQU (0x1 :SHL: CAN_F13R1_FB27_Pos)                    ;!< 0x08000000
CAN_F13R1_FB27         EQU CAN_F13R1_FB27_Msk                              ;!<Filter bit 27
CAN_F13R1_FB28_Pos     EQU (28)
CAN_F13R1_FB28_Msk     EQU (0x1 :SHL: CAN_F13R1_FB28_Pos)                    ;!< 0x10000000
CAN_F13R1_FB28         EQU CAN_F13R1_FB28_Msk                              ;!<Filter bit 28
CAN_F13R1_FB29_Pos     EQU (29)
CAN_F13R1_FB29_Msk     EQU (0x1 :SHL: CAN_F13R1_FB29_Pos)                    ;!< 0x20000000
CAN_F13R1_FB29         EQU CAN_F13R1_FB29_Msk                              ;!<Filter bit 29
CAN_F13R1_FB30_Pos     EQU (30)
CAN_F13R1_FB30_Msk     EQU (0x1 :SHL: CAN_F13R1_FB30_Pos)                    ;!< 0x40000000
CAN_F13R1_FB30         EQU CAN_F13R1_FB30_Msk                              ;!<Filter bit 30
CAN_F13R1_FB31_Pos     EQU (31)
CAN_F13R1_FB31_Msk     EQU (0x1 :SHL: CAN_F13R1_FB31_Pos)                    ;!< 0x80000000
CAN_F13R1_FB31         EQU CAN_F13R1_FB31_Msk                              ;!<Filter bit 31

;******************  Bit definition for CAN_F0R2 register  ******************
CAN_F0R2_FB0_Pos       EQU (0)
CAN_F0R2_FB0_Msk       EQU (0x1 :SHL: CAN_F0R2_FB0_Pos)                      ;!< 0x00000001
CAN_F0R2_FB0           EQU CAN_F0R2_FB0_Msk                                ;!<Filter bit 0
CAN_F0R2_FB1_Pos       EQU (1)
CAN_F0R2_FB1_Msk       EQU (0x1 :SHL: CAN_F0R2_FB1_Pos)                      ;!< 0x00000002
CAN_F0R2_FB1           EQU CAN_F0R2_FB1_Msk                                ;!<Filter bit 1
CAN_F0R2_FB2_Pos       EQU (2)
CAN_F0R2_FB2_Msk       EQU (0x1 :SHL: CAN_F0R2_FB2_Pos)                      ;!< 0x00000004
CAN_F0R2_FB2           EQU CAN_F0R2_FB2_Msk                                ;!<Filter bit 2
CAN_F0R2_FB3_Pos       EQU (3)
CAN_F0R2_FB3_Msk       EQU (0x1 :SHL: CAN_F0R2_FB3_Pos)                      ;!< 0x00000008
CAN_F0R2_FB3           EQU CAN_F0R2_FB3_Msk                                ;!<Filter bit 3
CAN_F0R2_FB4_Pos       EQU (4)
CAN_F0R2_FB4_Msk       EQU (0x1 :SHL: CAN_F0R2_FB4_Pos)                      ;!< 0x00000010
CAN_F0R2_FB4           EQU CAN_F0R2_FB4_Msk                                ;!<Filter bit 4
CAN_F0R2_FB5_Pos       EQU (5)
CAN_F0R2_FB5_Msk       EQU (0x1 :SHL: CAN_F0R2_FB5_Pos)                      ;!< 0x00000020
CAN_F0R2_FB5           EQU CAN_F0R2_FB5_Msk                                ;!<Filter bit 5
CAN_F0R2_FB6_Pos       EQU (6)
CAN_F0R2_FB6_Msk       EQU (0x1 :SHL: CAN_F0R2_FB6_Pos)                      ;!< 0x00000040
CAN_F0R2_FB6           EQU CAN_F0R2_FB6_Msk                                ;!<Filter bit 6
CAN_F0R2_FB7_Pos       EQU (7)
CAN_F0R2_FB7_Msk       EQU (0x1 :SHL: CAN_F0R2_FB7_Pos)                      ;!< 0x00000080
CAN_F0R2_FB7           EQU CAN_F0R2_FB7_Msk                                ;!<Filter bit 7
CAN_F0R2_FB8_Pos       EQU (8)
CAN_F0R2_FB8_Msk       EQU (0x1 :SHL: CAN_F0R2_FB8_Pos)                      ;!< 0x00000100
CAN_F0R2_FB8           EQU CAN_F0R2_FB8_Msk                                ;!<Filter bit 8
CAN_F0R2_FB9_Pos       EQU (9)
CAN_F0R2_FB9_Msk       EQU (0x1 :SHL: CAN_F0R2_FB9_Pos)                      ;!< 0x00000200
CAN_F0R2_FB9           EQU CAN_F0R2_FB9_Msk                                ;!<Filter bit 9
CAN_F0R2_FB10_Pos      EQU (10)
CAN_F0R2_FB10_Msk      EQU (0x1 :SHL: CAN_F0R2_FB10_Pos)                     ;!< 0x00000400
CAN_F0R2_FB10          EQU CAN_F0R2_FB10_Msk                               ;!<Filter bit 10
CAN_F0R2_FB11_Pos      EQU (11)
CAN_F0R2_FB11_Msk      EQU (0x1 :SHL: CAN_F0R2_FB11_Pos)                     ;!< 0x00000800
CAN_F0R2_FB11          EQU CAN_F0R2_FB11_Msk                               ;!<Filter bit 11
CAN_F0R2_FB12_Pos      EQU (12)
CAN_F0R2_FB12_Msk      EQU (0x1 :SHL: CAN_F0R2_FB12_Pos)                     ;!< 0x00001000
CAN_F0R2_FB12          EQU CAN_F0R2_FB12_Msk                               ;!<Filter bit 12
CAN_F0R2_FB13_Pos      EQU (13)
CAN_F0R2_FB13_Msk      EQU (0x1 :SHL: CAN_F0R2_FB13_Pos)                     ;!< 0x00002000
CAN_F0R2_FB13          EQU CAN_F0R2_FB13_Msk                               ;!<Filter bit 13
CAN_F0R2_FB14_Pos      EQU (14)
CAN_F0R2_FB14_Msk      EQU (0x1 :SHL: CAN_F0R2_FB14_Pos)                     ;!< 0x00004000
CAN_F0R2_FB14          EQU CAN_F0R2_FB14_Msk                               ;!<Filter bit 14
CAN_F0R2_FB15_Pos      EQU (15)
CAN_F0R2_FB15_Msk      EQU (0x1 :SHL: CAN_F0R2_FB15_Pos)                     ;!< 0x00008000
CAN_F0R2_FB15          EQU CAN_F0R2_FB15_Msk                               ;!<Filter bit 15
CAN_F0R2_FB16_Pos      EQU (16)
CAN_F0R2_FB16_Msk      EQU (0x1 :SHL: CAN_F0R2_FB16_Pos)                     ;!< 0x00010000
CAN_F0R2_FB16          EQU CAN_F0R2_FB16_Msk                               ;!<Filter bit 16
CAN_F0R2_FB17_Pos      EQU (17)
CAN_F0R2_FB17_Msk      EQU (0x1 :SHL: CAN_F0R2_FB17_Pos)                     ;!< 0x00020000
CAN_F0R2_FB17          EQU CAN_F0R2_FB17_Msk                               ;!<Filter bit 17
CAN_F0R2_FB18_Pos      EQU (18)
CAN_F0R2_FB18_Msk      EQU (0x1 :SHL: CAN_F0R2_FB18_Pos)                     ;!< 0x00040000
CAN_F0R2_FB18          EQU CAN_F0R2_FB18_Msk                               ;!<Filter bit 18
CAN_F0R2_FB19_Pos      EQU (19)
CAN_F0R2_FB19_Msk      EQU (0x1 :SHL: CAN_F0R2_FB19_Pos)                     ;!< 0x00080000
CAN_F0R2_FB19          EQU CAN_F0R2_FB19_Msk                               ;!<Filter bit 19
CAN_F0R2_FB20_Pos      EQU (20)
CAN_F0R2_FB20_Msk      EQU (0x1 :SHL: CAN_F0R2_FB20_Pos)                     ;!< 0x00100000
CAN_F0R2_FB20          EQU CAN_F0R2_FB20_Msk                               ;!<Filter bit 20
CAN_F0R2_FB21_Pos      EQU (21)
CAN_F0R2_FB21_Msk      EQU (0x1 :SHL: CAN_F0R2_FB21_Pos)                     ;!< 0x00200000
CAN_F0R2_FB21          EQU CAN_F0R2_FB21_Msk                               ;!<Filter bit 21
CAN_F0R2_FB22_Pos      EQU (22)
CAN_F0R2_FB22_Msk      EQU (0x1 :SHL: CAN_F0R2_FB22_Pos)                     ;!< 0x00400000
CAN_F0R2_FB22          EQU CAN_F0R2_FB22_Msk                               ;!<Filter bit 22
CAN_F0R2_FB23_Pos      EQU (23)
CAN_F0R2_FB23_Msk      EQU (0x1 :SHL: CAN_F0R2_FB23_Pos)                     ;!< 0x00800000
CAN_F0R2_FB23          EQU CAN_F0R2_FB23_Msk                               ;!<Filter bit 23
CAN_F0R2_FB24_Pos      EQU (24)
CAN_F0R2_FB24_Msk      EQU (0x1 :SHL: CAN_F0R2_FB24_Pos)                     ;!< 0x01000000
CAN_F0R2_FB24          EQU CAN_F0R2_FB24_Msk                               ;!<Filter bit 24
CAN_F0R2_FB25_Pos      EQU (25)
CAN_F0R2_FB25_Msk      EQU (0x1 :SHL: CAN_F0R2_FB25_Pos)                     ;!< 0x02000000
CAN_F0R2_FB25          EQU CAN_F0R2_FB25_Msk                               ;!<Filter bit 25
CAN_F0R2_FB26_Pos      EQU (26)
CAN_F0R2_FB26_Msk      EQU (0x1 :SHL: CAN_F0R2_FB26_Pos)                     ;!< 0x04000000
CAN_F0R2_FB26          EQU CAN_F0R2_FB26_Msk                               ;!<Filter bit 26
CAN_F0R2_FB27_Pos      EQU (27)
CAN_F0R2_FB27_Msk      EQU (0x1 :SHL: CAN_F0R2_FB27_Pos)                     ;!< 0x08000000
CAN_F0R2_FB27          EQU CAN_F0R2_FB27_Msk                               ;!<Filter bit 27
CAN_F0R2_FB28_Pos      EQU (28)
CAN_F0R2_FB28_Msk      EQU (0x1 :SHL: CAN_F0R2_FB28_Pos)                     ;!< 0x10000000
CAN_F0R2_FB28          EQU CAN_F0R2_FB28_Msk                               ;!<Filter bit 28
CAN_F0R2_FB29_Pos      EQU (29)
CAN_F0R2_FB29_Msk      EQU (0x1 :SHL: CAN_F0R2_FB29_Pos)                     ;!< 0x20000000
CAN_F0R2_FB29          EQU CAN_F0R2_FB29_Msk                               ;!<Filter bit 29
CAN_F0R2_FB30_Pos      EQU (30)
CAN_F0R2_FB30_Msk      EQU (0x1 :SHL: CAN_F0R2_FB30_Pos)                     ;!< 0x40000000
CAN_F0R2_FB30          EQU CAN_F0R2_FB30_Msk                               ;!<Filter bit 30
CAN_F0R2_FB31_Pos      EQU (31)
CAN_F0R2_FB31_Msk      EQU (0x1 :SHL: CAN_F0R2_FB31_Pos)                     ;!< 0x80000000
CAN_F0R2_FB31          EQU CAN_F0R2_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F1R2 register  ******************
CAN_F1R2_FB0_Pos       EQU (0)
CAN_F1R2_FB0_Msk       EQU (0x1 :SHL: CAN_F1R2_FB0_Pos)                      ;!< 0x00000001
CAN_F1R2_FB0           EQU CAN_F1R2_FB0_Msk                                ;!<Filter bit 0
CAN_F1R2_FB1_Pos       EQU (1)
CAN_F1R2_FB1_Msk       EQU (0x1 :SHL: CAN_F1R2_FB1_Pos)                      ;!< 0x00000002
CAN_F1R2_FB1           EQU CAN_F1R2_FB1_Msk                                ;!<Filter bit 1
CAN_F1R2_FB2_Pos       EQU (2)
CAN_F1R2_FB2_Msk       EQU (0x1 :SHL: CAN_F1R2_FB2_Pos)                      ;!< 0x00000004
CAN_F1R2_FB2           EQU CAN_F1R2_FB2_Msk                                ;!<Filter bit 2
CAN_F1R2_FB3_Pos       EQU (3)
CAN_F1R2_FB3_Msk       EQU (0x1 :SHL: CAN_F1R2_FB3_Pos)                      ;!< 0x00000008
CAN_F1R2_FB3           EQU CAN_F1R2_FB3_Msk                                ;!<Filter bit 3
CAN_F1R2_FB4_Pos       EQU (4)
CAN_F1R2_FB4_Msk       EQU (0x1 :SHL: CAN_F1R2_FB4_Pos)                      ;!< 0x00000010
CAN_F1R2_FB4           EQU CAN_F1R2_FB4_Msk                                ;!<Filter bit 4
CAN_F1R2_FB5_Pos       EQU (5)
CAN_F1R2_FB5_Msk       EQU (0x1 :SHL: CAN_F1R2_FB5_Pos)                      ;!< 0x00000020
CAN_F1R2_FB5           EQU CAN_F1R2_FB5_Msk                                ;!<Filter bit 5
CAN_F1R2_FB6_Pos       EQU (6)
CAN_F1R2_FB6_Msk       EQU (0x1 :SHL: CAN_F1R2_FB6_Pos)                      ;!< 0x00000040
CAN_F1R2_FB6           EQU CAN_F1R2_FB6_Msk                                ;!<Filter bit 6
CAN_F1R2_FB7_Pos       EQU (7)
CAN_F1R2_FB7_Msk       EQU (0x1 :SHL: CAN_F1R2_FB7_Pos)                      ;!< 0x00000080
CAN_F1R2_FB7           EQU CAN_F1R2_FB7_Msk                                ;!<Filter bit 7
CAN_F1R2_FB8_Pos       EQU (8)
CAN_F1R2_FB8_Msk       EQU (0x1 :SHL: CAN_F1R2_FB8_Pos)                      ;!< 0x00000100
CAN_F1R2_FB8           EQU CAN_F1R2_FB8_Msk                                ;!<Filter bit 8
CAN_F1R2_FB9_Pos       EQU (9)
CAN_F1R2_FB9_Msk       EQU (0x1 :SHL: CAN_F1R2_FB9_Pos)                      ;!< 0x00000200
CAN_F1R2_FB9           EQU CAN_F1R2_FB9_Msk                                ;!<Filter bit 9
CAN_F1R2_FB10_Pos      EQU (10)
CAN_F1R2_FB10_Msk      EQU (0x1 :SHL: CAN_F1R2_FB10_Pos)                     ;!< 0x00000400
CAN_F1R2_FB10          EQU CAN_F1R2_FB10_Msk                               ;!<Filter bit 10
CAN_F1R2_FB11_Pos      EQU (11)
CAN_F1R2_FB11_Msk      EQU (0x1 :SHL: CAN_F1R2_FB11_Pos)                     ;!< 0x00000800
CAN_F1R2_FB11          EQU CAN_F1R2_FB11_Msk                               ;!<Filter bit 11
CAN_F1R2_FB12_Pos      EQU (12)
CAN_F1R2_FB12_Msk      EQU (0x1 :SHL: CAN_F1R2_FB12_Pos)                     ;!< 0x00001000
CAN_F1R2_FB12          EQU CAN_F1R2_FB12_Msk                               ;!<Filter bit 12
CAN_F1R2_FB13_Pos      EQU (13)
CAN_F1R2_FB13_Msk      EQU (0x1 :SHL: CAN_F1R2_FB13_Pos)                     ;!< 0x00002000
CAN_F1R2_FB13          EQU CAN_F1R2_FB13_Msk                               ;!<Filter bit 13
CAN_F1R2_FB14_Pos      EQU (14)
CAN_F1R2_FB14_Msk      EQU (0x1 :SHL: CAN_F1R2_FB14_Pos)                     ;!< 0x00004000
CAN_F1R2_FB14          EQU CAN_F1R2_FB14_Msk                               ;!<Filter bit 14
CAN_F1R2_FB15_Pos      EQU (15)
CAN_F1R2_FB15_Msk      EQU (0x1 :SHL: CAN_F1R2_FB15_Pos)                     ;!< 0x00008000
CAN_F1R2_FB15          EQU CAN_F1R2_FB15_Msk                               ;!<Filter bit 15
CAN_F1R2_FB16_Pos      EQU (16)
CAN_F1R2_FB16_Msk      EQU (0x1 :SHL: CAN_F1R2_FB16_Pos)                     ;!< 0x00010000
CAN_F1R2_FB16          EQU CAN_F1R2_FB16_Msk                               ;!<Filter bit 16
CAN_F1R2_FB17_Pos      EQU (17)
CAN_F1R2_FB17_Msk      EQU (0x1 :SHL: CAN_F1R2_FB17_Pos)                     ;!< 0x00020000
CAN_F1R2_FB17          EQU CAN_F1R2_FB17_Msk                               ;!<Filter bit 17
CAN_F1R2_FB18_Pos      EQU (18)
CAN_F1R2_FB18_Msk      EQU (0x1 :SHL: CAN_F1R2_FB18_Pos)                     ;!< 0x00040000
CAN_F1R2_FB18          EQU CAN_F1R2_FB18_Msk                               ;!<Filter bit 18
CAN_F1R2_FB19_Pos      EQU (19)
CAN_F1R2_FB19_Msk      EQU (0x1 :SHL: CAN_F1R2_FB19_Pos)                     ;!< 0x00080000
CAN_F1R2_FB19          EQU CAN_F1R2_FB19_Msk                               ;!<Filter bit 19
CAN_F1R2_FB20_Pos      EQU (20)
CAN_F1R2_FB20_Msk      EQU (0x1 :SHL: CAN_F1R2_FB20_Pos)                     ;!< 0x00100000
CAN_F1R2_FB20          EQU CAN_F1R2_FB20_Msk                               ;!<Filter bit 20
CAN_F1R2_FB21_Pos      EQU (21)
CAN_F1R2_FB21_Msk      EQU (0x1 :SHL: CAN_F1R2_FB21_Pos)                     ;!< 0x00200000
CAN_F1R2_FB21          EQU CAN_F1R2_FB21_Msk                               ;!<Filter bit 21
CAN_F1R2_FB22_Pos      EQU (22)
CAN_F1R2_FB22_Msk      EQU (0x1 :SHL: CAN_F1R2_FB22_Pos)                     ;!< 0x00400000
CAN_F1R2_FB22          EQU CAN_F1R2_FB22_Msk                               ;!<Filter bit 22
CAN_F1R2_FB23_Pos      EQU (23)
CAN_F1R2_FB23_Msk      EQU (0x1 :SHL: CAN_F1R2_FB23_Pos)                     ;!< 0x00800000
CAN_F1R2_FB23          EQU CAN_F1R2_FB23_Msk                               ;!<Filter bit 23
CAN_F1R2_FB24_Pos      EQU (24)
CAN_F1R2_FB24_Msk      EQU (0x1 :SHL: CAN_F1R2_FB24_Pos)                     ;!< 0x01000000
CAN_F1R2_FB24          EQU CAN_F1R2_FB24_Msk                               ;!<Filter bit 24
CAN_F1R2_FB25_Pos      EQU (25)
CAN_F1R2_FB25_Msk      EQU (0x1 :SHL: CAN_F1R2_FB25_Pos)                     ;!< 0x02000000
CAN_F1R2_FB25          EQU CAN_F1R2_FB25_Msk                               ;!<Filter bit 25
CAN_F1R2_FB26_Pos      EQU (26)
CAN_F1R2_FB26_Msk      EQU (0x1 :SHL: CAN_F1R2_FB26_Pos)                     ;!< 0x04000000
CAN_F1R2_FB26          EQU CAN_F1R2_FB26_Msk                               ;!<Filter bit 26
CAN_F1R2_FB27_Pos      EQU (27)
CAN_F1R2_FB27_Msk      EQU (0x1 :SHL: CAN_F1R2_FB27_Pos)                     ;!< 0x08000000
CAN_F1R2_FB27          EQU CAN_F1R2_FB27_Msk                               ;!<Filter bit 27
CAN_F1R2_FB28_Pos      EQU (28)
CAN_F1R2_FB28_Msk      EQU (0x1 :SHL: CAN_F1R2_FB28_Pos)                     ;!< 0x10000000
CAN_F1R2_FB28          EQU CAN_F1R2_FB28_Msk                               ;!<Filter bit 28
CAN_F1R2_FB29_Pos      EQU (29)
CAN_F1R2_FB29_Msk      EQU (0x1 :SHL: CAN_F1R2_FB29_Pos)                     ;!< 0x20000000
CAN_F1R2_FB29          EQU CAN_F1R2_FB29_Msk                               ;!<Filter bit 29
CAN_F1R2_FB30_Pos      EQU (30)
CAN_F1R2_FB30_Msk      EQU (0x1 :SHL: CAN_F1R2_FB30_Pos)                     ;!< 0x40000000
CAN_F1R2_FB30          EQU CAN_F1R2_FB30_Msk                               ;!<Filter bit 30
CAN_F1R2_FB31_Pos      EQU (31)
CAN_F1R2_FB31_Msk      EQU (0x1 :SHL: CAN_F1R2_FB31_Pos)                     ;!< 0x80000000
CAN_F1R2_FB31          EQU CAN_F1R2_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F2R2 register  ******************
CAN_F2R2_FB0_Pos       EQU (0)
CAN_F2R2_FB0_Msk       EQU (0x1 :SHL: CAN_F2R2_FB0_Pos)                      ;!< 0x00000001
CAN_F2R2_FB0           EQU CAN_F2R2_FB0_Msk                                ;!<Filter bit 0
CAN_F2R2_FB1_Pos       EQU (1)
CAN_F2R2_FB1_Msk       EQU (0x1 :SHL: CAN_F2R2_FB1_Pos)                      ;!< 0x00000002
CAN_F2R2_FB1           EQU CAN_F2R2_FB1_Msk                                ;!<Filter bit 1
CAN_F2R2_FB2_Pos       EQU (2)
CAN_F2R2_FB2_Msk       EQU (0x1 :SHL: CAN_F2R2_FB2_Pos)                      ;!< 0x00000004
CAN_F2R2_FB2           EQU CAN_F2R2_FB2_Msk                                ;!<Filter bit 2
CAN_F2R2_FB3_Pos       EQU (3)
CAN_F2R2_FB3_Msk       EQU (0x1 :SHL: CAN_F2R2_FB3_Pos)                      ;!< 0x00000008
CAN_F2R2_FB3           EQU CAN_F2R2_FB3_Msk                                ;!<Filter bit 3
CAN_F2R2_FB4_Pos       EQU (4)
CAN_F2R2_FB4_Msk       EQU (0x1 :SHL: CAN_F2R2_FB4_Pos)                      ;!< 0x00000010
CAN_F2R2_FB4           EQU CAN_F2R2_FB4_Msk                                ;!<Filter bit 4
CAN_F2R2_FB5_Pos       EQU (5)
CAN_F2R2_FB5_Msk       EQU (0x1 :SHL: CAN_F2R2_FB5_Pos)                      ;!< 0x00000020
CAN_F2R2_FB5           EQU CAN_F2R2_FB5_Msk                                ;!<Filter bit 5
CAN_F2R2_FB6_Pos       EQU (6)
CAN_F2R2_FB6_Msk       EQU (0x1 :SHL: CAN_F2R2_FB6_Pos)                      ;!< 0x00000040
CAN_F2R2_FB6           EQU CAN_F2R2_FB6_Msk                                ;!<Filter bit 6
CAN_F2R2_FB7_Pos       EQU (7)
CAN_F2R2_FB7_Msk       EQU (0x1 :SHL: CAN_F2R2_FB7_Pos)                      ;!< 0x00000080
CAN_F2R2_FB7           EQU CAN_F2R2_FB7_Msk                                ;!<Filter bit 7
CAN_F2R2_FB8_Pos       EQU (8)
CAN_F2R2_FB8_Msk       EQU (0x1 :SHL: CAN_F2R2_FB8_Pos)                      ;!< 0x00000100
CAN_F2R2_FB8           EQU CAN_F2R2_FB8_Msk                                ;!<Filter bit 8
CAN_F2R2_FB9_Pos       EQU (9)
CAN_F2R2_FB9_Msk       EQU (0x1 :SHL: CAN_F2R2_FB9_Pos)                      ;!< 0x00000200
CAN_F2R2_FB9           EQU CAN_F2R2_FB9_Msk                                ;!<Filter bit 9
CAN_F2R2_FB10_Pos      EQU (10)
CAN_F2R2_FB10_Msk      EQU (0x1 :SHL: CAN_F2R2_FB10_Pos)                     ;!< 0x00000400
CAN_F2R2_FB10          EQU CAN_F2R2_FB10_Msk                               ;!<Filter bit 10
CAN_F2R2_FB11_Pos      EQU (11)
CAN_F2R2_FB11_Msk      EQU (0x1 :SHL: CAN_F2R2_FB11_Pos)                     ;!< 0x00000800
CAN_F2R2_FB11          EQU CAN_F2R2_FB11_Msk                               ;!<Filter bit 11
CAN_F2R2_FB12_Pos      EQU (12)
CAN_F2R2_FB12_Msk      EQU (0x1 :SHL: CAN_F2R2_FB12_Pos)                     ;!< 0x00001000
CAN_F2R2_FB12          EQU CAN_F2R2_FB12_Msk                               ;!<Filter bit 12
CAN_F2R2_FB13_Pos      EQU (13)
CAN_F2R2_FB13_Msk      EQU (0x1 :SHL: CAN_F2R2_FB13_Pos)                     ;!< 0x00002000
CAN_F2R2_FB13          EQU CAN_F2R2_FB13_Msk                               ;!<Filter bit 13
CAN_F2R2_FB14_Pos      EQU (14)
CAN_F2R2_FB14_Msk      EQU (0x1 :SHL: CAN_F2R2_FB14_Pos)                     ;!< 0x00004000
CAN_F2R2_FB14          EQU CAN_F2R2_FB14_Msk                               ;!<Filter bit 14
CAN_F2R2_FB15_Pos      EQU (15)
CAN_F2R2_FB15_Msk      EQU (0x1 :SHL: CAN_F2R2_FB15_Pos)                     ;!< 0x00008000
CAN_F2R2_FB15          EQU CAN_F2R2_FB15_Msk                               ;!<Filter bit 15
CAN_F2R2_FB16_Pos      EQU (16)
CAN_F2R2_FB16_Msk      EQU (0x1 :SHL: CAN_F2R2_FB16_Pos)                     ;!< 0x00010000
CAN_F2R2_FB16          EQU CAN_F2R2_FB16_Msk                               ;!<Filter bit 16
CAN_F2R2_FB17_Pos      EQU (17)
CAN_F2R2_FB17_Msk      EQU (0x1 :SHL: CAN_F2R2_FB17_Pos)                     ;!< 0x00020000
CAN_F2R2_FB17          EQU CAN_F2R2_FB17_Msk                               ;!<Filter bit 17
CAN_F2R2_FB18_Pos      EQU (18)
CAN_F2R2_FB18_Msk      EQU (0x1 :SHL: CAN_F2R2_FB18_Pos)                     ;!< 0x00040000
CAN_F2R2_FB18          EQU CAN_F2R2_FB18_Msk                               ;!<Filter bit 18
CAN_F2R2_FB19_Pos      EQU (19)
CAN_F2R2_FB19_Msk      EQU (0x1 :SHL: CAN_F2R2_FB19_Pos)                     ;!< 0x00080000
CAN_F2R2_FB19          EQU CAN_F2R2_FB19_Msk                               ;!<Filter bit 19
CAN_F2R2_FB20_Pos      EQU (20)
CAN_F2R2_FB20_Msk      EQU (0x1 :SHL: CAN_F2R2_FB20_Pos)                     ;!< 0x00100000
CAN_F2R2_FB20          EQU CAN_F2R2_FB20_Msk                               ;!<Filter bit 20
CAN_F2R2_FB21_Pos      EQU (21)
CAN_F2R2_FB21_Msk      EQU (0x1 :SHL: CAN_F2R2_FB21_Pos)                     ;!< 0x00200000
CAN_F2R2_FB21          EQU CAN_F2R2_FB21_Msk                               ;!<Filter bit 21
CAN_F2R2_FB22_Pos      EQU (22)
CAN_F2R2_FB22_Msk      EQU (0x1 :SHL: CAN_F2R2_FB22_Pos)                     ;!< 0x00400000
CAN_F2R2_FB22          EQU CAN_F2R2_FB22_Msk                               ;!<Filter bit 22
CAN_F2R2_FB23_Pos      EQU (23)
CAN_F2R2_FB23_Msk      EQU (0x1 :SHL: CAN_F2R2_FB23_Pos)                     ;!< 0x00800000
CAN_F2R2_FB23          EQU CAN_F2R2_FB23_Msk                               ;!<Filter bit 23
CAN_F2R2_FB24_Pos      EQU (24)
CAN_F2R2_FB24_Msk      EQU (0x1 :SHL: CAN_F2R2_FB24_Pos)                     ;!< 0x01000000
CAN_F2R2_FB24          EQU CAN_F2R2_FB24_Msk                               ;!<Filter bit 24
CAN_F2R2_FB25_Pos      EQU (25)
CAN_F2R2_FB25_Msk      EQU (0x1 :SHL: CAN_F2R2_FB25_Pos)                     ;!< 0x02000000
CAN_F2R2_FB25          EQU CAN_F2R2_FB25_Msk                               ;!<Filter bit 25
CAN_F2R2_FB26_Pos      EQU (26)
CAN_F2R2_FB26_Msk      EQU (0x1 :SHL: CAN_F2R2_FB26_Pos)                     ;!< 0x04000000
CAN_F2R2_FB26          EQU CAN_F2R2_FB26_Msk                               ;!<Filter bit 26
CAN_F2R2_FB27_Pos      EQU (27)
CAN_F2R2_FB27_Msk      EQU (0x1 :SHL: CAN_F2R2_FB27_Pos)                     ;!< 0x08000000
CAN_F2R2_FB27          EQU CAN_F2R2_FB27_Msk                               ;!<Filter bit 27
CAN_F2R2_FB28_Pos      EQU (28)
CAN_F2R2_FB28_Msk      EQU (0x1 :SHL: CAN_F2R2_FB28_Pos)                     ;!< 0x10000000
CAN_F2R2_FB28          EQU CAN_F2R2_FB28_Msk                               ;!<Filter bit 28
CAN_F2R2_FB29_Pos      EQU (29)
CAN_F2R2_FB29_Msk      EQU (0x1 :SHL: CAN_F2R2_FB29_Pos)                     ;!< 0x20000000
CAN_F2R2_FB29          EQU CAN_F2R2_FB29_Msk                               ;!<Filter bit 29
CAN_F2R2_FB30_Pos      EQU (30)
CAN_F2R2_FB30_Msk      EQU (0x1 :SHL: CAN_F2R2_FB30_Pos)                     ;!< 0x40000000
CAN_F2R2_FB30          EQU CAN_F2R2_FB30_Msk                               ;!<Filter bit 30
CAN_F2R2_FB31_Pos      EQU (31)
CAN_F2R2_FB31_Msk      EQU (0x1 :SHL: CAN_F2R2_FB31_Pos)                     ;!< 0x80000000
CAN_F2R2_FB31          EQU CAN_F2R2_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F3R2 register  ******************
CAN_F3R2_FB0_Pos       EQU (0)
CAN_F3R2_FB0_Msk       EQU (0x1 :SHL: CAN_F3R2_FB0_Pos)                      ;!< 0x00000001
CAN_F3R2_FB0           EQU CAN_F3R2_FB0_Msk                                ;!<Filter bit 0
CAN_F3R2_FB1_Pos       EQU (1)
CAN_F3R2_FB1_Msk       EQU (0x1 :SHL: CAN_F3R2_FB1_Pos)                      ;!< 0x00000002
CAN_F3R2_FB1           EQU CAN_F3R2_FB1_Msk                                ;!<Filter bit 1
CAN_F3R2_FB2_Pos       EQU (2)
CAN_F3R2_FB2_Msk       EQU (0x1 :SHL: CAN_F3R2_FB2_Pos)                      ;!< 0x00000004
CAN_F3R2_FB2           EQU CAN_F3R2_FB2_Msk                                ;!<Filter bit 2
CAN_F3R2_FB3_Pos       EQU (3)
CAN_F3R2_FB3_Msk       EQU (0x1 :SHL: CAN_F3R2_FB3_Pos)                      ;!< 0x00000008
CAN_F3R2_FB3           EQU CAN_F3R2_FB3_Msk                                ;!<Filter bit 3
CAN_F3R2_FB4_Pos       EQU (4)
CAN_F3R2_FB4_Msk       EQU (0x1 :SHL: CAN_F3R2_FB4_Pos)                      ;!< 0x00000010
CAN_F3R2_FB4           EQU CAN_F3R2_FB4_Msk                                ;!<Filter bit 4
CAN_F3R2_FB5_Pos       EQU (5)
CAN_F3R2_FB5_Msk       EQU (0x1 :SHL: CAN_F3R2_FB5_Pos)                      ;!< 0x00000020
CAN_F3R2_FB5           EQU CAN_F3R2_FB5_Msk                                ;!<Filter bit 5
CAN_F3R2_FB6_Pos       EQU (6)
CAN_F3R2_FB6_Msk       EQU (0x1 :SHL: CAN_F3R2_FB6_Pos)                      ;!< 0x00000040
CAN_F3R2_FB6           EQU CAN_F3R2_FB6_Msk                                ;!<Filter bit 6
CAN_F3R2_FB7_Pos       EQU (7)
CAN_F3R2_FB7_Msk       EQU (0x1 :SHL: CAN_F3R2_FB7_Pos)                      ;!< 0x00000080
CAN_F3R2_FB7           EQU CAN_F3R2_FB7_Msk                                ;!<Filter bit 7
CAN_F3R2_FB8_Pos       EQU (8)
CAN_F3R2_FB8_Msk       EQU (0x1 :SHL: CAN_F3R2_FB8_Pos)                      ;!< 0x00000100
CAN_F3R2_FB8           EQU CAN_F3R2_FB8_Msk                                ;!<Filter bit 8
CAN_F3R2_FB9_Pos       EQU (9)
CAN_F3R2_FB9_Msk       EQU (0x1 :SHL: CAN_F3R2_FB9_Pos)                      ;!< 0x00000200
CAN_F3R2_FB9           EQU CAN_F3R2_FB9_Msk                                ;!<Filter bit 9
CAN_F3R2_FB10_Pos      EQU (10)
CAN_F3R2_FB10_Msk      EQU (0x1 :SHL: CAN_F3R2_FB10_Pos)                     ;!< 0x00000400
CAN_F3R2_FB10          EQU CAN_F3R2_FB10_Msk                               ;!<Filter bit 10
CAN_F3R2_FB11_Pos      EQU (11)
CAN_F3R2_FB11_Msk      EQU (0x1 :SHL: CAN_F3R2_FB11_Pos)                     ;!< 0x00000800
CAN_F3R2_FB11          EQU CAN_F3R2_FB11_Msk                               ;!<Filter bit 11
CAN_F3R2_FB12_Pos      EQU (12)
CAN_F3R2_FB12_Msk      EQU (0x1 :SHL: CAN_F3R2_FB12_Pos)                     ;!< 0x00001000
CAN_F3R2_FB12          EQU CAN_F3R2_FB12_Msk                               ;!<Filter bit 12
CAN_F3R2_FB13_Pos      EQU (13)
CAN_F3R2_FB13_Msk      EQU (0x1 :SHL: CAN_F3R2_FB13_Pos)                     ;!< 0x00002000
CAN_F3R2_FB13          EQU CAN_F3R2_FB13_Msk                               ;!<Filter bit 13
CAN_F3R2_FB14_Pos      EQU (14)
CAN_F3R2_FB14_Msk      EQU (0x1 :SHL: CAN_F3R2_FB14_Pos)                     ;!< 0x00004000
CAN_F3R2_FB14          EQU CAN_F3R2_FB14_Msk                               ;!<Filter bit 14
CAN_F3R2_FB15_Pos      EQU (15)
CAN_F3R2_FB15_Msk      EQU (0x1 :SHL: CAN_F3R2_FB15_Pos)                     ;!< 0x00008000
CAN_F3R2_FB15          EQU CAN_F3R2_FB15_Msk                               ;!<Filter bit 15
CAN_F3R2_FB16_Pos      EQU (16)
CAN_F3R2_FB16_Msk      EQU (0x1 :SHL: CAN_F3R2_FB16_Pos)                     ;!< 0x00010000
CAN_F3R2_FB16          EQU CAN_F3R2_FB16_Msk                               ;!<Filter bit 16
CAN_F3R2_FB17_Pos      EQU (17)
CAN_F3R2_FB17_Msk      EQU (0x1 :SHL: CAN_F3R2_FB17_Pos)                     ;!< 0x00020000
CAN_F3R2_FB17          EQU CAN_F3R2_FB17_Msk                               ;!<Filter bit 17
CAN_F3R2_FB18_Pos      EQU (18)
CAN_F3R2_FB18_Msk      EQU (0x1 :SHL: CAN_F3R2_FB18_Pos)                     ;!< 0x00040000
CAN_F3R2_FB18          EQU CAN_F3R2_FB18_Msk                               ;!<Filter bit 18
CAN_F3R2_FB19_Pos      EQU (19)
CAN_F3R2_FB19_Msk      EQU (0x1 :SHL: CAN_F3R2_FB19_Pos)                     ;!< 0x00080000
CAN_F3R2_FB19          EQU CAN_F3R2_FB19_Msk                               ;!<Filter bit 19
CAN_F3R2_FB20_Pos      EQU (20)
CAN_F3R2_FB20_Msk      EQU (0x1 :SHL: CAN_F3R2_FB20_Pos)                     ;!< 0x00100000
CAN_F3R2_FB20          EQU CAN_F3R2_FB20_Msk                               ;!<Filter bit 20
CAN_F3R2_FB21_Pos      EQU (21)
CAN_F3R2_FB21_Msk      EQU (0x1 :SHL: CAN_F3R2_FB21_Pos)                     ;!< 0x00200000
CAN_F3R2_FB21          EQU CAN_F3R2_FB21_Msk                               ;!<Filter bit 21
CAN_F3R2_FB22_Pos      EQU (22)
CAN_F3R2_FB22_Msk      EQU (0x1 :SHL: CAN_F3R2_FB22_Pos)                     ;!< 0x00400000
CAN_F3R2_FB22          EQU CAN_F3R2_FB22_Msk                               ;!<Filter bit 22
CAN_F3R2_FB23_Pos      EQU (23)
CAN_F3R2_FB23_Msk      EQU (0x1 :SHL: CAN_F3R2_FB23_Pos)                     ;!< 0x00800000
CAN_F3R2_FB23          EQU CAN_F3R2_FB23_Msk                               ;!<Filter bit 23
CAN_F3R2_FB24_Pos      EQU (24)
CAN_F3R2_FB24_Msk      EQU (0x1 :SHL: CAN_F3R2_FB24_Pos)                     ;!< 0x01000000
CAN_F3R2_FB24          EQU CAN_F3R2_FB24_Msk                               ;!<Filter bit 24
CAN_F3R2_FB25_Pos      EQU (25)
CAN_F3R2_FB25_Msk      EQU (0x1 :SHL: CAN_F3R2_FB25_Pos)                     ;!< 0x02000000
CAN_F3R2_FB25          EQU CAN_F3R2_FB25_Msk                               ;!<Filter bit 25
CAN_F3R2_FB26_Pos      EQU (26)
CAN_F3R2_FB26_Msk      EQU (0x1 :SHL: CAN_F3R2_FB26_Pos)                     ;!< 0x04000000
CAN_F3R2_FB26          EQU CAN_F3R2_FB26_Msk                               ;!<Filter bit 26
CAN_F3R2_FB27_Pos      EQU (27)
CAN_F3R2_FB27_Msk      EQU (0x1 :SHL: CAN_F3R2_FB27_Pos)                     ;!< 0x08000000
CAN_F3R2_FB27          EQU CAN_F3R2_FB27_Msk                               ;!<Filter bit 27
CAN_F3R2_FB28_Pos      EQU (28)
CAN_F3R2_FB28_Msk      EQU (0x1 :SHL: CAN_F3R2_FB28_Pos)                     ;!< 0x10000000
CAN_F3R2_FB28          EQU CAN_F3R2_FB28_Msk                               ;!<Filter bit 28
CAN_F3R2_FB29_Pos      EQU (29)
CAN_F3R2_FB29_Msk      EQU (0x1 :SHL: CAN_F3R2_FB29_Pos)                     ;!< 0x20000000
CAN_F3R2_FB29          EQU CAN_F3R2_FB29_Msk                               ;!<Filter bit 29
CAN_F3R2_FB30_Pos      EQU (30)
CAN_F3R2_FB30_Msk      EQU (0x1 :SHL: CAN_F3R2_FB30_Pos)                     ;!< 0x40000000
CAN_F3R2_FB30          EQU CAN_F3R2_FB30_Msk                               ;!<Filter bit 30
CAN_F3R2_FB31_Pos      EQU (31)
CAN_F3R2_FB31_Msk      EQU (0x1 :SHL: CAN_F3R2_FB31_Pos)                     ;!< 0x80000000
CAN_F3R2_FB31          EQU CAN_F3R2_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F4R2 register  ******************
CAN_F4R2_FB0_Pos       EQU (0)
CAN_F4R2_FB0_Msk       EQU (0x1 :SHL: CAN_F4R2_FB0_Pos)                      ;!< 0x00000001
CAN_F4R2_FB0           EQU CAN_F4R2_FB0_Msk                                ;!<Filter bit 0
CAN_F4R2_FB1_Pos       EQU (1)
CAN_F4R2_FB1_Msk       EQU (0x1 :SHL: CAN_F4R2_FB1_Pos)                      ;!< 0x00000002
CAN_F4R2_FB1           EQU CAN_F4R2_FB1_Msk                                ;!<Filter bit 1
CAN_F4R2_FB2_Pos       EQU (2)
CAN_F4R2_FB2_Msk       EQU (0x1 :SHL: CAN_F4R2_FB2_Pos)                      ;!< 0x00000004
CAN_F4R2_FB2           EQU CAN_F4R2_FB2_Msk                                ;!<Filter bit 2
CAN_F4R2_FB3_Pos       EQU (3)
CAN_F4R2_FB3_Msk       EQU (0x1 :SHL: CAN_F4R2_FB3_Pos)                      ;!< 0x00000008
CAN_F4R2_FB3           EQU CAN_F4R2_FB3_Msk                                ;!<Filter bit 3
CAN_F4R2_FB4_Pos       EQU (4)
CAN_F4R2_FB4_Msk       EQU (0x1 :SHL: CAN_F4R2_FB4_Pos)                      ;!< 0x00000010
CAN_F4R2_FB4           EQU CAN_F4R2_FB4_Msk                                ;!<Filter bit 4
CAN_F4R2_FB5_Pos       EQU (5)
CAN_F4R2_FB5_Msk       EQU (0x1 :SHL: CAN_F4R2_FB5_Pos)                      ;!< 0x00000020
CAN_F4R2_FB5           EQU CAN_F4R2_FB5_Msk                                ;!<Filter bit 5
CAN_F4R2_FB6_Pos       EQU (6)
CAN_F4R2_FB6_Msk       EQU (0x1 :SHL: CAN_F4R2_FB6_Pos)                      ;!< 0x00000040
CAN_F4R2_FB6           EQU CAN_F4R2_FB6_Msk                                ;!<Filter bit 6
CAN_F4R2_FB7_Pos       EQU (7)
CAN_F4R2_FB7_Msk       EQU (0x1 :SHL: CAN_F4R2_FB7_Pos)                      ;!< 0x00000080
CAN_F4R2_FB7           EQU CAN_F4R2_FB7_Msk                                ;!<Filter bit 7
CAN_F4R2_FB8_Pos       EQU (8)
CAN_F4R2_FB8_Msk       EQU (0x1 :SHL: CAN_F4R2_FB8_Pos)                      ;!< 0x00000100
CAN_F4R2_FB8           EQU CAN_F4R2_FB8_Msk                                ;!<Filter bit 8
CAN_F4R2_FB9_Pos       EQU (9)
CAN_F4R2_FB9_Msk       EQU (0x1 :SHL: CAN_F4R2_FB9_Pos)                      ;!< 0x00000200
CAN_F4R2_FB9           EQU CAN_F4R2_FB9_Msk                                ;!<Filter bit 9
CAN_F4R2_FB10_Pos      EQU (10)
CAN_F4R2_FB10_Msk      EQU (0x1 :SHL: CAN_F4R2_FB10_Pos)                     ;!< 0x00000400
CAN_F4R2_FB10          EQU CAN_F4R2_FB10_Msk                               ;!<Filter bit 10
CAN_F4R2_FB11_Pos      EQU (11)
CAN_F4R2_FB11_Msk      EQU (0x1 :SHL: CAN_F4R2_FB11_Pos)                     ;!< 0x00000800
CAN_F4R2_FB11          EQU CAN_F4R2_FB11_Msk                               ;!<Filter bit 11
CAN_F4R2_FB12_Pos      EQU (12)
CAN_F4R2_FB12_Msk      EQU (0x1 :SHL: CAN_F4R2_FB12_Pos)                     ;!< 0x00001000
CAN_F4R2_FB12          EQU CAN_F4R2_FB12_Msk                               ;!<Filter bit 12
CAN_F4R2_FB13_Pos      EQU (13)
CAN_F4R2_FB13_Msk      EQU (0x1 :SHL: CAN_F4R2_FB13_Pos)                     ;!< 0x00002000
CAN_F4R2_FB13          EQU CAN_F4R2_FB13_Msk                               ;!<Filter bit 13
CAN_F4R2_FB14_Pos      EQU (14)
CAN_F4R2_FB14_Msk      EQU (0x1 :SHL: CAN_F4R2_FB14_Pos)                     ;!< 0x00004000
CAN_F4R2_FB14          EQU CAN_F4R2_FB14_Msk                               ;!<Filter bit 14
CAN_F4R2_FB15_Pos      EQU (15)
CAN_F4R2_FB15_Msk      EQU (0x1 :SHL: CAN_F4R2_FB15_Pos)                     ;!< 0x00008000
CAN_F4R2_FB15          EQU CAN_F4R2_FB15_Msk                               ;!<Filter bit 15
CAN_F4R2_FB16_Pos      EQU (16)
CAN_F4R2_FB16_Msk      EQU (0x1 :SHL: CAN_F4R2_FB16_Pos)                     ;!< 0x00010000
CAN_F4R2_FB16          EQU CAN_F4R2_FB16_Msk                               ;!<Filter bit 16
CAN_F4R2_FB17_Pos      EQU (17)
CAN_F4R2_FB17_Msk      EQU (0x1 :SHL: CAN_F4R2_FB17_Pos)                     ;!< 0x00020000
CAN_F4R2_FB17          EQU CAN_F4R2_FB17_Msk                               ;!<Filter bit 17
CAN_F4R2_FB18_Pos      EQU (18)
CAN_F4R2_FB18_Msk      EQU (0x1 :SHL: CAN_F4R2_FB18_Pos)                     ;!< 0x00040000
CAN_F4R2_FB18          EQU CAN_F4R2_FB18_Msk                               ;!<Filter bit 18
CAN_F4R2_FB19_Pos      EQU (19)
CAN_F4R2_FB19_Msk      EQU (0x1 :SHL: CAN_F4R2_FB19_Pos)                     ;!< 0x00080000
CAN_F4R2_FB19          EQU CAN_F4R2_FB19_Msk                               ;!<Filter bit 19
CAN_F4R2_FB20_Pos      EQU (20)
CAN_F4R2_FB20_Msk      EQU (0x1 :SHL: CAN_F4R2_FB20_Pos)                     ;!< 0x00100000
CAN_F4R2_FB20          EQU CAN_F4R2_FB20_Msk                               ;!<Filter bit 20
CAN_F4R2_FB21_Pos      EQU (21)
CAN_F4R2_FB21_Msk      EQU (0x1 :SHL: CAN_F4R2_FB21_Pos)                     ;!< 0x00200000
CAN_F4R2_FB21          EQU CAN_F4R2_FB21_Msk                               ;!<Filter bit 21
CAN_F4R2_FB22_Pos      EQU (22)
CAN_F4R2_FB22_Msk      EQU (0x1 :SHL: CAN_F4R2_FB22_Pos)                     ;!< 0x00400000
CAN_F4R2_FB22          EQU CAN_F4R2_FB22_Msk                               ;!<Filter bit 22
CAN_F4R2_FB23_Pos      EQU (23)
CAN_F4R2_FB23_Msk      EQU (0x1 :SHL: CAN_F4R2_FB23_Pos)                     ;!< 0x00800000
CAN_F4R2_FB23          EQU CAN_F4R2_FB23_Msk                               ;!<Filter bit 23
CAN_F4R2_FB24_Pos      EQU (24)
CAN_F4R2_FB24_Msk      EQU (0x1 :SHL: CAN_F4R2_FB24_Pos)                     ;!< 0x01000000
CAN_F4R2_FB24          EQU CAN_F4R2_FB24_Msk                               ;!<Filter bit 24
CAN_F4R2_FB25_Pos      EQU (25)
CAN_F4R2_FB25_Msk      EQU (0x1 :SHL: CAN_F4R2_FB25_Pos)                     ;!< 0x02000000
CAN_F4R2_FB25          EQU CAN_F4R2_FB25_Msk                               ;!<Filter bit 25
CAN_F4R2_FB26_Pos      EQU (26)
CAN_F4R2_FB26_Msk      EQU (0x1 :SHL: CAN_F4R2_FB26_Pos)                     ;!< 0x04000000
CAN_F4R2_FB26          EQU CAN_F4R2_FB26_Msk                               ;!<Filter bit 26
CAN_F4R2_FB27_Pos      EQU (27)
CAN_F4R2_FB27_Msk      EQU (0x1 :SHL: CAN_F4R2_FB27_Pos)                     ;!< 0x08000000
CAN_F4R2_FB27          EQU CAN_F4R2_FB27_Msk                               ;!<Filter bit 27
CAN_F4R2_FB28_Pos      EQU (28)
CAN_F4R2_FB28_Msk      EQU (0x1 :SHL: CAN_F4R2_FB28_Pos)                     ;!< 0x10000000
CAN_F4R2_FB28          EQU CAN_F4R2_FB28_Msk                               ;!<Filter bit 28
CAN_F4R2_FB29_Pos      EQU (29)
CAN_F4R2_FB29_Msk      EQU (0x1 :SHL: CAN_F4R2_FB29_Pos)                     ;!< 0x20000000
CAN_F4R2_FB29          EQU CAN_F4R2_FB29_Msk                               ;!<Filter bit 29
CAN_F4R2_FB30_Pos      EQU (30)
CAN_F4R2_FB30_Msk      EQU (0x1 :SHL: CAN_F4R2_FB30_Pos)                     ;!< 0x40000000
CAN_F4R2_FB30          EQU CAN_F4R2_FB30_Msk                               ;!<Filter bit 30
CAN_F4R2_FB31_Pos      EQU (31)
CAN_F4R2_FB31_Msk      EQU (0x1 :SHL: CAN_F4R2_FB31_Pos)                     ;!< 0x80000000
CAN_F4R2_FB31          EQU CAN_F4R2_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F5R2 register  ******************
CAN_F5R2_FB0_Pos       EQU (0)
CAN_F5R2_FB0_Msk       EQU (0x1 :SHL: CAN_F5R2_FB0_Pos)                      ;!< 0x00000001
CAN_F5R2_FB0           EQU CAN_F5R2_FB0_Msk                                ;!<Filter bit 0
CAN_F5R2_FB1_Pos       EQU (1)
CAN_F5R2_FB1_Msk       EQU (0x1 :SHL: CAN_F5R2_FB1_Pos)                      ;!< 0x00000002
CAN_F5R2_FB1           EQU CAN_F5R2_FB1_Msk                                ;!<Filter bit 1
CAN_F5R2_FB2_Pos       EQU (2)
CAN_F5R2_FB2_Msk       EQU (0x1 :SHL: CAN_F5R2_FB2_Pos)                      ;!< 0x00000004
CAN_F5R2_FB2           EQU CAN_F5R2_FB2_Msk                                ;!<Filter bit 2
CAN_F5R2_FB3_Pos       EQU (3)
CAN_F5R2_FB3_Msk       EQU (0x1 :SHL: CAN_F5R2_FB3_Pos)                      ;!< 0x00000008
CAN_F5R2_FB3           EQU CAN_F5R2_FB3_Msk                                ;!<Filter bit 3
CAN_F5R2_FB4_Pos       EQU (4)
CAN_F5R2_FB4_Msk       EQU (0x1 :SHL: CAN_F5R2_FB4_Pos)                      ;!< 0x00000010
CAN_F5R2_FB4           EQU CAN_F5R2_FB4_Msk                                ;!<Filter bit 4
CAN_F5R2_FB5_Pos       EQU (5)
CAN_F5R2_FB5_Msk       EQU (0x1 :SHL: CAN_F5R2_FB5_Pos)                      ;!< 0x00000020
CAN_F5R2_FB5           EQU CAN_F5R2_FB5_Msk                                ;!<Filter bit 5
CAN_F5R2_FB6_Pos       EQU (6)
CAN_F5R2_FB6_Msk       EQU (0x1 :SHL: CAN_F5R2_FB6_Pos)                      ;!< 0x00000040
CAN_F5R2_FB6           EQU CAN_F5R2_FB6_Msk                                ;!<Filter bit 6
CAN_F5R2_FB7_Pos       EQU (7)
CAN_F5R2_FB7_Msk       EQU (0x1 :SHL: CAN_F5R2_FB7_Pos)                      ;!< 0x00000080
CAN_F5R2_FB7           EQU CAN_F5R2_FB7_Msk                                ;!<Filter bit 7
CAN_F5R2_FB8_Pos       EQU (8)
CAN_F5R2_FB8_Msk       EQU (0x1 :SHL: CAN_F5R2_FB8_Pos)                      ;!< 0x00000100
CAN_F5R2_FB8           EQU CAN_F5R2_FB8_Msk                                ;!<Filter bit 8
CAN_F5R2_FB9_Pos       EQU (9)
CAN_F5R2_FB9_Msk       EQU (0x1 :SHL: CAN_F5R2_FB9_Pos)                      ;!< 0x00000200
CAN_F5R2_FB9           EQU CAN_F5R2_FB9_Msk                                ;!<Filter bit 9
CAN_F5R2_FB10_Pos      EQU (10)
CAN_F5R2_FB10_Msk      EQU (0x1 :SHL: CAN_F5R2_FB10_Pos)                     ;!< 0x00000400
CAN_F5R2_FB10          EQU CAN_F5R2_FB10_Msk                               ;!<Filter bit 10
CAN_F5R2_FB11_Pos      EQU (11)
CAN_F5R2_FB11_Msk      EQU (0x1 :SHL: CAN_F5R2_FB11_Pos)                     ;!< 0x00000800
CAN_F5R2_FB11          EQU CAN_F5R2_FB11_Msk                               ;!<Filter bit 11
CAN_F5R2_FB12_Pos      EQU (12)
CAN_F5R2_FB12_Msk      EQU (0x1 :SHL: CAN_F5R2_FB12_Pos)                     ;!< 0x00001000
CAN_F5R2_FB12          EQU CAN_F5R2_FB12_Msk                               ;!<Filter bit 12
CAN_F5R2_FB13_Pos      EQU (13)
CAN_F5R2_FB13_Msk      EQU (0x1 :SHL: CAN_F5R2_FB13_Pos)                     ;!< 0x00002000
CAN_F5R2_FB13          EQU CAN_F5R2_FB13_Msk                               ;!<Filter bit 13
CAN_F5R2_FB14_Pos      EQU (14)
CAN_F5R2_FB14_Msk      EQU (0x1 :SHL: CAN_F5R2_FB14_Pos)                     ;!< 0x00004000
CAN_F5R2_FB14          EQU CAN_F5R2_FB14_Msk                               ;!<Filter bit 14
CAN_F5R2_FB15_Pos      EQU (15)
CAN_F5R2_FB15_Msk      EQU (0x1 :SHL: CAN_F5R2_FB15_Pos)                     ;!< 0x00008000
CAN_F5R2_FB15          EQU CAN_F5R2_FB15_Msk                               ;!<Filter bit 15
CAN_F5R2_FB16_Pos      EQU (16)
CAN_F5R2_FB16_Msk      EQU (0x1 :SHL: CAN_F5R2_FB16_Pos)                     ;!< 0x00010000
CAN_F5R2_FB16          EQU CAN_F5R2_FB16_Msk                               ;!<Filter bit 16
CAN_F5R2_FB17_Pos      EQU (17)
CAN_F5R2_FB17_Msk      EQU (0x1 :SHL: CAN_F5R2_FB17_Pos)                     ;!< 0x00020000
CAN_F5R2_FB17          EQU CAN_F5R2_FB17_Msk                               ;!<Filter bit 17
CAN_F5R2_FB18_Pos      EQU (18)
CAN_F5R2_FB18_Msk      EQU (0x1 :SHL: CAN_F5R2_FB18_Pos)                     ;!< 0x00040000
CAN_F5R2_FB18          EQU CAN_F5R2_FB18_Msk                               ;!<Filter bit 18
CAN_F5R2_FB19_Pos      EQU (19)
CAN_F5R2_FB19_Msk      EQU (0x1 :SHL: CAN_F5R2_FB19_Pos)                     ;!< 0x00080000
CAN_F5R2_FB19          EQU CAN_F5R2_FB19_Msk                               ;!<Filter bit 19
CAN_F5R2_FB20_Pos      EQU (20)
CAN_F5R2_FB20_Msk      EQU (0x1 :SHL: CAN_F5R2_FB20_Pos)                     ;!< 0x00100000
CAN_F5R2_FB20          EQU CAN_F5R2_FB20_Msk                               ;!<Filter bit 20
CAN_F5R2_FB21_Pos      EQU (21)
CAN_F5R2_FB21_Msk      EQU (0x1 :SHL: CAN_F5R2_FB21_Pos)                     ;!< 0x00200000
CAN_F5R2_FB21          EQU CAN_F5R2_FB21_Msk                               ;!<Filter bit 21
CAN_F5R2_FB22_Pos      EQU (22)
CAN_F5R2_FB22_Msk      EQU (0x1 :SHL: CAN_F5R2_FB22_Pos)                     ;!< 0x00400000
CAN_F5R2_FB22          EQU CAN_F5R2_FB22_Msk                               ;!<Filter bit 22
CAN_F5R2_FB23_Pos      EQU (23)
CAN_F5R2_FB23_Msk      EQU (0x1 :SHL: CAN_F5R2_FB23_Pos)                     ;!< 0x00800000
CAN_F5R2_FB23          EQU CAN_F5R2_FB23_Msk                               ;!<Filter bit 23
CAN_F5R2_FB24_Pos      EQU (24)
CAN_F5R2_FB24_Msk      EQU (0x1 :SHL: CAN_F5R2_FB24_Pos)                     ;!< 0x01000000
CAN_F5R2_FB24          EQU CAN_F5R2_FB24_Msk                               ;!<Filter bit 24
CAN_F5R2_FB25_Pos      EQU (25)
CAN_F5R2_FB25_Msk      EQU (0x1 :SHL: CAN_F5R2_FB25_Pos)                     ;!< 0x02000000
CAN_F5R2_FB25          EQU CAN_F5R2_FB25_Msk                               ;!<Filter bit 25
CAN_F5R2_FB26_Pos      EQU (26)
CAN_F5R2_FB26_Msk      EQU (0x1 :SHL: CAN_F5R2_FB26_Pos)                     ;!< 0x04000000
CAN_F5R2_FB26          EQU CAN_F5R2_FB26_Msk                               ;!<Filter bit 26
CAN_F5R2_FB27_Pos      EQU (27)
CAN_F5R2_FB27_Msk      EQU (0x1 :SHL: CAN_F5R2_FB27_Pos)                     ;!< 0x08000000
CAN_F5R2_FB27          EQU CAN_F5R2_FB27_Msk                               ;!<Filter bit 27
CAN_F5R2_FB28_Pos      EQU (28)
CAN_F5R2_FB28_Msk      EQU (0x1 :SHL: CAN_F5R2_FB28_Pos)                     ;!< 0x10000000
CAN_F5R2_FB28          EQU CAN_F5R2_FB28_Msk                               ;!<Filter bit 28
CAN_F5R2_FB29_Pos      EQU (29)
CAN_F5R2_FB29_Msk      EQU (0x1 :SHL: CAN_F5R2_FB29_Pos)                     ;!< 0x20000000
CAN_F5R2_FB29          EQU CAN_F5R2_FB29_Msk                               ;!<Filter bit 29
CAN_F5R2_FB30_Pos      EQU (30)
CAN_F5R2_FB30_Msk      EQU (0x1 :SHL: CAN_F5R2_FB30_Pos)                     ;!< 0x40000000
CAN_F5R2_FB30          EQU CAN_F5R2_FB30_Msk                               ;!<Filter bit 30
CAN_F5R2_FB31_Pos      EQU (31)
CAN_F5R2_FB31_Msk      EQU (0x1 :SHL: CAN_F5R2_FB31_Pos)                     ;!< 0x80000000
CAN_F5R2_FB31          EQU CAN_F5R2_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F6R2 register  ******************
CAN_F6R2_FB0_Pos       EQU (0)
CAN_F6R2_FB0_Msk       EQU (0x1 :SHL: CAN_F6R2_FB0_Pos)                      ;!< 0x00000001
CAN_F6R2_FB0           EQU CAN_F6R2_FB0_Msk                                ;!<Filter bit 0
CAN_F6R2_FB1_Pos       EQU (1)
CAN_F6R2_FB1_Msk       EQU (0x1 :SHL: CAN_F6R2_FB1_Pos)                      ;!< 0x00000002
CAN_F6R2_FB1           EQU CAN_F6R2_FB1_Msk                                ;!<Filter bit 1
CAN_F6R2_FB2_Pos       EQU (2)
CAN_F6R2_FB2_Msk       EQU (0x1 :SHL: CAN_F6R2_FB2_Pos)                      ;!< 0x00000004
CAN_F6R2_FB2           EQU CAN_F6R2_FB2_Msk                                ;!<Filter bit 2
CAN_F6R2_FB3_Pos       EQU (3)
CAN_F6R2_FB3_Msk       EQU (0x1 :SHL: CAN_F6R2_FB3_Pos)                      ;!< 0x00000008
CAN_F6R2_FB3           EQU CAN_F6R2_FB3_Msk                                ;!<Filter bit 3
CAN_F6R2_FB4_Pos       EQU (4)
CAN_F6R2_FB4_Msk       EQU (0x1 :SHL: CAN_F6R2_FB4_Pos)                      ;!< 0x00000010
CAN_F6R2_FB4           EQU CAN_F6R2_FB4_Msk                                ;!<Filter bit 4
CAN_F6R2_FB5_Pos       EQU (5)
CAN_F6R2_FB5_Msk       EQU (0x1 :SHL: CAN_F6R2_FB5_Pos)                      ;!< 0x00000020
CAN_F6R2_FB5           EQU CAN_F6R2_FB5_Msk                                ;!<Filter bit 5
CAN_F6R2_FB6_Pos       EQU (6)
CAN_F6R2_FB6_Msk       EQU (0x1 :SHL: CAN_F6R2_FB6_Pos)                      ;!< 0x00000040
CAN_F6R2_FB6           EQU CAN_F6R2_FB6_Msk                                ;!<Filter bit 6
CAN_F6R2_FB7_Pos       EQU (7)
CAN_F6R2_FB7_Msk       EQU (0x1 :SHL: CAN_F6R2_FB7_Pos)                      ;!< 0x00000080
CAN_F6R2_FB7           EQU CAN_F6R2_FB7_Msk                                ;!<Filter bit 7
CAN_F6R2_FB8_Pos       EQU (8)
CAN_F6R2_FB8_Msk       EQU (0x1 :SHL: CAN_F6R2_FB8_Pos)                      ;!< 0x00000100
CAN_F6R2_FB8           EQU CAN_F6R2_FB8_Msk                                ;!<Filter bit 8
CAN_F6R2_FB9_Pos       EQU (9)
CAN_F6R2_FB9_Msk       EQU (0x1 :SHL: CAN_F6R2_FB9_Pos)                      ;!< 0x00000200
CAN_F6R2_FB9           EQU CAN_F6R2_FB9_Msk                                ;!<Filter bit 9
CAN_F6R2_FB10_Pos      EQU (10)
CAN_F6R2_FB10_Msk      EQU (0x1 :SHL: CAN_F6R2_FB10_Pos)                     ;!< 0x00000400
CAN_F6R2_FB10          EQU CAN_F6R2_FB10_Msk                               ;!<Filter bit 10
CAN_F6R2_FB11_Pos      EQU (11)
CAN_F6R2_FB11_Msk      EQU (0x1 :SHL: CAN_F6R2_FB11_Pos)                     ;!< 0x00000800
CAN_F6R2_FB11          EQU CAN_F6R2_FB11_Msk                               ;!<Filter bit 11
CAN_F6R2_FB12_Pos      EQU (12)
CAN_F6R2_FB12_Msk      EQU (0x1 :SHL: CAN_F6R2_FB12_Pos)                     ;!< 0x00001000
CAN_F6R2_FB12          EQU CAN_F6R2_FB12_Msk                               ;!<Filter bit 12
CAN_F6R2_FB13_Pos      EQU (13)
CAN_F6R2_FB13_Msk      EQU (0x1 :SHL: CAN_F6R2_FB13_Pos)                     ;!< 0x00002000
CAN_F6R2_FB13          EQU CAN_F6R2_FB13_Msk                               ;!<Filter bit 13
CAN_F6R2_FB14_Pos      EQU (14)
CAN_F6R2_FB14_Msk      EQU (0x1 :SHL: CAN_F6R2_FB14_Pos)                     ;!< 0x00004000
CAN_F6R2_FB14          EQU CAN_F6R2_FB14_Msk                               ;!<Filter bit 14
CAN_F6R2_FB15_Pos      EQU (15)
CAN_F6R2_FB15_Msk      EQU (0x1 :SHL: CAN_F6R2_FB15_Pos)                     ;!< 0x00008000
CAN_F6R2_FB15          EQU CAN_F6R2_FB15_Msk                               ;!<Filter bit 15
CAN_F6R2_FB16_Pos      EQU (16)
CAN_F6R2_FB16_Msk      EQU (0x1 :SHL: CAN_F6R2_FB16_Pos)                     ;!< 0x00010000
CAN_F6R2_FB16          EQU CAN_F6R2_FB16_Msk                               ;!<Filter bit 16
CAN_F6R2_FB17_Pos      EQU (17)
CAN_F6R2_FB17_Msk      EQU (0x1 :SHL: CAN_F6R2_FB17_Pos)                     ;!< 0x00020000
CAN_F6R2_FB17          EQU CAN_F6R2_FB17_Msk                               ;!<Filter bit 17
CAN_F6R2_FB18_Pos      EQU (18)
CAN_F6R2_FB18_Msk      EQU (0x1 :SHL: CAN_F6R2_FB18_Pos)                     ;!< 0x00040000
CAN_F6R2_FB18          EQU CAN_F6R2_FB18_Msk                               ;!<Filter bit 18
CAN_F6R2_FB19_Pos      EQU (19)
CAN_F6R2_FB19_Msk      EQU (0x1 :SHL: CAN_F6R2_FB19_Pos)                     ;!< 0x00080000
CAN_F6R2_FB19          EQU CAN_F6R2_FB19_Msk                               ;!<Filter bit 19
CAN_F6R2_FB20_Pos      EQU (20)
CAN_F6R2_FB20_Msk      EQU (0x1 :SHL: CAN_F6R2_FB20_Pos)                     ;!< 0x00100000
CAN_F6R2_FB20          EQU CAN_F6R2_FB20_Msk                               ;!<Filter bit 20
CAN_F6R2_FB21_Pos      EQU (21)
CAN_F6R2_FB21_Msk      EQU (0x1 :SHL: CAN_F6R2_FB21_Pos)                     ;!< 0x00200000
CAN_F6R2_FB21          EQU CAN_F6R2_FB21_Msk                               ;!<Filter bit 21
CAN_F6R2_FB22_Pos      EQU (22)
CAN_F6R2_FB22_Msk      EQU (0x1 :SHL: CAN_F6R2_FB22_Pos)                     ;!< 0x00400000
CAN_F6R2_FB22          EQU CAN_F6R2_FB22_Msk                               ;!<Filter bit 22
CAN_F6R2_FB23_Pos      EQU (23)
CAN_F6R2_FB23_Msk      EQU (0x1 :SHL: CAN_F6R2_FB23_Pos)                     ;!< 0x00800000
CAN_F6R2_FB23          EQU CAN_F6R2_FB23_Msk                               ;!<Filter bit 23
CAN_F6R2_FB24_Pos      EQU (24)
CAN_F6R2_FB24_Msk      EQU (0x1 :SHL: CAN_F6R2_FB24_Pos)                     ;!< 0x01000000
CAN_F6R2_FB24          EQU CAN_F6R2_FB24_Msk                               ;!<Filter bit 24
CAN_F6R2_FB25_Pos      EQU (25)
CAN_F6R2_FB25_Msk      EQU (0x1 :SHL: CAN_F6R2_FB25_Pos)                     ;!< 0x02000000
CAN_F6R2_FB25          EQU CAN_F6R2_FB25_Msk                               ;!<Filter bit 25
CAN_F6R2_FB26_Pos      EQU (26)
CAN_F6R2_FB26_Msk      EQU (0x1 :SHL: CAN_F6R2_FB26_Pos)                     ;!< 0x04000000
CAN_F6R2_FB26          EQU CAN_F6R2_FB26_Msk                               ;!<Filter bit 26
CAN_F6R2_FB27_Pos      EQU (27)
CAN_F6R2_FB27_Msk      EQU (0x1 :SHL: CAN_F6R2_FB27_Pos)                     ;!< 0x08000000
CAN_F6R2_FB27          EQU CAN_F6R2_FB27_Msk                               ;!<Filter bit 27
CAN_F6R2_FB28_Pos      EQU (28)
CAN_F6R2_FB28_Msk      EQU (0x1 :SHL: CAN_F6R2_FB28_Pos)                     ;!< 0x10000000
CAN_F6R2_FB28          EQU CAN_F6R2_FB28_Msk                               ;!<Filter bit 28
CAN_F6R2_FB29_Pos      EQU (29)
CAN_F6R2_FB29_Msk      EQU (0x1 :SHL: CAN_F6R2_FB29_Pos)                     ;!< 0x20000000
CAN_F6R2_FB29          EQU CAN_F6R2_FB29_Msk                               ;!<Filter bit 29
CAN_F6R2_FB30_Pos      EQU (30)
CAN_F6R2_FB30_Msk      EQU (0x1 :SHL: CAN_F6R2_FB30_Pos)                     ;!< 0x40000000
CAN_F6R2_FB30          EQU CAN_F6R2_FB30_Msk                               ;!<Filter bit 30
CAN_F6R2_FB31_Pos      EQU (31)
CAN_F6R2_FB31_Msk      EQU (0x1 :SHL: CAN_F6R2_FB31_Pos)                     ;!< 0x80000000
CAN_F6R2_FB31          EQU CAN_F6R2_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F7R2 register  ******************
CAN_F7R2_FB0_Pos       EQU (0)
CAN_F7R2_FB0_Msk       EQU (0x1 :SHL: CAN_F7R2_FB0_Pos)                      ;!< 0x00000001
CAN_F7R2_FB0           EQU CAN_F7R2_FB0_Msk                                ;!<Filter bit 0
CAN_F7R2_FB1_Pos       EQU (1)
CAN_F7R2_FB1_Msk       EQU (0x1 :SHL: CAN_F7R2_FB1_Pos)                      ;!< 0x00000002
CAN_F7R2_FB1           EQU CAN_F7R2_FB1_Msk                                ;!<Filter bit 1
CAN_F7R2_FB2_Pos       EQU (2)
CAN_F7R2_FB2_Msk       EQU (0x1 :SHL: CAN_F7R2_FB2_Pos)                      ;!< 0x00000004
CAN_F7R2_FB2           EQU CAN_F7R2_FB2_Msk                                ;!<Filter bit 2
CAN_F7R2_FB3_Pos       EQU (3)
CAN_F7R2_FB3_Msk       EQU (0x1 :SHL: CAN_F7R2_FB3_Pos)                      ;!< 0x00000008
CAN_F7R2_FB3           EQU CAN_F7R2_FB3_Msk                                ;!<Filter bit 3
CAN_F7R2_FB4_Pos       EQU (4)
CAN_F7R2_FB4_Msk       EQU (0x1 :SHL: CAN_F7R2_FB4_Pos)                      ;!< 0x00000010
CAN_F7R2_FB4           EQU CAN_F7R2_FB4_Msk                                ;!<Filter bit 4
CAN_F7R2_FB5_Pos       EQU (5)
CAN_F7R2_FB5_Msk       EQU (0x1 :SHL: CAN_F7R2_FB5_Pos)                      ;!< 0x00000020
CAN_F7R2_FB5           EQU CAN_F7R2_FB5_Msk                                ;!<Filter bit 5
CAN_F7R2_FB6_Pos       EQU (6)
CAN_F7R2_FB6_Msk       EQU (0x1 :SHL: CAN_F7R2_FB6_Pos)                      ;!< 0x00000040
CAN_F7R2_FB6           EQU CAN_F7R2_FB6_Msk                                ;!<Filter bit 6
CAN_F7R2_FB7_Pos       EQU (7)
CAN_F7R2_FB7_Msk       EQU (0x1 :SHL: CAN_F7R2_FB7_Pos)                      ;!< 0x00000080
CAN_F7R2_FB7           EQU CAN_F7R2_FB7_Msk                                ;!<Filter bit 7
CAN_F7R2_FB8_Pos       EQU (8)
CAN_F7R2_FB8_Msk       EQU (0x1 :SHL: CAN_F7R2_FB8_Pos)                      ;!< 0x00000100
CAN_F7R2_FB8           EQU CAN_F7R2_FB8_Msk                                ;!<Filter bit 8
CAN_F7R2_FB9_Pos       EQU (9)
CAN_F7R2_FB9_Msk       EQU (0x1 :SHL: CAN_F7R2_FB9_Pos)                      ;!< 0x00000200
CAN_F7R2_FB9           EQU CAN_F7R2_FB9_Msk                                ;!<Filter bit 9
CAN_F7R2_FB10_Pos      EQU (10)
CAN_F7R2_FB10_Msk      EQU (0x1 :SHL: CAN_F7R2_FB10_Pos)                     ;!< 0x00000400
CAN_F7R2_FB10          EQU CAN_F7R2_FB10_Msk                               ;!<Filter bit 10
CAN_F7R2_FB11_Pos      EQU (11)
CAN_F7R2_FB11_Msk      EQU (0x1 :SHL: CAN_F7R2_FB11_Pos)                     ;!< 0x00000800
CAN_F7R2_FB11          EQU CAN_F7R2_FB11_Msk                               ;!<Filter bit 11
CAN_F7R2_FB12_Pos      EQU (12)
CAN_F7R2_FB12_Msk      EQU (0x1 :SHL: CAN_F7R2_FB12_Pos)                     ;!< 0x00001000
CAN_F7R2_FB12          EQU CAN_F7R2_FB12_Msk                               ;!<Filter bit 12
CAN_F7R2_FB13_Pos      EQU (13)
CAN_F7R2_FB13_Msk      EQU (0x1 :SHL: CAN_F7R2_FB13_Pos)                     ;!< 0x00002000
CAN_F7R2_FB13          EQU CAN_F7R2_FB13_Msk                               ;!<Filter bit 13
CAN_F7R2_FB14_Pos      EQU (14)
CAN_F7R2_FB14_Msk      EQU (0x1 :SHL: CAN_F7R2_FB14_Pos)                     ;!< 0x00004000
CAN_F7R2_FB14          EQU CAN_F7R2_FB14_Msk                               ;!<Filter bit 14
CAN_F7R2_FB15_Pos      EQU (15)
CAN_F7R2_FB15_Msk      EQU (0x1 :SHL: CAN_F7R2_FB15_Pos)                     ;!< 0x00008000
CAN_F7R2_FB15          EQU CAN_F7R2_FB15_Msk                               ;!<Filter bit 15
CAN_F7R2_FB16_Pos      EQU (16)
CAN_F7R2_FB16_Msk      EQU (0x1 :SHL: CAN_F7R2_FB16_Pos)                     ;!< 0x00010000
CAN_F7R2_FB16          EQU CAN_F7R2_FB16_Msk                               ;!<Filter bit 16
CAN_F7R2_FB17_Pos      EQU (17)
CAN_F7R2_FB17_Msk      EQU (0x1 :SHL: CAN_F7R2_FB17_Pos)                     ;!< 0x00020000
CAN_F7R2_FB17          EQU CAN_F7R2_FB17_Msk                               ;!<Filter bit 17
CAN_F7R2_FB18_Pos      EQU (18)
CAN_F7R2_FB18_Msk      EQU (0x1 :SHL: CAN_F7R2_FB18_Pos)                     ;!< 0x00040000
CAN_F7R2_FB18          EQU CAN_F7R2_FB18_Msk                               ;!<Filter bit 18
CAN_F7R2_FB19_Pos      EQU (19)
CAN_F7R2_FB19_Msk      EQU (0x1 :SHL: CAN_F7R2_FB19_Pos)                     ;!< 0x00080000
CAN_F7R2_FB19          EQU CAN_F7R2_FB19_Msk                               ;!<Filter bit 19
CAN_F7R2_FB20_Pos      EQU (20)
CAN_F7R2_FB20_Msk      EQU (0x1 :SHL: CAN_F7R2_FB20_Pos)                     ;!< 0x00100000
CAN_F7R2_FB20          EQU CAN_F7R2_FB20_Msk                               ;!<Filter bit 20
CAN_F7R2_FB21_Pos      EQU (21)
CAN_F7R2_FB21_Msk      EQU (0x1 :SHL: CAN_F7R2_FB21_Pos)                     ;!< 0x00200000
CAN_F7R2_FB21          EQU CAN_F7R2_FB21_Msk                               ;!<Filter bit 21
CAN_F7R2_FB22_Pos      EQU (22)
CAN_F7R2_FB22_Msk      EQU (0x1 :SHL: CAN_F7R2_FB22_Pos)                     ;!< 0x00400000
CAN_F7R2_FB22          EQU CAN_F7R2_FB22_Msk                               ;!<Filter bit 22
CAN_F7R2_FB23_Pos      EQU (23)
CAN_F7R2_FB23_Msk      EQU (0x1 :SHL: CAN_F7R2_FB23_Pos)                     ;!< 0x00800000
CAN_F7R2_FB23          EQU CAN_F7R2_FB23_Msk                               ;!<Filter bit 23
CAN_F7R2_FB24_Pos      EQU (24)
CAN_F7R2_FB24_Msk      EQU (0x1 :SHL: CAN_F7R2_FB24_Pos)                     ;!< 0x01000000
CAN_F7R2_FB24          EQU CAN_F7R2_FB24_Msk                               ;!<Filter bit 24
CAN_F7R2_FB25_Pos      EQU (25)
CAN_F7R2_FB25_Msk      EQU (0x1 :SHL: CAN_F7R2_FB25_Pos)                     ;!< 0x02000000
CAN_F7R2_FB25          EQU CAN_F7R2_FB25_Msk                               ;!<Filter bit 25
CAN_F7R2_FB26_Pos      EQU (26)
CAN_F7R2_FB26_Msk      EQU (0x1 :SHL: CAN_F7R2_FB26_Pos)                     ;!< 0x04000000
CAN_F7R2_FB26          EQU CAN_F7R2_FB26_Msk                               ;!<Filter bit 26
CAN_F7R2_FB27_Pos      EQU (27)
CAN_F7R2_FB27_Msk      EQU (0x1 :SHL: CAN_F7R2_FB27_Pos)                     ;!< 0x08000000
CAN_F7R2_FB27          EQU CAN_F7R2_FB27_Msk                               ;!<Filter bit 27
CAN_F7R2_FB28_Pos      EQU (28)
CAN_F7R2_FB28_Msk      EQU (0x1 :SHL: CAN_F7R2_FB28_Pos)                     ;!< 0x10000000
CAN_F7R2_FB28          EQU CAN_F7R2_FB28_Msk                               ;!<Filter bit 28
CAN_F7R2_FB29_Pos      EQU (29)
CAN_F7R2_FB29_Msk      EQU (0x1 :SHL: CAN_F7R2_FB29_Pos)                     ;!< 0x20000000
CAN_F7R2_FB29          EQU CAN_F7R2_FB29_Msk                               ;!<Filter bit 29
CAN_F7R2_FB30_Pos      EQU (30)
CAN_F7R2_FB30_Msk      EQU (0x1 :SHL: CAN_F7R2_FB30_Pos)                     ;!< 0x40000000
CAN_F7R2_FB30          EQU CAN_F7R2_FB30_Msk                               ;!<Filter bit 30
CAN_F7R2_FB31_Pos      EQU (31)
CAN_F7R2_FB31_Msk      EQU (0x1 :SHL: CAN_F7R2_FB31_Pos)                     ;!< 0x80000000
CAN_F7R2_FB31          EQU CAN_F7R2_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F8R2 register  ******************
CAN_F8R2_FB0_Pos       EQU (0)
CAN_F8R2_FB0_Msk       EQU (0x1 :SHL: CAN_F8R2_FB0_Pos)                      ;!< 0x00000001
CAN_F8R2_FB0           EQU CAN_F8R2_FB0_Msk                                ;!<Filter bit 0
CAN_F8R2_FB1_Pos       EQU (1)
CAN_F8R2_FB1_Msk       EQU (0x1 :SHL: CAN_F8R2_FB1_Pos)                      ;!< 0x00000002
CAN_F8R2_FB1           EQU CAN_F8R2_FB1_Msk                                ;!<Filter bit 1
CAN_F8R2_FB2_Pos       EQU (2)
CAN_F8R2_FB2_Msk       EQU (0x1 :SHL: CAN_F8R2_FB2_Pos)                      ;!< 0x00000004
CAN_F8R2_FB2           EQU CAN_F8R2_FB2_Msk                                ;!<Filter bit 2
CAN_F8R2_FB3_Pos       EQU (3)
CAN_F8R2_FB3_Msk       EQU (0x1 :SHL: CAN_F8R2_FB3_Pos)                      ;!< 0x00000008
CAN_F8R2_FB3           EQU CAN_F8R2_FB3_Msk                                ;!<Filter bit 3
CAN_F8R2_FB4_Pos       EQU (4)
CAN_F8R2_FB4_Msk       EQU (0x1 :SHL: CAN_F8R2_FB4_Pos)                      ;!< 0x00000010
CAN_F8R2_FB4           EQU CAN_F8R2_FB4_Msk                                ;!<Filter bit 4
CAN_F8R2_FB5_Pos       EQU (5)
CAN_F8R2_FB5_Msk       EQU (0x1 :SHL: CAN_F8R2_FB5_Pos)                      ;!< 0x00000020
CAN_F8R2_FB5           EQU CAN_F8R2_FB5_Msk                                ;!<Filter bit 5
CAN_F8R2_FB6_Pos       EQU (6)
CAN_F8R2_FB6_Msk       EQU (0x1 :SHL: CAN_F8R2_FB6_Pos)                      ;!< 0x00000040
CAN_F8R2_FB6           EQU CAN_F8R2_FB6_Msk                                ;!<Filter bit 6
CAN_F8R2_FB7_Pos       EQU (7)
CAN_F8R2_FB7_Msk       EQU (0x1 :SHL: CAN_F8R2_FB7_Pos)                      ;!< 0x00000080
CAN_F8R2_FB7           EQU CAN_F8R2_FB7_Msk                                ;!<Filter bit 7
CAN_F8R2_FB8_Pos       EQU (8)
CAN_F8R2_FB8_Msk       EQU (0x1 :SHL: CAN_F8R2_FB8_Pos)                      ;!< 0x00000100
CAN_F8R2_FB8           EQU CAN_F8R2_FB8_Msk                                ;!<Filter bit 8
CAN_F8R2_FB9_Pos       EQU (9)
CAN_F8R2_FB9_Msk       EQU (0x1 :SHL: CAN_F8R2_FB9_Pos)                      ;!< 0x00000200
CAN_F8R2_FB9           EQU CAN_F8R2_FB9_Msk                                ;!<Filter bit 9
CAN_F8R2_FB10_Pos      EQU (10)
CAN_F8R2_FB10_Msk      EQU (0x1 :SHL: CAN_F8R2_FB10_Pos)                     ;!< 0x00000400
CAN_F8R2_FB10          EQU CAN_F8R2_FB10_Msk                               ;!<Filter bit 10
CAN_F8R2_FB11_Pos      EQU (11)
CAN_F8R2_FB11_Msk      EQU (0x1 :SHL: CAN_F8R2_FB11_Pos)                     ;!< 0x00000800
CAN_F8R2_FB11          EQU CAN_F8R2_FB11_Msk                               ;!<Filter bit 11
CAN_F8R2_FB12_Pos      EQU (12)
CAN_F8R2_FB12_Msk      EQU (0x1 :SHL: CAN_F8R2_FB12_Pos)                     ;!< 0x00001000
CAN_F8R2_FB12          EQU CAN_F8R2_FB12_Msk                               ;!<Filter bit 12
CAN_F8R2_FB13_Pos      EQU (13)
CAN_F8R2_FB13_Msk      EQU (0x1 :SHL: CAN_F8R2_FB13_Pos)                     ;!< 0x00002000
CAN_F8R2_FB13          EQU CAN_F8R2_FB13_Msk                               ;!<Filter bit 13
CAN_F8R2_FB14_Pos      EQU (14)
CAN_F8R2_FB14_Msk      EQU (0x1 :SHL: CAN_F8R2_FB14_Pos)                     ;!< 0x00004000
CAN_F8R2_FB14          EQU CAN_F8R2_FB14_Msk                               ;!<Filter bit 14
CAN_F8R2_FB15_Pos      EQU (15)
CAN_F8R2_FB15_Msk      EQU (0x1 :SHL: CAN_F8R2_FB15_Pos)                     ;!< 0x00008000
CAN_F8R2_FB15          EQU CAN_F8R2_FB15_Msk                               ;!<Filter bit 15
CAN_F8R2_FB16_Pos      EQU (16)
CAN_F8R2_FB16_Msk      EQU (0x1 :SHL: CAN_F8R2_FB16_Pos)                     ;!< 0x00010000
CAN_F8R2_FB16          EQU CAN_F8R2_FB16_Msk                               ;!<Filter bit 16
CAN_F8R2_FB17_Pos      EQU (17)
CAN_F8R2_FB17_Msk      EQU (0x1 :SHL: CAN_F8R2_FB17_Pos)                     ;!< 0x00020000
CAN_F8R2_FB17          EQU CAN_F8R2_FB17_Msk                               ;!<Filter bit 17
CAN_F8R2_FB18_Pos      EQU (18)
CAN_F8R2_FB18_Msk      EQU (0x1 :SHL: CAN_F8R2_FB18_Pos)                     ;!< 0x00040000
CAN_F8R2_FB18          EQU CAN_F8R2_FB18_Msk                               ;!<Filter bit 18
CAN_F8R2_FB19_Pos      EQU (19)
CAN_F8R2_FB19_Msk      EQU (0x1 :SHL: CAN_F8R2_FB19_Pos)                     ;!< 0x00080000
CAN_F8R2_FB19          EQU CAN_F8R2_FB19_Msk                               ;!<Filter bit 19
CAN_F8R2_FB20_Pos      EQU (20)
CAN_F8R2_FB20_Msk      EQU (0x1 :SHL: CAN_F8R2_FB20_Pos)                     ;!< 0x00100000
CAN_F8R2_FB20          EQU CAN_F8R2_FB20_Msk                               ;!<Filter bit 20
CAN_F8R2_FB21_Pos      EQU (21)
CAN_F8R2_FB21_Msk      EQU (0x1 :SHL: CAN_F8R2_FB21_Pos)                     ;!< 0x00200000
CAN_F8R2_FB21          EQU CAN_F8R2_FB21_Msk                               ;!<Filter bit 21
CAN_F8R2_FB22_Pos      EQU (22)
CAN_F8R2_FB22_Msk      EQU (0x1 :SHL: CAN_F8R2_FB22_Pos)                     ;!< 0x00400000
CAN_F8R2_FB22          EQU CAN_F8R2_FB22_Msk                               ;!<Filter bit 22
CAN_F8R2_FB23_Pos      EQU (23)
CAN_F8R2_FB23_Msk      EQU (0x1 :SHL: CAN_F8R2_FB23_Pos)                     ;!< 0x00800000
CAN_F8R2_FB23          EQU CAN_F8R2_FB23_Msk                               ;!<Filter bit 23
CAN_F8R2_FB24_Pos      EQU (24)
CAN_F8R2_FB24_Msk      EQU (0x1 :SHL: CAN_F8R2_FB24_Pos)                     ;!< 0x01000000
CAN_F8R2_FB24          EQU CAN_F8R2_FB24_Msk                               ;!<Filter bit 24
CAN_F8R2_FB25_Pos      EQU (25)
CAN_F8R2_FB25_Msk      EQU (0x1 :SHL: CAN_F8R2_FB25_Pos)                     ;!< 0x02000000
CAN_F8R2_FB25          EQU CAN_F8R2_FB25_Msk                               ;!<Filter bit 25
CAN_F8R2_FB26_Pos      EQU (26)
CAN_F8R2_FB26_Msk      EQU (0x1 :SHL: CAN_F8R2_FB26_Pos)                     ;!< 0x04000000
CAN_F8R2_FB26          EQU CAN_F8R2_FB26_Msk                               ;!<Filter bit 26
CAN_F8R2_FB27_Pos      EQU (27)
CAN_F8R2_FB27_Msk      EQU (0x1 :SHL: CAN_F8R2_FB27_Pos)                     ;!< 0x08000000
CAN_F8R2_FB27          EQU CAN_F8R2_FB27_Msk                               ;!<Filter bit 27
CAN_F8R2_FB28_Pos      EQU (28)
CAN_F8R2_FB28_Msk      EQU (0x1 :SHL: CAN_F8R2_FB28_Pos)                     ;!< 0x10000000
CAN_F8R2_FB28          EQU CAN_F8R2_FB28_Msk                               ;!<Filter bit 28
CAN_F8R2_FB29_Pos      EQU (29)
CAN_F8R2_FB29_Msk      EQU (0x1 :SHL: CAN_F8R2_FB29_Pos)                     ;!< 0x20000000
CAN_F8R2_FB29          EQU CAN_F8R2_FB29_Msk                               ;!<Filter bit 29
CAN_F8R2_FB30_Pos      EQU (30)
CAN_F8R2_FB30_Msk      EQU (0x1 :SHL: CAN_F8R2_FB30_Pos)                     ;!< 0x40000000
CAN_F8R2_FB30          EQU CAN_F8R2_FB30_Msk                               ;!<Filter bit 30
CAN_F8R2_FB31_Pos      EQU (31)
CAN_F8R2_FB31_Msk      EQU (0x1 :SHL: CAN_F8R2_FB31_Pos)                     ;!< 0x80000000
CAN_F8R2_FB31          EQU CAN_F8R2_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F9R2 register  ******************
CAN_F9R2_FB0_Pos       EQU (0)
CAN_F9R2_FB0_Msk       EQU (0x1 :SHL: CAN_F9R2_FB0_Pos)                      ;!< 0x00000001
CAN_F9R2_FB0           EQU CAN_F9R2_FB0_Msk                                ;!<Filter bit 0
CAN_F9R2_FB1_Pos       EQU (1)
CAN_F9R2_FB1_Msk       EQU (0x1 :SHL: CAN_F9R2_FB1_Pos)                      ;!< 0x00000002
CAN_F9R2_FB1           EQU CAN_F9R2_FB1_Msk                                ;!<Filter bit 1
CAN_F9R2_FB2_Pos       EQU (2)
CAN_F9R2_FB2_Msk       EQU (0x1 :SHL: CAN_F9R2_FB2_Pos)                      ;!< 0x00000004
CAN_F9R2_FB2           EQU CAN_F9R2_FB2_Msk                                ;!<Filter bit 2
CAN_F9R2_FB3_Pos       EQU (3)
CAN_F9R2_FB3_Msk       EQU (0x1 :SHL: CAN_F9R2_FB3_Pos)                      ;!< 0x00000008
CAN_F9R2_FB3           EQU CAN_F9R2_FB3_Msk                                ;!<Filter bit 3
CAN_F9R2_FB4_Pos       EQU (4)
CAN_F9R2_FB4_Msk       EQU (0x1 :SHL: CAN_F9R2_FB4_Pos)                      ;!< 0x00000010
CAN_F9R2_FB4           EQU CAN_F9R2_FB4_Msk                                ;!<Filter bit 4
CAN_F9R2_FB5_Pos       EQU (5)
CAN_F9R2_FB5_Msk       EQU (0x1 :SHL: CAN_F9R2_FB5_Pos)                      ;!< 0x00000020
CAN_F9R2_FB5           EQU CAN_F9R2_FB5_Msk                                ;!<Filter bit 5
CAN_F9R2_FB6_Pos       EQU (6)
CAN_F9R2_FB6_Msk       EQU (0x1 :SHL: CAN_F9R2_FB6_Pos)                      ;!< 0x00000040
CAN_F9R2_FB6           EQU CAN_F9R2_FB6_Msk                                ;!<Filter bit 6
CAN_F9R2_FB7_Pos       EQU (7)
CAN_F9R2_FB7_Msk       EQU (0x1 :SHL: CAN_F9R2_FB7_Pos)                      ;!< 0x00000080
CAN_F9R2_FB7           EQU CAN_F9R2_FB7_Msk                                ;!<Filter bit 7
CAN_F9R2_FB8_Pos       EQU (8)
CAN_F9R2_FB8_Msk       EQU (0x1 :SHL: CAN_F9R2_FB8_Pos)                      ;!< 0x00000100
CAN_F9R2_FB8           EQU CAN_F9R2_FB8_Msk                                ;!<Filter bit 8
CAN_F9R2_FB9_Pos       EQU (9)
CAN_F9R2_FB9_Msk       EQU (0x1 :SHL: CAN_F9R2_FB9_Pos)                      ;!< 0x00000200
CAN_F9R2_FB9           EQU CAN_F9R2_FB9_Msk                                ;!<Filter bit 9
CAN_F9R2_FB10_Pos      EQU (10)
CAN_F9R2_FB10_Msk      EQU (0x1 :SHL: CAN_F9R2_FB10_Pos)                     ;!< 0x00000400
CAN_F9R2_FB10          EQU CAN_F9R2_FB10_Msk                               ;!<Filter bit 10
CAN_F9R2_FB11_Pos      EQU (11)
CAN_F9R2_FB11_Msk      EQU (0x1 :SHL: CAN_F9R2_FB11_Pos)                     ;!< 0x00000800
CAN_F9R2_FB11          EQU CAN_F9R2_FB11_Msk                               ;!<Filter bit 11
CAN_F9R2_FB12_Pos      EQU (12)
CAN_F9R2_FB12_Msk      EQU (0x1 :SHL: CAN_F9R2_FB12_Pos)                     ;!< 0x00001000
CAN_F9R2_FB12          EQU CAN_F9R2_FB12_Msk                               ;!<Filter bit 12
CAN_F9R2_FB13_Pos      EQU (13)
CAN_F9R2_FB13_Msk      EQU (0x1 :SHL: CAN_F9R2_FB13_Pos)                     ;!< 0x00002000
CAN_F9R2_FB13          EQU CAN_F9R2_FB13_Msk                               ;!<Filter bit 13
CAN_F9R2_FB14_Pos      EQU (14)
CAN_F9R2_FB14_Msk      EQU (0x1 :SHL: CAN_F9R2_FB14_Pos)                     ;!< 0x00004000
CAN_F9R2_FB14          EQU CAN_F9R2_FB14_Msk                               ;!<Filter bit 14
CAN_F9R2_FB15_Pos      EQU (15)
CAN_F9R2_FB15_Msk      EQU (0x1 :SHL: CAN_F9R2_FB15_Pos)                     ;!< 0x00008000
CAN_F9R2_FB15          EQU CAN_F9R2_FB15_Msk                               ;!<Filter bit 15
CAN_F9R2_FB16_Pos      EQU (16)
CAN_F9R2_FB16_Msk      EQU (0x1 :SHL: CAN_F9R2_FB16_Pos)                     ;!< 0x00010000
CAN_F9R2_FB16          EQU CAN_F9R2_FB16_Msk                               ;!<Filter bit 16
CAN_F9R2_FB17_Pos      EQU (17)
CAN_F9R2_FB17_Msk      EQU (0x1 :SHL: CAN_F9R2_FB17_Pos)                     ;!< 0x00020000
CAN_F9R2_FB17          EQU CAN_F9R2_FB17_Msk                               ;!<Filter bit 17
CAN_F9R2_FB18_Pos      EQU (18)
CAN_F9R2_FB18_Msk      EQU (0x1 :SHL: CAN_F9R2_FB18_Pos)                     ;!< 0x00040000
CAN_F9R2_FB18          EQU CAN_F9R2_FB18_Msk                               ;!<Filter bit 18
CAN_F9R2_FB19_Pos      EQU (19)
CAN_F9R2_FB19_Msk      EQU (0x1 :SHL: CAN_F9R2_FB19_Pos)                     ;!< 0x00080000
CAN_F9R2_FB19          EQU CAN_F9R2_FB19_Msk                               ;!<Filter bit 19
CAN_F9R2_FB20_Pos      EQU (20)
CAN_F9R2_FB20_Msk      EQU (0x1 :SHL: CAN_F9R2_FB20_Pos)                     ;!< 0x00100000
CAN_F9R2_FB20          EQU CAN_F9R2_FB20_Msk                               ;!<Filter bit 20
CAN_F9R2_FB21_Pos      EQU (21)
CAN_F9R2_FB21_Msk      EQU (0x1 :SHL: CAN_F9R2_FB21_Pos)                     ;!< 0x00200000
CAN_F9R2_FB21          EQU CAN_F9R2_FB21_Msk                               ;!<Filter bit 21
CAN_F9R2_FB22_Pos      EQU (22)
CAN_F9R2_FB22_Msk      EQU (0x1 :SHL: CAN_F9R2_FB22_Pos)                     ;!< 0x00400000
CAN_F9R2_FB22          EQU CAN_F9R2_FB22_Msk                               ;!<Filter bit 22
CAN_F9R2_FB23_Pos      EQU (23)
CAN_F9R2_FB23_Msk      EQU (0x1 :SHL: CAN_F9R2_FB23_Pos)                     ;!< 0x00800000
CAN_F9R2_FB23          EQU CAN_F9R2_FB23_Msk                               ;!<Filter bit 23
CAN_F9R2_FB24_Pos      EQU (24)
CAN_F9R2_FB24_Msk      EQU (0x1 :SHL: CAN_F9R2_FB24_Pos)                     ;!< 0x01000000
CAN_F9R2_FB24          EQU CAN_F9R2_FB24_Msk                               ;!<Filter bit 24
CAN_F9R2_FB25_Pos      EQU (25)
CAN_F9R2_FB25_Msk      EQU (0x1 :SHL: CAN_F9R2_FB25_Pos)                     ;!< 0x02000000
CAN_F9R2_FB25          EQU CAN_F9R2_FB25_Msk                               ;!<Filter bit 25
CAN_F9R2_FB26_Pos      EQU (26)
CAN_F9R2_FB26_Msk      EQU (0x1 :SHL: CAN_F9R2_FB26_Pos)                     ;!< 0x04000000
CAN_F9R2_FB26          EQU CAN_F9R2_FB26_Msk                               ;!<Filter bit 26
CAN_F9R2_FB27_Pos      EQU (27)
CAN_F9R2_FB27_Msk      EQU (0x1 :SHL: CAN_F9R2_FB27_Pos)                     ;!< 0x08000000
CAN_F9R2_FB27          EQU CAN_F9R2_FB27_Msk                               ;!<Filter bit 27
CAN_F9R2_FB28_Pos      EQU (28)
CAN_F9R2_FB28_Msk      EQU (0x1 :SHL: CAN_F9R2_FB28_Pos)                     ;!< 0x10000000
CAN_F9R2_FB28          EQU CAN_F9R2_FB28_Msk                               ;!<Filter bit 28
CAN_F9R2_FB29_Pos      EQU (29)
CAN_F9R2_FB29_Msk      EQU (0x1 :SHL: CAN_F9R2_FB29_Pos)                     ;!< 0x20000000
CAN_F9R2_FB29          EQU CAN_F9R2_FB29_Msk                               ;!<Filter bit 29
CAN_F9R2_FB30_Pos      EQU (30)
CAN_F9R2_FB30_Msk      EQU (0x1 :SHL: CAN_F9R2_FB30_Pos)                     ;!< 0x40000000
CAN_F9R2_FB30          EQU CAN_F9R2_FB30_Msk                               ;!<Filter bit 30
CAN_F9R2_FB31_Pos      EQU (31)
CAN_F9R2_FB31_Msk      EQU (0x1 :SHL: CAN_F9R2_FB31_Pos)                     ;!< 0x80000000
CAN_F9R2_FB31          EQU CAN_F9R2_FB31_Msk                               ;!<Filter bit 31

;******************  Bit definition for CAN_F10R2 register  *****************
CAN_F10R2_FB0_Pos      EQU (0)
CAN_F10R2_FB0_Msk      EQU (0x1 :SHL: CAN_F10R2_FB0_Pos)                     ;!< 0x00000001
CAN_F10R2_FB0          EQU CAN_F10R2_FB0_Msk                               ;!<Filter bit 0
CAN_F10R2_FB1_Pos      EQU (1)
CAN_F10R2_FB1_Msk      EQU (0x1 :SHL: CAN_F10R2_FB1_Pos)                     ;!< 0x00000002
CAN_F10R2_FB1          EQU CAN_F10R2_FB1_Msk                               ;!<Filter bit 1
CAN_F10R2_FB2_Pos      EQU (2)
CAN_F10R2_FB2_Msk      EQU (0x1 :SHL: CAN_F10R2_FB2_Pos)                     ;!< 0x00000004
CAN_F10R2_FB2          EQU CAN_F10R2_FB2_Msk                               ;!<Filter bit 2
CAN_F10R2_FB3_Pos      EQU (3)
CAN_F10R2_FB3_Msk      EQU (0x1 :SHL: CAN_F10R2_FB3_Pos)                     ;!< 0x00000008
CAN_F10R2_FB3          EQU CAN_F10R2_FB3_Msk                               ;!<Filter bit 3
CAN_F10R2_FB4_Pos      EQU (4)
CAN_F10R2_FB4_Msk      EQU (0x1 :SHL: CAN_F10R2_FB4_Pos)                     ;!< 0x00000010
CAN_F10R2_FB4          EQU CAN_F10R2_FB4_Msk                               ;!<Filter bit 4
CAN_F10R2_FB5_Pos      EQU (5)
CAN_F10R2_FB5_Msk      EQU (0x1 :SHL: CAN_F10R2_FB5_Pos)                     ;!< 0x00000020
CAN_F10R2_FB5          EQU CAN_F10R2_FB5_Msk                               ;!<Filter bit 5
CAN_F10R2_FB6_Pos      EQU (6)
CAN_F10R2_FB6_Msk      EQU (0x1 :SHL: CAN_F10R2_FB6_Pos)                     ;!< 0x00000040
CAN_F10R2_FB6          EQU CAN_F10R2_FB6_Msk                               ;!<Filter bit 6
CAN_F10R2_FB7_Pos      EQU (7)
CAN_F10R2_FB7_Msk      EQU (0x1 :SHL: CAN_F10R2_FB7_Pos)                     ;!< 0x00000080
CAN_F10R2_FB7          EQU CAN_F10R2_FB7_Msk                               ;!<Filter bit 7
CAN_F10R2_FB8_Pos      EQU (8)
CAN_F10R2_FB8_Msk      EQU (0x1 :SHL: CAN_F10R2_FB8_Pos)                     ;!< 0x00000100
CAN_F10R2_FB8          EQU CAN_F10R2_FB8_Msk                               ;!<Filter bit 8
CAN_F10R2_FB9_Pos      EQU (9)
CAN_F10R2_FB9_Msk      EQU (0x1 :SHL: CAN_F10R2_FB9_Pos)                     ;!< 0x00000200
CAN_F10R2_FB9          EQU CAN_F10R2_FB9_Msk                               ;!<Filter bit 9
CAN_F10R2_FB10_Pos     EQU (10)
CAN_F10R2_FB10_Msk     EQU (0x1 :SHL: CAN_F10R2_FB10_Pos)                    ;!< 0x00000400
CAN_F10R2_FB10         EQU CAN_F10R2_FB10_Msk                              ;!<Filter bit 10
CAN_F10R2_FB11_Pos     EQU (11)
CAN_F10R2_FB11_Msk     EQU (0x1 :SHL: CAN_F10R2_FB11_Pos)                    ;!< 0x00000800
CAN_F10R2_FB11         EQU CAN_F10R2_FB11_Msk                              ;!<Filter bit 11
CAN_F10R2_FB12_Pos     EQU (12)
CAN_F10R2_FB12_Msk     EQU (0x1 :SHL: CAN_F10R2_FB12_Pos)                    ;!< 0x00001000
CAN_F10R2_FB12         EQU CAN_F10R2_FB12_Msk                              ;!<Filter bit 12
CAN_F10R2_FB13_Pos     EQU (13)
CAN_F10R2_FB13_Msk     EQU (0x1 :SHL: CAN_F10R2_FB13_Pos)                    ;!< 0x00002000
CAN_F10R2_FB13         EQU CAN_F10R2_FB13_Msk                              ;!<Filter bit 13
CAN_F10R2_FB14_Pos     EQU (14)
CAN_F10R2_FB14_Msk     EQU (0x1 :SHL: CAN_F10R2_FB14_Pos)                    ;!< 0x00004000
CAN_F10R2_FB14         EQU CAN_F10R2_FB14_Msk                              ;!<Filter bit 14
CAN_F10R2_FB15_Pos     EQU (15)
CAN_F10R2_FB15_Msk     EQU (0x1 :SHL: CAN_F10R2_FB15_Pos)                    ;!< 0x00008000
CAN_F10R2_FB15         EQU CAN_F10R2_FB15_Msk                              ;!<Filter bit 15
CAN_F10R2_FB16_Pos     EQU (16)
CAN_F10R2_FB16_Msk     EQU (0x1 :SHL: CAN_F10R2_FB16_Pos)                    ;!< 0x00010000
CAN_F10R2_FB16         EQU CAN_F10R2_FB16_Msk                              ;!<Filter bit 16
CAN_F10R2_FB17_Pos     EQU (17)
CAN_F10R2_FB17_Msk     EQU (0x1 :SHL: CAN_F10R2_FB17_Pos)                    ;!< 0x00020000
CAN_F10R2_FB17         EQU CAN_F10R2_FB17_Msk                              ;!<Filter bit 17
CAN_F10R2_FB18_Pos     EQU (18)
CAN_F10R2_FB18_Msk     EQU (0x1 :SHL: CAN_F10R2_FB18_Pos)                    ;!< 0x00040000
CAN_F10R2_FB18         EQU CAN_F10R2_FB18_Msk                              ;!<Filter bit 18
CAN_F10R2_FB19_Pos     EQU (19)
CAN_F10R2_FB19_Msk     EQU (0x1 :SHL: CAN_F10R2_FB19_Pos)                    ;!< 0x00080000
CAN_F10R2_FB19         EQU CAN_F10R2_FB19_Msk                              ;!<Filter bit 19
CAN_F10R2_FB20_Pos     EQU (20)
CAN_F10R2_FB20_Msk     EQU (0x1 :SHL: CAN_F10R2_FB20_Pos)                    ;!< 0x00100000
CAN_F10R2_FB20         EQU CAN_F10R2_FB20_Msk                              ;!<Filter bit 20
CAN_F10R2_FB21_Pos     EQU (21)
CAN_F10R2_FB21_Msk     EQU (0x1 :SHL: CAN_F10R2_FB21_Pos)                    ;!< 0x00200000
CAN_F10R2_FB21         EQU CAN_F10R2_FB21_Msk                              ;!<Filter bit 21
CAN_F10R2_FB22_Pos     EQU (22)
CAN_F10R2_FB22_Msk     EQU (0x1 :SHL: CAN_F10R2_FB22_Pos)                    ;!< 0x00400000
CAN_F10R2_FB22         EQU CAN_F10R2_FB22_Msk                              ;!<Filter bit 22
CAN_F10R2_FB23_Pos     EQU (23)
CAN_F10R2_FB23_Msk     EQU (0x1 :SHL: CAN_F10R2_FB23_Pos)                    ;!< 0x00800000
CAN_F10R2_FB23         EQU CAN_F10R2_FB23_Msk                              ;!<Filter bit 23
CAN_F10R2_FB24_Pos     EQU (24)
CAN_F10R2_FB24_Msk     EQU (0x1 :SHL: CAN_F10R2_FB24_Pos)                    ;!< 0x01000000
CAN_F10R2_FB24         EQU CAN_F10R2_FB24_Msk                              ;!<Filter bit 24
CAN_F10R2_FB25_Pos     EQU (25)
CAN_F10R2_FB25_Msk     EQU (0x1 :SHL: CAN_F10R2_FB25_Pos)                    ;!< 0x02000000
CAN_F10R2_FB25         EQU CAN_F10R2_FB25_Msk                              ;!<Filter bit 25
CAN_F10R2_FB26_Pos     EQU (26)
CAN_F10R2_FB26_Msk     EQU (0x1 :SHL: CAN_F10R2_FB26_Pos)                    ;!< 0x04000000
CAN_F10R2_FB26         EQU CAN_F10R2_FB26_Msk                              ;!<Filter bit 26
CAN_F10R2_FB27_Pos     EQU (27)
CAN_F10R2_FB27_Msk     EQU (0x1 :SHL: CAN_F10R2_FB27_Pos)                    ;!< 0x08000000
CAN_F10R2_FB27         EQU CAN_F10R2_FB27_Msk                              ;!<Filter bit 27
CAN_F10R2_FB28_Pos     EQU (28)
CAN_F10R2_FB28_Msk     EQU (0x1 :SHL: CAN_F10R2_FB28_Pos)                    ;!< 0x10000000
CAN_F10R2_FB28         EQU CAN_F10R2_FB28_Msk                              ;!<Filter bit 28
CAN_F10R2_FB29_Pos     EQU (29)
CAN_F10R2_FB29_Msk     EQU (0x1 :SHL: CAN_F10R2_FB29_Pos)                    ;!< 0x20000000
CAN_F10R2_FB29         EQU CAN_F10R2_FB29_Msk                              ;!<Filter bit 29
CAN_F10R2_FB30_Pos     EQU (30)
CAN_F10R2_FB30_Msk     EQU (0x1 :SHL: CAN_F10R2_FB30_Pos)                    ;!< 0x40000000
CAN_F10R2_FB30         EQU CAN_F10R2_FB30_Msk                              ;!<Filter bit 30
CAN_F10R2_FB31_Pos     EQU (31)
CAN_F10R2_FB31_Msk     EQU (0x1 :SHL: CAN_F10R2_FB31_Pos)                    ;!< 0x80000000
CAN_F10R2_FB31         EQU CAN_F10R2_FB31_Msk                              ;!<Filter bit 31

;******************  Bit definition for CAN_F11R2 register  *****************
CAN_F11R2_FB0_Pos      EQU (0)
CAN_F11R2_FB0_Msk      EQU (0x1 :SHL: CAN_F11R2_FB0_Pos)                     ;!< 0x00000001
CAN_F11R2_FB0          EQU CAN_F11R2_FB0_Msk                               ;!<Filter bit 0
CAN_F11R2_FB1_Pos      EQU (1)
CAN_F11R2_FB1_Msk      EQU (0x1 :SHL: CAN_F11R2_FB1_Pos)                     ;!< 0x00000002
CAN_F11R2_FB1          EQU CAN_F11R2_FB1_Msk                               ;!<Filter bit 1
CAN_F11R2_FB2_Pos      EQU (2)
CAN_F11R2_FB2_Msk      EQU (0x1 :SHL: CAN_F11R2_FB2_Pos)                     ;!< 0x00000004
CAN_F11R2_FB2          EQU CAN_F11R2_FB2_Msk                               ;!<Filter bit 2
CAN_F11R2_FB3_Pos      EQU (3)
CAN_F11R2_FB3_Msk      EQU (0x1 :SHL: CAN_F11R2_FB3_Pos)                     ;!< 0x00000008
CAN_F11R2_FB3          EQU CAN_F11R2_FB3_Msk                               ;!<Filter bit 3
CAN_F11R2_FB4_Pos      EQU (4)
CAN_F11R2_FB4_Msk      EQU (0x1 :SHL: CAN_F11R2_FB4_Pos)                     ;!< 0x00000010
CAN_F11R2_FB4          EQU CAN_F11R2_FB4_Msk                               ;!<Filter bit 4
CAN_F11R2_FB5_Pos      EQU (5)
CAN_F11R2_FB5_Msk      EQU (0x1 :SHL: CAN_F11R2_FB5_Pos)                     ;!< 0x00000020
CAN_F11R2_FB5          EQU CAN_F11R2_FB5_Msk                               ;!<Filter bit 5
CAN_F11R2_FB6_Pos      EQU (6)
CAN_F11R2_FB6_Msk      EQU (0x1 :SHL: CAN_F11R2_FB6_Pos)                     ;!< 0x00000040
CAN_F11R2_FB6          EQU CAN_F11R2_FB6_Msk                               ;!<Filter bit 6
CAN_F11R2_FB7_Pos      EQU (7)
CAN_F11R2_FB7_Msk      EQU (0x1 :SHL: CAN_F11R2_FB7_Pos)                     ;!< 0x00000080
CAN_F11R2_FB7          EQU CAN_F11R2_FB7_Msk                               ;!<Filter bit 7
CAN_F11R2_FB8_Pos      EQU (8)
CAN_F11R2_FB8_Msk      EQU (0x1 :SHL: CAN_F11R2_FB8_Pos)                     ;!< 0x00000100
CAN_F11R2_FB8          EQU CAN_F11R2_FB8_Msk                               ;!<Filter bit 8
CAN_F11R2_FB9_Pos      EQU (9)
CAN_F11R2_FB9_Msk      EQU (0x1 :SHL: CAN_F11R2_FB9_Pos)                     ;!< 0x00000200
CAN_F11R2_FB9          EQU CAN_F11R2_FB9_Msk                               ;!<Filter bit 9
CAN_F11R2_FB10_Pos     EQU (10)
CAN_F11R2_FB10_Msk     EQU (0x1 :SHL: CAN_F11R2_FB10_Pos)                    ;!< 0x00000400
CAN_F11R2_FB10         EQU CAN_F11R2_FB10_Msk                              ;!<Filter bit 10
CAN_F11R2_FB11_Pos     EQU (11)
CAN_F11R2_FB11_Msk     EQU (0x1 :SHL: CAN_F11R2_FB11_Pos)                    ;!< 0x00000800
CAN_F11R2_FB11         EQU CAN_F11R2_FB11_Msk                              ;!<Filter bit 11
CAN_F11R2_FB12_Pos     EQU (12)
CAN_F11R2_FB12_Msk     EQU (0x1 :SHL: CAN_F11R2_FB12_Pos)                    ;!< 0x00001000
CAN_F11R2_FB12         EQU CAN_F11R2_FB12_Msk                              ;!<Filter bit 12
CAN_F11R2_FB13_Pos     EQU (13)
CAN_F11R2_FB13_Msk     EQU (0x1 :SHL: CAN_F11R2_FB13_Pos)                    ;!< 0x00002000
CAN_F11R2_FB13         EQU CAN_F11R2_FB13_Msk                              ;!<Filter bit 13
CAN_F11R2_FB14_Pos     EQU (14)
CAN_F11R2_FB14_Msk     EQU (0x1 :SHL: CAN_F11R2_FB14_Pos)                    ;!< 0x00004000
CAN_F11R2_FB14         EQU CAN_F11R2_FB14_Msk                              ;!<Filter bit 14
CAN_F11R2_FB15_Pos     EQU (15)
CAN_F11R2_FB15_Msk     EQU (0x1 :SHL: CAN_F11R2_FB15_Pos)                    ;!< 0x00008000
CAN_F11R2_FB15         EQU CAN_F11R2_FB15_Msk                              ;!<Filter bit 15
CAN_F11R2_FB16_Pos     EQU (16)
CAN_F11R2_FB16_Msk     EQU (0x1 :SHL: CAN_F11R2_FB16_Pos)                    ;!< 0x00010000
CAN_F11R2_FB16         EQU CAN_F11R2_FB16_Msk                              ;!<Filter bit 16
CAN_F11R2_FB17_Pos     EQU (17)
CAN_F11R2_FB17_Msk     EQU (0x1 :SHL: CAN_F11R2_FB17_Pos)                    ;!< 0x00020000
CAN_F11R2_FB17         EQU CAN_F11R2_FB17_Msk                              ;!<Filter bit 17
CAN_F11R2_FB18_Pos     EQU (18)
CAN_F11R2_FB18_Msk     EQU (0x1 :SHL: CAN_F11R2_FB18_Pos)                    ;!< 0x00040000
CAN_F11R2_FB18         EQU CAN_F11R2_FB18_Msk                              ;!<Filter bit 18
CAN_F11R2_FB19_Pos     EQU (19)
CAN_F11R2_FB19_Msk     EQU (0x1 :SHL: CAN_F11R2_FB19_Pos)                    ;!< 0x00080000
CAN_F11R2_FB19         EQU CAN_F11R2_FB19_Msk                              ;!<Filter bit 19
CAN_F11R2_FB20_Pos     EQU (20)
CAN_F11R2_FB20_Msk     EQU (0x1 :SHL: CAN_F11R2_FB20_Pos)                    ;!< 0x00100000
CAN_F11R2_FB20         EQU CAN_F11R2_FB20_Msk                              ;!<Filter bit 20
CAN_F11R2_FB21_Pos     EQU (21)
CAN_F11R2_FB21_Msk     EQU (0x1 :SHL: CAN_F11R2_FB21_Pos)                    ;!< 0x00200000
CAN_F11R2_FB21         EQU CAN_F11R2_FB21_Msk                              ;!<Filter bit 21
CAN_F11R2_FB22_Pos     EQU (22)
CAN_F11R2_FB22_Msk     EQU (0x1 :SHL: CAN_F11R2_FB22_Pos)                    ;!< 0x00400000
CAN_F11R2_FB22         EQU CAN_F11R2_FB22_Msk                              ;!<Filter bit 22
CAN_F11R2_FB23_Pos     EQU (23)
CAN_F11R2_FB23_Msk     EQU (0x1 :SHL: CAN_F11R2_FB23_Pos)                    ;!< 0x00800000
CAN_F11R2_FB23         EQU CAN_F11R2_FB23_Msk                              ;!<Filter bit 23
CAN_F11R2_FB24_Pos     EQU (24)
CAN_F11R2_FB24_Msk     EQU (0x1 :SHL: CAN_F11R2_FB24_Pos)                    ;!< 0x01000000
CAN_F11R2_FB24         EQU CAN_F11R2_FB24_Msk                              ;!<Filter bit 24
CAN_F11R2_FB25_Pos     EQU (25)
CAN_F11R2_FB25_Msk     EQU (0x1 :SHL: CAN_F11R2_FB25_Pos)                    ;!< 0x02000000
CAN_F11R2_FB25         EQU CAN_F11R2_FB25_Msk                              ;!<Filter bit 25
CAN_F11R2_FB26_Pos     EQU (26)
CAN_F11R2_FB26_Msk     EQU (0x1 :SHL: CAN_F11R2_FB26_Pos)                    ;!< 0x04000000
CAN_F11R2_FB26         EQU CAN_F11R2_FB26_Msk                              ;!<Filter bit 26
CAN_F11R2_FB27_Pos     EQU (27)
CAN_F11R2_FB27_Msk     EQU (0x1 :SHL: CAN_F11R2_FB27_Pos)                    ;!< 0x08000000
CAN_F11R2_FB27         EQU CAN_F11R2_FB27_Msk                              ;!<Filter bit 27
CAN_F11R2_FB28_Pos     EQU (28)
CAN_F11R2_FB28_Msk     EQU (0x1 :SHL: CAN_F11R2_FB28_Pos)                    ;!< 0x10000000
CAN_F11R2_FB28         EQU CAN_F11R2_FB28_Msk                              ;!<Filter bit 28
CAN_F11R2_FB29_Pos     EQU (29)
CAN_F11R2_FB29_Msk     EQU (0x1 :SHL: CAN_F11R2_FB29_Pos)                    ;!< 0x20000000
CAN_F11R2_FB29         EQU CAN_F11R2_FB29_Msk                              ;!<Filter bit 29
CAN_F11R2_FB30_Pos     EQU (30)
CAN_F11R2_FB30_Msk     EQU (0x1 :SHL: CAN_F11R2_FB30_Pos)                    ;!< 0x40000000
CAN_F11R2_FB30         EQU CAN_F11R2_FB30_Msk                              ;!<Filter bit 30
CAN_F11R2_FB31_Pos     EQU (31)
CAN_F11R2_FB31_Msk     EQU (0x1 :SHL: CAN_F11R2_FB31_Pos)                    ;!< 0x80000000
CAN_F11R2_FB31         EQU CAN_F11R2_FB31_Msk                              ;!<Filter bit 31

;******************  Bit definition for CAN_F12R2 register  *****************
CAN_F12R2_FB0_Pos      EQU (0)
CAN_F12R2_FB0_Msk      EQU (0x1 :SHL: CAN_F12R2_FB0_Pos)                     ;!< 0x00000001
CAN_F12R2_FB0          EQU CAN_F12R2_FB0_Msk                               ;!<Filter bit 0
CAN_F12R2_FB1_Pos      EQU (1)
CAN_F12R2_FB1_Msk      EQU (0x1 :SHL: CAN_F12R2_FB1_Pos)                     ;!< 0x00000002
CAN_F12R2_FB1          EQU CAN_F12R2_FB1_Msk                               ;!<Filter bit 1
CAN_F12R2_FB2_Pos      EQU (2)
CAN_F12R2_FB2_Msk      EQU (0x1 :SHL: CAN_F12R2_FB2_Pos)                     ;!< 0x00000004
CAN_F12R2_FB2          EQU CAN_F12R2_FB2_Msk                               ;!<Filter bit 2
CAN_F12R2_FB3_Pos      EQU (3)
CAN_F12R2_FB3_Msk      EQU (0x1 :SHL: CAN_F12R2_FB3_Pos)                     ;!< 0x00000008
CAN_F12R2_FB3          EQU CAN_F12R2_FB3_Msk                               ;!<Filter bit 3
CAN_F12R2_FB4_Pos      EQU (4)
CAN_F12R2_FB4_Msk      EQU (0x1 :SHL: CAN_F12R2_FB4_Pos)                     ;!< 0x00000010
CAN_F12R2_FB4          EQU CAN_F12R2_FB4_Msk                               ;!<Filter bit 4
CAN_F12R2_FB5_Pos      EQU (5)
CAN_F12R2_FB5_Msk      EQU (0x1 :SHL: CAN_F12R2_FB5_Pos)                     ;!< 0x00000020
CAN_F12R2_FB5          EQU CAN_F12R2_FB5_Msk                               ;!<Filter bit 5
CAN_F12R2_FB6_Pos      EQU (6)
CAN_F12R2_FB6_Msk      EQU (0x1 :SHL: CAN_F12R2_FB6_Pos)                     ;!< 0x00000040
CAN_F12R2_FB6          EQU CAN_F12R2_FB6_Msk                               ;!<Filter bit 6
CAN_F12R2_FB7_Pos      EQU (7)
CAN_F12R2_FB7_Msk      EQU (0x1 :SHL: CAN_F12R2_FB7_Pos)                     ;!< 0x00000080
CAN_F12R2_FB7          EQU CAN_F12R2_FB7_Msk                               ;!<Filter bit 7
CAN_F12R2_FB8_Pos      EQU (8)
CAN_F12R2_FB8_Msk      EQU (0x1 :SHL: CAN_F12R2_FB8_Pos)                     ;!< 0x00000100
CAN_F12R2_FB8          EQU CAN_F12R2_FB8_Msk                               ;!<Filter bit 8
CAN_F12R2_FB9_Pos      EQU (9)
CAN_F12R2_FB9_Msk      EQU (0x1 :SHL: CAN_F12R2_FB9_Pos)                     ;!< 0x00000200
CAN_F12R2_FB9          EQU CAN_F12R2_FB9_Msk                               ;!<Filter bit 9
CAN_F12R2_FB10_Pos     EQU (10)
CAN_F12R2_FB10_Msk     EQU (0x1 :SHL: CAN_F12R2_FB10_Pos)                    ;!< 0x00000400
CAN_F12R2_FB10         EQU CAN_F12R2_FB10_Msk                              ;!<Filter bit 10
CAN_F12R2_FB11_Pos     EQU (11)
CAN_F12R2_FB11_Msk     EQU (0x1 :SHL: CAN_F12R2_FB11_Pos)                    ;!< 0x00000800
CAN_F12R2_FB11         EQU CAN_F12R2_FB11_Msk                              ;!<Filter bit 11
CAN_F12R2_FB12_Pos     EQU (12)
CAN_F12R2_FB12_Msk     EQU (0x1 :SHL: CAN_F12R2_FB12_Pos)                    ;!< 0x00001000
CAN_F12R2_FB12         EQU CAN_F12R2_FB12_Msk                              ;!<Filter bit 12
CAN_F12R2_FB13_Pos     EQU (13)
CAN_F12R2_FB13_Msk     EQU (0x1 :SHL: CAN_F12R2_FB13_Pos)                    ;!< 0x00002000
CAN_F12R2_FB13         EQU CAN_F12R2_FB13_Msk                              ;!<Filter bit 13
CAN_F12R2_FB14_Pos     EQU (14)
CAN_F12R2_FB14_Msk     EQU (0x1 :SHL: CAN_F12R2_FB14_Pos)                    ;!< 0x00004000
CAN_F12R2_FB14         EQU CAN_F12R2_FB14_Msk                              ;!<Filter bit 14
CAN_F12R2_FB15_Pos     EQU (15)
CAN_F12R2_FB15_Msk     EQU (0x1 :SHL: CAN_F12R2_FB15_Pos)                    ;!< 0x00008000
CAN_F12R2_FB15         EQU CAN_F12R2_FB15_Msk                              ;!<Filter bit 15
CAN_F12R2_FB16_Pos     EQU (16)
CAN_F12R2_FB16_Msk     EQU (0x1 :SHL: CAN_F12R2_FB16_Pos)                    ;!< 0x00010000
CAN_F12R2_FB16         EQU CAN_F12R2_FB16_Msk                              ;!<Filter bit 16
CAN_F12R2_FB17_Pos     EQU (17)
CAN_F12R2_FB17_Msk     EQU (0x1 :SHL: CAN_F12R2_FB17_Pos)                    ;!< 0x00020000
CAN_F12R2_FB17         EQU CAN_F12R2_FB17_Msk                              ;!<Filter bit 17
CAN_F12R2_FB18_Pos     EQU (18)
CAN_F12R2_FB18_Msk     EQU (0x1 :SHL: CAN_F12R2_FB18_Pos)                    ;!< 0x00040000
CAN_F12R2_FB18         EQU CAN_F12R2_FB18_Msk                              ;!<Filter bit 18
CAN_F12R2_FB19_Pos     EQU (19)
CAN_F12R2_FB19_Msk     EQU (0x1 :SHL: CAN_F12R2_FB19_Pos)                    ;!< 0x00080000
CAN_F12R2_FB19         EQU CAN_F12R2_FB19_Msk                              ;!<Filter bit 19
CAN_F12R2_FB20_Pos     EQU (20)
CAN_F12R2_FB20_Msk     EQU (0x1 :SHL: CAN_F12R2_FB20_Pos)                    ;!< 0x00100000
CAN_F12R2_FB20         EQU CAN_F12R2_FB20_Msk                              ;!<Filter bit 20
CAN_F12R2_FB21_Pos     EQU (21)
CAN_F12R2_FB21_Msk     EQU (0x1 :SHL: CAN_F12R2_FB21_Pos)                    ;!< 0x00200000
CAN_F12R2_FB21         EQU CAN_F12R2_FB21_Msk                              ;!<Filter bit 21
CAN_F12R2_FB22_Pos     EQU (22)
CAN_F12R2_FB22_Msk     EQU (0x1 :SHL: CAN_F12R2_FB22_Pos)                    ;!< 0x00400000
CAN_F12R2_FB22         EQU CAN_F12R2_FB22_Msk                              ;!<Filter bit 22
CAN_F12R2_FB23_Pos     EQU (23)
CAN_F12R2_FB23_Msk     EQU (0x1 :SHL: CAN_F12R2_FB23_Pos)                    ;!< 0x00800000
CAN_F12R2_FB23         EQU CAN_F12R2_FB23_Msk                              ;!<Filter bit 23
CAN_F12R2_FB24_Pos     EQU (24)
CAN_F12R2_FB24_Msk     EQU (0x1 :SHL: CAN_F12R2_FB24_Pos)                    ;!< 0x01000000
CAN_F12R2_FB24         EQU CAN_F12R2_FB24_Msk                              ;!<Filter bit 24
CAN_F12R2_FB25_Pos     EQU (25)
CAN_F12R2_FB25_Msk     EQU (0x1 :SHL: CAN_F12R2_FB25_Pos)                    ;!< 0x02000000
CAN_F12R2_FB25         EQU CAN_F12R2_FB25_Msk                              ;!<Filter bit 25
CAN_F12R2_FB26_Pos     EQU (26)
CAN_F12R2_FB26_Msk     EQU (0x1 :SHL: CAN_F12R2_FB26_Pos)                    ;!< 0x04000000
CAN_F12R2_FB26         EQU CAN_F12R2_FB26_Msk                              ;!<Filter bit 26
CAN_F12R2_FB27_Pos     EQU (27)
CAN_F12R2_FB27_Msk     EQU (0x1 :SHL: CAN_F12R2_FB27_Pos)                    ;!< 0x08000000
CAN_F12R2_FB27         EQU CAN_F12R2_FB27_Msk                              ;!<Filter bit 27
CAN_F12R2_FB28_Pos     EQU (28)
CAN_F12R2_FB28_Msk     EQU (0x1 :SHL: CAN_F12R2_FB28_Pos)                    ;!< 0x10000000
CAN_F12R2_FB28         EQU CAN_F12R2_FB28_Msk                              ;!<Filter bit 28
CAN_F12R2_FB29_Pos     EQU (29)
CAN_F12R2_FB29_Msk     EQU (0x1 :SHL: CAN_F12R2_FB29_Pos)                    ;!< 0x20000000
CAN_F12R2_FB29         EQU CAN_F12R2_FB29_Msk                              ;!<Filter bit 29
CAN_F12R2_FB30_Pos     EQU (30)
CAN_F12R2_FB30_Msk     EQU (0x1 :SHL: CAN_F12R2_FB30_Pos)                    ;!< 0x40000000
CAN_F12R2_FB30         EQU CAN_F12R2_FB30_Msk                              ;!<Filter bit 30
CAN_F12R2_FB31_Pos     EQU (31)
CAN_F12R2_FB31_Msk     EQU (0x1 :SHL: CAN_F12R2_FB31_Pos)                    ;!< 0x80000000
CAN_F12R2_FB31         EQU CAN_F12R2_FB31_Msk                              ;!<Filter bit 31

;******************  Bit definition for CAN_F13R2 register  *****************
CAN_F13R2_FB0_Pos      EQU (0)
CAN_F13R2_FB0_Msk      EQU (0x1 :SHL: CAN_F13R2_FB0_Pos)                     ;!< 0x00000001
CAN_F13R2_FB0          EQU CAN_F13R2_FB0_Msk                               ;!<Filter bit 0
CAN_F13R2_FB1_Pos      EQU (1)
CAN_F13R2_FB1_Msk      EQU (0x1 :SHL: CAN_F13R2_FB1_Pos)                     ;!< 0x00000002
CAN_F13R2_FB1          EQU CAN_F13R2_FB1_Msk                               ;!<Filter bit 1
CAN_F13R2_FB2_Pos      EQU (2)
CAN_F13R2_FB2_Msk      EQU (0x1 :SHL: CAN_F13R2_FB2_Pos)                     ;!< 0x00000004
CAN_F13R2_FB2          EQU CAN_F13R2_FB2_Msk                               ;!<Filter bit 2
CAN_F13R2_FB3_Pos      EQU (3)
CAN_F13R2_FB3_Msk      EQU (0x1 :SHL: CAN_F13R2_FB3_Pos)                     ;!< 0x00000008
CAN_F13R2_FB3          EQU CAN_F13R2_FB3_Msk                               ;!<Filter bit 3
CAN_F13R2_FB4_Pos      EQU (4)
CAN_F13R2_FB4_Msk      EQU (0x1 :SHL: CAN_F13R2_FB4_Pos)                     ;!< 0x00000010
CAN_F13R2_FB4          EQU CAN_F13R2_FB4_Msk                               ;!<Filter bit 4
CAN_F13R2_FB5_Pos      EQU (5)
CAN_F13R2_FB5_Msk      EQU (0x1 :SHL: CAN_F13R2_FB5_Pos)                     ;!< 0x00000020
CAN_F13R2_FB5          EQU CAN_F13R2_FB5_Msk                               ;!<Filter bit 5
CAN_F13R2_FB6_Pos      EQU (6)
CAN_F13R2_FB6_Msk      EQU (0x1 :SHL: CAN_F13R2_FB6_Pos)                     ;!< 0x00000040
CAN_F13R2_FB6          EQU CAN_F13R2_FB6_Msk                               ;!<Filter bit 6
CAN_F13R2_FB7_Pos      EQU (7)
CAN_F13R2_FB7_Msk      EQU (0x1 :SHL: CAN_F13R2_FB7_Pos)                     ;!< 0x00000080
CAN_F13R2_FB7          EQU CAN_F13R2_FB7_Msk                               ;!<Filter bit 7
CAN_F13R2_FB8_Pos      EQU (8)
CAN_F13R2_FB8_Msk      EQU (0x1 :SHL: CAN_F13R2_FB8_Pos)                     ;!< 0x00000100
CAN_F13R2_FB8          EQU CAN_F13R2_FB8_Msk                               ;!<Filter bit 8
CAN_F13R2_FB9_Pos      EQU (9)
CAN_F13R2_FB9_Msk      EQU (0x1 :SHL: CAN_F13R2_FB9_Pos)                     ;!< 0x00000200
CAN_F13R2_FB9          EQU CAN_F13R2_FB9_Msk                               ;!<Filter bit 9
CAN_F13R2_FB10_Pos     EQU (10)
CAN_F13R2_FB10_Msk     EQU (0x1 :SHL: CAN_F13R2_FB10_Pos)                    ;!< 0x00000400
CAN_F13R2_FB10         EQU CAN_F13R2_FB10_Msk                              ;!<Filter bit 10
CAN_F13R2_FB11_Pos     EQU (11)
CAN_F13R2_FB11_Msk     EQU (0x1 :SHL: CAN_F13R2_FB11_Pos)                    ;!< 0x00000800
CAN_F13R2_FB11         EQU CAN_F13R2_FB11_Msk                              ;!<Filter bit 11
CAN_F13R2_FB12_Pos     EQU (12)
CAN_F13R2_FB12_Msk     EQU (0x1 :SHL: CAN_F13R2_FB12_Pos)                    ;!< 0x00001000
CAN_F13R2_FB12         EQU CAN_F13R2_FB12_Msk                              ;!<Filter bit 12
CAN_F13R2_FB13_Pos     EQU (13)
CAN_F13R2_FB13_Msk     EQU (0x1 :SHL: CAN_F13R2_FB13_Pos)                    ;!< 0x00002000
CAN_F13R2_FB13         EQU CAN_F13R2_FB13_Msk                              ;!<Filter bit 13
CAN_F13R2_FB14_Pos     EQU (14)
CAN_F13R2_FB14_Msk     EQU (0x1 :SHL: CAN_F13R2_FB14_Pos)                    ;!< 0x00004000
CAN_F13R2_FB14         EQU CAN_F13R2_FB14_Msk                              ;!<Filter bit 14
CAN_F13R2_FB15_Pos     EQU (15)
CAN_F13R2_FB15_Msk     EQU (0x1 :SHL: CAN_F13R2_FB15_Pos)                    ;!< 0x00008000
CAN_F13R2_FB15         EQU CAN_F13R2_FB15_Msk                              ;!<Filter bit 15
CAN_F13R2_FB16_Pos     EQU (16)
CAN_F13R2_FB16_Msk     EQU (0x1 :SHL: CAN_F13R2_FB16_Pos)                    ;!< 0x00010000
CAN_F13R2_FB16         EQU CAN_F13R2_FB16_Msk                              ;!<Filter bit 16
CAN_F13R2_FB17_Pos     EQU (17)
CAN_F13R2_FB17_Msk     EQU (0x1 :SHL: CAN_F13R2_FB17_Pos)                    ;!< 0x00020000
CAN_F13R2_FB17         EQU CAN_F13R2_FB17_Msk                              ;!<Filter bit 17
CAN_F13R2_FB18_Pos     EQU (18)
CAN_F13R2_FB18_Msk     EQU (0x1 :SHL: CAN_F13R2_FB18_Pos)                    ;!< 0x00040000
CAN_F13R2_FB18         EQU CAN_F13R2_FB18_Msk                              ;!<Filter bit 18
CAN_F13R2_FB19_Pos     EQU (19)
CAN_F13R2_FB19_Msk     EQU (0x1 :SHL: CAN_F13R2_FB19_Pos)                    ;!< 0x00080000
CAN_F13R2_FB19         EQU CAN_F13R2_FB19_Msk                              ;!<Filter bit 19
CAN_F13R2_FB20_Pos     EQU (20)
CAN_F13R2_FB20_Msk     EQU (0x1 :SHL: CAN_F13R2_FB20_Pos)                    ;!< 0x00100000
CAN_F13R2_FB20         EQU CAN_F13R2_FB20_Msk                              ;!<Filter bit 20
CAN_F13R2_FB21_Pos     EQU (21)
CAN_F13R2_FB21_Msk     EQU (0x1 :SHL: CAN_F13R2_FB21_Pos)                    ;!< 0x00200000
CAN_F13R2_FB21         EQU CAN_F13R2_FB21_Msk                              ;!<Filter bit 21
CAN_F13R2_FB22_Pos     EQU (22)
CAN_F13R2_FB22_Msk     EQU (0x1 :SHL: CAN_F13R2_FB22_Pos)                    ;!< 0x00400000
CAN_F13R2_FB22         EQU CAN_F13R2_FB22_Msk                              ;!<Filter bit 22
CAN_F13R2_FB23_Pos     EQU (23)
CAN_F13R2_FB23_Msk     EQU (0x1 :SHL: CAN_F13R2_FB23_Pos)                    ;!< 0x00800000
CAN_F13R2_FB23         EQU CAN_F13R2_FB23_Msk                              ;!<Filter bit 23
CAN_F13R2_FB24_Pos     EQU (24)
CAN_F13R2_FB24_Msk     EQU (0x1 :SHL: CAN_F13R2_FB24_Pos)                    ;!< 0x01000000
CAN_F13R2_FB24         EQU CAN_F13R2_FB24_Msk                              ;!<Filter bit 24
CAN_F13R2_FB25_Pos     EQU (25)
CAN_F13R2_FB25_Msk     EQU (0x1 :SHL: CAN_F13R2_FB25_Pos)                    ;!< 0x02000000
CAN_F13R2_FB25         EQU CAN_F13R2_FB25_Msk                              ;!<Filter bit 25
CAN_F13R2_FB26_Pos     EQU (26)
CAN_F13R2_FB26_Msk     EQU (0x1 :SHL: CAN_F13R2_FB26_Pos)                    ;!< 0x04000000
CAN_F13R2_FB26         EQU CAN_F13R2_FB26_Msk                              ;!<Filter bit 26
CAN_F13R2_FB27_Pos     EQU (27)
CAN_F13R2_FB27_Msk     EQU (0x1 :SHL: CAN_F13R2_FB27_Pos)                    ;!< 0x08000000
CAN_F13R2_FB27         EQU CAN_F13R2_FB27_Msk                              ;!<Filter bit 27
CAN_F13R2_FB28_Pos     EQU (28)
CAN_F13R2_FB28_Msk     EQU (0x1 :SHL: CAN_F13R2_FB28_Pos)                    ;!< 0x10000000
CAN_F13R2_FB28         EQU CAN_F13R2_FB28_Msk                              ;!<Filter bit 28
CAN_F13R2_FB29_Pos     EQU (29)
CAN_F13R2_FB29_Msk     EQU (0x1 :SHL: CAN_F13R2_FB29_Pos)                    ;!< 0x20000000
CAN_F13R2_FB29         EQU CAN_F13R2_FB29_Msk                              ;!<Filter bit 29
CAN_F13R2_FB30_Pos     EQU (30)
CAN_F13R2_FB30_Msk     EQU (0x1 :SHL: CAN_F13R2_FB30_Pos)                    ;!< 0x40000000
CAN_F13R2_FB30         EQU CAN_F13R2_FB30_Msk                              ;!<Filter bit 30
CAN_F13R2_FB31_Pos     EQU (31)
CAN_F13R2_FB31_Msk     EQU (0x1 :SHL: CAN_F13R2_FB31_Pos)                    ;!< 0x80000000
CAN_F13R2_FB31         EQU CAN_F13R2_FB31_Msk                              ;!<Filter bit 31

;****************************************************************************
;
;                     CRC calculation unit (CRC)
;
;****************************************************************************
;******************  Bit definition for CRC_DR register  ********************
CRC_DR_DR_Pos            EQU (0)
CRC_DR_DR_Msk            EQU (0xFFFFFFFF :SHL: CRC_DR_DR_Pos)                ;!< 0xFFFFFFFF
CRC_DR_DR                EQU CRC_DR_DR_Msk                                 ;!< Data register bits

;******************  Bit definition for CRC_IDR register  *******************
CRC_IDR_IDR              EQU (0xFF)                              ;!< General-purpose 8-bit data register bits

;*******************  Bit definition for CRC_CR register  *******************
CRC_CR_RESET_Pos         EQU (0)
CRC_CR_RESET_Msk         EQU (0x1 :SHL: CRC_CR_RESET_Pos)                    ;!< 0x00000001
CRC_CR_RESET             EQU CRC_CR_RESET_Msk                              ;!< RESET the CRC computation unit bit
CRC_CR_POLYSIZE_Pos      EQU (3)
CRC_CR_POLYSIZE_Msk      EQU (0x3 :SHL: CRC_CR_POLYSIZE_Pos)                 ;!< 0x00000018
CRC_CR_POLYSIZE          EQU CRC_CR_POLYSIZE_Msk                           ;!< Polynomial size bits
CRC_CR_POLYSIZE_0        EQU (0x1 :SHL: CRC_CR_POLYSIZE_Pos)                 ;!< 0x00000008
CRC_CR_POLYSIZE_1        EQU (0x2 :SHL: CRC_CR_POLYSIZE_Pos)                 ;!< 0x00000010
CRC_CR_REV_IN_Pos        EQU (5)
CRC_CR_REV_IN_Msk        EQU (0x3 :SHL: CRC_CR_REV_IN_Pos)                   ;!< 0x00000060
CRC_CR_REV_IN            EQU CRC_CR_REV_IN_Msk                             ;!< REV_IN Reverse Input Data bits
CRC_CR_REV_IN_0          EQU (0x1 :SHL: CRC_CR_REV_IN_Pos)                   ;!< 0x00000020
CRC_CR_REV_IN_1          EQU (0x2 :SHL: CRC_CR_REV_IN_Pos)                   ;!< 0x00000040
CRC_CR_REV_OUT_Pos       EQU (7)
CRC_CR_REV_OUT_Msk       EQU (0x1 :SHL: CRC_CR_REV_OUT_Pos)                  ;!< 0x00000080
CRC_CR_REV_OUT           EQU CRC_CR_REV_OUT_Msk                            ;!< REV_OUT Reverse Output Data bits

;******************  Bit definition for CRC_INIT register  ******************
CRC_INIT_INIT_Pos        EQU (0)
CRC_INIT_INIT_Msk        EQU (0xFFFFFFFF :SHL: CRC_INIT_INIT_Pos)            ;!< 0xFFFFFFFF
CRC_INIT_INIT            EQU CRC_INIT_INIT_Msk                             ;!< Initial CRC value bits

;******************  Bit definition for CRC_POL register  *******************
CRC_POL_POL_Pos          EQU (0)
CRC_POL_POL_Msk          EQU (0xFFFFFFFF :SHL: CRC_POL_POL_Pos)              ;!< 0xFFFFFFFF
CRC_POL_POL              EQU CRC_POL_POL_Msk                               ;!< Coefficients of the polynomial

;****************************************************************************
;
;                 Digital to Analog Converter (DAC)
;
;****************************************************************************

;*******************  Bit definition for DAC_CR register  *******************
DAC_CR_EN1_Pos              EQU (0)
DAC_CR_EN1_Msk              EQU (0x1 :SHL: DAC_CR_EN1_Pos)                   ;!< 0x00000001
DAC_CR_EN1                  EQU DAC_CR_EN1_Msk                             ;!< DAC channel1 enable
DAC_CR_BOFF1_Pos            EQU (1)
DAC_CR_BOFF1_Msk            EQU (0x1 :SHL: DAC_CR_BOFF1_Pos)                 ;!< 0x00000002
DAC_CR_BOFF1                EQU DAC_CR_BOFF1_Msk                           ;!< DAC channel1 output buffer disable
DAC_CR_TEN1_Pos             EQU (2)
DAC_CR_TEN1_Msk             EQU (0x1 :SHL: DAC_CR_TEN1_Pos)                  ;!< 0x00000004
DAC_CR_TEN1                 EQU DAC_CR_TEN1_Msk                            ;!< DAC channel1 Trigger enable

DAC_CR_TSEL1_Pos            EQU (3)
DAC_CR_TSEL1_Msk            EQU (0x7 :SHL: DAC_CR_TSEL1_Pos)                 ;!< 0x00000038
DAC_CR_TSEL1                EQU DAC_CR_TSEL1_Msk                           ;!< TSEL1[2:0] (DAC channel1 Trigger selection)
DAC_CR_TSEL1_0              EQU (0x1 :SHL: DAC_CR_TSEL1_Pos)                 ;!< 0x00000008
DAC_CR_TSEL1_1              EQU (0x2 :SHL: DAC_CR_TSEL1_Pos)                 ;!< 0x00000010
DAC_CR_TSEL1_2              EQU (0x4 :SHL: DAC_CR_TSEL1_Pos)                 ;!< 0x00000020

DAC_CR_WAVE1_Pos            EQU (6)
DAC_CR_WAVE1_Msk            EQU (0x3 :SHL: DAC_CR_WAVE1_Pos)                 ;!< 0x000000C0
DAC_CR_WAVE1                EQU DAC_CR_WAVE1_Msk                           ;!< WAVE1[1:0] (DAC channel1 noise/triangle wave generation enable)
DAC_CR_WAVE1_0              EQU (0x1 :SHL: DAC_CR_WAVE1_Pos)                 ;!< 0x00000040
DAC_CR_WAVE1_1              EQU (0x2 :SHL: DAC_CR_WAVE1_Pos)                 ;!< 0x00000080

DAC_CR_MAMP1_Pos            EQU (8)
DAC_CR_MAMP1_Msk            EQU (0xF :SHL: DAC_CR_MAMP1_Pos)                 ;!< 0x00000F00
DAC_CR_MAMP1                EQU DAC_CR_MAMP1_Msk                           ;!< MAMP1[3:0] (DAC channel1 Mask/Amplitude selector)
DAC_CR_MAMP1_0              EQU (0x1 :SHL: DAC_CR_MAMP1_Pos)                 ;!< 0x00000100
DAC_CR_MAMP1_1              EQU (0x2 :SHL: DAC_CR_MAMP1_Pos)                 ;!< 0x00000200
DAC_CR_MAMP1_2              EQU (0x4 :SHL: DAC_CR_MAMP1_Pos)                 ;!< 0x00000400
DAC_CR_MAMP1_3              EQU (0x8 :SHL: DAC_CR_MAMP1_Pos)                 ;!< 0x00000800

DAC_CR_DMAEN1_Pos           EQU (12)
DAC_CR_DMAEN1_Msk           EQU (0x1 :SHL: DAC_CR_DMAEN1_Pos)                ;!< 0x00001000
DAC_CR_DMAEN1               EQU DAC_CR_DMAEN1_Msk                          ;!< DAC channel1 DMA enable
DAC_CR_DMAUDRIE1_Pos        EQU (13)
DAC_CR_DMAUDRIE1_Msk        EQU (0x1 :SHL: DAC_CR_DMAUDRIE1_Pos)             ;!< 0x00002000
DAC_CR_DMAUDRIE1            EQU DAC_CR_DMAUDRIE1_Msk                       ;!< DAC channel1 DMA underrun IT enable
DAC_CR_EN2_Pos              EQU (16)
DAC_CR_EN2_Msk              EQU (0x1 :SHL: DAC_CR_EN2_Pos)                   ;!< 0x00010000
DAC_CR_EN2                  EQU DAC_CR_EN2_Msk                             ;!< DAC channel2 enable
DAC_CR_BOFF2_Pos            EQU (17)
DAC_CR_BOFF2_Msk            EQU (0x1 :SHL: DAC_CR_BOFF2_Pos)                 ;!< 0x00020000
DAC_CR_BOFF2                EQU DAC_CR_BOFF2_Msk                           ;!< DAC channel2 output buffer disable
DAC_CR_TEN2_Pos             EQU (18)
DAC_CR_TEN2_Msk             EQU (0x1 :SHL: DAC_CR_TEN2_Pos)                  ;!< 0x00040000
DAC_CR_TEN2                 EQU DAC_CR_TEN2_Msk                            ;!< DAC channel2 Trigger enable

DAC_CR_TSEL2_Pos            EQU (19)
DAC_CR_TSEL2_Msk            EQU (0x7 :SHL: DAC_CR_TSEL2_Pos)                 ;!< 0x00380000
DAC_CR_TSEL2                EQU DAC_CR_TSEL2_Msk                           ;!< TSEL2[2:0] (DAC channel2 Trigger selection)
DAC_CR_TSEL2_0              EQU (0x1 :SHL: DAC_CR_TSEL2_Pos)                 ;!< 0x00080000
DAC_CR_TSEL2_1              EQU (0x2 :SHL: DAC_CR_TSEL2_Pos)                 ;!< 0x00100000
DAC_CR_TSEL2_2              EQU (0x4 :SHL: DAC_CR_TSEL2_Pos)                 ;!< 0x00200000

DAC_CR_WAVE2_Pos            EQU (22)
DAC_CR_WAVE2_Msk            EQU (0x3 :SHL: DAC_CR_WAVE2_Pos)                 ;!< 0x00C00000
DAC_CR_WAVE2                EQU DAC_CR_WAVE2_Msk                           ;!< WAVE2[1:0] (DAC channel2 noise/triangle wave generation enable)
DAC_CR_WAVE2_0              EQU (0x1 :SHL: DAC_CR_WAVE2_Pos)                 ;!< 0x00400000
DAC_CR_WAVE2_1              EQU (0x2 :SHL: DAC_CR_WAVE2_Pos)                 ;!< 0x00800000

DAC_CR_MAMP2_Pos            EQU (24)
DAC_CR_MAMP2_Msk            EQU (0xF :SHL: DAC_CR_MAMP2_Pos)                 ;!< 0x0F000000
DAC_CR_MAMP2                EQU DAC_CR_MAMP2_Msk                           ;!< MAMP2[3:0] (DAC channel2 Mask/Amplitude selector)
DAC_CR_MAMP2_0              EQU (0x1 :SHL: DAC_CR_MAMP2_Pos)                 ;!< 0x01000000
DAC_CR_MAMP2_1              EQU (0x2 :SHL: DAC_CR_MAMP2_Pos)                 ;!< 0x02000000
DAC_CR_MAMP2_2              EQU (0x4 :SHL: DAC_CR_MAMP2_Pos)                 ;!< 0x04000000
DAC_CR_MAMP2_3              EQU (0x8 :SHL: DAC_CR_MAMP2_Pos)                 ;!< 0x08000000

DAC_CR_DMAEN2_Pos           EQU (28)
DAC_CR_DMAEN2_Msk           EQU (0x1 :SHL: DAC_CR_DMAEN2_Pos)                ;!< 0x10000000
DAC_CR_DMAEN2               EQU DAC_CR_DMAEN2_Msk                          ;!< DAC channel2 DMA enabled
DAC_CR_DMAUDRIE2_Pos        EQU (29)
DAC_CR_DMAUDRIE2_Msk        EQU (0x1 :SHL: DAC_CR_DMAUDRIE2_Pos)             ;!< 0x20000000
DAC_CR_DMAUDRIE2            EQU DAC_CR_DMAUDRIE2_Msk                       ;!< DAC channel2 DMA underrun IT enable

;****************  Bit definition for DAC_SWTRIGR register  *****************
DAC_SWTRIGR_SWTRIG1_Pos     EQU (0)
DAC_SWTRIGR_SWTRIG1_Msk     EQU (0x1 :SHL: DAC_SWTRIGR_SWTRIG1_Pos)          ;!< 0x00000001
DAC_SWTRIGR_SWTRIG1         EQU DAC_SWTRIGR_SWTRIG1_Msk                    ;!< DAC channel1 software trigger
DAC_SWTRIGR_SWTRIG2_Pos     EQU (1)
DAC_SWTRIGR_SWTRIG2_Msk     EQU (0x1 :SHL: DAC_SWTRIGR_SWTRIG2_Pos)          ;!< 0x00000002
DAC_SWTRIGR_SWTRIG2         EQU DAC_SWTRIGR_SWTRIG2_Msk                    ;!< DAC channel2 software trigger

;****************  Bit definition for DAC_DHR12R1 register  *****************
DAC_DHR12R1_DACC1DHR_Pos    EQU (0)
DAC_DHR12R1_DACC1DHR_Msk    EQU (0xFFF :SHL: DAC_DHR12R1_DACC1DHR_Pos)       ;!< 0x00000FFF
DAC_DHR12R1_DACC1DHR        EQU DAC_DHR12R1_DACC1DHR_Msk                   ;!< DAC channel1 12-bit Right aligned data

;****************  Bit definition for DAC_DHR12L1 register  *****************
DAC_DHR12L1_DACC1DHR_Pos    EQU (4)
DAC_DHR12L1_DACC1DHR_Msk    EQU (0xFFF :SHL: DAC_DHR12L1_DACC1DHR_Pos)       ;!< 0x0000FFF0
DAC_DHR12L1_DACC1DHR        EQU DAC_DHR12L1_DACC1DHR_Msk                   ;!< DAC channel1 12-bit Left aligned data

;*****************  Bit definition for DAC_DHR8R1 register  *****************
DAC_DHR8R1_DACC1DHR_Pos     EQU (0)
DAC_DHR8R1_DACC1DHR_Msk     EQU (0xFF :SHL: DAC_DHR8R1_DACC1DHR_Pos)         ;!< 0x000000FF
DAC_DHR8R1_DACC1DHR         EQU DAC_DHR8R1_DACC1DHR_Msk                    ;!< DAC channel1 8-bit Right aligned data

;****************  Bit definition for DAC_DHR12R2 register  *****************
DAC_DHR12R2_DACC2DHR_Pos    EQU (0)
DAC_DHR12R2_DACC2DHR_Msk    EQU (0xFFF :SHL: DAC_DHR12R2_DACC2DHR_Pos)       ;!< 0x00000FFF
DAC_DHR12R2_DACC2DHR        EQU DAC_DHR12R2_DACC2DHR_Msk                   ;!< DAC channel2 12-bit Right aligned data

;****************  Bit definition for DAC_DHR12L2 register  *****************
DAC_DHR12L2_DACC2DHR_Pos    EQU (4)
DAC_DHR12L2_DACC2DHR_Msk    EQU (0xFFF :SHL: DAC_DHR12L2_DACC2DHR_Pos)       ;!< 0x0000FFF0
DAC_DHR12L2_DACC2DHR        EQU DAC_DHR12L2_DACC2DHR_Msk                   ;!< DAC channel2 12-bit Left aligned data

;*****************  Bit definition for DAC_DHR8R2 register  *****************
DAC_DHR8R2_DACC2DHR_Pos     EQU (0)
DAC_DHR8R2_DACC2DHR_Msk     EQU (0xFF :SHL: DAC_DHR8R2_DACC2DHR_Pos)         ;!< 0x000000FF
DAC_DHR8R2_DACC2DHR         EQU DAC_DHR8R2_DACC2DHR_Msk                    ;!< DAC channel2 8-bit Right aligned data

;****************  Bit definition for DAC_DHR12RD register  *****************
DAC_DHR12RD_DACC1DHR_Pos    EQU (0)
DAC_DHR12RD_DACC1DHR_Msk    EQU (0xFFF :SHL: DAC_DHR12RD_DACC1DHR_Pos)       ;!< 0x00000FFF
DAC_DHR12RD_DACC1DHR        EQU DAC_DHR12RD_DACC1DHR_Msk                   ;!< DAC channel1 12-bit Right aligned data
DAC_DHR12RD_DACC2DHR_Pos    EQU (16)
DAC_DHR12RD_DACC2DHR_Msk    EQU (0xFFF :SHL: DAC_DHR12RD_DACC2DHR_Pos)       ;!< 0x0FFF0000
DAC_DHR12RD_DACC2DHR        EQU DAC_DHR12RD_DACC2DHR_Msk                   ;!< DAC channel2 12-bit Right aligned data

;****************  Bit definition for DAC_DHR12LD register  *****************
DAC_DHR12LD_DACC1DHR_Pos    EQU (4)
DAC_DHR12LD_DACC1DHR_Msk    EQU (0xFFF :SHL: DAC_DHR12LD_DACC1DHR_Pos)       ;!< 0x0000FFF0
DAC_DHR12LD_DACC1DHR        EQU DAC_DHR12LD_DACC1DHR_Msk                   ;!< DAC channel1 12-bit Left aligned data
DAC_DHR12LD_DACC2DHR_Pos    EQU (20)
DAC_DHR12LD_DACC2DHR_Msk    EQU (0xFFF :SHL: DAC_DHR12LD_DACC2DHR_Pos)       ;!< 0xFFF00000
DAC_DHR12LD_DACC2DHR        EQU DAC_DHR12LD_DACC2DHR_Msk                   ;!< DAC channel2 12-bit Left aligned data

;*****************  Bit definition for DAC_DHR8RD register  *****************
DAC_DHR8RD_DACC1DHR_Pos     EQU (0)
DAC_DHR8RD_DACC1DHR_Msk     EQU (0xFF :SHL: DAC_DHR8RD_DACC1DHR_Pos)         ;!< 0x000000FF
DAC_DHR8RD_DACC1DHR         EQU DAC_DHR8RD_DACC1DHR_Msk                    ;!< DAC channel1 8-bit Right aligned data
DAC_DHR8RD_DACC2DHR_Pos     EQU (8)
DAC_DHR8RD_DACC2DHR_Msk     EQU (0xFF :SHL: DAC_DHR8RD_DACC2DHR_Pos)         ;!< 0x0000FF00
DAC_DHR8RD_DACC2DHR         EQU DAC_DHR8RD_DACC2DHR_Msk                    ;!< DAC channel2 8-bit Right aligned data

;******************  Bit definition for DAC_DOR1 register  ******************
DAC_DOR1_DACC1DOR_Pos       EQU (0)
DAC_DOR1_DACC1DOR_Msk       EQU (0xFFF :SHL: DAC_DOR1_DACC1DOR_Pos)          ;!< 0x00000FFF
DAC_DOR1_DACC1DOR           EQU DAC_DOR1_DACC1DOR_Msk                      ;!< DAC channel1 data output

;******************  Bit definition for DAC_DOR2 register  ******************
DAC_DOR2_DACC2DOR_Pos       EQU (0)
DAC_DOR2_DACC2DOR_Msk       EQU (0xFFF :SHL: DAC_DOR2_DACC2DOR_Pos)          ;!< 0x00000FFF
DAC_DOR2_DACC2DOR           EQU DAC_DOR2_DACC2DOR_Msk                      ;!< DAC channel2 data output

;*******************  Bit definition for DAC_SR register  *******************
DAC_SR_DMAUDR1_Pos          EQU (13)
DAC_SR_DMAUDR1_Msk          EQU (0x1 :SHL: DAC_SR_DMAUDR1_Pos)               ;!< 0x00002000
DAC_SR_DMAUDR1              EQU DAC_SR_DMAUDR1_Msk                         ;!< DAC channel1 DMA underrun flag
DAC_SR_DMAUDR2_Pos          EQU (29)
DAC_SR_DMAUDR2_Msk          EQU (0x1 :SHL: DAC_SR_DMAUDR2_Pos)               ;!< 0x20000000
DAC_SR_DMAUDR2              EQU DAC_SR_DMAUDR2_Msk                         ;!< DAC channel2 DMA underrun flag

;****************************************************************************
;
;                                 Debug MCU (DBGMCU)
;
;****************************************************************************
;*******************  Bit definition for DBGMCU_IDCODE register  ************
DBGMCU_IDCODE_DEV_ID_Pos                     EQU (0)
DBGMCU_IDCODE_DEV_ID_Msk                     EQU (0xFFF :SHL: DBGMCU_IDCODE_DEV_ID_Pos) ;!< 0x00000FFF
DBGMCU_IDCODE_DEV_ID                         EQU DBGMCU_IDCODE_DEV_ID_Msk
DBGMCU_IDCODE_REV_ID_Pos                     EQU (16)
DBGMCU_IDCODE_REV_ID_Msk                     EQU (0xFFFF :SHL: DBGMCU_IDCODE_REV_ID_Pos) ;!< 0xFFFF0000
DBGMCU_IDCODE_REV_ID                         EQU DBGMCU_IDCODE_REV_ID_Msk

;*******************  Bit definition for DBGMCU_CR register  ****************
DBGMCU_CR_DBG_SLEEP_Pos                      EQU (0)
DBGMCU_CR_DBG_SLEEP_Msk                      EQU (0x1 :SHL: DBGMCU_CR_DBG_SLEEP_Pos) ;!< 0x00000001
DBGMCU_CR_DBG_SLEEP                          EQU DBGMCU_CR_DBG_SLEEP_Msk
DBGMCU_CR_DBG_STOP_Pos                       EQU (1)
DBGMCU_CR_DBG_STOP_Msk                       EQU (0x1 :SHL: DBGMCU_CR_DBG_STOP_Pos) ;!< 0x00000002
DBGMCU_CR_DBG_STOP                           EQU DBGMCU_CR_DBG_STOP_Msk
DBGMCU_CR_DBG_STANDBY_Pos                    EQU (2)
DBGMCU_CR_DBG_STANDBY_Msk                    EQU (0x1 :SHL: DBGMCU_CR_DBG_STANDBY_Pos) ;!< 0x00000004
DBGMCU_CR_DBG_STANDBY                        EQU DBGMCU_CR_DBG_STANDBY_Msk
DBGMCU_CR_TRACE_IOEN_Pos                     EQU (5)
DBGMCU_CR_TRACE_IOEN_Msk                     EQU (0x1 :SHL: DBGMCU_CR_TRACE_IOEN_Pos) ;!< 0x00000020
DBGMCU_CR_TRACE_IOEN                         EQU DBGMCU_CR_TRACE_IOEN_Msk

DBGMCU_CR_TRACE_MODE_Pos                     EQU (6)
DBGMCU_CR_TRACE_MODE_Msk                     EQU (0x3 :SHL: DBGMCU_CR_TRACE_MODE_Pos) ;!< 0x000000C0
DBGMCU_CR_TRACE_MODE                         EQU DBGMCU_CR_TRACE_MODE_Msk
DBGMCU_CR_TRACE_MODE_0                       EQU (0x1 :SHL: DBGMCU_CR_TRACE_MODE_Pos) ;!< 0x00000040
DBGMCU_CR_TRACE_MODE_1                       EQU (0x2 :SHL: DBGMCU_CR_TRACE_MODE_Pos) ;!< 0x00000080

;*******************  Bit definition for DBGMCU_APB1_FZ register  ***********
DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos             EQU (0)
DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk             EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos) ;!< 0x00000001
DBGMCU_APB1_FZ_DBG_TIM2_STOP                 EQU DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk
DBGMCU_APB1_FZ_DBG_TIM3_STOP_Pos             EQU (1)
DBGMCU_APB1_FZ_DBG_TIM3_STOP_Msk             EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_TIM3_STOP_Pos) ;!< 0x00000002
DBGMCU_APB1_FZ_DBG_TIM3_STOP                 EQU DBGMCU_APB1_FZ_DBG_TIM3_STOP_Msk
DBGMCU_APB1_FZ_DBG_TIM4_STOP_Pos             EQU (2)
DBGMCU_APB1_FZ_DBG_TIM4_STOP_Msk             EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_TIM4_STOP_Pos) ;!< 0x00000004
DBGMCU_APB1_FZ_DBG_TIM4_STOP                 EQU DBGMCU_APB1_FZ_DBG_TIM4_STOP_Msk
DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos             EQU (4)
DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk             EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos) ;!< 0x00000010
DBGMCU_APB1_FZ_DBG_TIM6_STOP                 EQU DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk
DBGMCU_APB1_FZ_DBG_TIM7_STOP_Pos             EQU (5)
DBGMCU_APB1_FZ_DBG_TIM7_STOP_Msk             EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_TIM7_STOP_Pos) ;!< 0x00000020
DBGMCU_APB1_FZ_DBG_TIM7_STOP                 EQU DBGMCU_APB1_FZ_DBG_TIM7_STOP_Msk
DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos              EQU (10)
DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk              EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos) ;!< 0x00000400
DBGMCU_APB1_FZ_DBG_RTC_STOP                  EQU DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk
DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos             EQU (11)
DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk             EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos) ;!< 0x00000800
DBGMCU_APB1_FZ_DBG_WWDG_STOP                 EQU DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk
DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos             EQU (12)
DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk             EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos) ;!< 0x00001000
DBGMCU_APB1_FZ_DBG_IWDG_STOP                 EQU DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk
DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Pos    EQU (21)
DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Msk    EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Pos) ;!< 0x00200000
DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT        EQU DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Msk
DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Pos    EQU (22)
DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Msk    EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Pos) ;!< 0x00400000
DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT        EQU DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Msk
DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT_Pos    EQU (30)
DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT_Msk    EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT_Pos) ;!< 0x40000000
DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT        EQU DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT_Msk
DBGMCU_APB1_FZ_DBG_CAN_STOP_Pos              EQU (25)
DBGMCU_APB1_FZ_DBG_CAN_STOP_Msk              EQU (0x1 :SHL: DBGMCU_APB1_FZ_DBG_CAN_STOP_Pos) ;!< 0x02000000
DBGMCU_APB1_FZ_DBG_CAN_STOP                  EQU DBGMCU_APB1_FZ_DBG_CAN_STOP_Msk

;*******************  Bit definition for DBGMCU_APB2_FZ register  ***********
DBGMCU_APB2_FZ_DBG_TIM1_STOP_Pos             EQU (0)
DBGMCU_APB2_FZ_DBG_TIM1_STOP_Msk             EQU (0x1 :SHL: DBGMCU_APB2_FZ_DBG_TIM1_STOP_Pos) ;!< 0x00000001
DBGMCU_APB2_FZ_DBG_TIM1_STOP                 EQU DBGMCU_APB2_FZ_DBG_TIM1_STOP_Msk
DBGMCU_APB2_FZ_DBG_TIM8_STOP_Pos             EQU (1)
DBGMCU_APB2_FZ_DBG_TIM8_STOP_Msk             EQU (0x1 :SHL: DBGMCU_APB2_FZ_DBG_TIM8_STOP_Pos) ;!< 0x00000002
DBGMCU_APB2_FZ_DBG_TIM8_STOP                 EQU DBGMCU_APB2_FZ_DBG_TIM8_STOP_Msk
DBGMCU_APB2_FZ_DBG_TIM15_STOP_Pos            EQU (2)
DBGMCU_APB2_FZ_DBG_TIM15_STOP_Msk            EQU (0x1 :SHL: DBGMCU_APB2_FZ_DBG_TIM15_STOP_Pos) ;!< 0x00000004
DBGMCU_APB2_FZ_DBG_TIM15_STOP                EQU DBGMCU_APB2_FZ_DBG_TIM15_STOP_Msk
DBGMCU_APB2_FZ_DBG_TIM16_STOP_Pos            EQU (3)
DBGMCU_APB2_FZ_DBG_TIM16_STOP_Msk            EQU (0x1 :SHL: DBGMCU_APB2_FZ_DBG_TIM16_STOP_Pos) ;!< 0x00000008
DBGMCU_APB2_FZ_DBG_TIM16_STOP                EQU DBGMCU_APB2_FZ_DBG_TIM16_STOP_Msk
DBGMCU_APB2_FZ_DBG_TIM17_STOP_Pos            EQU (4)
DBGMCU_APB2_FZ_DBG_TIM17_STOP_Msk            EQU (0x1 :SHL: DBGMCU_APB2_FZ_DBG_TIM17_STOP_Pos) ;!< 0x00000010
DBGMCU_APB2_FZ_DBG_TIM17_STOP                EQU DBGMCU_APB2_FZ_DBG_TIM17_STOP_Msk
DBGMCU_APB2_FZ_DBG_TIM20_STOP_Pos            EQU (5)
DBGMCU_APB2_FZ_DBG_TIM20_STOP_Msk            EQU (0x1 :SHL: DBGMCU_APB2_FZ_DBG_TIM20_STOP_Pos) ;!< 0x00000020
DBGMCU_APB2_FZ_DBG_TIM20_STOP                EQU DBGMCU_APB2_FZ_DBG_TIM20_STOP_Msk

;****************************************************************************
;
;                             DMA Controller (DMA)
;
;****************************************************************************
;******************  Bit definition for DMA_ISR register  *******************
DMA_ISR_GIF1_Pos       EQU (0)
DMA_ISR_GIF1_Msk       EQU (0x1 :SHL: DMA_ISR_GIF1_Pos)                      ;!< 0x00000001
DMA_ISR_GIF1           EQU DMA_ISR_GIF1_Msk                                ;!< Channel 1 Global interrupt flag
DMA_ISR_TCIF1_Pos      EQU (1)
DMA_ISR_TCIF1_Msk      EQU (0x1 :SHL: DMA_ISR_TCIF1_Pos)                     ;!< 0x00000002
DMA_ISR_TCIF1          EQU DMA_ISR_TCIF1_Msk                               ;!< Channel 1 Transfer Complete flag
DMA_ISR_HTIF1_Pos      EQU (2)
DMA_ISR_HTIF1_Msk      EQU (0x1 :SHL: DMA_ISR_HTIF1_Pos)                     ;!< 0x00000004
DMA_ISR_HTIF1          EQU DMA_ISR_HTIF1_Msk                               ;!< Channel 1 Half Transfer flag
DMA_ISR_TEIF1_Pos      EQU (3)
DMA_ISR_TEIF1_Msk      EQU (0x1 :SHL: DMA_ISR_TEIF1_Pos)                     ;!< 0x00000008
DMA_ISR_TEIF1          EQU DMA_ISR_TEIF1_Msk                               ;!< Channel 1 Transfer Error flag
DMA_ISR_GIF2_Pos       EQU (4)
DMA_ISR_GIF2_Msk       EQU (0x1 :SHL: DMA_ISR_GIF2_Pos)                      ;!< 0x00000010
DMA_ISR_GIF2           EQU DMA_ISR_GIF2_Msk                                ;!< Channel 2 Global interrupt flag
DMA_ISR_TCIF2_Pos      EQU (5)
DMA_ISR_TCIF2_Msk      EQU (0x1 :SHL: DMA_ISR_TCIF2_Pos)                     ;!< 0x00000020
DMA_ISR_TCIF2          EQU DMA_ISR_TCIF2_Msk                               ;!< Channel 2 Transfer Complete flag
DMA_ISR_HTIF2_Pos      EQU (6)
DMA_ISR_HTIF2_Msk      EQU (0x1 :SHL: DMA_ISR_HTIF2_Pos)                     ;!< 0x00000040
DMA_ISR_HTIF2          EQU DMA_ISR_HTIF2_Msk                               ;!< Channel 2 Half Transfer flag
DMA_ISR_TEIF2_Pos      EQU (7)
DMA_ISR_TEIF2_Msk      EQU (0x1 :SHL: DMA_ISR_TEIF2_Pos)                     ;!< 0x00000080
DMA_ISR_TEIF2          EQU DMA_ISR_TEIF2_Msk                               ;!< Channel 2 Transfer Error flag
DMA_ISR_GIF3_Pos       EQU (8)
DMA_ISR_GIF3_Msk       EQU (0x1 :SHL: DMA_ISR_GIF3_Pos)                      ;!< 0x00000100
DMA_ISR_GIF3           EQU DMA_ISR_GIF3_Msk                                ;!< Channel 3 Global interrupt flag
DMA_ISR_TCIF3_Pos      EQU (9)
DMA_ISR_TCIF3_Msk      EQU (0x1 :SHL: DMA_ISR_TCIF3_Pos)                     ;!< 0x00000200
DMA_ISR_TCIF3          EQU DMA_ISR_TCIF3_Msk                               ;!< Channel 3 Transfer Complete flag
DMA_ISR_HTIF3_Pos      EQU (10)
DMA_ISR_HTIF3_Msk      EQU (0x1 :SHL: DMA_ISR_HTIF3_Pos)                     ;!< 0x00000400
DMA_ISR_HTIF3          EQU DMA_ISR_HTIF3_Msk                               ;!< Channel 3 Half Transfer flag
DMA_ISR_TEIF3_Pos      EQU (11)
DMA_ISR_TEIF3_Msk      EQU (0x1 :SHL: DMA_ISR_TEIF3_Pos)                     ;!< 0x00000800
DMA_ISR_TEIF3          EQU DMA_ISR_TEIF3_Msk                               ;!< Channel 3 Transfer Error flag
DMA_ISR_GIF4_Pos       EQU (12)
DMA_ISR_GIF4_Msk       EQU (0x1 :SHL: DMA_ISR_GIF4_Pos)                      ;!< 0x00001000
DMA_ISR_GIF4           EQU DMA_ISR_GIF4_Msk                                ;!< Channel 4 Global interrupt flag
DMA_ISR_TCIF4_Pos      EQU (13)
DMA_ISR_TCIF4_Msk      EQU (0x1 :SHL: DMA_ISR_TCIF4_Pos)                     ;!< 0x00002000
DMA_ISR_TCIF4          EQU DMA_ISR_TCIF4_Msk                               ;!< Channel 4 Transfer Complete flag
DMA_ISR_HTIF4_Pos      EQU (14)
DMA_ISR_HTIF4_Msk      EQU (0x1 :SHL: DMA_ISR_HTIF4_Pos)                     ;!< 0x00004000
DMA_ISR_HTIF4          EQU DMA_ISR_HTIF4_Msk                               ;!< Channel 4 Half Transfer flag
DMA_ISR_TEIF4_Pos      EQU (15)
DMA_ISR_TEIF4_Msk      EQU (0x1 :SHL: DMA_ISR_TEIF4_Pos)                     ;!< 0x00008000
DMA_ISR_TEIF4          EQU DMA_ISR_TEIF4_Msk                               ;!< Channel 4 Transfer Error flag
DMA_ISR_GIF5_Pos       EQU (16)
DMA_ISR_GIF5_Msk       EQU (0x1 :SHL: DMA_ISR_GIF5_Pos)                      ;!< 0x00010000
DMA_ISR_GIF5           EQU DMA_ISR_GIF5_Msk                                ;!< Channel 5 Global interrupt flag
DMA_ISR_TCIF5_Pos      EQU (17)
DMA_ISR_TCIF5_Msk      EQU (0x1 :SHL: DMA_ISR_TCIF5_Pos)                     ;!< 0x00020000
DMA_ISR_TCIF5          EQU DMA_ISR_TCIF5_Msk                               ;!< Channel 5 Transfer Complete flag
DMA_ISR_HTIF5_Pos      EQU (18)
DMA_ISR_HTIF5_Msk      EQU (0x1 :SHL: DMA_ISR_HTIF5_Pos)                     ;!< 0x00040000
DMA_ISR_HTIF5          EQU DMA_ISR_HTIF5_Msk                               ;!< Channel 5 Half Transfer flag
DMA_ISR_TEIF5_Pos      EQU (19)
DMA_ISR_TEIF5_Msk      EQU (0x1 :SHL: DMA_ISR_TEIF5_Pos)                     ;!< 0x00080000
DMA_ISR_TEIF5          EQU DMA_ISR_TEIF5_Msk                               ;!< Channel 5 Transfer Error flag
DMA_ISR_GIF6_Pos       EQU (20)
DMA_ISR_GIF6_Msk       EQU (0x1 :SHL: DMA_ISR_GIF6_Pos)                      ;!< 0x00100000
DMA_ISR_GIF6           EQU DMA_ISR_GIF6_Msk                                ;!< Channel 6 Global interrupt flag
DMA_ISR_TCIF6_Pos      EQU (21)
DMA_ISR_TCIF6_Msk      EQU (0x1 :SHL: DMA_ISR_TCIF6_Pos)                     ;!< 0x00200000
DMA_ISR_TCIF6          EQU DMA_ISR_TCIF6_Msk                               ;!< Channel 6 Transfer Complete flag
DMA_ISR_HTIF6_Pos      EQU (22)
DMA_ISR_HTIF6_Msk      EQU (0x1 :SHL: DMA_ISR_HTIF6_Pos)                     ;!< 0x00400000
DMA_ISR_HTIF6          EQU DMA_ISR_HTIF6_Msk                               ;!< Channel 6 Half Transfer flag
DMA_ISR_TEIF6_Pos      EQU (23)
DMA_ISR_TEIF6_Msk      EQU (0x1 :SHL: DMA_ISR_TEIF6_Pos)                     ;!< 0x00800000
DMA_ISR_TEIF6          EQU DMA_ISR_TEIF6_Msk                               ;!< Channel 6 Transfer Error flag
DMA_ISR_GIF7_Pos       EQU (24)
DMA_ISR_GIF7_Msk       EQU (0x1 :SHL: DMA_ISR_GIF7_Pos)                      ;!< 0x01000000
DMA_ISR_GIF7           EQU DMA_ISR_GIF7_Msk                                ;!< Channel 7 Global interrupt flag
DMA_ISR_TCIF7_Pos      EQU (25)
DMA_ISR_TCIF7_Msk      EQU (0x1 :SHL: DMA_ISR_TCIF7_Pos)                     ;!< 0x02000000
DMA_ISR_TCIF7          EQU DMA_ISR_TCIF7_Msk                               ;!< Channel 7 Transfer Complete flag
DMA_ISR_HTIF7_Pos      EQU (26)
DMA_ISR_HTIF7_Msk      EQU (0x1 :SHL: DMA_ISR_HTIF7_Pos)                     ;!< 0x04000000
DMA_ISR_HTIF7          EQU DMA_ISR_HTIF7_Msk                               ;!< Channel 7 Half Transfer flag
DMA_ISR_TEIF7_Pos      EQU (27)
DMA_ISR_TEIF7_Msk      EQU (0x1 :SHL: DMA_ISR_TEIF7_Pos)                     ;!< 0x08000000
DMA_ISR_TEIF7          EQU DMA_ISR_TEIF7_Msk                               ;!< Channel 7 Transfer Error flag

;******************  Bit definition for DMA_IFCR register  ******************
DMA_IFCR_CGIF1_Pos     EQU (0)
DMA_IFCR_CGIF1_Msk     EQU (0x1 :SHL: DMA_IFCR_CGIF1_Pos)                    ;!< 0x00000001
DMA_IFCR_CGIF1         EQU DMA_IFCR_CGIF1_Msk                              ;!< Channel 1 Global interrupt clear
DMA_IFCR_CTCIF1_Pos    EQU (1)
DMA_IFCR_CTCIF1_Msk    EQU (0x1 :SHL: DMA_IFCR_CTCIF1_Pos)                   ;!< 0x00000002
DMA_IFCR_CTCIF1        EQU DMA_IFCR_CTCIF1_Msk                             ;!< Channel 1 Transfer Complete clear
DMA_IFCR_CHTIF1_Pos    EQU (2)
DMA_IFCR_CHTIF1_Msk    EQU (0x1 :SHL: DMA_IFCR_CHTIF1_Pos)                   ;!< 0x00000004
DMA_IFCR_CHTIF1        EQU DMA_IFCR_CHTIF1_Msk                             ;!< Channel 1 Half Transfer clear
DMA_IFCR_CTEIF1_Pos    EQU (3)
DMA_IFCR_CTEIF1_Msk    EQU (0x1 :SHL: DMA_IFCR_CTEIF1_Pos)                   ;!< 0x00000008
DMA_IFCR_CTEIF1        EQU DMA_IFCR_CTEIF1_Msk                             ;!< Channel 1 Transfer Error clear
DMA_IFCR_CGIF2_Pos     EQU (4)
DMA_IFCR_CGIF2_Msk     EQU (0x1 :SHL: DMA_IFCR_CGIF2_Pos)                    ;!< 0x00000010
DMA_IFCR_CGIF2         EQU DMA_IFCR_CGIF2_Msk                              ;!< Channel 2 Global interrupt clear
DMA_IFCR_CTCIF2_Pos    EQU (5)
DMA_IFCR_CTCIF2_Msk    EQU (0x1 :SHL: DMA_IFCR_CTCIF2_Pos)                   ;!< 0x00000020
DMA_IFCR_CTCIF2        EQU DMA_IFCR_CTCIF2_Msk                             ;!< Channel 2 Transfer Complete clear
DMA_IFCR_CHTIF2_Pos    EQU (6)
DMA_IFCR_CHTIF2_Msk    EQU (0x1 :SHL: DMA_IFCR_CHTIF2_Pos)                   ;!< 0x00000040
DMA_IFCR_CHTIF2        EQU DMA_IFCR_CHTIF2_Msk                             ;!< Channel 2 Half Transfer clear
DMA_IFCR_CTEIF2_Pos    EQU (7)
DMA_IFCR_CTEIF2_Msk    EQU (0x1 :SHL: DMA_IFCR_CTEIF2_Pos)                   ;!< 0x00000080
DMA_IFCR_CTEIF2        EQU DMA_IFCR_CTEIF2_Msk                             ;!< Channel 2 Transfer Error clear
DMA_IFCR_CGIF3_Pos     EQU (8)
DMA_IFCR_CGIF3_Msk     EQU (0x1 :SHL: DMA_IFCR_CGIF3_Pos)                    ;!< 0x00000100
DMA_IFCR_CGIF3         EQU DMA_IFCR_CGIF3_Msk                              ;!< Channel 3 Global interrupt clear
DMA_IFCR_CTCIF3_Pos    EQU (9)
DMA_IFCR_CTCIF3_Msk    EQU (0x1 :SHL: DMA_IFCR_CTCIF3_Pos)                   ;!< 0x00000200
DMA_IFCR_CTCIF3        EQU DMA_IFCR_CTCIF3_Msk                             ;!< Channel 3 Transfer Complete clear
DMA_IFCR_CHTIF3_Pos    EQU (10)
DMA_IFCR_CHTIF3_Msk    EQU (0x1 :SHL: DMA_IFCR_CHTIF3_Pos)                   ;!< 0x00000400
DMA_IFCR_CHTIF3        EQU DMA_IFCR_CHTIF3_Msk                             ;!< Channel 3 Half Transfer clear
DMA_IFCR_CTEIF3_Pos    EQU (11)
DMA_IFCR_CTEIF3_Msk    EQU (0x1 :SHL: DMA_IFCR_CTEIF3_Pos)                   ;!< 0x00000800
DMA_IFCR_CTEIF3        EQU DMA_IFCR_CTEIF3_Msk                             ;!< Channel 3 Transfer Error clear
DMA_IFCR_CGIF4_Pos     EQU (12)
DMA_IFCR_CGIF4_Msk     EQU (0x1 :SHL: DMA_IFCR_CGIF4_Pos)                    ;!< 0x00001000
DMA_IFCR_CGIF4         EQU DMA_IFCR_CGIF4_Msk                              ;!< Channel 4 Global interrupt clear
DMA_IFCR_CTCIF4_Pos    EQU (13)
DMA_IFCR_CTCIF4_Msk    EQU (0x1 :SHL: DMA_IFCR_CTCIF4_Pos)                   ;!< 0x00002000
DMA_IFCR_CTCIF4        EQU DMA_IFCR_CTCIF4_Msk                             ;!< Channel 4 Transfer Complete clear
DMA_IFCR_CHTIF4_Pos    EQU (14)
DMA_IFCR_CHTIF4_Msk    EQU (0x1 :SHL: DMA_IFCR_CHTIF4_Pos)                   ;!< 0x00004000
DMA_IFCR_CHTIF4        EQU DMA_IFCR_CHTIF4_Msk                             ;!< Channel 4 Half Transfer clear
DMA_IFCR_CTEIF4_Pos    EQU (15)
DMA_IFCR_CTEIF4_Msk    EQU (0x1 :SHL: DMA_IFCR_CTEIF4_Pos)                   ;!< 0x00008000
DMA_IFCR_CTEIF4        EQU DMA_IFCR_CTEIF4_Msk                             ;!< Channel 4 Transfer Error clear
DMA_IFCR_CGIF5_Pos     EQU (16)
DMA_IFCR_CGIF5_Msk     EQU (0x1 :SHL: DMA_IFCR_CGIF5_Pos)                    ;!< 0x00010000
DMA_IFCR_CGIF5         EQU DMA_IFCR_CGIF5_Msk                              ;!< Channel 5 Global interrupt clear
DMA_IFCR_CTCIF5_Pos    EQU (17)
DMA_IFCR_CTCIF5_Msk    EQU (0x1 :SHL: DMA_IFCR_CTCIF5_Pos)                   ;!< 0x00020000
DMA_IFCR_CTCIF5        EQU DMA_IFCR_CTCIF5_Msk                             ;!< Channel 5 Transfer Complete clear
DMA_IFCR_CHTIF5_Pos    EQU (18)
DMA_IFCR_CHTIF5_Msk    EQU (0x1 :SHL: DMA_IFCR_CHTIF5_Pos)                   ;!< 0x00040000
DMA_IFCR_CHTIF5        EQU DMA_IFCR_CHTIF5_Msk                             ;!< Channel 5 Half Transfer clear
DMA_IFCR_CTEIF5_Pos    EQU (19)
DMA_IFCR_CTEIF5_Msk    EQU (0x1 :SHL: DMA_IFCR_CTEIF5_Pos)                   ;!< 0x00080000
DMA_IFCR_CTEIF5        EQU DMA_IFCR_CTEIF5_Msk                             ;!< Channel 5 Transfer Error clear
DMA_IFCR_CGIF6_Pos     EQU (20)
DMA_IFCR_CGIF6_Msk     EQU (0x1 :SHL: DMA_IFCR_CGIF6_Pos)                    ;!< 0x00100000
DMA_IFCR_CGIF6         EQU DMA_IFCR_CGIF6_Msk                              ;!< Channel 6 Global interrupt clear
DMA_IFCR_CTCIF6_Pos    EQU (21)
DMA_IFCR_CTCIF6_Msk    EQU (0x1 :SHL: DMA_IFCR_CTCIF6_Pos)                   ;!< 0x00200000
DMA_IFCR_CTCIF6        EQU DMA_IFCR_CTCIF6_Msk                             ;!< Channel 6 Transfer Complete clear
DMA_IFCR_CHTIF6_Pos    EQU (22)
DMA_IFCR_CHTIF6_Msk    EQU (0x1 :SHL: DMA_IFCR_CHTIF6_Pos)                   ;!< 0x00400000
DMA_IFCR_CHTIF6        EQU DMA_IFCR_CHTIF6_Msk                             ;!< Channel 6 Half Transfer clear
DMA_IFCR_CTEIF6_Pos    EQU (23)
DMA_IFCR_CTEIF6_Msk    EQU (0x1 :SHL: DMA_IFCR_CTEIF6_Pos)                   ;!< 0x00800000
DMA_IFCR_CTEIF6        EQU DMA_IFCR_CTEIF6_Msk                             ;!< Channel 6 Transfer Error clear
DMA_IFCR_CGIF7_Pos     EQU (24)
DMA_IFCR_CGIF7_Msk     EQU (0x1 :SHL: DMA_IFCR_CGIF7_Pos)                    ;!< 0x01000000
DMA_IFCR_CGIF7         EQU DMA_IFCR_CGIF7_Msk                              ;!< Channel 7 Global interrupt clear
DMA_IFCR_CTCIF7_Pos    EQU (25)
DMA_IFCR_CTCIF7_Msk    EQU (0x1 :SHL: DMA_IFCR_CTCIF7_Pos)                   ;!< 0x02000000
DMA_IFCR_CTCIF7        EQU DMA_IFCR_CTCIF7_Msk                             ;!< Channel 7 Transfer Complete clear
DMA_IFCR_CHTIF7_Pos    EQU (26)
DMA_IFCR_CHTIF7_Msk    EQU (0x1 :SHL: DMA_IFCR_CHTIF7_Pos)                   ;!< 0x04000000
DMA_IFCR_CHTIF7        EQU DMA_IFCR_CHTIF7_Msk                             ;!< Channel 7 Half Transfer clear
DMA_IFCR_CTEIF7_Pos    EQU (27)
DMA_IFCR_CTEIF7_Msk    EQU (0x1 :SHL: DMA_IFCR_CTEIF7_Pos)                   ;!< 0x08000000
DMA_IFCR_CTEIF7        EQU DMA_IFCR_CTEIF7_Msk                             ;!< Channel 7 Transfer Error clear

;******************  Bit definition for DMA_CCR register  *******************
DMA_CCR_EN_Pos         EQU (0)
DMA_CCR_EN_Msk         EQU (0x1 :SHL: DMA_CCR_EN_Pos)                        ;!< 0x00000001
DMA_CCR_EN             EQU DMA_CCR_EN_Msk                                  ;!< Channel enable
DMA_CCR_TCIE_Pos       EQU (1)
DMA_CCR_TCIE_Msk       EQU (0x1 :SHL: DMA_CCR_TCIE_Pos)                      ;!< 0x00000002
DMA_CCR_TCIE           EQU DMA_CCR_TCIE_Msk                                ;!< Transfer complete interrupt enable
DMA_CCR_HTIE_Pos       EQU (2)
DMA_CCR_HTIE_Msk       EQU (0x1 :SHL: DMA_CCR_HTIE_Pos)                      ;!< 0x00000004
DMA_CCR_HTIE           EQU DMA_CCR_HTIE_Msk                                ;!< Half Transfer interrupt enable
DMA_CCR_TEIE_Pos       EQU (3)
DMA_CCR_TEIE_Msk       EQU (0x1 :SHL: DMA_CCR_TEIE_Pos)                      ;!< 0x00000008
DMA_CCR_TEIE           EQU DMA_CCR_TEIE_Msk                                ;!< Transfer error interrupt enable
DMA_CCR_DIR_Pos        EQU (4)
DMA_CCR_DIR_Msk        EQU (0x1 :SHL: DMA_CCR_DIR_Pos)                       ;!< 0x00000010
DMA_CCR_DIR            EQU DMA_CCR_DIR_Msk                                 ;!< Data transfer direction
DMA_CCR_CIRC_Pos       EQU (5)
DMA_CCR_CIRC_Msk       EQU (0x1 :SHL: DMA_CCR_CIRC_Pos)                      ;!< 0x00000020
DMA_CCR_CIRC           EQU DMA_CCR_CIRC_Msk                                ;!< Circular mode
DMA_CCR_PINC_Pos       EQU (6)
DMA_CCR_PINC_Msk       EQU (0x1 :SHL: DMA_CCR_PINC_Pos)                      ;!< 0x00000040
DMA_CCR_PINC           EQU DMA_CCR_PINC_Msk                                ;!< Peripheral increment mode
DMA_CCR_MINC_Pos       EQU (7)
DMA_CCR_MINC_Msk       EQU (0x1 :SHL: DMA_CCR_MINC_Pos)                      ;!< 0x00000080
DMA_CCR_MINC           EQU DMA_CCR_MINC_Msk                                ;!< Memory increment mode

DMA_CCR_PSIZE_Pos      EQU (8)
DMA_CCR_PSIZE_Msk      EQU (0x3 :SHL: DMA_CCR_PSIZE_Pos)                     ;!< 0x00000300
DMA_CCR_PSIZE          EQU DMA_CCR_PSIZE_Msk                               ;!< PSIZE[1:0] bits (Peripheral size)
DMA_CCR_PSIZE_0        EQU (0x1 :SHL: DMA_CCR_PSIZE_Pos)                     ;!< 0x00000100
DMA_CCR_PSIZE_1        EQU (0x2 :SHL: DMA_CCR_PSIZE_Pos)                     ;!< 0x00000200

DMA_CCR_MSIZE_Pos      EQU (10)
DMA_CCR_MSIZE_Msk      EQU (0x3 :SHL: DMA_CCR_MSIZE_Pos)                     ;!< 0x00000C00
DMA_CCR_MSIZE          EQU DMA_CCR_MSIZE_Msk                               ;!< MSIZE[1:0] bits (Memory size)
DMA_CCR_MSIZE_0        EQU (0x1 :SHL: DMA_CCR_MSIZE_Pos)                     ;!< 0x00000400
DMA_CCR_MSIZE_1        EQU (0x2 :SHL: DMA_CCR_MSIZE_Pos)                     ;!< 0x00000800

DMA_CCR_PL_Pos         EQU (12)
DMA_CCR_PL_Msk         EQU (0x3 :SHL: DMA_CCR_PL_Pos)                        ;!< 0x00003000
DMA_CCR_PL             EQU DMA_CCR_PL_Msk                                  ;!< PL[1:0] bits(Channel Priority level)
DMA_CCR_PL_0           EQU (0x1 :SHL: DMA_CCR_PL_Pos)                        ;!< 0x00001000
DMA_CCR_PL_1           EQU (0x2 :SHL: DMA_CCR_PL_Pos)                        ;!< 0x00002000

DMA_CCR_MEM2MEM_Pos    EQU (14)
DMA_CCR_MEM2MEM_Msk    EQU (0x1 :SHL: DMA_CCR_MEM2MEM_Pos)                   ;!< 0x00004000
DMA_CCR_MEM2MEM        EQU DMA_CCR_MEM2MEM_Msk                             ;!< Memory to memory mode

;*****************  Bit definition for DMA_CNDTR register  ******************
DMA_CNDTR_NDT_Pos      EQU (0)
DMA_CNDTR_NDT_Msk      EQU (0xFFFF :SHL: DMA_CNDTR_NDT_Pos)                  ;!< 0x0000FFFF
DMA_CNDTR_NDT          EQU DMA_CNDTR_NDT_Msk                               ;!< Number of data to Transfer

;*****************  Bit definition for DMA_CPAR register  *******************
DMA_CPAR_PA_Pos        EQU (0)
DMA_CPAR_PA_Msk        EQU (0xFFFFFFFF :SHL: DMA_CPAR_PA_Pos)                ;!< 0xFFFFFFFF
DMA_CPAR_PA            EQU DMA_CPAR_PA_Msk                                 ;!< Peripheral Address

;*****************  Bit definition for DMA_CMAR register  *******************
DMA_CMAR_MA_Pos        EQU (0)
DMA_CMAR_MA_Msk        EQU (0xFFFFFFFF :SHL: DMA_CMAR_MA_Pos)                ;!< 0xFFFFFFFF
DMA_CMAR_MA            EQU DMA_CMAR_MA_Msk                                 ;!< Memory Address

;****************************************************************************
;
;                    External Interrupt/Event Controller (EXTI)
;
;****************************************************************************
;******************  Bit definition for EXTI_IMR register  ******************
EXTI_IMR_MR0_Pos           EQU (0)
EXTI_IMR_MR0_Msk           EQU (0x1 :SHL: EXTI_IMR_MR0_Pos)                  ;!< 0x00000001
EXTI_IMR_MR0               EQU EXTI_IMR_MR0_Msk                            ;!< Interrupt Mask on line 0
EXTI_IMR_MR1_Pos           EQU (1)
EXTI_IMR_MR1_Msk           EQU (0x1 :SHL: EXTI_IMR_MR1_Pos)                  ;!< 0x00000002
EXTI_IMR_MR1               EQU EXTI_IMR_MR1_Msk                            ;!< Interrupt Mask on line 1
EXTI_IMR_MR2_Pos           EQU (2)
EXTI_IMR_MR2_Msk           EQU (0x1 :SHL: EXTI_IMR_MR2_Pos)                  ;!< 0x00000004
EXTI_IMR_MR2               EQU EXTI_IMR_MR2_Msk                            ;!< Interrupt Mask on line 2
EXTI_IMR_MR3_Pos           EQU (3)
EXTI_IMR_MR3_Msk           EQU (0x1 :SHL: EXTI_IMR_MR3_Pos)                  ;!< 0x00000008
EXTI_IMR_MR3               EQU EXTI_IMR_MR3_Msk                            ;!< Interrupt Mask on line 3
EXTI_IMR_MR4_Pos           EQU (4)
EXTI_IMR_MR4_Msk           EQU (0x1 :SHL: EXTI_IMR_MR4_Pos)                  ;!< 0x00000010
EXTI_IMR_MR4               EQU EXTI_IMR_MR4_Msk                            ;!< Interrupt Mask on line 4
EXTI_IMR_MR5_Pos           EQU (5)
EXTI_IMR_MR5_Msk           EQU (0x1 :SHL: EXTI_IMR_MR5_Pos)                  ;!< 0x00000020
EXTI_IMR_MR5               EQU EXTI_IMR_MR5_Msk                            ;!< Interrupt Mask on line 5
EXTI_IMR_MR6_Pos           EQU (6)
EXTI_IMR_MR6_Msk           EQU (0x1 :SHL: EXTI_IMR_MR6_Pos)                  ;!< 0x00000040
EXTI_IMR_MR6               EQU EXTI_IMR_MR6_Msk                            ;!< Interrupt Mask on line 6
EXTI_IMR_MR7_Pos           EQU (7)
EXTI_IMR_MR7_Msk           EQU (0x1 :SHL: EXTI_IMR_MR7_Pos)                  ;!< 0x00000080
EXTI_IMR_MR7               EQU EXTI_IMR_MR7_Msk                            ;!< Interrupt Mask on line 7
EXTI_IMR_MR8_Pos           EQU (8)
EXTI_IMR_MR8_Msk           EQU (0x1 :SHL: EXTI_IMR_MR8_Pos)                  ;!< 0x00000100
EXTI_IMR_MR8               EQU EXTI_IMR_MR8_Msk                            ;!< Interrupt Mask on line 8
EXTI_IMR_MR9_Pos           EQU (9)
EXTI_IMR_MR9_Msk           EQU (0x1 :SHL: EXTI_IMR_MR9_Pos)                  ;!< 0x00000200
EXTI_IMR_MR9               EQU EXTI_IMR_MR9_Msk                            ;!< Interrupt Mask on line 9
EXTI_IMR_MR10_Pos          EQU (10)
EXTI_IMR_MR10_Msk          EQU (0x1 :SHL: EXTI_IMR_MR10_Pos)                 ;!< 0x00000400
EXTI_IMR_MR10              EQU EXTI_IMR_MR10_Msk                           ;!< Interrupt Mask on line 10
EXTI_IMR_MR11_Pos          EQU (11)
EXTI_IMR_MR11_Msk          EQU (0x1 :SHL: EXTI_IMR_MR11_Pos)                 ;!< 0x00000800
EXTI_IMR_MR11              EQU EXTI_IMR_MR11_Msk                           ;!< Interrupt Mask on line 11
EXTI_IMR_MR12_Pos          EQU (12)
EXTI_IMR_MR12_Msk          EQU (0x1 :SHL: EXTI_IMR_MR12_Pos)                 ;!< 0x00001000
EXTI_IMR_MR12              EQU EXTI_IMR_MR12_Msk                           ;!< Interrupt Mask on line 12
EXTI_IMR_MR13_Pos          EQU (13)
EXTI_IMR_MR13_Msk          EQU (0x1 :SHL: EXTI_IMR_MR13_Pos)                 ;!< 0x00002000
EXTI_IMR_MR13              EQU EXTI_IMR_MR13_Msk                           ;!< Interrupt Mask on line 13
EXTI_IMR_MR14_Pos          EQU (14)
EXTI_IMR_MR14_Msk          EQU (0x1 :SHL: EXTI_IMR_MR14_Pos)                 ;!< 0x00004000
EXTI_IMR_MR14              EQU EXTI_IMR_MR14_Msk                           ;!< Interrupt Mask on line 14
EXTI_IMR_MR15_Pos          EQU (15)
EXTI_IMR_MR15_Msk          EQU (0x1 :SHL: EXTI_IMR_MR15_Pos)                 ;!< 0x00008000
EXTI_IMR_MR15              EQU EXTI_IMR_MR15_Msk                           ;!< Interrupt Mask on line 15
EXTI_IMR_MR16_Pos          EQU (16)
EXTI_IMR_MR16_Msk          EQU (0x1 :SHL: EXTI_IMR_MR16_Pos)                 ;!< 0x00010000
EXTI_IMR_MR16              EQU EXTI_IMR_MR16_Msk                           ;!< Interrupt Mask on line 16
EXTI_IMR_MR17_Pos          EQU (17)
EXTI_IMR_MR17_Msk          EQU (0x1 :SHL: EXTI_IMR_MR17_Pos)                 ;!< 0x00020000
EXTI_IMR_MR17              EQU EXTI_IMR_MR17_Msk                           ;!< Interrupt Mask on line 17
EXTI_IMR_MR18_Pos          EQU (18)
EXTI_IMR_MR18_Msk          EQU (0x1 :SHL: EXTI_IMR_MR18_Pos)                 ;!< 0x00040000
EXTI_IMR_MR18              EQU EXTI_IMR_MR18_Msk                           ;!< Interrupt Mask on line 18
EXTI_IMR_MR19_Pos          EQU (19)
EXTI_IMR_MR19_Msk          EQU (0x1 :SHL: EXTI_IMR_MR19_Pos)                 ;!< 0x00080000
EXTI_IMR_MR19              EQU EXTI_IMR_MR19_Msk                           ;!< Interrupt Mask on line 19
EXTI_IMR_MR20_Pos          EQU (20)
EXTI_IMR_MR20_Msk          EQU (0x1 :SHL: EXTI_IMR_MR20_Pos)                 ;!< 0x00100000
EXTI_IMR_MR20              EQU EXTI_IMR_MR20_Msk                           ;!< Interrupt Mask on line 20
EXTI_IMR_MR21_Pos          EQU (21)
EXTI_IMR_MR21_Msk          EQU (0x1 :SHL: EXTI_IMR_MR21_Pos)                 ;!< 0x00200000
EXTI_IMR_MR21              EQU EXTI_IMR_MR21_Msk                           ;!< Interrupt Mask on line 21
EXTI_IMR_MR22_Pos          EQU (22)
EXTI_IMR_MR22_Msk          EQU (0x1 :SHL: EXTI_IMR_MR22_Pos)                 ;!< 0x00400000
EXTI_IMR_MR22              EQU EXTI_IMR_MR22_Msk                           ;!< Interrupt Mask on line 22
EXTI_IMR_MR23_Pos          EQU (23)
EXTI_IMR_MR23_Msk          EQU (0x1 :SHL: EXTI_IMR_MR23_Pos)                 ;!< 0x00800000
EXTI_IMR_MR23              EQU EXTI_IMR_MR23_Msk                           ;!< Interrupt Mask on line 23
EXTI_IMR_MR24_Pos          EQU (24)
EXTI_IMR_MR24_Msk          EQU (0x1 :SHL: EXTI_IMR_MR24_Pos)                 ;!< 0x01000000
EXTI_IMR_MR24              EQU EXTI_IMR_MR24_Msk                           ;!< Interrupt Mask on line 24
EXTI_IMR_MR25_Pos          EQU (25)
EXTI_IMR_MR25_Msk          EQU (0x1 :SHL: EXTI_IMR_MR25_Pos)                 ;!< 0x02000000
EXTI_IMR_MR25              EQU EXTI_IMR_MR25_Msk                           ;!< Interrupt Mask on line 25
EXTI_IMR_MR26_Pos          EQU (26)
EXTI_IMR_MR26_Msk          EQU (0x1 :SHL: EXTI_IMR_MR26_Pos)                 ;!< 0x04000000
EXTI_IMR_MR26              EQU EXTI_IMR_MR26_Msk                           ;!< Interrupt Mask on line 26
EXTI_IMR_MR27_Pos          EQU (27)
EXTI_IMR_MR27_Msk          EQU (0x1 :SHL: EXTI_IMR_MR27_Pos)                 ;!< 0x08000000
EXTI_IMR_MR27              EQU EXTI_IMR_MR27_Msk                           ;!< Interrupt Mask on line 27
EXTI_IMR_MR28_Pos          EQU (28)
EXTI_IMR_MR28_Msk          EQU (0x1 :SHL: EXTI_IMR_MR28_Pos)                 ;!< 0x10000000
EXTI_IMR_MR28              EQU EXTI_IMR_MR28_Msk                           ;!< Interrupt Mask on line 28
EXTI_IMR_MR29_Pos          EQU (29)
EXTI_IMR_MR29_Msk          EQU (0x1 :SHL: EXTI_IMR_MR29_Pos)                 ;!< 0x20000000
EXTI_IMR_MR29              EQU EXTI_IMR_MR29_Msk                           ;!< Interrupt Mask on line 29
EXTI_IMR_MR30_Pos          EQU (30)
EXTI_IMR_MR30_Msk          EQU (0x1 :SHL: EXTI_IMR_MR30_Pos)                 ;!< 0x40000000
EXTI_IMR_MR30              EQU EXTI_IMR_MR30_Msk                           ;!< Interrupt Mask on line 30
EXTI_IMR_MR31_Pos          EQU (31)
EXTI_IMR_MR31_Msk          EQU (0x1 :SHL: EXTI_IMR_MR31_Pos)                 ;!< 0x80000000
EXTI_IMR_MR31              EQU EXTI_IMR_MR31_Msk                           ;!< Interrupt Mask on line 31

; References Defines
EXTI_IMR_IM0 EQU EXTI_IMR_MR0
EXTI_IMR_IM1 EQU EXTI_IMR_MR1
EXTI_IMR_IM2 EQU EXTI_IMR_MR2
EXTI_IMR_IM3 EQU EXTI_IMR_MR3
EXTI_IMR_IM4 EQU EXTI_IMR_MR4
EXTI_IMR_IM5 EQU EXTI_IMR_MR5
EXTI_IMR_IM6 EQU EXTI_IMR_MR6
EXTI_IMR_IM7 EQU EXTI_IMR_MR7
EXTI_IMR_IM8 EQU EXTI_IMR_MR8
EXTI_IMR_IM9 EQU EXTI_IMR_MR9
EXTI_IMR_IM10 EQU EXTI_IMR_MR10
EXTI_IMR_IM11 EQU EXTI_IMR_MR11
EXTI_IMR_IM12 EQU EXTI_IMR_MR12
EXTI_IMR_IM13 EQU EXTI_IMR_MR13
EXTI_IMR_IM14 EQU EXTI_IMR_MR14
EXTI_IMR_IM15 EQU EXTI_IMR_MR15
EXTI_IMR_IM16 EQU EXTI_IMR_MR16
EXTI_IMR_IM17 EQU EXTI_IMR_MR17
EXTI_IMR_IM18 EQU EXTI_IMR_MR18
EXTI_IMR_IM19 EQU EXTI_IMR_MR19
EXTI_IMR_IM20 EQU EXTI_IMR_MR20
EXTI_IMR_IM21 EQU EXTI_IMR_MR21
EXTI_IMR_IM22 EQU EXTI_IMR_MR22
EXTI_IMR_IM23 EQU EXTI_IMR_MR23
EXTI_IMR_IM24 EQU EXTI_IMR_MR24
EXTI_IMR_IM25 EQU EXTI_IMR_MR25
EXTI_IMR_IM26 EQU EXTI_IMR_MR26
EXTI_IMR_IM27 EQU EXTI_IMR_MR27
EXTI_IMR_IM28 EQU EXTI_IMR_MR28
EXTI_IMR_IM29 EQU EXTI_IMR_MR29
EXTI_IMR_IM30 EQU EXTI_IMR_MR30
EXTI_IMR_IM31 EQU EXTI_IMR_MR31

EXTI_IMR_IM_Pos            EQU (0)
EXTI_IMR_IM_Msk            EQU (0xFFFFFFFF :SHL: EXTI_IMR_IM_Pos)            ;!< 0xFFFFFFFF
EXTI_IMR_IM                EQU EXTI_IMR_IM_Msk                             ;!< Interrupt Mask All

;******************  Bit definition for EXTI_EMR register  ******************
EXTI_EMR_MR0_Pos           EQU (0)
EXTI_EMR_MR0_Msk           EQU (0x1 :SHL: EXTI_EMR_MR0_Pos)                  ;!< 0x00000001
EXTI_EMR_MR0               EQU EXTI_EMR_MR0_Msk                            ;!< Event Mask on line 0
EXTI_EMR_MR1_Pos           EQU (1)
EXTI_EMR_MR1_Msk           EQU (0x1 :SHL: EXTI_EMR_MR1_Pos)                  ;!< 0x00000002
EXTI_EMR_MR1               EQU EXTI_EMR_MR1_Msk                            ;!< Event Mask on line 1
EXTI_EMR_MR2_Pos           EQU (2)
EXTI_EMR_MR2_Msk           EQU (0x1 :SHL: EXTI_EMR_MR2_Pos)                  ;!< 0x00000004
EXTI_EMR_MR2               EQU EXTI_EMR_MR2_Msk                            ;!< Event Mask on line 2
EXTI_EMR_MR3_Pos           EQU (3)
EXTI_EMR_MR3_Msk           EQU (0x1 :SHL: EXTI_EMR_MR3_Pos)                  ;!< 0x00000008
EXTI_EMR_MR3               EQU EXTI_EMR_MR3_Msk                            ;!< Event Mask on line 3
EXTI_EMR_MR4_Pos           EQU (4)
EXTI_EMR_MR4_Msk           EQU (0x1 :SHL: EXTI_EMR_MR4_Pos)                  ;!< 0x00000010
EXTI_EMR_MR4               EQU EXTI_EMR_MR4_Msk                            ;!< Event Mask on line 4
EXTI_EMR_MR5_Pos           EQU (5)
EXTI_EMR_MR5_Msk           EQU (0x1 :SHL: EXTI_EMR_MR5_Pos)                  ;!< 0x00000020
EXTI_EMR_MR5               EQU EXTI_EMR_MR5_Msk                            ;!< Event Mask on line 5
EXTI_EMR_MR6_Pos           EQU (6)
EXTI_EMR_MR6_Msk           EQU (0x1 :SHL: EXTI_EMR_MR6_Pos)                  ;!< 0x00000040
EXTI_EMR_MR6               EQU EXTI_EMR_MR6_Msk                            ;!< Event Mask on line 6
EXTI_EMR_MR7_Pos           EQU (7)
EXTI_EMR_MR7_Msk           EQU (0x1 :SHL: EXTI_EMR_MR7_Pos)                  ;!< 0x00000080
EXTI_EMR_MR7               EQU EXTI_EMR_MR7_Msk                            ;!< Event Mask on line 7
EXTI_EMR_MR8_Pos           EQU (8)
EXTI_EMR_MR8_Msk           EQU (0x1 :SHL: EXTI_EMR_MR8_Pos)                  ;!< 0x00000100
EXTI_EMR_MR8               EQU EXTI_EMR_MR8_Msk                            ;!< Event Mask on line 8
EXTI_EMR_MR9_Pos           EQU (9)
EXTI_EMR_MR9_Msk           EQU (0x1 :SHL: EXTI_EMR_MR9_Pos)                  ;!< 0x00000200
EXTI_EMR_MR9               EQU EXTI_EMR_MR9_Msk                            ;!< Event Mask on line 9
EXTI_EMR_MR10_Pos          EQU (10)
EXTI_EMR_MR10_Msk          EQU (0x1 :SHL: EXTI_EMR_MR10_Pos)                 ;!< 0x00000400
EXTI_EMR_MR10              EQU EXTI_EMR_MR10_Msk                           ;!< Event Mask on line 10
EXTI_EMR_MR11_Pos          EQU (11)
EXTI_EMR_MR11_Msk          EQU (0x1 :SHL: EXTI_EMR_MR11_Pos)                 ;!< 0x00000800
EXTI_EMR_MR11              EQU EXTI_EMR_MR11_Msk                           ;!< Event Mask on line 11
EXTI_EMR_MR12_Pos          EQU (12)
EXTI_EMR_MR12_Msk          EQU (0x1 :SHL: EXTI_EMR_MR12_Pos)                 ;!< 0x00001000
EXTI_EMR_MR12              EQU EXTI_EMR_MR12_Msk                           ;!< Event Mask on line 12
EXTI_EMR_MR13_Pos          EQU (13)
EXTI_EMR_MR13_Msk          EQU (0x1 :SHL: EXTI_EMR_MR13_Pos)                 ;!< 0x00002000
EXTI_EMR_MR13              EQU EXTI_EMR_MR13_Msk                           ;!< Event Mask on line 13
EXTI_EMR_MR14_Pos          EQU (14)
EXTI_EMR_MR14_Msk          EQU (0x1 :SHL: EXTI_EMR_MR14_Pos)                 ;!< 0x00004000
EXTI_EMR_MR14              EQU EXTI_EMR_MR14_Msk                           ;!< Event Mask on line 14
EXTI_EMR_MR15_Pos          EQU (15)
EXTI_EMR_MR15_Msk          EQU (0x1 :SHL: EXTI_EMR_MR15_Pos)                 ;!< 0x00008000
EXTI_EMR_MR15              EQU EXTI_EMR_MR15_Msk                           ;!< Event Mask on line 15
EXTI_EMR_MR16_Pos          EQU (16)
EXTI_EMR_MR16_Msk          EQU (0x1 :SHL: EXTI_EMR_MR16_Pos)                 ;!< 0x00010000
EXTI_EMR_MR16              EQU EXTI_EMR_MR16_Msk                           ;!< Event Mask on line 16
EXTI_EMR_MR17_Pos          EQU (17)
EXTI_EMR_MR17_Msk          EQU (0x1 :SHL: EXTI_EMR_MR17_Pos)                 ;!< 0x00020000
EXTI_EMR_MR17              EQU EXTI_EMR_MR17_Msk                           ;!< Event Mask on line 17
EXTI_EMR_MR18_Pos          EQU (18)
EXTI_EMR_MR18_Msk          EQU (0x1 :SHL: EXTI_EMR_MR18_Pos)                 ;!< 0x00040000
EXTI_EMR_MR18              EQU EXTI_EMR_MR18_Msk                           ;!< Event Mask on line 18
EXTI_EMR_MR19_Pos          EQU (19)
EXTI_EMR_MR19_Msk          EQU (0x1 :SHL: EXTI_EMR_MR19_Pos)                 ;!< 0x00080000
EXTI_EMR_MR19              EQU EXTI_EMR_MR19_Msk                           ;!< Event Mask on line 19
EXTI_EMR_MR20_Pos          EQU (20)
EXTI_EMR_MR20_Msk          EQU (0x1 :SHL: EXTI_EMR_MR20_Pos)                 ;!< 0x00100000
EXTI_EMR_MR20              EQU EXTI_EMR_MR20_Msk                           ;!< Event Mask on line 20
EXTI_EMR_MR21_Pos          EQU (21)
EXTI_EMR_MR21_Msk          EQU (0x1 :SHL: EXTI_EMR_MR21_Pos)                 ;!< 0x00200000
EXTI_EMR_MR21              EQU EXTI_EMR_MR21_Msk                           ;!< Event Mask on line 21
EXTI_EMR_MR22_Pos          EQU (22)
EXTI_EMR_MR22_Msk          EQU (0x1 :SHL: EXTI_EMR_MR22_Pos)                 ;!< 0x00400000
EXTI_EMR_MR22              EQU EXTI_EMR_MR22_Msk                           ;!< Event Mask on line 22
EXTI_EMR_MR23_Pos          EQU (23)
EXTI_EMR_MR23_Msk          EQU (0x1 :SHL: EXTI_EMR_MR23_Pos)                 ;!< 0x00800000
EXTI_EMR_MR23              EQU EXTI_EMR_MR23_Msk                           ;!< Event Mask on line 23
EXTI_EMR_MR24_Pos          EQU (24)
EXTI_EMR_MR24_Msk          EQU (0x1 :SHL: EXTI_EMR_MR24_Pos)                 ;!< 0x01000000
EXTI_EMR_MR24              EQU EXTI_EMR_MR24_Msk                           ;!< Event Mask on line 24
EXTI_EMR_MR25_Pos          EQU (25)
EXTI_EMR_MR25_Msk          EQU (0x1 :SHL: EXTI_EMR_MR25_Pos)                 ;!< 0x02000000
EXTI_EMR_MR25              EQU EXTI_EMR_MR25_Msk                           ;!< Event Mask on line 25
EXTI_EMR_MR26_Pos          EQU (26)
EXTI_EMR_MR26_Msk          EQU (0x1 :SHL: EXTI_EMR_MR26_Pos)                 ;!< 0x04000000
EXTI_EMR_MR26              EQU EXTI_EMR_MR26_Msk                           ;!< Event Mask on line 26
EXTI_EMR_MR27_Pos          EQU (27)
EXTI_EMR_MR27_Msk          EQU (0x1 :SHL: EXTI_EMR_MR27_Pos)                 ;!< 0x08000000
EXTI_EMR_MR27              EQU EXTI_EMR_MR27_Msk                           ;!< Event Mask on line 27
EXTI_EMR_MR28_Pos          EQU (28)
EXTI_EMR_MR28_Msk          EQU (0x1 :SHL: EXTI_EMR_MR28_Pos)                 ;!< 0x10000000
EXTI_EMR_MR28              EQU EXTI_EMR_MR28_Msk                           ;!< Event Mask on line 28
EXTI_EMR_MR29_Pos          EQU (29)
EXTI_EMR_MR29_Msk          EQU (0x1 :SHL: EXTI_EMR_MR29_Pos)                 ;!< 0x20000000
EXTI_EMR_MR29              EQU EXTI_EMR_MR29_Msk                           ;!< Event Mask on line 29
EXTI_EMR_MR30_Pos          EQU (30)
EXTI_EMR_MR30_Msk          EQU (0x1 :SHL: EXTI_EMR_MR30_Pos)                 ;!< 0x40000000
EXTI_EMR_MR30              EQU EXTI_EMR_MR30_Msk                           ;!< Event Mask on line 30
EXTI_EMR_MR31_Pos          EQU (31)
EXTI_EMR_MR31_Msk          EQU (0x1 :SHL: EXTI_EMR_MR31_Pos)                 ;!< 0x80000000
EXTI_EMR_MR31              EQU EXTI_EMR_MR31_Msk                           ;!< Event Mask on line 31

; References Defines
EXTI_EMR_EM0 EQU EXTI_EMR_MR0
EXTI_EMR_EM1 EQU EXTI_EMR_MR1
EXTI_EMR_EM2 EQU EXTI_EMR_MR2
EXTI_EMR_EM3 EQU EXTI_EMR_MR3
EXTI_EMR_EM4 EQU EXTI_EMR_MR4
EXTI_EMR_EM5 EQU EXTI_EMR_MR5
EXTI_EMR_EM6 EQU EXTI_EMR_MR6
EXTI_EMR_EM7 EQU EXTI_EMR_MR7
EXTI_EMR_EM8 EQU EXTI_EMR_MR8
EXTI_EMR_EM9 EQU EXTI_EMR_MR9
EXTI_EMR_EM10 EQU EXTI_EMR_MR10
EXTI_EMR_EM11 EQU EXTI_EMR_MR11
EXTI_EMR_EM12 EQU EXTI_EMR_MR12
EXTI_EMR_EM13 EQU EXTI_EMR_MR13
EXTI_EMR_EM14 EQU EXTI_EMR_MR14
EXTI_EMR_EM15 EQU EXTI_EMR_MR15
EXTI_EMR_EM16 EQU EXTI_EMR_MR16
EXTI_EMR_EM17 EQU EXTI_EMR_MR17
EXTI_EMR_EM18 EQU EXTI_EMR_MR18
EXTI_EMR_EM19 EQU EXTI_EMR_MR19
EXTI_EMR_EM20 EQU EXTI_EMR_MR20
EXTI_EMR_EM21 EQU EXTI_EMR_MR21
EXTI_EMR_EM22 EQU EXTI_EMR_MR22
EXTI_EMR_EM23 EQU EXTI_EMR_MR23
EXTI_EMR_EM24 EQU EXTI_EMR_MR24
EXTI_EMR_EM25 EQU EXTI_EMR_MR25
EXTI_EMR_EM26 EQU EXTI_EMR_MR26
EXTI_EMR_EM27 EQU EXTI_EMR_MR27
EXTI_EMR_EM28 EQU EXTI_EMR_MR28
EXTI_EMR_EM29 EQU EXTI_EMR_MR29
EXTI_EMR_EM30 EQU EXTI_EMR_MR30
EXTI_EMR_EM31 EQU EXTI_EMR_MR31

;*****************  Bit definition for EXTI_RTSR register  ******************
EXTI_RTSR_TR0_Pos          EQU (0)
EXTI_RTSR_TR0_Msk          EQU (0x1 :SHL: EXTI_RTSR_TR0_Pos)                 ;!< 0x00000001
EXTI_RTSR_TR0              EQU EXTI_RTSR_TR0_Msk                           ;!< Rising trigger event configuration bit of line 0
EXTI_RTSR_TR1_Pos          EQU (1)
EXTI_RTSR_TR1_Msk          EQU (0x1 :SHL: EXTI_RTSR_TR1_Pos)                 ;!< 0x00000002
EXTI_RTSR_TR1              EQU EXTI_RTSR_TR1_Msk                           ;!< Rising trigger event configuration bit of line 1
EXTI_RTSR_TR2_Pos          EQU (2)
EXTI_RTSR_TR2_Msk          EQU (0x1 :SHL: EXTI_RTSR_TR2_Pos)                 ;!< 0x00000004
EXTI_RTSR_TR2              EQU EXTI_RTSR_TR2_Msk                           ;!< Rising trigger event configuration bit of line 2
EXTI_RTSR_TR3_Pos          EQU (3)
EXTI_RTSR_TR3_Msk          EQU (0x1 :SHL: EXTI_RTSR_TR3_Pos)                 ;!< 0x00000008
EXTI_RTSR_TR3              EQU EXTI_RTSR_TR3_Msk                           ;!< Rising trigger event configuration bit of line 3
EXTI_RTSR_TR4_Pos          EQU (4)
EXTI_RTSR_TR4_Msk          EQU (0x1 :SHL: EXTI_RTSR_TR4_Pos)                 ;!< 0x00000010
EXTI_RTSR_TR4              EQU EXTI_RTSR_TR4_Msk                           ;!< Rising trigger event configuration bit of line 4
EXTI_RTSR_TR5_Pos          EQU (5)
EXTI_RTSR_TR5_Msk          EQU (0x1 :SHL: EXTI_RTSR_TR5_Pos)                 ;!< 0x00000020
EXTI_RTSR_TR5              EQU EXTI_RTSR_TR5_Msk                           ;!< Rising trigger event configuration bit of line 5
EXTI_RTSR_TR6_Pos          EQU (6)
EXTI_RTSR_TR6_Msk          EQU (0x1 :SHL: EXTI_RTSR_TR6_Pos)                 ;!< 0x00000040
EXTI_RTSR_TR6              EQU EXTI_RTSR_TR6_Msk                           ;!< Rising trigger event configuration bit of line 6
EXTI_RTSR_TR7_Pos          EQU (7)
EXTI_RTSR_TR7_Msk          EQU (0x1 :SHL: EXTI_RTSR_TR7_Pos)                 ;!< 0x00000080
EXTI_RTSR_TR7              EQU EXTI_RTSR_TR7_Msk                           ;!< Rising trigger event configuration bit of line 7
EXTI_RTSR_TR8_Pos          EQU (8)
EXTI_RTSR_TR8_Msk          EQU (0x1 :SHL: EXTI_RTSR_TR8_Pos)                 ;!< 0x00000100
EXTI_RTSR_TR8              EQU EXTI_RTSR_TR8_Msk                           ;!< Rising trigger event configuration bit of line 8
EXTI_RTSR_TR9_Pos          EQU (9)
EXTI_RTSR_TR9_Msk          EQU (0x1 :SHL: EXTI_RTSR_TR9_Pos)                 ;!< 0x00000200
EXTI_RTSR_TR9              EQU EXTI_RTSR_TR9_Msk                           ;!< Rising trigger event configuration bit of line 9
EXTI_RTSR_TR10_Pos         EQU (10)
EXTI_RTSR_TR10_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR10_Pos)                ;!< 0x00000400
EXTI_RTSR_TR10             EQU EXTI_RTSR_TR10_Msk                          ;!< Rising trigger event configuration bit of line 10
EXTI_RTSR_TR11_Pos         EQU (11)
EXTI_RTSR_TR11_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR11_Pos)                ;!< 0x00000800
EXTI_RTSR_TR11             EQU EXTI_RTSR_TR11_Msk                          ;!< Rising trigger event configuration bit of line 11
EXTI_RTSR_TR12_Pos         EQU (12)
EXTI_RTSR_TR12_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR12_Pos)                ;!< 0x00001000
EXTI_RTSR_TR12             EQU EXTI_RTSR_TR12_Msk                          ;!< Rising trigger event configuration bit of line 12
EXTI_RTSR_TR13_Pos         EQU (13)
EXTI_RTSR_TR13_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR13_Pos)                ;!< 0x00002000
EXTI_RTSR_TR13             EQU EXTI_RTSR_TR13_Msk                          ;!< Rising trigger event configuration bit of line 13
EXTI_RTSR_TR14_Pos         EQU (14)
EXTI_RTSR_TR14_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR14_Pos)                ;!< 0x00004000
EXTI_RTSR_TR14             EQU EXTI_RTSR_TR14_Msk                          ;!< Rising trigger event configuration bit of line 14
EXTI_RTSR_TR15_Pos         EQU (15)
EXTI_RTSR_TR15_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR15_Pos)                ;!< 0x00008000
EXTI_RTSR_TR15             EQU EXTI_RTSR_TR15_Msk                          ;!< Rising trigger event configuration bit of line 15
EXTI_RTSR_TR16_Pos         EQU (16)
EXTI_RTSR_TR16_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR16_Pos)                ;!< 0x00010000
EXTI_RTSR_TR16             EQU EXTI_RTSR_TR16_Msk                          ;!< Rising trigger event configuration bit of line 16
EXTI_RTSR_TR17_Pos         EQU (17)
EXTI_RTSR_TR17_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR17_Pos)                ;!< 0x00020000
EXTI_RTSR_TR17             EQU EXTI_RTSR_TR17_Msk                          ;!< Rising trigger event configuration bit of line 17
EXTI_RTSR_TR18_Pos         EQU (18)
EXTI_RTSR_TR18_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR18_Pos)                ;!< 0x00040000
EXTI_RTSR_TR18             EQU EXTI_RTSR_TR18_Msk                          ;!< Rising trigger event configuration bit of line 18
EXTI_RTSR_TR19_Pos         EQU (19)
EXTI_RTSR_TR19_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR19_Pos)                ;!< 0x00080000
EXTI_RTSR_TR19             EQU EXTI_RTSR_TR19_Msk                          ;!< Rising trigger event configuration bit of line 19
EXTI_RTSR_TR20_Pos         EQU (20)
EXTI_RTSR_TR20_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR20_Pos)                ;!< 0x00100000
EXTI_RTSR_TR20             EQU EXTI_RTSR_TR20_Msk                          ;!< Rising trigger event configuration bit of line 20
EXTI_RTSR_TR21_Pos         EQU (21)
EXTI_RTSR_TR21_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR21_Pos)                ;!< 0x00200000
EXTI_RTSR_TR21             EQU EXTI_RTSR_TR21_Msk                          ;!< Rising trigger event configuration bit of line 21
EXTI_RTSR_TR22_Pos         EQU (22)
EXTI_RTSR_TR22_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR22_Pos)                ;!< 0x00400000
EXTI_RTSR_TR22             EQU EXTI_RTSR_TR22_Msk                          ;!< Rising trigger event configuration bit of line 22
EXTI_RTSR_TR29_Pos         EQU (29)
EXTI_RTSR_TR29_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR29_Pos)                ;!< 0x20000000
EXTI_RTSR_TR29             EQU EXTI_RTSR_TR29_Msk                          ;!< Rising trigger event configuration bit of line 29
EXTI_RTSR_TR30_Pos         EQU (30)
EXTI_RTSR_TR30_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR30_Pos)                ;!< 0x40000000
EXTI_RTSR_TR30             EQU EXTI_RTSR_TR30_Msk                          ;!< Rising trigger event configuration bit of line 30
EXTI_RTSR_TR31_Pos         EQU (31)
EXTI_RTSR_TR31_Msk         EQU (0x1 :SHL: EXTI_RTSR_TR31_Pos)                ;!< 0x80000000
EXTI_RTSR_TR31             EQU EXTI_RTSR_TR31_Msk                          ;!< Rising trigger event configuration bit of line 31

;*****************  Bit definition for EXTI_FTSR register  ******************
EXTI_FTSR_TR0_Pos          EQU (0)
EXTI_FTSR_TR0_Msk          EQU (0x1 :SHL: EXTI_FTSR_TR0_Pos)                 ;!< 0x00000001
EXTI_FTSR_TR0              EQU EXTI_FTSR_TR0_Msk                           ;!< Falling trigger event configuration bit of line 0
EXTI_FTSR_TR1_Pos          EQU (1)
EXTI_FTSR_TR1_Msk          EQU (0x1 :SHL: EXTI_FTSR_TR1_Pos)                 ;!< 0x00000002
EXTI_FTSR_TR1              EQU EXTI_FTSR_TR1_Msk                           ;!< Falling trigger event configuration bit of line 1
EXTI_FTSR_TR2_Pos          EQU (2)
EXTI_FTSR_TR2_Msk          EQU (0x1 :SHL: EXTI_FTSR_TR2_Pos)                 ;!< 0x00000004
EXTI_FTSR_TR2              EQU EXTI_FTSR_TR2_Msk                           ;!< Falling trigger event configuration bit of line 2
EXTI_FTSR_TR3_Pos          EQU (3)
EXTI_FTSR_TR3_Msk          EQU (0x1 :SHL: EXTI_FTSR_TR3_Pos)                 ;!< 0x00000008
EXTI_FTSR_TR3              EQU EXTI_FTSR_TR3_Msk                           ;!< Falling trigger event configuration bit of line 3
EXTI_FTSR_TR4_Pos          EQU (4)
EXTI_FTSR_TR4_Msk          EQU (0x1 :SHL: EXTI_FTSR_TR4_Pos)                 ;!< 0x00000010
EXTI_FTSR_TR4              EQU EXTI_FTSR_TR4_Msk                           ;!< Falling trigger event configuration bit of line 4
EXTI_FTSR_TR5_Pos          EQU (5)
EXTI_FTSR_TR5_Msk          EQU (0x1 :SHL: EXTI_FTSR_TR5_Pos)                 ;!< 0x00000020
EXTI_FTSR_TR5              EQU EXTI_FTSR_TR5_Msk                           ;!< Falling trigger event configuration bit of line 5
EXTI_FTSR_TR6_Pos          EQU (6)
EXTI_FTSR_TR6_Msk          EQU (0x1 :SHL: EXTI_FTSR_TR6_Pos)                 ;!< 0x00000040
EXTI_FTSR_TR6              EQU EXTI_FTSR_TR6_Msk                           ;!< Falling trigger event configuration bit of line 6
EXTI_FTSR_TR7_Pos          EQU (7)
EXTI_FTSR_TR7_Msk          EQU (0x1 :SHL: EXTI_FTSR_TR7_Pos)                 ;!< 0x00000080
EXTI_FTSR_TR7              EQU EXTI_FTSR_TR7_Msk                           ;!< Falling trigger event configuration bit of line 7
EXTI_FTSR_TR8_Pos          EQU (8)
EXTI_FTSR_TR8_Msk          EQU (0x1 :SHL: EXTI_FTSR_TR8_Pos)                 ;!< 0x00000100
EXTI_FTSR_TR8              EQU EXTI_FTSR_TR8_Msk                           ;!< Falling trigger event configuration bit of line 8
EXTI_FTSR_TR9_Pos          EQU (9)
EXTI_FTSR_TR9_Msk          EQU (0x1 :SHL: EXTI_FTSR_TR9_Pos)                 ;!< 0x00000200
EXTI_FTSR_TR9              EQU EXTI_FTSR_TR9_Msk                           ;!< Falling trigger event configuration bit of line 9
EXTI_FTSR_TR10_Pos         EQU (10)
EXTI_FTSR_TR10_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR10_Pos)                ;!< 0x00000400
EXTI_FTSR_TR10             EQU EXTI_FTSR_TR10_Msk                          ;!< Falling trigger event configuration bit of line 10
EXTI_FTSR_TR11_Pos         EQU (11)
EXTI_FTSR_TR11_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR11_Pos)                ;!< 0x00000800
EXTI_FTSR_TR11             EQU EXTI_FTSR_TR11_Msk                          ;!< Falling trigger event configuration bit of line 11
EXTI_FTSR_TR12_Pos         EQU (12)
EXTI_FTSR_TR12_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR12_Pos)                ;!< 0x00001000
EXTI_FTSR_TR12             EQU EXTI_FTSR_TR12_Msk                          ;!< Falling trigger event configuration bit of line 12
EXTI_FTSR_TR13_Pos         EQU (13)
EXTI_FTSR_TR13_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR13_Pos)                ;!< 0x00002000
EXTI_FTSR_TR13             EQU EXTI_FTSR_TR13_Msk                          ;!< Falling trigger event configuration bit of line 13
EXTI_FTSR_TR14_Pos         EQU (14)
EXTI_FTSR_TR14_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR14_Pos)                ;!< 0x00004000
EXTI_FTSR_TR14             EQU EXTI_FTSR_TR14_Msk                          ;!< Falling trigger event configuration bit of line 14
EXTI_FTSR_TR15_Pos         EQU (15)
EXTI_FTSR_TR15_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR15_Pos)                ;!< 0x00008000
EXTI_FTSR_TR15             EQU EXTI_FTSR_TR15_Msk                          ;!< Falling trigger event configuration bit of line 15
EXTI_FTSR_TR16_Pos         EQU (16)
EXTI_FTSR_TR16_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR16_Pos)                ;!< 0x00010000
EXTI_FTSR_TR16             EQU EXTI_FTSR_TR16_Msk                          ;!< Falling trigger event configuration bit of line 16
EXTI_FTSR_TR17_Pos         EQU (17)
EXTI_FTSR_TR17_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR17_Pos)                ;!< 0x00020000
EXTI_FTSR_TR17             EQU EXTI_FTSR_TR17_Msk                          ;!< Falling trigger event configuration bit of line 17
EXTI_FTSR_TR18_Pos         EQU (18)
EXTI_FTSR_TR18_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR18_Pos)                ;!< 0x00040000
EXTI_FTSR_TR18             EQU EXTI_FTSR_TR18_Msk                          ;!< Falling trigger event configuration bit of line 18
EXTI_FTSR_TR19_Pos         EQU (19)
EXTI_FTSR_TR19_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR19_Pos)                ;!< 0x00080000
EXTI_FTSR_TR19             EQU EXTI_FTSR_TR19_Msk                          ;!< Falling trigger event configuration bit of line 19
EXTI_FTSR_TR20_Pos         EQU (20)
EXTI_FTSR_TR20_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR20_Pos)                ;!< 0x00100000
EXTI_FTSR_TR20             EQU EXTI_FTSR_TR20_Msk                          ;!< Falling trigger event configuration bit of line 20
EXTI_FTSR_TR21_Pos         EQU (21)
EXTI_FTSR_TR21_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR21_Pos)                ;!< 0x00200000
EXTI_FTSR_TR21             EQU EXTI_FTSR_TR21_Msk                          ;!< Falling trigger event configuration bit of line 21
EXTI_FTSR_TR22_Pos         EQU (22)
EXTI_FTSR_TR22_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR22_Pos)                ;!< 0x00400000
EXTI_FTSR_TR22             EQU EXTI_FTSR_TR22_Msk                          ;!< Falling trigger event configuration bit of line 22
EXTI_FTSR_TR29_Pos         EQU (29)
EXTI_FTSR_TR29_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR29_Pos)                ;!< 0x20000000
EXTI_FTSR_TR29             EQU EXTI_FTSR_TR29_Msk                          ;!< Falling trigger event configuration bit of line 29
EXTI_FTSR_TR30_Pos         EQU (30)
EXTI_FTSR_TR30_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR30_Pos)                ;!< 0x40000000
EXTI_FTSR_TR30             EQU EXTI_FTSR_TR30_Msk                          ;!< Falling trigger event configuration bit of line 30
EXTI_FTSR_TR31_Pos         EQU (31)
EXTI_FTSR_TR31_Msk         EQU (0x1 :SHL: EXTI_FTSR_TR31_Pos)                ;!< 0x80000000
EXTI_FTSR_TR31             EQU EXTI_FTSR_TR31_Msk                          ;!< Falling trigger event configuration bit of line 31

;*****************  Bit definition for EXTI_SWIER register  *****************
EXTI_SWIER_SWIER0_Pos      EQU (0)
EXTI_SWIER_SWIER0_Msk      EQU (0x1 :SHL: EXTI_SWIER_SWIER0_Pos)             ;!< 0x00000001
EXTI_SWIER_SWIER0          EQU EXTI_SWIER_SWIER0_Msk                       ;!< Software Interrupt on line 0
EXTI_SWIER_SWIER1_Pos      EQU (1)
EXTI_SWIER_SWIER1_Msk      EQU (0x1 :SHL: EXTI_SWIER_SWIER1_Pos)             ;!< 0x00000002
EXTI_SWIER_SWIER1          EQU EXTI_SWIER_SWIER1_Msk                       ;!< Software Interrupt on line 1
EXTI_SWIER_SWIER2_Pos      EQU (2)
EXTI_SWIER_SWIER2_Msk      EQU (0x1 :SHL: EXTI_SWIER_SWIER2_Pos)             ;!< 0x00000004
EXTI_SWIER_SWIER2          EQU EXTI_SWIER_SWIER2_Msk                       ;!< Software Interrupt on line 2
EXTI_SWIER_SWIER3_Pos      EQU (3)
EXTI_SWIER_SWIER3_Msk      EQU (0x1 :SHL: EXTI_SWIER_SWIER3_Pos)             ;!< 0x00000008
EXTI_SWIER_SWIER3          EQU EXTI_SWIER_SWIER3_Msk                       ;!< Software Interrupt on line 3
EXTI_SWIER_SWIER4_Pos      EQU (4)
EXTI_SWIER_SWIER4_Msk      EQU (0x1 :SHL: EXTI_SWIER_SWIER4_Pos)             ;!< 0x00000010
EXTI_SWIER_SWIER4          EQU EXTI_SWIER_SWIER4_Msk                       ;!< Software Interrupt on line 4
EXTI_SWIER_SWIER5_Pos      EQU (5)
EXTI_SWIER_SWIER5_Msk      EQU (0x1 :SHL: EXTI_SWIER_SWIER5_Pos)             ;!< 0x00000020
EXTI_SWIER_SWIER5          EQU EXTI_SWIER_SWIER5_Msk                       ;!< Software Interrupt on line 5
EXTI_SWIER_SWIER6_Pos      EQU (6)
EXTI_SWIER_SWIER6_Msk      EQU (0x1 :SHL: EXTI_SWIER_SWIER6_Pos)             ;!< 0x00000040
EXTI_SWIER_SWIER6          EQU EXTI_SWIER_SWIER6_Msk                       ;!< Software Interrupt on line 6
EXTI_SWIER_SWIER7_Pos      EQU (7)
EXTI_SWIER_SWIER7_Msk      EQU (0x1 :SHL: EXTI_SWIER_SWIER7_Pos)             ;!< 0x00000080
EXTI_SWIER_SWIER7          EQU EXTI_SWIER_SWIER7_Msk                       ;!< Software Interrupt on line 7
EXTI_SWIER_SWIER8_Pos      EQU (8)
EXTI_SWIER_SWIER8_Msk      EQU (0x1 :SHL: EXTI_SWIER_SWIER8_Pos)             ;!< 0x00000100
EXTI_SWIER_SWIER8          EQU EXTI_SWIER_SWIER8_Msk                       ;!< Software Interrupt on line 8
EXTI_SWIER_SWIER9_Pos      EQU (9)
EXTI_SWIER_SWIER9_Msk      EQU (0x1 :SHL: EXTI_SWIER_SWIER9_Pos)             ;!< 0x00000200
EXTI_SWIER_SWIER9          EQU EXTI_SWIER_SWIER9_Msk                       ;!< Software Interrupt on line 9
EXTI_SWIER_SWIER10_Pos     EQU (10)
EXTI_SWIER_SWIER10_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER10_Pos)            ;!< 0x00000400
EXTI_SWIER_SWIER10         EQU EXTI_SWIER_SWIER10_Msk                      ;!< Software Interrupt on line 10
EXTI_SWIER_SWIER11_Pos     EQU (11)
EXTI_SWIER_SWIER11_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER11_Pos)            ;!< 0x00000800
EXTI_SWIER_SWIER11         EQU EXTI_SWIER_SWIER11_Msk                      ;!< Software Interrupt on line 11
EXTI_SWIER_SWIER12_Pos     EQU (12)
EXTI_SWIER_SWIER12_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER12_Pos)            ;!< 0x00001000
EXTI_SWIER_SWIER12         EQU EXTI_SWIER_SWIER12_Msk                      ;!< Software Interrupt on line 12
EXTI_SWIER_SWIER13_Pos     EQU (13)
EXTI_SWIER_SWIER13_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER13_Pos)            ;!< 0x00002000
EXTI_SWIER_SWIER13         EQU EXTI_SWIER_SWIER13_Msk                      ;!< Software Interrupt on line 13
EXTI_SWIER_SWIER14_Pos     EQU (14)
EXTI_SWIER_SWIER14_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER14_Pos)            ;!< 0x00004000
EXTI_SWIER_SWIER14         EQU EXTI_SWIER_SWIER14_Msk                      ;!< Software Interrupt on line 14
EXTI_SWIER_SWIER15_Pos     EQU (15)
EXTI_SWIER_SWIER15_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER15_Pos)            ;!< 0x00008000
EXTI_SWIER_SWIER15         EQU EXTI_SWIER_SWIER15_Msk                      ;!< Software Interrupt on line 15
EXTI_SWIER_SWIER16_Pos     EQU (16)
EXTI_SWIER_SWIER16_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER16_Pos)            ;!< 0x00010000
EXTI_SWIER_SWIER16         EQU EXTI_SWIER_SWIER16_Msk                      ;!< Software Interrupt on line 16
EXTI_SWIER_SWIER17_Pos     EQU (17)
EXTI_SWIER_SWIER17_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER17_Pos)            ;!< 0x00020000
EXTI_SWIER_SWIER17         EQU EXTI_SWIER_SWIER17_Msk                      ;!< Software Interrupt on line 17
EXTI_SWIER_SWIER18_Pos     EQU (18)
EXTI_SWIER_SWIER18_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER18_Pos)            ;!< 0x00040000
EXTI_SWIER_SWIER18         EQU EXTI_SWIER_SWIER18_Msk                      ;!< Software Interrupt on line 18
EXTI_SWIER_SWIER19_Pos     EQU (19)
EXTI_SWIER_SWIER19_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER19_Pos)            ;!< 0x00080000
EXTI_SWIER_SWIER19         EQU EXTI_SWIER_SWIER19_Msk                      ;!< Software Interrupt on line 19
EXTI_SWIER_SWIER20_Pos     EQU (20)
EXTI_SWIER_SWIER20_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER20_Pos)            ;!< 0x00100000
EXTI_SWIER_SWIER20         EQU EXTI_SWIER_SWIER20_Msk                      ;!< Software Interrupt on line 20
EXTI_SWIER_SWIER21_Pos     EQU (21)
EXTI_SWIER_SWIER21_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER21_Pos)            ;!< 0x00200000
EXTI_SWIER_SWIER21         EQU EXTI_SWIER_SWIER21_Msk                      ;!< Software Interrupt on line 21
EXTI_SWIER_SWIER22_Pos     EQU (22)
EXTI_SWIER_SWIER22_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER22_Pos)            ;!< 0x00400000
EXTI_SWIER_SWIER22         EQU EXTI_SWIER_SWIER22_Msk                      ;!< Software Interrupt on line 22
EXTI_SWIER_SWIER29_Pos     EQU (29)
EXTI_SWIER_SWIER29_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER29_Pos)            ;!< 0x20000000
EXTI_SWIER_SWIER29         EQU EXTI_SWIER_SWIER29_Msk                      ;!< Software Interrupt on line 29
EXTI_SWIER_SWIER30_Pos     EQU (30)
EXTI_SWIER_SWIER30_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER30_Pos)            ;!< 0x40000000
EXTI_SWIER_SWIER30         EQU EXTI_SWIER_SWIER30_Msk                      ;!< Software Interrupt on line 30
EXTI_SWIER_SWIER31_Pos     EQU (31)
EXTI_SWIER_SWIER31_Msk     EQU (0x1 :SHL: EXTI_SWIER_SWIER31_Pos)            ;!< 0x80000000
EXTI_SWIER_SWIER31         EQU EXTI_SWIER_SWIER31_Msk                      ;!< Software Interrupt on line 31

;******************  Bit definition for EXTI_PR register  *******************
EXTI_PR_PR0_Pos            EQU (0)
EXTI_PR_PR0_Msk            EQU (0x1 :SHL: EXTI_PR_PR0_Pos)                   ;!< 0x00000001
EXTI_PR_PR0                EQU EXTI_PR_PR0_Msk                             ;!< Pending bit for line 0
EXTI_PR_PR1_Pos            EQU (1)
EXTI_PR_PR1_Msk            EQU (0x1 :SHL: EXTI_PR_PR1_Pos)                   ;!< 0x00000002
EXTI_PR_PR1                EQU EXTI_PR_PR1_Msk                             ;!< Pending bit for line 1
EXTI_PR_PR2_Pos            EQU (2)
EXTI_PR_PR2_Msk            EQU (0x1 :SHL: EXTI_PR_PR2_Pos)                   ;!< 0x00000004
EXTI_PR_PR2                EQU EXTI_PR_PR2_Msk                             ;!< Pending bit for line 2
EXTI_PR_PR3_Pos            EQU (3)
EXTI_PR_PR3_Msk            EQU (0x1 :SHL: EXTI_PR_PR3_Pos)                   ;!< 0x00000008
EXTI_PR_PR3                EQU EXTI_PR_PR3_Msk                             ;!< Pending bit for line 3
EXTI_PR_PR4_Pos            EQU (4)
EXTI_PR_PR4_Msk            EQU (0x1 :SHL: EXTI_PR_PR4_Pos)                   ;!< 0x00000010
EXTI_PR_PR4                EQU EXTI_PR_PR4_Msk                             ;!< Pending bit for line 4
EXTI_PR_PR5_Pos            EQU (5)
EXTI_PR_PR5_Msk            EQU (0x1 :SHL: EXTI_PR_PR5_Pos)                   ;!< 0x00000020
EXTI_PR_PR5                EQU EXTI_PR_PR5_Msk                             ;!< Pending bit for line 5
EXTI_PR_PR6_Pos            EQU (6)
EXTI_PR_PR6_Msk            EQU (0x1 :SHL: EXTI_PR_PR6_Pos)                   ;!< 0x00000040
EXTI_PR_PR6                EQU EXTI_PR_PR6_Msk                             ;!< Pending bit for line 6
EXTI_PR_PR7_Pos            EQU (7)
EXTI_PR_PR7_Msk            EQU (0x1 :SHL: EXTI_PR_PR7_Pos)                   ;!< 0x00000080
EXTI_PR_PR7                EQU EXTI_PR_PR7_Msk                             ;!< Pending bit for line 7
EXTI_PR_PR8_Pos            EQU (8)
EXTI_PR_PR8_Msk            EQU (0x1 :SHL: EXTI_PR_PR8_Pos)                   ;!< 0x00000100
EXTI_PR_PR8                EQU EXTI_PR_PR8_Msk                             ;!< Pending bit for line 8
EXTI_PR_PR9_Pos            EQU (9)
EXTI_PR_PR9_Msk            EQU (0x1 :SHL: EXTI_PR_PR9_Pos)                   ;!< 0x00000200
EXTI_PR_PR9                EQU EXTI_PR_PR9_Msk                             ;!< Pending bit for line 9
EXTI_PR_PR10_Pos           EQU (10)
EXTI_PR_PR10_Msk           EQU (0x1 :SHL: EXTI_PR_PR10_Pos)                  ;!< 0x00000400
EXTI_PR_PR10               EQU EXTI_PR_PR10_Msk                            ;!< Pending bit for line 10
EXTI_PR_PR11_Pos           EQU (11)
EXTI_PR_PR11_Msk           EQU (0x1 :SHL: EXTI_PR_PR11_Pos)                  ;!< 0x00000800
EXTI_PR_PR11               EQU EXTI_PR_PR11_Msk                            ;!< Pending bit for line 11
EXTI_PR_PR12_Pos           EQU (12)
EXTI_PR_PR12_Msk           EQU (0x1 :SHL: EXTI_PR_PR12_Pos)                  ;!< 0x00001000
EXTI_PR_PR12               EQU EXTI_PR_PR12_Msk                            ;!< Pending bit for line 12
EXTI_PR_PR13_Pos           EQU (13)
EXTI_PR_PR13_Msk           EQU (0x1 :SHL: EXTI_PR_PR13_Pos)                  ;!< 0x00002000
EXTI_PR_PR13               EQU EXTI_PR_PR13_Msk                            ;!< Pending bit for line 13
EXTI_PR_PR14_Pos           EQU (14)
EXTI_PR_PR14_Msk           EQU (0x1 :SHL: EXTI_PR_PR14_Pos)                  ;!< 0x00004000
EXTI_PR_PR14               EQU EXTI_PR_PR14_Msk                            ;!< Pending bit for line 14
EXTI_PR_PR15_Pos           EQU (15)
EXTI_PR_PR15_Msk           EQU (0x1 :SHL: EXTI_PR_PR15_Pos)                  ;!< 0x00008000
EXTI_PR_PR15               EQU EXTI_PR_PR15_Msk                            ;!< Pending bit for line 15
EXTI_PR_PR16_Pos           EQU (16)
EXTI_PR_PR16_Msk           EQU (0x1 :SHL: EXTI_PR_PR16_Pos)                  ;!< 0x00010000
EXTI_PR_PR16               EQU EXTI_PR_PR16_Msk                            ;!< Pending bit for line 16
EXTI_PR_PR17_Pos           EQU (17)
EXTI_PR_PR17_Msk           EQU (0x1 :SHL: EXTI_PR_PR17_Pos)                  ;!< 0x00020000
EXTI_PR_PR17               EQU EXTI_PR_PR17_Msk                            ;!< Pending bit for line 17
EXTI_PR_PR18_Pos           EQU (18)
EXTI_PR_PR18_Msk           EQU (0x1 :SHL: EXTI_PR_PR18_Pos)                  ;!< 0x00040000
EXTI_PR_PR18               EQU EXTI_PR_PR18_Msk                            ;!< Pending bit for line 18
EXTI_PR_PR19_Pos           EQU (19)
EXTI_PR_PR19_Msk           EQU (0x1 :SHL: EXTI_PR_PR19_Pos)                  ;!< 0x00080000
EXTI_PR_PR19               EQU EXTI_PR_PR19_Msk                            ;!< Pending bit for line 19
EXTI_PR_PR20_Pos           EQU (20)
EXTI_PR_PR20_Msk           EQU (0x1 :SHL: EXTI_PR_PR20_Pos)                  ;!< 0x00100000
EXTI_PR_PR20               EQU EXTI_PR_PR20_Msk                            ;!< Pending bit for line 20
EXTI_PR_PR21_Pos           EQU (21)
EXTI_PR_PR21_Msk           EQU (0x1 :SHL: EXTI_PR_PR21_Pos)                  ;!< 0x00200000
EXTI_PR_PR21               EQU EXTI_PR_PR21_Msk                            ;!< Pending bit for line 21
EXTI_PR_PR22_Pos           EQU (22)
EXTI_PR_PR22_Msk           EQU (0x1 :SHL: EXTI_PR_PR22_Pos)                  ;!< 0x00400000
EXTI_PR_PR22               EQU EXTI_PR_PR22_Msk                            ;!< Pending bit for line 22
EXTI_PR_PR29_Pos           EQU (29)
EXTI_PR_PR29_Msk           EQU (0x1 :SHL: EXTI_PR_PR29_Pos)                  ;!< 0x20000000
EXTI_PR_PR29               EQU EXTI_PR_PR29_Msk                            ;!< Pending bit for line 29
EXTI_PR_PR30_Pos           EQU (30)
EXTI_PR_PR30_Msk           EQU (0x1 :SHL: EXTI_PR_PR30_Pos)                  ;!< 0x40000000
EXTI_PR_PR30               EQU EXTI_PR_PR30_Msk                            ;!< Pending bit for line 30
EXTI_PR_PR31_Pos           EQU (31)
EXTI_PR_PR31_Msk           EQU (0x1 :SHL: EXTI_PR_PR31_Pos)                  ;!< 0x80000000
EXTI_PR_PR31               EQU EXTI_PR_PR31_Msk                            ;!< Pending bit for line 31

;******************  Bit definition for EXTI_IMR2 register  *****************
EXTI_IMR2_MR32_Pos         EQU (0)
EXTI_IMR2_MR32_Msk         EQU (0x1 :SHL: EXTI_IMR2_MR32_Pos)                ;!< 0x00000001
EXTI_IMR2_MR32             EQU EXTI_IMR2_MR32_Msk                          ;!< Interrupt Mask on line 32
EXTI_IMR2_MR33_Pos         EQU (1)
EXTI_IMR2_MR33_Msk         EQU (0x1 :SHL: EXTI_IMR2_MR33_Pos)                ;!< 0x00000002
EXTI_IMR2_MR33             EQU EXTI_IMR2_MR33_Msk                          ;!< Interrupt Mask on line 33
EXTI_IMR2_MR34_Pos         EQU (2)
EXTI_IMR2_MR34_Msk         EQU (0x1 :SHL: EXTI_IMR2_MR34_Pos)                ;!< 0x00000004
EXTI_IMR2_MR34             EQU EXTI_IMR2_MR34_Msk                          ;!< Interrupt Mask on line 34
EXTI_IMR2_MR35_Pos         EQU (3)
EXTI_IMR2_MR35_Msk         EQU (0x1 :SHL: EXTI_IMR2_MR35_Pos)                ;!< 0x00000008
EXTI_IMR2_MR35             EQU EXTI_IMR2_MR35_Msk                          ;!< Interrupt Mask on line 35

; References Defines

EXTI_IMR2_IM32 EQU EXTI_IMR2_MR32
EXTI_IMR2_IM33 EQU EXTI_IMR2_MR33
EXTI_IMR2_IM34 EQU EXTI_IMR2_MR34
EXTI_IMR2_IM35 EQU EXTI_IMR2_MR35

EXTI_IMR2_IM_Pos           EQU (0)
EXTI_IMR2_IM_Msk           EQU (0xF :SHL: EXTI_IMR2_IM_Pos)                  ;!< 0x0000000F
EXTI_IMR2_IM               EQU EXTI_IMR2_IM_Msk

;******************  Bit definition for EXTI_EMR2 ***************************
EXTI_EMR2_MR32_Pos         EQU (0)
EXTI_EMR2_MR32_Msk         EQU (0x1 :SHL: EXTI_EMR2_MR32_Pos)                ;!< 0x00000001
EXTI_EMR2_MR32             EQU EXTI_EMR2_MR32_Msk                          ;!< Event Mask on line 32
EXTI_EMR2_MR33_Pos         EQU (1)
EXTI_EMR2_MR33_Msk         EQU (0x1 :SHL: EXTI_EMR2_MR33_Pos)                ;!< 0x00000002
EXTI_EMR2_MR33             EQU EXTI_EMR2_MR33_Msk                          ;!< Event Mask on line 33
EXTI_EMR2_MR34_Pos         EQU (2)
EXTI_EMR2_MR34_Msk         EQU (0x1 :SHL: EXTI_EMR2_MR34_Pos)                ;!< 0x00000004
EXTI_EMR2_MR34             EQU EXTI_EMR2_MR34_Msk                          ;!< Event Mask on line 34
EXTI_EMR2_MR35_Pos         EQU (3)
EXTI_EMR2_MR35_Msk         EQU (0x1 :SHL: EXTI_EMR2_MR35_Pos)                ;!< 0x00000008
EXTI_EMR2_MR35             EQU EXTI_EMR2_MR35_Msk                          ;!< Event Mask on line 34

; References Defines
EXTI_EMR2_EM32 EQU EXTI_EMR2_MR32
EXTI_EMR2_EM33 EQU EXTI_EMR2_MR33
EXTI_EMR2_EM34 EQU EXTI_EMR2_MR34
EXTI_EMR2_EM35 EQU EXTI_EMR2_MR35

EXTI_EMR2_EM_Pos           EQU (0)
EXTI_EMR2_EM_Msk           EQU (0xF :SHL: EXTI_EMR2_EM_Pos)                  ;!< 0x0000000F
EXTI_EMR2_EM               EQU EXTI_EMR2_EM_Msk

;*****************  Bit definition for EXTI_RTSR2 register *******************
EXTI_RTSR2_TR32_Pos        EQU (0)
EXTI_RTSR2_TR32_Msk        EQU (0x1 :SHL: EXTI_RTSR2_TR32_Pos)               ;!< 0x00000001
EXTI_RTSR2_TR32            EQU EXTI_RTSR2_TR32_Msk                         ;!< Rising trigger event configuration bit of line 32
EXTI_RTSR2_TR33_Pos        EQU (1)
EXTI_RTSR2_TR33_Msk        EQU (0x1 :SHL: EXTI_RTSR2_TR33_Pos)               ;!< 0x00000002
EXTI_RTSR2_TR33            EQU EXTI_RTSR2_TR33_Msk                         ;!< Rising trigger event configuration bit of line 33

;*****************  Bit definition for EXTI_FTSR2 register  *****************
EXTI_FTSR2_TR32_Pos        EQU (0)
EXTI_FTSR2_TR32_Msk        EQU (0x1 :SHL: EXTI_FTSR2_TR32_Pos)               ;!< 0x00000001
EXTI_FTSR2_TR32            EQU EXTI_FTSR2_TR32_Msk                         ;!< Falling trigger event configuration bit of line 32
EXTI_FTSR2_TR33_Pos        EQU (1)
EXTI_FTSR2_TR33_Msk        EQU (0x1 :SHL: EXTI_FTSR2_TR33_Pos)               ;!< 0x00000002
EXTI_FTSR2_TR33            EQU EXTI_FTSR2_TR33_Msk                         ;!< Falling trigger event configuration bit of line 33

;*****************  Bit definition for EXTI_SWIER2 register  ****************
EXTI_SWIER2_SWIER32_Pos    EQU (0)
EXTI_SWIER2_SWIER32_Msk    EQU (0x1 :SHL: EXTI_SWIER2_SWIER32_Pos)           ;!< 0x00000001
EXTI_SWIER2_SWIER32        EQU EXTI_SWIER2_SWIER32_Msk                     ;!< Software Interrupt on line 32
EXTI_SWIER2_SWIER33_Pos    EQU (1)
EXTI_SWIER2_SWIER33_Msk    EQU (0x1 :SHL: EXTI_SWIER2_SWIER33_Pos)           ;!< 0x00000002
EXTI_SWIER2_SWIER33        EQU EXTI_SWIER2_SWIER33_Msk                     ;!< Software Interrupt on line 33

;******************  Bit definition for EXTI_PR2 register  ******************
EXTI_PR2_PR32_Pos          EQU (0)
EXTI_PR2_PR32_Msk          EQU (0x1 :SHL: EXTI_PR2_PR32_Pos)                 ;!< 0x00000001
EXTI_PR2_PR32              EQU EXTI_PR2_PR32_Msk                           ;!< Pending bit for line 32
EXTI_PR2_PR33_Pos          EQU (1)
EXTI_PR2_PR33_Msk          EQU (0x1 :SHL: EXTI_PR2_PR33_Pos)                 ;!< 0x00000002
EXTI_PR2_PR33              EQU EXTI_PR2_PR33_Msk                           ;!< Pending bit for line 33


;****************************************************************************
;
;                                    FLASH
;
;****************************************************************************
;******************  Bit definition for FLASH_ACR register  *****************
FLASH_ACR_LATENCY_Pos                EQU (0)
FLASH_ACR_LATENCY_Msk                EQU (0x7 :SHL: FLASH_ACR_LATENCY_Pos)   ;!< 0x00000007
FLASH_ACR_LATENCY                    EQU FLASH_ACR_LATENCY_Msk             ;!< LATENCY[2:0] bits (Latency)
FLASH_ACR_LATENCY_0                  EQU (0x1 :SHL: FLASH_ACR_LATENCY_Pos)   ;!< 0x00000001
FLASH_ACR_LATENCY_1                  EQU (0x2 :SHL: FLASH_ACR_LATENCY_Pos)   ;!< 0x00000002
FLASH_ACR_LATENCY_2                  EQU (0x4 :SHL: FLASH_ACR_LATENCY_Pos)   ;!< 0x00000004

FLASH_ACR_HLFCYA_Pos                 EQU (3)
FLASH_ACR_HLFCYA_Msk                 EQU (0x1 :SHL: FLASH_ACR_HLFCYA_Pos)    ;!< 0x00000008
FLASH_ACR_HLFCYA                     EQU FLASH_ACR_HLFCYA_Msk              ;!< Flash Half Cycle Access Enable
FLASH_ACR_PRFTBE_Pos                 EQU (4)
FLASH_ACR_PRFTBE_Msk                 EQU (0x1 :SHL: FLASH_ACR_PRFTBE_Pos)    ;!< 0x00000010
FLASH_ACR_PRFTBE                     EQU FLASH_ACR_PRFTBE_Msk              ;!< Prefetch Buffer Enable
FLASH_ACR_PRFTBS_Pos                 EQU (5)
FLASH_ACR_PRFTBS_Msk                 EQU (0x1 :SHL: FLASH_ACR_PRFTBS_Pos)    ;!< 0x00000020
FLASH_ACR_PRFTBS                     EQU FLASH_ACR_PRFTBS_Msk              ;!< Prefetch Buffer Status

;*****************  Bit definition for FLASH_KEYR register  *****************
FLASH_KEYR_FKEYR_Pos                 EQU (0)
FLASH_KEYR_FKEYR_Msk                 EQU (0xFFFFFFFF :SHL: FLASH_KEYR_FKEYR_Pos) ;!< 0xFFFFFFFF
FLASH_KEYR_FKEYR                     EQU FLASH_KEYR_FKEYR_Msk              ;!< FPEC Key

RDP_KEY_Pos    EQU (0)
RDP_KEY_Msk    EQU (0xA5 :SHL: RDP_KEY_Pos)                                  ;!< 0x000000A5
RDP_KEY        EQU RDP_KEY_Msk                                             ;!< RDP Key
FLASH_KEY1_Pos                       EQU (0)
FLASH_KEY1_Msk                       EQU (0x45670123 :SHL: FLASH_KEY1_Pos)   ;!< 0x45670123
FLASH_KEY1                           EQU FLASH_KEY1_Msk                    ;!< FPEC Key1
FLASH_KEY2_Pos                       EQU (0)
FLASH_KEY2_Msk                       EQU (0xCDEF89AB :SHL: FLASH_KEY2_Pos)   ;!< 0xCDEF89AB
FLASH_KEY2                           EQU FLASH_KEY2_Msk                    ;!< FPEC Key2

;****************  Bit definition for FLASH_OPTKEYR register  ***************
FLASH_OPTKEYR_OPTKEYR_Pos            EQU (0)
FLASH_OPTKEYR_OPTKEYR_Msk            EQU (0xFFFFFFFF :SHL: FLASH_OPTKEYR_OPTKEYR_Pos) ;!< 0xFFFFFFFF
FLASH_OPTKEYR_OPTKEYR                EQU FLASH_OPTKEYR_OPTKEYR_Msk         ;!< Option Byte Key

FLASH_OPTKEY1                       EQU FLASH_KEY1                    ;!< Option Byte Key1
FLASH_OPTKEY2                       EQU FLASH_KEY2                    ;!< Option Byte Key2

;*****************  Bit definition for FLASH_SR register  ******************
FLASH_SR_BSY_Pos                     EQU (0)
FLASH_SR_BSY_Msk                     EQU (0x1 :SHL: FLASH_SR_BSY_Pos)        ;!< 0x00000001
FLASH_SR_BSY                         EQU FLASH_SR_BSY_Msk                  ;!< Busy
FLASH_SR_PGERR_Pos                   EQU (2)
FLASH_SR_PGERR_Msk                   EQU (0x1 :SHL: FLASH_SR_PGERR_Pos)      ;!< 0x00000004
FLASH_SR_PGERR                       EQU FLASH_SR_PGERR_Msk                ;!< Programming Error
FLASH_SR_WRPERR_Pos                  EQU (4)
FLASH_SR_WRPERR_Msk                  EQU (0x1 :SHL: FLASH_SR_WRPERR_Pos)     ;!< 0x00000010
FLASH_SR_WRPERR                      EQU FLASH_SR_WRPERR_Msk               ;!< Write Protection Error
FLASH_SR_EOP_Pos                     EQU (5)
FLASH_SR_EOP_Msk                     EQU (0x1 :SHL: FLASH_SR_EOP_Pos)        ;!< 0x00000020
FLASH_SR_EOP                         EQU FLASH_SR_EOP_Msk                  ;!< End of operation

;******************  Bit definition for FLASH_CR register  ******************
FLASH_CR_PG_Pos                      EQU (0)
FLASH_CR_PG_Msk                      EQU (0x1 :SHL: FLASH_CR_PG_Pos)         ;!< 0x00000001
FLASH_CR_PG                          EQU FLASH_CR_PG_Msk                   ;!< Programming
FLASH_CR_PER_Pos                     EQU (1)
FLASH_CR_PER_Msk                     EQU (0x1 :SHL: FLASH_CR_PER_Pos)        ;!< 0x00000002
FLASH_CR_PER                         EQU FLASH_CR_PER_Msk                  ;!< Page Erase
FLASH_CR_MER_Pos                     EQU (2)
FLASH_CR_MER_Msk                     EQU (0x1 :SHL: FLASH_CR_MER_Pos)        ;!< 0x00000004
FLASH_CR_MER                         EQU FLASH_CR_MER_Msk                  ;!< Mass Erase
FLASH_CR_OPTPG_Pos                   EQU (4)
FLASH_CR_OPTPG_Msk                   EQU (0x1 :SHL: FLASH_CR_OPTPG_Pos)      ;!< 0x00000010
FLASH_CR_OPTPG                       EQU FLASH_CR_OPTPG_Msk                ;!< Option Byte Programming
FLASH_CR_OPTER_Pos                   EQU (5)
FLASH_CR_OPTER_Msk                   EQU (0x1 :SHL: FLASH_CR_OPTER_Pos)      ;!< 0x00000020
FLASH_CR_OPTER                       EQU FLASH_CR_OPTER_Msk                ;!< Option Byte Erase
FLASH_CR_STRT_Pos                    EQU (6)
FLASH_CR_STRT_Msk                    EQU (0x1 :SHL: FLASH_CR_STRT_Pos)       ;!< 0x00000040
FLASH_CR_STRT                        EQU FLASH_CR_STRT_Msk                 ;!< Start
FLASH_CR_LOCK_Pos                    EQU (7)
FLASH_CR_LOCK_Msk                    EQU (0x1 :SHL: FLASH_CR_LOCK_Pos)       ;!< 0x00000080
FLASH_CR_LOCK                        EQU FLASH_CR_LOCK_Msk                 ;!< Lock
FLASH_CR_OPTWRE_Pos                  EQU (9)
FLASH_CR_OPTWRE_Msk                  EQU (0x1 :SHL: FLASH_CR_OPTWRE_Pos)     ;!< 0x00000200
FLASH_CR_OPTWRE                      EQU FLASH_CR_OPTWRE_Msk               ;!< Option Bytes Write Enable
FLASH_CR_ERRIE_Pos                   EQU (10)
FLASH_CR_ERRIE_Msk                   EQU (0x1 :SHL: FLASH_CR_ERRIE_Pos)      ;!< 0x00000400
FLASH_CR_ERRIE                       EQU FLASH_CR_ERRIE_Msk                ;!< Error Interrupt Enable
FLASH_CR_EOPIE_Pos                   EQU (12)
FLASH_CR_EOPIE_Msk                   EQU (0x1 :SHL: FLASH_CR_EOPIE_Pos)      ;!< 0x00001000
FLASH_CR_EOPIE                       EQU FLASH_CR_EOPIE_Msk                ;!< End of operation interrupt enable
FLASH_CR_OBL_LAUNCH_Pos              EQU (13)
FLASH_CR_OBL_LAUNCH_Msk              EQU (0x1 :SHL: FLASH_CR_OBL_LAUNCH_Pos) ;!< 0x00002000
FLASH_CR_OBL_LAUNCH                  EQU FLASH_CR_OBL_LAUNCH_Msk           ;!< OptionBytes Loader Launch

;******************  Bit definition for FLASH_AR register  ******************
FLASH_AR_FAR_Pos                     EQU (0)
FLASH_AR_FAR_Msk                     EQU (0xFFFFFFFF :SHL: FLASH_AR_FAR_Pos) ;!< 0xFFFFFFFF
FLASH_AR_FAR                         EQU FLASH_AR_FAR_Msk                  ;!< Flash Address

;*****************  Bit definition for FLASH_OBR register  ******************
FLASH_OBR_OPTERR_Pos                 EQU (0)
FLASH_OBR_OPTERR_Msk                 EQU (0x1 :SHL: FLASH_OBR_OPTERR_Pos)    ;!< 0x00000001
FLASH_OBR_OPTERR                     EQU FLASH_OBR_OPTERR_Msk              ;!< Option Byte Error
FLASH_OBR_RDPRT_Pos                  EQU (1)
FLASH_OBR_RDPRT_Msk                  EQU (0x3 :SHL: FLASH_OBR_RDPRT_Pos)     ;!< 0x00000006
FLASH_OBR_RDPRT                      EQU FLASH_OBR_RDPRT_Msk               ;!< Read protection
FLASH_OBR_RDPRT_1                    EQU (0x1 :SHL: FLASH_OBR_RDPRT_Pos)     ;!< 0x00000002
FLASH_OBR_RDPRT_2                    EQU (0x3 :SHL: FLASH_OBR_RDPRT_Pos)     ;!< 0x00000006

FLASH_OBR_USER_Pos                   EQU (8)
FLASH_OBR_USER_Msk                   EQU (0x77 :SHL: FLASH_OBR_USER_Pos)     ;!< 0x00007700
FLASH_OBR_USER                       EQU FLASH_OBR_USER_Msk                ;!< User Option Bytes
FLASH_OBR_IWDG_SW_Pos                EQU (8)
FLASH_OBR_IWDG_SW_Msk                EQU (0x1 :SHL: FLASH_OBR_IWDG_SW_Pos)   ;!< 0x00000100
FLASH_OBR_IWDG_SW                    EQU FLASH_OBR_IWDG_SW_Msk             ;!< IWDG SW
FLASH_OBR_nRST_STOP_Pos              EQU (9)
FLASH_OBR_nRST_STOP_Msk              EQU (0x1 :SHL: FLASH_OBR_nRST_STOP_Pos) ;!< 0x00000200
FLASH_OBR_nRST_STOP                  EQU FLASH_OBR_nRST_STOP_Msk           ;!< nRST_STOP
FLASH_OBR_nRST_STDBY_Pos             EQU (10)
FLASH_OBR_nRST_STDBY_Msk             EQU (0x1 :SHL: FLASH_OBR_nRST_STDBY_Pos) ;!< 0x00000400
FLASH_OBR_nRST_STDBY                 EQU FLASH_OBR_nRST_STDBY_Msk          ;!< nRST_STDBY
FLASH_OBR_nBOOT1_Pos                 EQU (12)
FLASH_OBR_nBOOT1_Msk                 EQU (0x1 :SHL: FLASH_OBR_nBOOT1_Pos)    ;!< 0x00001000
FLASH_OBR_nBOOT1                     EQU FLASH_OBR_nBOOT1_Msk              ;!< nBOOT1
FLASH_OBR_VDDA_MONITOR_Pos           EQU (13)
FLASH_OBR_VDDA_MONITOR_Msk           EQU (0x1 :SHL: FLASH_OBR_VDDA_MONITOR_Pos) ;!< 0x00002000
FLASH_OBR_VDDA_MONITOR               EQU FLASH_OBR_VDDA_MONITOR_Msk        ;!< VDDA_MONITOR
FLASH_OBR_SRAM_PE_Pos                EQU (14)
FLASH_OBR_SRAM_PE_Msk                EQU (0x1 :SHL: FLASH_OBR_SRAM_PE_Pos)   ;!< 0x00004000
FLASH_OBR_SRAM_PE                    EQU FLASH_OBR_SRAM_PE_Msk             ;!< SRAM_PE
FLASH_OBR_DATA0_Pos                  EQU (16)
FLASH_OBR_DATA0_Msk                  EQU (0xFF :SHL: FLASH_OBR_DATA0_Pos)    ;!< 0x00FF0000
FLASH_OBR_DATA0                      EQU FLASH_OBR_DATA0_Msk               ;!< Data0
FLASH_OBR_DATA1_Pos                  EQU (24)
FLASH_OBR_DATA1_Msk                  EQU (0xFF :SHL: FLASH_OBR_DATA1_Pos)    ;!< 0xFF000000
FLASH_OBR_DATA1                      EQU FLASH_OBR_DATA1_Msk               ;!< Data1

; Legacy defines
FLASH_OBR_WDG_SW EQU FLASH_OBR_IWDG_SW

;*****************  Bit definition for FLASH_WRPR register  *****************
FLASH_WRPR_WRP_Pos                   EQU (0)
FLASH_WRPR_WRP_Msk                   EQU (0xFFFFFFFF :SHL: FLASH_WRPR_WRP_Pos) ;!< 0xFFFFFFFF
FLASH_WRPR_WRP                       EQU FLASH_WRPR_WRP_Msk                ;!< Write Protect

;----------------------------------------------------------------------------

;*****************  Bit definition for OB_RDP register  *********************
OB_RDP_RDP_Pos       EQU (0)
OB_RDP_RDP_Msk       EQU (0xFF :SHL: OB_RDP_RDP_Pos)                         ;!< 0x000000FF
OB_RDP_RDP           EQU OB_RDP_RDP_Msk                                    ;!< Read protection option byte
OB_RDP_nRDP_Pos      EQU (8)
OB_RDP_nRDP_Msk      EQU (0xFF :SHL: OB_RDP_nRDP_Pos)                        ;!< 0x0000FF00
OB_RDP_nRDP          EQU OB_RDP_nRDP_Msk                                   ;!< Read protection complemented option byte

;*****************  Bit definition for OB_USER register  ********************
OB_USER_USER_Pos     EQU (16)
OB_USER_USER_Msk     EQU (0xFF :SHL: OB_USER_USER_Pos)                       ;!< 0x00FF0000
OB_USER_USER         EQU OB_USER_USER_Msk                                  ;!< User option byte
OB_USER_nUSER_Pos    EQU (24)
OB_USER_nUSER_Msk    EQU (0xFF :SHL: OB_USER_nUSER_Pos)                      ;!< 0xFF000000
OB_USER_nUSER        EQU OB_USER_nUSER_Msk                                 ;!< User complemented option byte

;*****************  Bit definition for FLASH_WRP0 register  *****************
OB_WRP0_WRP0_Pos     EQU (0)
OB_WRP0_WRP0_Msk     EQU (0xFF :SHL: OB_WRP0_WRP0_Pos)                       ;!< 0x000000FF
OB_WRP0_WRP0         EQU OB_WRP0_WRP0_Msk                                  ;!< Flash memory write protection option bytes
OB_WRP0_nWRP0_Pos    EQU (8)
OB_WRP0_nWRP0_Msk    EQU (0xFF :SHL: OB_WRP0_nWRP0_Pos)                      ;!< 0x0000FF00
OB_WRP0_nWRP0        EQU OB_WRP0_nWRP0_Msk                                 ;!< Flash memory write protection complemented option bytes

;*****************  Bit definition for FLASH_WRP1 register  *****************
OB_WRP1_WRP1_Pos     EQU (16)
OB_WRP1_WRP1_Msk     EQU (0xFF :SHL: OB_WRP1_WRP1_Pos)                       ;!< 0x00FF0000
OB_WRP1_WRP1         EQU OB_WRP1_WRP1_Msk                                  ;!< Flash memory write protection option bytes
OB_WRP1_nWRP1_Pos    EQU (24)
OB_WRP1_nWRP1_Msk    EQU (0xFF :SHL: OB_WRP1_nWRP1_Pos)                      ;!< 0xFF000000
OB_WRP1_nWRP1        EQU OB_WRP1_nWRP1_Msk                                 ;!< Flash memory write protection complemented option bytes

;*****************  Bit definition for FLASH_WRP2 register  *****************
OB_WRP2_WRP2_Pos     EQU (0)
OB_WRP2_WRP2_Msk     EQU (0xFF :SHL: OB_WRP2_WRP2_Pos)                       ;!< 0x000000FF
OB_WRP2_WRP2         EQU OB_WRP2_WRP2_Msk                                  ;!< Flash memory write protection option bytes
OB_WRP2_nWRP2_Pos    EQU (8)
OB_WRP2_nWRP2_Msk    EQU (0xFF :SHL: OB_WRP2_nWRP2_Pos)                      ;!< 0x0000FF00
OB_WRP2_nWRP2        EQU OB_WRP2_nWRP2_Msk                                 ;!< Flash memory write protection complemented option bytes

;*****************  Bit definition for FLASH_WRP3 register  *****************
OB_WRP3_WRP3_Pos     EQU (16)
OB_WRP3_WRP3_Msk     EQU (0xFF :SHL: OB_WRP3_WRP3_Pos)                       ;!< 0x00FF0000
OB_WRP3_WRP3         EQU OB_WRP3_WRP3_Msk                                  ;!< Flash memory write protection option bytes
OB_WRP3_nWRP3_Pos    EQU (24)
OB_WRP3_nWRP3_Msk    EQU (0xFF :SHL: OB_WRP3_nWRP3_Pos)                      ;!< 0xFF000000
OB_WRP3_nWRP3        EQU OB_WRP3_nWRP3_Msk                                 ;!< Flash memory write protection complemented option bytes

;****************************************************************************
;
;                          Flexible Memory Controller
;
;****************************************************************************
;*****************  Bit definition for FMC_BCRx register  ******************
FMC_BCRx_MBKEN_Pos          EQU (0)
FMC_BCRx_MBKEN_Msk          EQU (0x1 :SHL: FMC_BCRx_MBKEN_Pos)               ;!< 0x00000001
FMC_BCRx_MBKEN              EQU FMC_BCRx_MBKEN_Msk                         ;!<Memory bank enable bit
FMC_BCRx_MUXEN_Pos          EQU (1)
FMC_BCRx_MUXEN_Msk          EQU (0x1 :SHL: FMC_BCRx_MUXEN_Pos)               ;!< 0x00000002
FMC_BCRx_MUXEN              EQU FMC_BCRx_MUXEN_Msk                         ;!<Address/data multiplexing enable bit

FMC_BCRx_MTYP_Pos           EQU (2)
FMC_BCRx_MTYP_Msk           EQU (0x3 :SHL: FMC_BCRx_MTYP_Pos)                ;!< 0x0000000C
FMC_BCRx_MTYP               EQU FMC_BCRx_MTYP_Msk                          ;!<MTYP[1:0] bits (Memory type)
FMC_BCRx_MTYP_0             EQU (0x1 :SHL: FMC_BCRx_MTYP_Pos)                ;!< 0x00000004
FMC_BCRx_MTYP_1             EQU (0x2 :SHL: FMC_BCRx_MTYP_Pos)                ;!< 0x00000008

FMC_BCRx_MWID_Pos           EQU (4)
FMC_BCRx_MWID_Msk           EQU (0x3 :SHL: FMC_BCRx_MWID_Pos)                ;!< 0x00000030
FMC_BCRx_MWID               EQU FMC_BCRx_MWID_Msk                          ;!<MWID[1:0] bits (Memory data bus width)
FMC_BCRx_MWID_0             EQU (0x1 :SHL: FMC_BCRx_MWID_Pos)                ;!< 0x00000010
FMC_BCRx_MWID_1             EQU (0x2 :SHL: FMC_BCRx_MWID_Pos)                ;!< 0x00000020

FMC_BCRx_FACCEN_Pos         EQU (6)
FMC_BCRx_FACCEN_Msk         EQU (0x1 :SHL: FMC_BCRx_FACCEN_Pos)              ;!< 0x00000040
FMC_BCRx_FACCEN             EQU FMC_BCRx_FACCEN_Msk                        ;!<Flash access enable
FMC_BCRx_BURSTEN_Pos        EQU (8)
FMC_BCRx_BURSTEN_Msk        EQU (0x1 :SHL: FMC_BCRx_BURSTEN_Pos)             ;!< 0x00000100
FMC_BCRx_BURSTEN            EQU FMC_BCRx_BURSTEN_Msk                       ;!<Burst enable bit
FMC_BCRx_WAITPOL_Pos        EQU (9)
FMC_BCRx_WAITPOL_Msk        EQU (0x1 :SHL: FMC_BCRx_WAITPOL_Pos)             ;!< 0x00000200
FMC_BCRx_WAITPOL            EQU FMC_BCRx_WAITPOL_Msk                       ;!<Wait signal polarity bit
FMC_BCRx_WRAPMOD_Pos        EQU (10)
FMC_BCRx_WRAPMOD_Msk        EQU (0x1 :SHL: FMC_BCRx_WRAPMOD_Pos)             ;!< 0x00000400
FMC_BCRx_WRAPMOD            EQU FMC_BCRx_WRAPMOD_Msk                       ;!<Wrapped burst mode support
FMC_BCRx_WAITCFG_Pos        EQU (11)
FMC_BCRx_WAITCFG_Msk        EQU (0x1 :SHL: FMC_BCRx_WAITCFG_Pos)             ;!< 0x00000800
FMC_BCRx_WAITCFG            EQU FMC_BCRx_WAITCFG_Msk                       ;!<Wait timing configuration
FMC_BCRx_WREN_Pos           EQU (12)
FMC_BCRx_WREN_Msk           EQU (0x1 :SHL: FMC_BCRx_WREN_Pos)                ;!< 0x00001000
FMC_BCRx_WREN               EQU FMC_BCRx_WREN_Msk                          ;!<Write enable bit
FMC_BCRx_WAITEN_Pos         EQU (13)
FMC_BCRx_WAITEN_Msk         EQU (0x1 :SHL: FMC_BCRx_WAITEN_Pos)              ;!< 0x00002000
FMC_BCRx_WAITEN             EQU FMC_BCRx_WAITEN_Msk                        ;!<Wait enable bit
FMC_BCRx_EXTMOD_Pos         EQU (14)
FMC_BCRx_EXTMOD_Msk         EQU (0x1 :SHL: FMC_BCRx_EXTMOD_Pos)              ;!< 0x00004000
FMC_BCRx_EXTMOD             EQU FMC_BCRx_EXTMOD_Msk                        ;!<Extended mode enable
FMC_BCRx_ASYNCWAIT_Pos      EQU (15)
FMC_BCRx_ASYNCWAIT_Msk      EQU (0x1 :SHL: FMC_BCRx_ASYNCWAIT_Pos)           ;!< 0x00008000
FMC_BCRx_ASYNCWAIT          EQU FMC_BCRx_ASYNCWAIT_Msk                     ;!<Asynchronous wait
FMC_BCRx_CBURSTRW_Pos       EQU (19)
FMC_BCRx_CBURSTRW_Msk       EQU (0x1 :SHL: FMC_BCRx_CBURSTRW_Pos)            ;!< 0x00080000
FMC_BCRx_CBURSTRW           EQU FMC_BCRx_CBURSTRW_Msk                      ;!<Write burst enable

;*****************  Bit definition for FMC_BCR1 register  ******************
FMC_BCR1_MBKEN_Pos          EQU (0)
FMC_BCR1_MBKEN_Msk          EQU (0x1 :SHL: FMC_BCR1_MBKEN_Pos)               ;!< 0x00000001
FMC_BCR1_MBKEN              EQU FMC_BCR1_MBKEN_Msk                         ;!<Memory bank enable bit
FMC_BCR1_MUXEN_Pos          EQU (1)
FMC_BCR1_MUXEN_Msk          EQU (0x1 :SHL: FMC_BCR1_MUXEN_Pos)               ;!< 0x00000002
FMC_BCR1_MUXEN              EQU FMC_BCR1_MUXEN_Msk                         ;!<Address/data multiplexing enable bit

FMC_BCR1_MTYP_Pos           EQU (2)
FMC_BCR1_MTYP_Msk           EQU (0x3 :SHL: FMC_BCR1_MTYP_Pos)                ;!< 0x0000000C
FMC_BCR1_MTYP               EQU FMC_BCR1_MTYP_Msk                          ;!<MTYP[1:0] bits (Memory type)
FMC_BCR1_MTYP_0             EQU (0x1 :SHL: FMC_BCR1_MTYP_Pos)                ;!< 0x00000004
FMC_BCR1_MTYP_1             EQU (0x2 :SHL: FMC_BCR1_MTYP_Pos)                ;!< 0x00000008

FMC_BCR1_MWID_Pos           EQU (4)
FMC_BCR1_MWID_Msk           EQU (0x3 :SHL: FMC_BCR1_MWID_Pos)                ;!< 0x00000030
FMC_BCR1_MWID               EQU FMC_BCR1_MWID_Msk                          ;!<MWID[1:0] bits (Memory data bus width)
FMC_BCR1_MWID_0             EQU (0x1 :SHL: FMC_BCR1_MWID_Pos)                ;!< 0x00000010
FMC_BCR1_MWID_1             EQU (0x2 :SHL: FMC_BCR1_MWID_Pos)                ;!< 0x00000020

FMC_BCR1_FACCEN_Pos         EQU (6)
FMC_BCR1_FACCEN_Msk         EQU (0x1 :SHL: FMC_BCR1_FACCEN_Pos)              ;!< 0x00000040
FMC_BCR1_FACCEN             EQU FMC_BCR1_FACCEN_Msk                        ;!<Flash access enable
FMC_BCR1_BURSTEN_Pos        EQU (8)
FMC_BCR1_BURSTEN_Msk        EQU (0x1 :SHL: FMC_BCR1_BURSTEN_Pos)             ;!< 0x00000100
FMC_BCR1_BURSTEN            EQU FMC_BCR1_BURSTEN_Msk                       ;!<Burst enable bit
FMC_BCR1_WAITPOL_Pos        EQU (9)
FMC_BCR1_WAITPOL_Msk        EQU (0x1 :SHL: FMC_BCR1_WAITPOL_Pos)             ;!< 0x00000200
FMC_BCR1_WAITPOL            EQU FMC_BCR1_WAITPOL_Msk                       ;!<Wait signal polarity bit
FMC_BCR1_WRAPMOD_Pos        EQU (10)
FMC_BCR1_WRAPMOD_Msk        EQU (0x1 :SHL: FMC_BCR1_WRAPMOD_Pos)             ;!< 0x00000400
FMC_BCR1_WRAPMOD            EQU FMC_BCR1_WRAPMOD_Msk                       ;!<Wrapped burst mode support
FMC_BCR1_WAITCFG_Pos        EQU (11)
FMC_BCR1_WAITCFG_Msk        EQU (0x1 :SHL: FMC_BCR1_WAITCFG_Pos)             ;!< 0x00000800
FMC_BCR1_WAITCFG            EQU FMC_BCR1_WAITCFG_Msk                       ;!<Wait timing configuration
FMC_BCR1_WREN_Pos           EQU (12)
FMC_BCR1_WREN_Msk           EQU (0x1 :SHL: FMC_BCR1_WREN_Pos)                ;!< 0x00001000
FMC_BCR1_WREN               EQU FMC_BCR1_WREN_Msk                          ;!<Write enable bit
FMC_BCR1_WAITEN_Pos         EQU (13)
FMC_BCR1_WAITEN_Msk         EQU (0x1 :SHL: FMC_BCR1_WAITEN_Pos)              ;!< 0x00002000
FMC_BCR1_WAITEN             EQU FMC_BCR1_WAITEN_Msk                        ;!<Wait enable bit
FMC_BCR1_EXTMOD_Pos         EQU (14)
FMC_BCR1_EXTMOD_Msk         EQU (0x1 :SHL: FMC_BCR1_EXTMOD_Pos)              ;!< 0x00004000
FMC_BCR1_EXTMOD             EQU FMC_BCR1_EXTMOD_Msk                        ;!<Extended mode enable
FMC_BCR1_ASYNCWAIT_Pos      EQU (15)
FMC_BCR1_ASYNCWAIT_Msk      EQU (0x1 :SHL: FMC_BCR1_ASYNCWAIT_Pos)           ;!< 0x00008000
FMC_BCR1_ASYNCWAIT          EQU FMC_BCR1_ASYNCWAIT_Msk                     ;!<Asynchronous wait
FMC_BCR1_CBURSTRW_Pos       EQU (19)
FMC_BCR1_CBURSTRW_Msk       EQU (0x1 :SHL: FMC_BCR1_CBURSTRW_Pos)            ;!< 0x00080000
FMC_BCR1_CBURSTRW           EQU FMC_BCR1_CBURSTRW_Msk                      ;!<Write burst enable
FMC_BCR1_CCLKEN_Pos         EQU (20)
FMC_BCR1_CCLKEN_Msk         EQU (0x1 :SHL: FMC_BCR1_CCLKEN_Pos)              ;!< 0x00100000
FMC_BCR1_CCLKEN             EQU FMC_BCR1_CCLKEN_Msk                        ;!<Continous clock enable

;*****************  Bit definition for FMC_BCR2 register  ******************
FMC_BCR2_MBKEN_Pos          EQU (0)
FMC_BCR2_MBKEN_Msk          EQU (0x1 :SHL: FMC_BCR2_MBKEN_Pos)               ;!< 0x00000001
FMC_BCR2_MBKEN              EQU FMC_BCR2_MBKEN_Msk                         ;!<Memory bank enable bit
FMC_BCR2_MUXEN_Pos          EQU (1)
FMC_BCR2_MUXEN_Msk          EQU (0x1 :SHL: FMC_BCR2_MUXEN_Pos)               ;!< 0x00000002
FMC_BCR2_MUXEN              EQU FMC_BCR2_MUXEN_Msk                         ;!<Address/data multiplexing enable bit

FMC_BCR2_MTYP_Pos           EQU (2)
FMC_BCR2_MTYP_Msk           EQU (0x3 :SHL: FMC_BCR2_MTYP_Pos)                ;!< 0x0000000C
FMC_BCR2_MTYP               EQU FMC_BCR2_MTYP_Msk                          ;!<MTYP[1:0] bits (Memory type)
FMC_BCR2_MTYP_0             EQU (0x1 :SHL: FMC_BCR2_MTYP_Pos)                ;!< 0x00000004
FMC_BCR2_MTYP_1             EQU (0x2 :SHL: FMC_BCR2_MTYP_Pos)                ;!< 0x00000008

FMC_BCR2_MWID_Pos           EQU (4)
FMC_BCR2_MWID_Msk           EQU (0x3 :SHL: FMC_BCR2_MWID_Pos)                ;!< 0x00000030
FMC_BCR2_MWID               EQU FMC_BCR2_MWID_Msk                          ;!<MWID[1:0] bits (Memory data bus width)
FMC_BCR2_MWID_0             EQU (0x1 :SHL: FMC_BCR2_MWID_Pos)                ;!< 0x00000010
FMC_BCR2_MWID_1             EQU (0x2 :SHL: FMC_BCR2_MWID_Pos)                ;!< 0x00000020

FMC_BCR2_FACCEN_Pos         EQU (6)
FMC_BCR2_FACCEN_Msk         EQU (0x1 :SHL: FMC_BCR2_FACCEN_Pos)              ;!< 0x00000040
FMC_BCR2_FACCEN             EQU FMC_BCR2_FACCEN_Msk                        ;!<Flash access enable
FMC_BCR2_BURSTEN_Pos        EQU (8)
FMC_BCR2_BURSTEN_Msk        EQU (0x1 :SHL: FMC_BCR2_BURSTEN_Pos)             ;!< 0x00000100
FMC_BCR2_BURSTEN            EQU FMC_BCR2_BURSTEN_Msk                       ;!<Burst enable bit
FMC_BCR2_WAITPOL_Pos        EQU (9)
FMC_BCR2_WAITPOL_Msk        EQU (0x1 :SHL: FMC_BCR2_WAITPOL_Pos)             ;!< 0x00000200
FMC_BCR2_WAITPOL            EQU FMC_BCR2_WAITPOL_Msk                       ;!<Wait signal polarity bit
FMC_BCR2_WRAPMOD_Pos        EQU (10)
FMC_BCR2_WRAPMOD_Msk        EQU (0x1 :SHL: FMC_BCR2_WRAPMOD_Pos)             ;!< 0x00000400
FMC_BCR2_WRAPMOD            EQU FMC_BCR2_WRAPMOD_Msk                       ;!<Wrapped burst mode support
FMC_BCR2_WAITCFG_Pos        EQU (11)
FMC_BCR2_WAITCFG_Msk        EQU (0x1 :SHL: FMC_BCR2_WAITCFG_Pos)             ;!< 0x00000800
FMC_BCR2_WAITCFG            EQU FMC_BCR2_WAITCFG_Msk                       ;!<Wait timing configuration
FMC_BCR2_WREN_Pos           EQU (12)
FMC_BCR2_WREN_Msk           EQU (0x1 :SHL: FMC_BCR2_WREN_Pos)                ;!< 0x00001000
FMC_BCR2_WREN               EQU FMC_BCR2_WREN_Msk                          ;!<Write enable bit
FMC_BCR2_WAITEN_Pos         EQU (13)
FMC_BCR2_WAITEN_Msk         EQU (0x1 :SHL: FMC_BCR2_WAITEN_Pos)              ;!< 0x00002000
FMC_BCR2_WAITEN             EQU FMC_BCR2_WAITEN_Msk                        ;!<Wait enable bit
FMC_BCR2_EXTMOD_Pos         EQU (14)
FMC_BCR2_EXTMOD_Msk         EQU (0x1 :SHL: FMC_BCR2_EXTMOD_Pos)              ;!< 0x00004000
FMC_BCR2_EXTMOD             EQU FMC_BCR2_EXTMOD_Msk                        ;!<Extended mode enable
FMC_BCR2_ASYNCWAIT_Pos      EQU (15)
FMC_BCR2_ASYNCWAIT_Msk      EQU (0x1 :SHL: FMC_BCR2_ASYNCWAIT_Pos)           ;!< 0x00008000
FMC_BCR2_ASYNCWAIT          EQU FMC_BCR2_ASYNCWAIT_Msk                     ;!<Asynchronous wait
FMC_BCR2_CBURSTRW_Pos       EQU (19)
FMC_BCR2_CBURSTRW_Msk       EQU (0x1 :SHL: FMC_BCR2_CBURSTRW_Pos)            ;!< 0x00080000
FMC_BCR2_CBURSTRW           EQU FMC_BCR2_CBURSTRW_Msk                      ;!<Write burst enable

;*****************  Bit definition for FMC_BCR3 register  ******************
FMC_BCR3_MBKEN_Pos          EQU (0)
FMC_BCR3_MBKEN_Msk          EQU (0x1 :SHL: FMC_BCR3_MBKEN_Pos)               ;!< 0x00000001
FMC_BCR3_MBKEN              EQU FMC_BCR3_MBKEN_Msk                         ;!<Memory bank enable bit
FMC_BCR3_MUXEN_Pos          EQU (1)
FMC_BCR3_MUXEN_Msk          EQU (0x1 :SHL: FMC_BCR3_MUXEN_Pos)               ;!< 0x00000002
FMC_BCR3_MUXEN              EQU FMC_BCR3_MUXEN_Msk                         ;!<Address/data multiplexing enable bit

FMC_BCR3_MTYP_Pos           EQU (2)
FMC_BCR3_MTYP_Msk           EQU (0x3 :SHL: FMC_BCR3_MTYP_Pos)                ;!< 0x0000000C
FMC_BCR3_MTYP               EQU FMC_BCR3_MTYP_Msk                          ;!<MTYP[1:0] bits (Memory type)
FMC_BCR3_MTYP_0             EQU (0x1 :SHL: FMC_BCR3_MTYP_Pos)                ;!< 0x00000004
FMC_BCR3_MTYP_1             EQU (0x2 :SHL: FMC_BCR3_MTYP_Pos)                ;!< 0x00000008

FMC_BCR3_MWID_Pos           EQU (4)
FMC_BCR3_MWID_Msk           EQU (0x3 :SHL: FMC_BCR3_MWID_Pos)                ;!< 0x00000030
FMC_BCR3_MWID               EQU FMC_BCR3_MWID_Msk                          ;!<MWID[1:0] bits (Memory data bus width)
FMC_BCR3_MWID_0             EQU (0x1 :SHL: FMC_BCR3_MWID_Pos)                ;!< 0x00000010
FMC_BCR3_MWID_1             EQU (0x2 :SHL: FMC_BCR3_MWID_Pos)                ;!< 0x00000020

FMC_BCR3_FACCEN_Pos         EQU (6)
FMC_BCR3_FACCEN_Msk         EQU (0x1 :SHL: FMC_BCR3_FACCEN_Pos)              ;!< 0x00000040
FMC_BCR3_FACCEN             EQU FMC_BCR3_FACCEN_Msk                        ;!<Flash access enable
FMC_BCR3_BURSTEN_Pos        EQU (8)
FMC_BCR3_BURSTEN_Msk        EQU (0x1 :SHL: FMC_BCR3_BURSTEN_Pos)             ;!< 0x00000100
FMC_BCR3_BURSTEN            EQU FMC_BCR3_BURSTEN_Msk                       ;!<Burst enable bit
FMC_BCR3_WAITPOL_Pos        EQU (9)
FMC_BCR3_WAITPOL_Msk        EQU (0x1 :SHL: FMC_BCR3_WAITPOL_Pos)             ;!< 0x00000200
FMC_BCR3_WAITPOL            EQU FMC_BCR3_WAITPOL_Msk                       ;!<Wait signal polarity bit
FMC_BCR3_WRAPMOD_Pos        EQU (10)
FMC_BCR3_WRAPMOD_Msk        EQU (0x1 :SHL: FMC_BCR3_WRAPMOD_Pos)             ;!< 0x00000400
FMC_BCR3_WRAPMOD            EQU FMC_BCR3_WRAPMOD_Msk                       ;!<Wrapped burst mode support
FMC_BCR3_WAITCFG_Pos        EQU (11)
FMC_BCR3_WAITCFG_Msk        EQU (0x1 :SHL: FMC_BCR3_WAITCFG_Pos)             ;!< 0x00000800
FMC_BCR3_WAITCFG            EQU FMC_BCR3_WAITCFG_Msk                       ;!<Wait timing configuration
FMC_BCR3_WREN_Pos           EQU (12)
FMC_BCR3_WREN_Msk           EQU (0x1 :SHL: FMC_BCR3_WREN_Pos)                ;!< 0x00001000
FMC_BCR3_WREN               EQU FMC_BCR3_WREN_Msk                          ;!<Write enable bit
FMC_BCR3_WAITEN_Pos         EQU (13)
FMC_BCR3_WAITEN_Msk         EQU (0x1 :SHL: FMC_BCR3_WAITEN_Pos)              ;!< 0x00002000
FMC_BCR3_WAITEN             EQU FMC_BCR3_WAITEN_Msk                        ;!<Wait enable bit
FMC_BCR3_EXTMOD_Pos         EQU (14)
FMC_BCR3_EXTMOD_Msk         EQU (0x1 :SHL: FMC_BCR3_EXTMOD_Pos)              ;!< 0x00004000
FMC_BCR3_EXTMOD             EQU FMC_BCR3_EXTMOD_Msk                        ;!<Extended mode enable
FMC_BCR3_ASYNCWAIT_Pos      EQU (15)
FMC_BCR3_ASYNCWAIT_Msk      EQU (0x1 :SHL: FMC_BCR3_ASYNCWAIT_Pos)           ;!< 0x00008000
FMC_BCR3_ASYNCWAIT          EQU FMC_BCR3_ASYNCWAIT_Msk                     ;!<Asynchronous wait
FMC_BCR3_CBURSTRW_Pos       EQU (19)
FMC_BCR3_CBURSTRW_Msk       EQU (0x1 :SHL: FMC_BCR3_CBURSTRW_Pos)            ;!< 0x00080000
FMC_BCR3_CBURSTRW           EQU FMC_BCR3_CBURSTRW_Msk                      ;!<Write burst enable

;*****************  Bit definition for FMC_BCR4 register  ******************
FMC_BCR4_MBKEN_Pos          EQU (0)
FMC_BCR4_MBKEN_Msk          EQU (0x1 :SHL: FMC_BCR4_MBKEN_Pos)               ;!< 0x00000001
FMC_BCR4_MBKEN              EQU FMC_BCR4_MBKEN_Msk                         ;!<Memory bank enable bit
FMC_BCR4_MUXEN_Pos          EQU (1)
FMC_BCR4_MUXEN_Msk          EQU (0x1 :SHL: FMC_BCR4_MUXEN_Pos)               ;!< 0x00000002
FMC_BCR4_MUXEN              EQU FMC_BCR4_MUXEN_Msk                         ;!<Address/data multiplexing enable bit

FMC_BCR4_MTYP_Pos           EQU (2)
FMC_BCR4_MTYP_Msk           EQU (0x3 :SHL: FMC_BCR4_MTYP_Pos)                ;!< 0x0000000C
FMC_BCR4_MTYP               EQU FMC_BCR4_MTYP_Msk                          ;!<MTYP[1:0] bits (Memory type)
FMC_BCR4_MTYP_0             EQU (0x1 :SHL: FMC_BCR4_MTYP_Pos)                ;!< 0x00000004
FMC_BCR4_MTYP_1             EQU (0x2 :SHL: FMC_BCR4_MTYP_Pos)                ;!< 0x00000008

FMC_BCR4_MWID_Pos           EQU (4)
FMC_BCR4_MWID_Msk           EQU (0x3 :SHL: FMC_BCR4_MWID_Pos)                ;!< 0x00000030
FMC_BCR4_MWID               EQU FMC_BCR4_MWID_Msk                          ;!<MWID[1:0] bits (Memory data bus width)
FMC_BCR4_MWID_0             EQU (0x1 :SHL: FMC_BCR4_MWID_Pos)                ;!< 0x00000010
FMC_BCR4_MWID_1             EQU (0x2 :SHL: FMC_BCR4_MWID_Pos)                ;!< 0x00000020

FMC_BCR4_FACCEN_Pos         EQU (6)
FMC_BCR4_FACCEN_Msk         EQU (0x1 :SHL: FMC_BCR4_FACCEN_Pos)              ;!< 0x00000040
FMC_BCR4_FACCEN             EQU FMC_BCR4_FACCEN_Msk                        ;!<Flash access enable
FMC_BCR4_BURSTEN_Pos        EQU (8)
FMC_BCR4_BURSTEN_Msk        EQU (0x1 :SHL: FMC_BCR4_BURSTEN_Pos)             ;!< 0x00000100
FMC_BCR4_BURSTEN            EQU FMC_BCR4_BURSTEN_Msk                       ;!<Burst enable bit
FMC_BCR4_WAITPOL_Pos        EQU (9)
FMC_BCR4_WAITPOL_Msk        EQU (0x1 :SHL: FMC_BCR4_WAITPOL_Pos)             ;!< 0x00000200
FMC_BCR4_WAITPOL            EQU FMC_BCR4_WAITPOL_Msk                       ;!<Wait signal polarity bit
FMC_BCR4_WRAPMOD_Pos        EQU (10)
FMC_BCR4_WRAPMOD_Msk        EQU (0x1 :SHL: FMC_BCR4_WRAPMOD_Pos)             ;!< 0x00000400
FMC_BCR4_WRAPMOD            EQU FMC_BCR4_WRAPMOD_Msk                       ;!<Wrapped burst mode support
FMC_BCR4_WAITCFG_Pos        EQU (11)
FMC_BCR4_WAITCFG_Msk        EQU (0x1 :SHL: FMC_BCR4_WAITCFG_Pos)             ;!< 0x00000800
FMC_BCR4_WAITCFG            EQU FMC_BCR4_WAITCFG_Msk                       ;!<Wait timing configuration
FMC_BCR4_WREN_Pos           EQU (12)
FMC_BCR4_WREN_Msk           EQU (0x1 :SHL: FMC_BCR4_WREN_Pos)                ;!< 0x00001000
FMC_BCR4_WREN               EQU FMC_BCR4_WREN_Msk                          ;!<Write enable bit
FMC_BCR4_WAITEN_Pos         EQU (13)
FMC_BCR4_WAITEN_Msk         EQU (0x1 :SHL: FMC_BCR4_WAITEN_Pos)              ;!< 0x00002000
FMC_BCR4_WAITEN             EQU FMC_BCR4_WAITEN_Msk                        ;!<Wait enable bit
FMC_BCR4_EXTMOD_Pos         EQU (14)
FMC_BCR4_EXTMOD_Msk         EQU (0x1 :SHL: FMC_BCR4_EXTMOD_Pos)              ;!< 0x00004000
FMC_BCR4_EXTMOD             EQU FMC_BCR4_EXTMOD_Msk                        ;!<Extended mode enable
FMC_BCR4_ASYNCWAIT_Pos      EQU (15)
FMC_BCR4_ASYNCWAIT_Msk      EQU (0x1 :SHL: FMC_BCR4_ASYNCWAIT_Pos)           ;!< 0x00008000
FMC_BCR4_ASYNCWAIT          EQU FMC_BCR4_ASYNCWAIT_Msk                     ;!<Asynchronous wait
FMC_BCR4_CBURSTRW_Pos       EQU (19)
FMC_BCR4_CBURSTRW_Msk       EQU (0x1 :SHL: FMC_BCR4_CBURSTRW_Pos)            ;!< 0x00080000
FMC_BCR4_CBURSTRW           EQU FMC_BCR4_CBURSTRW_Msk                      ;!<Write burst enable

;*****************  Bit definition for FMC_BTRx register  *****************
FMC_BTRx_ADDSET_Pos         EQU (0)
FMC_BTRx_ADDSET_Msk         EQU (0xF :SHL: FMC_BTRx_ADDSET_Pos)              ;!< 0x0000000F
FMC_BTRx_ADDSET             EQU FMC_BTRx_ADDSET_Msk                        ;!<ADDSET[3:0] bits (Address setup phase duration)
FMC_BTRx_ADDSET_0           EQU (0x1 :SHL: FMC_BTRx_ADDSET_Pos)              ;!< 0x00000001
FMC_BTRx_ADDSET_1           EQU (0x2 :SHL: FMC_BTRx_ADDSET_Pos)              ;!< 0x00000002
FMC_BTRx_ADDSET_2           EQU (0x4 :SHL: FMC_BTRx_ADDSET_Pos)              ;!< 0x00000004
FMC_BTR_ADDSET_3            EQU (0x00000008)                              ;!<Bit 3

FMC_BTRx_ADDHLD_Pos         EQU (4)
FMC_BTRx_ADDHLD_Msk         EQU (0xF :SHL: FMC_BTRx_ADDHLD_Pos)              ;!< 0x000000F0
FMC_BTRx_ADDHLD             EQU FMC_BTRx_ADDHLD_Msk                        ;!<ADDHLD[3:0] bits (Address-hold phase duration)
FMC_BTRx_ADDHLD_0           EQU (0x1 :SHL: FMC_BTRx_ADDHLD_Pos)              ;!< 0x00000010
FMC_BTRx_ADDHLD_1           EQU (0x2 :SHL: FMC_BTRx_ADDHLD_Pos)              ;!< 0x00000020
FMC_BTRx_ADDHLD_2           EQU (0x4 :SHL: FMC_BTRx_ADDHLD_Pos)              ;!< 0x00000040
FMC_BTRx_ADDHLD_3           EQU (0x8 :SHL: FMC_BTRx_ADDHLD_Pos)              ;!< 0x00000080

FMC_BTRx_DATAST_Pos         EQU (8)
FMC_BTRx_DATAST_Msk         EQU (0xFF :SHL: FMC_BTRx_DATAST_Pos)             ;!< 0x0000FF00
FMC_BTRx_DATAST             EQU FMC_BTRx_DATAST_Msk                        ;!<DATAST [3:0] bits (Data-phase duration)
FMC_BTR_DATAST_0            EQU (0x00000100)                              ;!<Bit 0
FMC_BTRx_DATAST_1           EQU (0x00000200)                              ;!<Bit 1
FMC_BTRx_DATAST_2           EQU (0x00000400)                              ;!<Bit 2
FMC_BTRx_DATAST_3           EQU (0x00000800)                              ;!<Bit 3
FMC_BTRx_DATAST_4           EQU (0x00001000)                              ;!<Bit 4
FMC_BTRx_DATAST_5           EQU (0x00002000)                              ;!<Bit 5
FMC_BTRx_DATAST_6           EQU (0x00004000)                              ;!<Bit 6
FMC_BTRx_DATAST_7           EQU (0x00008000)                              ;!<Bit 7

FMC_BTRx_BUSTURN_Pos        EQU (16)
FMC_BTRx_BUSTURN_Msk        EQU (0xF :SHL: FMC_BTRx_BUSTURN_Pos)             ;!< 0x000F0000
FMC_BTRx_BUSTURN            EQU FMC_BTRx_BUSTURN_Msk                       ;!<BUSTURN[3:0] bits (Bus turnaround phase duration)
FMC_BTRx_BUSTURN_0          EQU (0x1 :SHL: FMC_BTRx_BUSTURN_Pos)             ;!< 0x00010000
FMC_BTRx_BUSTURN_1          EQU (0x2 :SHL: FMC_BTRx_BUSTURN_Pos)             ;!< 0x00020000
FMC_BTRx_BUSTURN_2          EQU (0x4 :SHL: FMC_BTRx_BUSTURN_Pos)             ;!< 0x00040000
FMC_BTRx_BUSTURN_3          EQU (0x8 :SHL: FMC_BTRx_BUSTURN_Pos)             ;!< 0x00080000

FMC_BTRx_CLKDIV_Pos         EQU (20)
FMC_BTRx_CLKDIV_Msk         EQU (0xF :SHL: FMC_BTRx_CLKDIV_Pos)              ;!< 0x00F00000
FMC_BTRx_CLKDIV             EQU FMC_BTRx_CLKDIV_Msk                        ;!<CLKDIV[3:0] bits (Clock divide ratio)
FMC_BTRx_CLKDIV_0           EQU (0x1 :SHL: FMC_BTRx_CLKDIV_Pos)              ;!< 0x00100000
FMC_BTRx_CLKDIV_1           EQU (0x2 :SHL: FMC_BTRx_CLKDIV_Pos)              ;!< 0x00200000
FMC_BTRx_CLKDIV_2           EQU (0x4 :SHL: FMC_BTRx_CLKDIV_Pos)              ;!< 0x00400000
FMC_BTRx_CLKDIV_3           EQU (0x8 :SHL: FMC_BTRx_CLKDIV_Pos)              ;!< 0x00800000

FMC_BTRx_DATLAT_Pos         EQU (24)
FMC_BTRx_DATLAT_Msk         EQU (0xF :SHL: FMC_BTRx_DATLAT_Pos)              ;!< 0x0F000000
FMC_BTRx_DATLAT             EQU FMC_BTRx_DATLAT_Msk                        ;!<DATLA[3:0] bits (Data latency)
FMC_BTRx_DATLAT_0           EQU (0x1 :SHL: FMC_BTRx_DATLAT_Pos)              ;!< 0x01000000
FMC_BTRx_DATLAT_1           EQU (0x2 :SHL: FMC_BTRx_DATLAT_Pos)              ;!< 0x02000000
FMC_BTRx_DATLAT_2           EQU (0x4 :SHL: FMC_BTRx_DATLAT_Pos)              ;!< 0x04000000
FMC_BTRx_DATLAT_3           EQU (0x8 :SHL: FMC_BTRx_DATLAT_Pos)              ;!< 0x08000000

FMC_BTRx_ACCMOD_Pos         EQU (28)
FMC_BTRx_ACCMOD_Msk         EQU (0x3 :SHL: FMC_BTRx_ACCMOD_Pos)              ;!< 0x30000000
FMC_BTRx_ACCMOD             EQU FMC_BTRx_ACCMOD_Msk                        ;!<ACCMOD[1:0] bits (Access mode)
FMC_BTRx_ACCMOD_0           EQU (0x1 :SHL: FMC_BTRx_ACCMOD_Pos)              ;!< 0x10000000
FMC_BTRx_ACCMOD_1           EQU (0x2 :SHL: FMC_BTRx_ACCMOD_Pos)              ;!< 0x20000000

;*****************  Bit definition for FMC_BTR1 register  *****************
FMC_BTR1_ADDSET_Pos         EQU (0)
FMC_BTR1_ADDSET_Msk         EQU (0xF :SHL: FMC_BTR1_ADDSET_Pos)              ;!< 0x0000000F
FMC_BTR1_ADDSET             EQU FMC_BTR1_ADDSET_Msk                        ;!<ADDSET[3:0] bits (Address setup phase duration)
FMC_BTR1_ADDSET_0           EQU (0x1 :SHL: FMC_BTR1_ADDSET_Pos)              ;!< 0x00000001
FMC_BTR1_ADDSET_1           EQU (0x2 :SHL: FMC_BTR1_ADDSET_Pos)              ;!< 0x00000002
FMC_BTR1_ADDSET_2           EQU (0x4 :SHL: FMC_BTR1_ADDSET_Pos)              ;!< 0x00000004
FMC_BTR1_ADDSET_3           EQU (0x8 :SHL: FMC_BTR1_ADDSET_Pos)              ;!< 0x00000008

FMC_BTR1_ADDHLD_Pos         EQU (4)
FMC_BTR1_ADDHLD_Msk         EQU (0xF :SHL: FMC_BTR1_ADDHLD_Pos)              ;!< 0x000000F0
FMC_BTR1_ADDHLD             EQU FMC_BTR1_ADDHLD_Msk                        ;!<ADDHLD[3:0] bits (Address-hold phase duration)
FMC_BTR1_ADDHLD_0           EQU (0x1 :SHL: FMC_BTR1_ADDHLD_Pos)              ;!< 0x00000010
FMC_BTR1_ADDHLD_1           EQU (0x2 :SHL: FMC_BTR1_ADDHLD_Pos)              ;!< 0x00000020
FMC_BTR1_ADDHLD_2           EQU (0x4 :SHL: FMC_BTR1_ADDHLD_Pos)              ;!< 0x00000040
FMC_BTR1_ADDHLD_3           EQU (0x8 :SHL: FMC_BTR1_ADDHLD_Pos)              ;!< 0x00000080

FMC_BTR1_DATAST_Pos         EQU (8)
FMC_BTR1_DATAST_Msk         EQU (0xFF :SHL: FMC_BTR1_DATAST_Pos)             ;!< 0x0000FF00
FMC_BTR1_DATAST             EQU FMC_BTR1_DATAST_Msk                        ;!<DATAST [3:0] bits (Data-phase duration)
FMC_BTR1_DATAST_0           EQU (0x01 :SHL: FMC_BTR1_DATAST_Pos)             ;!< 0x00000100
FMC_BTR1_DATAST_1           EQU (0x02 :SHL: FMC_BTR1_DATAST_Pos)             ;!< 0x00000200
FMC_BTR1_DATAST_2           EQU (0x04 :SHL: FMC_BTR1_DATAST_Pos)             ;!< 0x00000400
FMC_BTR1_DATAST_3           EQU (0x08 :SHL: FMC_BTR1_DATAST_Pos)             ;!< 0x00000800
FMC_BTR1_DATAST_4           EQU (0x10 :SHL: FMC_BTR1_DATAST_Pos)             ;!< 0x00001000
FMC_BTR1_DATAST_5           EQU (0x20 :SHL: FMC_BTR1_DATAST_Pos)             ;!< 0x00002000
FMC_BTR1_DATAST_6           EQU (0x40 :SHL: FMC_BTR1_DATAST_Pos)             ;!< 0x00004000
FMC_BTR1_DATAST_7           EQU (0x80 :SHL: FMC_BTR1_DATAST_Pos)             ;!< 0x00008000

FMC_BTR1_BUSTURN_Pos        EQU (16)
FMC_BTR1_BUSTURN_Msk        EQU (0xF :SHL: FMC_BTR1_BUSTURN_Pos)             ;!< 0x000F0000
FMC_BTR1_BUSTURN            EQU FMC_BTR1_BUSTURN_Msk                       ;!<BUSTURN[3:0] bits (Bus turnaround phase duration)
FMC_BTR1_BUSTURN_0          EQU (0x1 :SHL: FMC_BTR1_BUSTURN_Pos)             ;!< 0x00010000
FMC_BTR1_BUSTURN_1          EQU (0x2 :SHL: FMC_BTR1_BUSTURN_Pos)             ;!< 0x00020000
FMC_BTR1_BUSTURN_2          EQU (0x4 :SHL: FMC_BTR1_BUSTURN_Pos)             ;!< 0x00040000
FMC_BTR1_BUSTURN_3          EQU (0x8 :SHL: FMC_BTR1_BUSTURN_Pos)             ;!< 0x00080000

FMC_BTR1_CLKDIV_Pos         EQU (20)
FMC_BTR1_CLKDIV_Msk         EQU (0xF :SHL: FMC_BTR1_CLKDIV_Pos)              ;!< 0x00F00000
FMC_BTR1_CLKDIV             EQU FMC_BTR1_CLKDIV_Msk                        ;!<CLKDIV[3:0] bits (Clock divide ratio)
FMC_BTR1_CLKDIV_0           EQU (0x1 :SHL: FMC_BTR1_CLKDIV_Pos)              ;!< 0x00100000
FMC_BTR1_CLKDIV_1           EQU (0x2 :SHL: FMC_BTR1_CLKDIV_Pos)              ;!< 0x00200000
FMC_BTR1_CLKDIV_2           EQU (0x4 :SHL: FMC_BTR1_CLKDIV_Pos)              ;!< 0x00400000
FMC_BTR1_CLKDIV_3           EQU (0x8 :SHL: FMC_BTR1_CLKDIV_Pos)              ;!< 0x00800000

FMC_BTR1_DATLAT_Pos         EQU (24)
FMC_BTR1_DATLAT_Msk         EQU (0xF :SHL: FMC_BTR1_DATLAT_Pos)              ;!< 0x0F000000
FMC_BTR1_DATLAT             EQU FMC_BTR1_DATLAT_Msk                        ;!<DATLA[3:0] bits (Data latency)
FMC_BTR1_DATLAT_0           EQU (0x1 :SHL: FMC_BTR1_DATLAT_Pos)              ;!< 0x01000000
FMC_BTR1_DATLAT_1           EQU (0x2 :SHL: FMC_BTR1_DATLAT_Pos)              ;!< 0x02000000
FMC_BTR1_DATLAT_2           EQU (0x4 :SHL: FMC_BTR1_DATLAT_Pos)              ;!< 0x04000000
FMC_BTR1_DATLAT_3           EQU (0x8 :SHL: FMC_BTR1_DATLAT_Pos)              ;!< 0x08000000

FMC_BTR1_ACCMOD_Pos         EQU (28)
FMC_BTR1_ACCMOD_Msk         EQU (0x3 :SHL: FMC_BTR1_ACCMOD_Pos)              ;!< 0x30000000
FMC_BTR1_ACCMOD             EQU FMC_BTR1_ACCMOD_Msk                        ;!<ACCMOD[1:0] bits (Access mode)
FMC_BTR1_ACCMOD_0           EQU (0x1 :SHL: FMC_BTR1_ACCMOD_Pos)              ;!< 0x10000000
FMC_BTR1_ACCMOD_1           EQU (0x2 :SHL: FMC_BTR1_ACCMOD_Pos)              ;!< 0x20000000

;*****************  Bit definition for FMC_BTR2 register  ******************
FMC_BTR2_ADDSET_Pos         EQU (0)
FMC_BTR2_ADDSET_Msk         EQU (0xF :SHL: FMC_BTR2_ADDSET_Pos)              ;!< 0x0000000F
FMC_BTR2_ADDSET             EQU FMC_BTR2_ADDSET_Msk                        ;!<ADDSET[3:0] bits (Address setup phase duration)
FMC_BTR2_ADDSET_0           EQU (0x1 :SHL: FMC_BTR2_ADDSET_Pos)              ;!< 0x00000001
FMC_BTR2_ADDSET_1           EQU (0x2 :SHL: FMC_BTR2_ADDSET_Pos)              ;!< 0x00000002
FMC_BTR2_ADDSET_2           EQU (0x4 :SHL: FMC_BTR2_ADDSET_Pos)              ;!< 0x00000004
FMC_BTR2_ADDSET_3           EQU (0x8 :SHL: FMC_BTR2_ADDSET_Pos)              ;!< 0x00000008

FMC_BTR2_ADDHLD_Pos         EQU (4)
FMC_BTR2_ADDHLD_Msk         EQU (0xF :SHL: FMC_BTR2_ADDHLD_Pos)              ;!< 0x000000F0
FMC_BTR2_ADDHLD             EQU FMC_BTR2_ADDHLD_Msk                        ;!<ADDHLD[3:0] bits (Address-hold phase duration)
FMC_BTR2_ADDHLD_0           EQU (0x1 :SHL: FMC_BTR2_ADDHLD_Pos)              ;!< 0x00000010
FMC_BTR2_ADDHLD_1           EQU (0x2 :SHL: FMC_BTR2_ADDHLD_Pos)              ;!< 0x00000020
FMC_BTR2_ADDHLD_2           EQU (0x4 :SHL: FMC_BTR2_ADDHLD_Pos)              ;!< 0x00000040
FMC_BTR2_ADDHLD_3           EQU (0x8 :SHL: FMC_BTR2_ADDHLD_Pos)              ;!< 0x00000080

FMC_BTR2_DATAST_Pos         EQU (8)
FMC_BTR2_DATAST_Msk         EQU (0xFF :SHL: FMC_BTR2_DATAST_Pos)             ;!< 0x0000FF00
FMC_BTR2_DATAST             EQU FMC_BTR2_DATAST_Msk                        ;!<DATAST [3:0] bits (Data-phase duration)
FMC_BTR2_DATAST_0           EQU (0x01 :SHL: FMC_BTR2_DATAST_Pos)             ;!< 0x00000100
FMC_BTR2_DATAST_1           EQU (0x02 :SHL: FMC_BTR2_DATAST_Pos)             ;!< 0x00000200
FMC_BTR2_DATAST_2           EQU (0x04 :SHL: FMC_BTR2_DATAST_Pos)             ;!< 0x00000400
FMC_BTR2_DATAST_3           EQU (0x08 :SHL: FMC_BTR2_DATAST_Pos)             ;!< 0x00000800
FMC_BTR2_DATAST_4           EQU (0x10 :SHL: FMC_BTR2_DATAST_Pos)             ;!< 0x00001000
FMC_BTR2_DATAST_5           EQU (0x20 :SHL: FMC_BTR2_DATAST_Pos)             ;!< 0x00002000
FMC_BTR2_DATAST_6           EQU (0x40 :SHL: FMC_BTR2_DATAST_Pos)             ;!< 0x00004000
FMC_BTR2_DATAST_7           EQU (0x80 :SHL: FMC_BTR2_DATAST_Pos)             ;!< 0x00008000

FMC_BTR2_BUSTURN_Pos        EQU (16)
FMC_BTR2_BUSTURN_Msk        EQU (0xF :SHL: FMC_BTR2_BUSTURN_Pos)             ;!< 0x000F0000
FMC_BTR2_BUSTURN            EQU FMC_BTR2_BUSTURN_Msk                       ;!<BUSTURN[3:0] bits (Bus turnaround phase duration)
FMC_BTR2_BUSTURN_0          EQU (0x1 :SHL: FMC_BTR2_BUSTURN_Pos)             ;!< 0x00010000
FMC_BTR2_BUSTURN_1          EQU (0x2 :SHL: FMC_BTR2_BUSTURN_Pos)             ;!< 0x00020000
FMC_BTR2_BUSTURN_2          EQU (0x4 :SHL: FMC_BTR2_BUSTURN_Pos)             ;!< 0x00040000
FMC_BTR2_BUSTURN_3          EQU (0x8 :SHL: FMC_BTR2_BUSTURN_Pos)             ;!< 0x00080000

FMC_BTR2_CLKDIV_Pos         EQU (20)
FMC_BTR2_CLKDIV_Msk         EQU (0xF :SHL: FMC_BTR2_CLKDIV_Pos)              ;!< 0x00F00000
FMC_BTR2_CLKDIV             EQU FMC_BTR2_CLKDIV_Msk                        ;!<CLKDIV[3:0] bits (Clock divide ratio)
FMC_BTR2_CLKDIV_0           EQU (0x1 :SHL: FMC_BTR2_CLKDIV_Pos)              ;!< 0x00100000
FMC_BTR2_CLKDIV_1           EQU (0x2 :SHL: FMC_BTR2_CLKDIV_Pos)              ;!< 0x00200000
FMC_BTR2_CLKDIV_2           EQU (0x4 :SHL: FMC_BTR2_CLKDIV_Pos)              ;!< 0x00400000
FMC_BTR2_CLKDIV_3           EQU (0x8 :SHL: FMC_BTR2_CLKDIV_Pos)              ;!< 0x00800000

FMC_BTR2_DATLAT_Pos         EQU (24)
FMC_BTR2_DATLAT_Msk         EQU (0xF :SHL: FMC_BTR2_DATLAT_Pos)              ;!< 0x0F000000
FMC_BTR2_DATLAT             EQU FMC_BTR2_DATLAT_Msk                        ;!<DATLA[3:0] bits (Data latency)
FMC_BTR2_DATLAT_0           EQU (0x1 :SHL: FMC_BTR2_DATLAT_Pos)              ;!< 0x01000000
FMC_BTR2_DATLAT_1           EQU (0x2 :SHL: FMC_BTR2_DATLAT_Pos)              ;!< 0x02000000
FMC_BTR2_DATLAT_2           EQU (0x4 :SHL: FMC_BTR2_DATLAT_Pos)              ;!< 0x04000000
FMC_BTR2_DATLAT_3           EQU (0x8 :SHL: FMC_BTR2_DATLAT_Pos)              ;!< 0x08000000

FMC_BTR2_ACCMOD_Pos         EQU (28)
FMC_BTR2_ACCMOD_Msk         EQU (0x3 :SHL: FMC_BTR2_ACCMOD_Pos)              ;!< 0x30000000
FMC_BTR2_ACCMOD             EQU FMC_BTR2_ACCMOD_Msk                        ;!<ACCMOD[1:0] bits (Access mode)
FMC_BTR2_ACCMOD_0           EQU (0x1 :SHL: FMC_BTR2_ACCMOD_Pos)              ;!< 0x10000000
FMC_BTR2_ACCMOD_1           EQU (0x2 :SHL: FMC_BTR2_ACCMOD_Pos)              ;!< 0x20000000

;******************  Bit definition for FMC_BTR3 register  ******************
FMC_BTR3_ADDSET_Pos         EQU (0)
FMC_BTR3_ADDSET_Msk         EQU (0xF :SHL: FMC_BTR3_ADDSET_Pos)              ;!< 0x0000000F
FMC_BTR3_ADDSET             EQU FMC_BTR3_ADDSET_Msk                        ;!<ADDSET[3:0] bits (Address setup phase duration)
FMC_BTR3_ADDSET_0           EQU (0x1 :SHL: FMC_BTR3_ADDSET_Pos)              ;!< 0x00000001
FMC_BTR3_ADDSET_1           EQU (0x2 :SHL: FMC_BTR3_ADDSET_Pos)              ;!< 0x00000002
FMC_BTR3_ADDSET_2           EQU (0x4 :SHL: FMC_BTR3_ADDSET_Pos)              ;!< 0x00000004
FMC_BTR3_ADDSET_3           EQU (0x8 :SHL: FMC_BTR3_ADDSET_Pos)              ;!< 0x00000008

FMC_BTR3_ADDHLD_Pos         EQU (4)
FMC_BTR3_ADDHLD_Msk         EQU (0xF :SHL: FMC_BTR3_ADDHLD_Pos)              ;!< 0x000000F0
FMC_BTR3_ADDHLD             EQU FMC_BTR3_ADDHLD_Msk                        ;!<ADDHLD[3:0] bits (Address-hold phase duration)
FMC_BTR3_ADDHLD_0           EQU (0x1 :SHL: FMC_BTR3_ADDHLD_Pos)              ;!< 0x00000010
FMC_BTR3_ADDHLD_1           EQU (0x2 :SHL: FMC_BTR3_ADDHLD_Pos)              ;!< 0x00000020
FMC_BTR3_ADDHLD_2           EQU (0x4 :SHL: FMC_BTR3_ADDHLD_Pos)              ;!< 0x00000040
FMC_BTR3_ADDHLD_3           EQU (0x8 :SHL: FMC_BTR3_ADDHLD_Pos)              ;!< 0x00000080

FMC_BTR3_DATAST_Pos         EQU (8)
FMC_BTR3_DATAST_Msk         EQU (0xFF :SHL: FMC_BTR3_DATAST_Pos)             ;!< 0x0000FF00
FMC_BTR3_DATAST             EQU FMC_BTR3_DATAST_Msk                        ;!<DATAST [3:0] bits (Data-phase duration)
FMC_BTR3_DATAST_0           EQU (0x01 :SHL: FMC_BTR3_DATAST_Pos)             ;!< 0x00000100
FMC_BTR3_DATAST_1           EQU (0x02 :SHL: FMC_BTR3_DATAST_Pos)             ;!< 0x00000200
FMC_BTR3_DATAST_2           EQU (0x04 :SHL: FMC_BTR3_DATAST_Pos)             ;!< 0x00000400
FMC_BTR3_DATAST_3           EQU (0x08 :SHL: FMC_BTR3_DATAST_Pos)             ;!< 0x00000800
FMC_BTR3_DATAST_4           EQU (0x10 :SHL: FMC_BTR3_DATAST_Pos)             ;!< 0x00001000
FMC_BTR3_DATAST_5           EQU (0x20 :SHL: FMC_BTR3_DATAST_Pos)             ;!< 0x00002000
FMC_BTR3_DATAST_6           EQU (0x40 :SHL: FMC_BTR3_DATAST_Pos)             ;!< 0x00004000
FMC_BTR3_DATAST_7           EQU (0x80 :SHL: FMC_BTR3_DATAST_Pos)             ;!< 0x00008000

FMC_BTR3_BUSTURN_Pos        EQU (16)
FMC_BTR3_BUSTURN_Msk        EQU (0xF :SHL: FMC_BTR3_BUSTURN_Pos)             ;!< 0x000F0000
FMC_BTR3_BUSTURN            EQU FMC_BTR3_BUSTURN_Msk                       ;!<BUSTURN[3:0] bits (Bus turnaround phase duration)
FMC_BTR3_BUSTURN_0          EQU (0x1 :SHL: FMC_BTR3_BUSTURN_Pos)             ;!< 0x00010000
FMC_BTR3_BUSTURN_1          EQU (0x2 :SHL: FMC_BTR3_BUSTURN_Pos)             ;!< 0x00020000
FMC_BTR3_BUSTURN_2          EQU (0x4 :SHL: FMC_BTR3_BUSTURN_Pos)             ;!< 0x00040000
FMC_BTR3_BUSTURN_3          EQU (0x8 :SHL: FMC_BTR3_BUSTURN_Pos)             ;!< 0x00080000

FMC_BTR3_CLKDIV_Pos         EQU (20)
FMC_BTR3_CLKDIV_Msk         EQU (0xF :SHL: FMC_BTR3_CLKDIV_Pos)              ;!< 0x00F00000
FMC_BTR3_CLKDIV             EQU FMC_BTR3_CLKDIV_Msk                        ;!<CLKDIV[3:0] bits (Clock divide ratio)
FMC_BTR3_CLKDIV_0           EQU (0x1 :SHL: FMC_BTR3_CLKDIV_Pos)              ;!< 0x00100000
FMC_BTR3_CLKDIV_1           EQU (0x2 :SHL: FMC_BTR3_CLKDIV_Pos)              ;!< 0x00200000
FMC_BTR3_CLKDIV_2           EQU (0x4 :SHL: FMC_BTR3_CLKDIV_Pos)              ;!< 0x00400000
FMC_BTR3_CLKDIV_3           EQU (0x8 :SHL: FMC_BTR3_CLKDIV_Pos)              ;!< 0x00800000

FMC_BTR3_DATLAT_Pos         EQU (24)
FMC_BTR3_DATLAT_Msk         EQU (0xF :SHL: FMC_BTR3_DATLAT_Pos)              ;!< 0x0F000000
FMC_BTR3_DATLAT             EQU FMC_BTR3_DATLAT_Msk                        ;!<DATLA[3:0] bits (Data latency)
FMC_BTR3_DATLAT_0           EQU (0x1 :SHL: FMC_BTR3_DATLAT_Pos)              ;!< 0x01000000
FMC_BTR3_DATLAT_1           EQU (0x2 :SHL: FMC_BTR3_DATLAT_Pos)              ;!< 0x02000000
FMC_BTR3_DATLAT_2           EQU (0x4 :SHL: FMC_BTR3_DATLAT_Pos)              ;!< 0x04000000
FMC_BTR3_DATLAT_3           EQU (0x8 :SHL: FMC_BTR3_DATLAT_Pos)              ;!< 0x08000000

FMC_BTR3_ACCMOD_Pos         EQU (28)
FMC_BTR3_ACCMOD_Msk         EQU (0x3 :SHL: FMC_BTR3_ACCMOD_Pos)              ;!< 0x30000000
FMC_BTR3_ACCMOD             EQU FMC_BTR3_ACCMOD_Msk                        ;!<ACCMOD[1:0] bits (Access mode)
FMC_BTR3_ACCMOD_0           EQU (0x1 :SHL: FMC_BTR3_ACCMOD_Pos)              ;!< 0x10000000
FMC_BTR3_ACCMOD_1           EQU (0x2 :SHL: FMC_BTR3_ACCMOD_Pos)              ;!< 0x20000000

;*****************  Bit definition for FMC_BTR4 register  ******************
FMC_BTR4_ADDSET_Pos         EQU (0)
FMC_BTR4_ADDSET_Msk         EQU (0xF :SHL: FMC_BTR4_ADDSET_Pos)              ;!< 0x0000000F
FMC_BTR4_ADDSET             EQU FMC_BTR4_ADDSET_Msk                        ;!<ADDSET[3:0] bits (Address setup phase duration)
FMC_BTR4_ADDSET_0           EQU (0x1 :SHL: FMC_BTR4_ADDSET_Pos)              ;!< 0x00000001
FMC_BTR4_ADDSET_1           EQU (0x2 :SHL: FMC_BTR4_ADDSET_Pos)              ;!< 0x00000002
FMC_BTR4_ADDSET_2           EQU (0x4 :SHL: FMC_BTR4_ADDSET_Pos)              ;!< 0x00000004
FMC_BTR4_ADDSET_3           EQU (0x8 :SHL: FMC_BTR4_ADDSET_Pos)              ;!< 0x00000008

FMC_BTR4_ADDHLD_Pos         EQU (4)
FMC_BTR4_ADDHLD_Msk         EQU (0xF :SHL: FMC_BTR4_ADDHLD_Pos)              ;!< 0x000000F0
FMC_BTR4_ADDHLD             EQU FMC_BTR4_ADDHLD_Msk                        ;!<ADDHLD[3:0] bits (Address-hold phase duration)
FMC_BTR4_ADDHLD_0           EQU (0x1 :SHL: FMC_BTR4_ADDHLD_Pos)              ;!< 0x00000010
FMC_BTR4_ADDHLD_1           EQU (0x2 :SHL: FMC_BTR4_ADDHLD_Pos)              ;!< 0x00000020
FMC_BTR4_ADDHLD_2           EQU (0x4 :SHL: FMC_BTR4_ADDHLD_Pos)              ;!< 0x00000040
FMC_BTR4_ADDHLD_3           EQU (0x8 :SHL: FMC_BTR4_ADDHLD_Pos)              ;!< 0x00000080

FMC_BTR4_DATAST_Pos         EQU (8)
FMC_BTR4_DATAST_Msk         EQU (0xFF :SHL: FMC_BTR4_DATAST_Pos)             ;!< 0x0000FF00
FMC_BTR4_DATAST             EQU FMC_BTR4_DATAST_Msk                        ;!<DATAST [3:0] bits (Data-phase duration)
FMC_BTR4_DATAST_0           EQU (0x01 :SHL: FMC_BTR4_DATAST_Pos)             ;!< 0x00000100
FMC_BTR4_DATAST_1           EQU (0x02 :SHL: FMC_BTR4_DATAST_Pos)             ;!< 0x00000200
FMC_BTR4_DATAST_2           EQU (0x04 :SHL: FMC_BTR4_DATAST_Pos)             ;!< 0x00000400
FMC_BTR4_DATAST_3           EQU (0x08 :SHL: FMC_BTR4_DATAST_Pos)             ;!< 0x00000800
FMC_BTR4_DATAST_4           EQU (0x10 :SHL: FMC_BTR4_DATAST_Pos)             ;!< 0x00001000
FMC_BTR4_DATAST_5           EQU (0x20 :SHL: FMC_BTR4_DATAST_Pos)             ;!< 0x00002000
FMC_BTR4_DATAST_6           EQU (0x40 :SHL: FMC_BTR4_DATAST_Pos)             ;!< 0x00004000
FMC_BTR4_DATAST_7           EQU (0x80 :SHL: FMC_BTR4_DATAST_Pos)             ;!< 0x00008000

FMC_BTR4_BUSTURN_Pos        EQU (16)
FMC_BTR4_BUSTURN_Msk        EQU (0xF :SHL: FMC_BTR4_BUSTURN_Pos)             ;!< 0x000F0000
FMC_BTR4_BUSTURN            EQU FMC_BTR4_BUSTURN_Msk                       ;!<BUSTURN[3:0] bits (Bus turnaround phase duration)
FMC_BTR4_BUSTURN_0          EQU (0x1 :SHL: FMC_BTR4_BUSTURN_Pos)             ;!< 0x00010000
FMC_BTR4_BUSTURN_1          EQU (0x2 :SHL: FMC_BTR4_BUSTURN_Pos)             ;!< 0x00020000
FMC_BTR4_BUSTURN_2          EQU (0x4 :SHL: FMC_BTR4_BUSTURN_Pos)             ;!< 0x00040000
FMC_BTR4_BUSTURN_3          EQU (0x8 :SHL: FMC_BTR4_BUSTURN_Pos)             ;!< 0x00080000

FMC_BTR4_CLKDIV_Pos         EQU (20)
FMC_BTR4_CLKDIV_Msk         EQU (0xF :SHL: FMC_BTR4_CLKDIV_Pos)              ;!< 0x00F00000
FMC_BTR4_CLKDIV             EQU FMC_BTR4_CLKDIV_Msk                        ;!<CLKDIV[3:0] bits (Clock divide ratio)
FMC_BTR4_CLKDIV_0           EQU (0x1 :SHL: FMC_BTR4_CLKDIV_Pos)              ;!< 0x00100000
FMC_BTR4_CLKDIV_1           EQU (0x2 :SHL: FMC_BTR4_CLKDIV_Pos)              ;!< 0x00200000
FMC_BTR4_CLKDIV_2           EQU (0x4 :SHL: FMC_BTR4_CLKDIV_Pos)              ;!< 0x00400000
FMC_BTR4_CLKDIV_3           EQU (0x8 :SHL: FMC_BTR4_CLKDIV_Pos)              ;!< 0x00800000

FMC_BTR4_DATLAT_Pos         EQU (24)
FMC_BTR4_DATLAT_Msk         EQU (0xF :SHL: FMC_BTR4_DATLAT_Pos)              ;!< 0x0F000000
FMC_BTR4_DATLAT             EQU FMC_BTR4_DATLAT_Msk                        ;!<DATLA[3:0] bits (Data latency)
FMC_BTR4_DATLAT_0           EQU (0x1 :SHL: FMC_BTR4_DATLAT_Pos)              ;!< 0x01000000
FMC_BTR4_DATLAT_1           EQU (0x2 :SHL: FMC_BTR4_DATLAT_Pos)              ;!< 0x02000000
FMC_BTR4_DATLAT_2           EQU (0x4 :SHL: FMC_BTR4_DATLAT_Pos)              ;!< 0x04000000
FMC_BTR4_DATLAT_3           EQU (0x8 :SHL: FMC_BTR4_DATLAT_Pos)              ;!< 0x08000000

FMC_BTR4_ACCMOD_Pos         EQU (28)
FMC_BTR4_ACCMOD_Msk         EQU (0x3 :SHL: FMC_BTR4_ACCMOD_Pos)              ;!< 0x30000000
FMC_BTR4_ACCMOD             EQU FMC_BTR4_ACCMOD_Msk                        ;!<ACCMOD[1:0] bits (Access mode)
FMC_BTR4_ACCMOD_0           EQU (0x1 :SHL: FMC_BTR4_ACCMOD_Pos)              ;!< 0x10000000
FMC_BTR4_ACCMOD_1           EQU (0x2 :SHL: FMC_BTR4_ACCMOD_Pos)              ;!< 0x20000000

;*****************  Bit definition for FMC_BWTRx register  *****************
FMC_BWTRx_ADDSET_Pos        EQU (0)
FMC_BWTRx_ADDSET_Msk        EQU (0xF :SHL: FMC_BWTRx_ADDSET_Pos)             ;!< 0x0000000F
FMC_BWTRx_ADDSET            EQU FMC_BWTRx_ADDSET_Msk                       ;!<ADDSET[3:0] bits (Address setup phase duration)
FMC_BWTRx_ADDSET_0          EQU (0x1 :SHL: FMC_BWTRx_ADDSET_Pos)             ;!< 0x00000001
FMC_BWTRx_ADDSET_1          EQU (0x2 :SHL: FMC_BWTRx_ADDSET_Pos)             ;!< 0x00000002
FMC_BWTRx_ADDSET_2          EQU (0x4 :SHL: FMC_BWTRx_ADDSET_Pos)             ;!< 0x00000004
FMC_BWTRx_ADDSET_3          EQU (0x8 :SHL: FMC_BWTRx_ADDSET_Pos)             ;!< 0x00000008

FMC_BWTRx_ADDHLD_Pos        EQU (4)
FMC_BWTRx_ADDHLD_Msk        EQU (0xF :SHL: FMC_BWTRx_ADDHLD_Pos)             ;!< 0x000000F0
FMC_BWTRx_ADDHLD            EQU FMC_BWTRx_ADDHLD_Msk                       ;!<ADDHLD[3:0] bits (Address-hold phase duration)
FMC_BWTRx_ADDHLD_0          EQU (0x1 :SHL: FMC_BWTRx_ADDHLD_Pos)             ;!< 0x00000010
FMC_BWTRx_ADDHLD_1          EQU (0x2 :SHL: FMC_BWTRx_ADDHLD_Pos)             ;!< 0x00000020
FMC_BWTRx_ADDHLD_2          EQU (0x4 :SHL: FMC_BWTRx_ADDHLD_Pos)             ;!< 0x00000040
FMC_BWTRx_ADDHLD_3          EQU (0x8 :SHL: FMC_BWTRx_ADDHLD_Pos)             ;!< 0x00000080

FMC_BWTRx_DATAST_Pos        EQU (8)
FMC_BWTRx_DATAST_Msk        EQU (0xFF :SHL: FMC_BWTRx_DATAST_Pos)            ;!< 0x0000FF00
FMC_BWTRx_DATAST            EQU FMC_BWTRx_DATAST_Msk                       ;!<DATAST [3:0] bits (Data-phase duration)
FMC_BWTRx_DATAST_0          EQU (0x01 :SHL: FMC_BWTRx_DATAST_Pos)            ;!< 0x00000100
FMC_BWTRx_DATAST_1          EQU (0x02 :SHL: FMC_BWTRx_DATAST_Pos)            ;!< 0x00000200
FMC_BWTRx_DATAST_2          EQU (0x04 :SHL: FMC_BWTRx_DATAST_Pos)            ;!< 0x00000400
FMC_BWTRx_DATAST_3          EQU (0x08 :SHL: FMC_BWTRx_DATAST_Pos)            ;!< 0x00000800
FMC_BWTRx_DATAST_4          EQU (0x10 :SHL: FMC_BWTRx_DATAST_Pos)            ;!< 0x00001000
FMC_BWTRx_DATAST_5          EQU (0x20 :SHL: FMC_BWTRx_DATAST_Pos)            ;!< 0x00002000
FMC_BWTRx_DATAST_6          EQU (0x40 :SHL: FMC_BWTRx_DATAST_Pos)            ;!< 0x00004000
FMC_BWTRx_DATAST_7          EQU (0x80 :SHL: FMC_BWTRx_DATAST_Pos)            ;!< 0x00008000

FMC_BWTRx_ACCMOD_Pos        EQU (28)
FMC_BWTRx_ACCMOD_Msk        EQU (0x3 :SHL: FMC_BWTRx_ACCMOD_Pos)             ;!< 0x30000000
FMC_BWTRx_ACCMOD            EQU FMC_BWTRx_ACCMOD_Msk                       ;!<ACCMOD[1:0] bits (Access mode)
FMC_BWTRx_ACCMOD_0          EQU (0x1 :SHL: FMC_BWTRx_ACCMOD_Pos)             ;!< 0x10000000
FMC_BWTRx_ACCMOD_1          EQU (0x2 :SHL: FMC_BWTRx_ACCMOD_Pos)             ;!< 0x20000000

; Old Bit definition for FMC_BWTRx register maintained for legacy purpose
FMC_BWTRx_ADDSETx                  EQU FMC_BWTRx_ADDSET
FMC_BWTRx_ADDSETx_0                EQU FMC_BWTRx_ADDSET_0
FMC_BWTRx_ADDSETx_1                EQU FMC_BWTRx_ADDSET_1
FMC_BWTRx_ADDSETx_2                EQU FMC_BWTRx_ADDSET_2
FMC_BWTRx_ADDSETx_3                EQU FMC_BWTRx_ADDSET_3

FMC_BWTRx_ADDHLDx                  EQU FMC_BWTRx_ADDHLD
FMC_BWTRx_ADDHLDx_0                EQU FMC_BWTRx_ADDHLD_0
FMC_BWTRx_ADDHLDx_1                EQU FMC_BWTRx_ADDHLD_1
FMC_BWTRx_ADDHLDx_2                EQU FMC_BWTRx_ADDHLD_2
FMC_BWTRx_ADDHLDx_3                EQU FMC_BWTRx_ADDHLD_3

FMC_BWTRx_DATASTx                  EQU FMC_BWTRx_DATAST
FMC_BWTRx_DATASTx_0                EQU FMC_BWTRx_DATAST_0
FMC_BWTRx_DATASTx_1                EQU FMC_BWTRx_DATAST_1
FMC_BWTRx_DATASTx_2                EQU FMC_BWTRx_DATAST_2
FMC_BWTRx_DATASTx_3                EQU FMC_BWTRx_DATAST_3
FMC_BWTRx_DATASTx_4                EQU FMC_BWTRx_DATAST_4
FMC_BWTRx_DATASTx_5                EQU FMC_BWTRx_DATAST_5
FMC_BWTRx_DATASTx_6                EQU FMC_BWTRx_DATAST_6
FMC_BWTRx_DATASTx_7                EQU FMC_BWTRx_DATAST_7

FMC_BWTRx_ACCMODx                  EQU FMC_BWTRx_ACCMOD
FMC_BWTRx_ACCMODx_0                EQU FMC_BWTRx_ACCMOD_0
FMC_BWTRx_ACCMODx_1                EQU FMC_BWTRx_ACCMOD_1

;*****************  Bit definition for FMC_BWTR1 register  *****************
FMC_BWTR1_ADDSET_Pos        EQU (0)
FMC_BWTR1_ADDSET_Msk        EQU (0xF :SHL: FMC_BWTR1_ADDSET_Pos)             ;!< 0x0000000F
FMC_BWTR1_ADDSET            EQU FMC_BWTR1_ADDSET_Msk                       ;!<ADDSET[3:0] bits (Address setup phase duration)
FMC_BWTR1_ADDSET_0          EQU (0x1 :SHL: FMC_BWTR1_ADDSET_Pos)             ;!< 0x00000001
FMC_BWTR1_ADDSET_1          EQU (0x2 :SHL: FMC_BWTR1_ADDSET_Pos)             ;!< 0x00000002
FMC_BWTR1_ADDSET_2          EQU (0x4 :SHL: FMC_BWTR1_ADDSET_Pos)             ;!< 0x00000004
FMC_BWTR1_ADDSET_3          EQU (0x8 :SHL: FMC_BWTR1_ADDSET_Pos)             ;!< 0x00000008

FMC_BWTR1_ADDHLD_Pos        EQU (4)
FMC_BWTR1_ADDHLD_Msk        EQU (0xF :SHL: FMC_BWTR1_ADDHLD_Pos)             ;!< 0x000000F0
FMC_BWTR1_ADDHLD            EQU FMC_BWTR1_ADDHLD_Msk                       ;!<ADDHLD[3:0] bits (Address-hold phase duration)
FMC_BWTR1_ADDHLD_0          EQU (0x1 :SHL: FMC_BWTR1_ADDHLD_Pos)             ;!< 0x00000010
FMC_BWTR1_ADDHLD_1          EQU (0x2 :SHL: FMC_BWTR1_ADDHLD_Pos)             ;!< 0x00000020
FMC_BWTR1_ADDHLD_2          EQU (0x4 :SHL: FMC_BWTR1_ADDHLD_Pos)             ;!< 0x00000040
FMC_BWTR1_ADDHLD_3          EQU (0x8 :SHL: FMC_BWTR1_ADDHLD_Pos)             ;!< 0x00000080

FMC_BWTR1_DATAST_Pos        EQU (8)
FMC_BWTR1_DATAST_Msk        EQU (0xFF :SHL: FMC_BWTR1_DATAST_Pos)            ;!< 0x0000FF00
FMC_BWTR1_DATAST            EQU FMC_BWTR1_DATAST_Msk                       ;!<DATAST [3:0] bits (Data-phase duration)
FMC_BWTR1_DATAST_0          EQU (0x01 :SHL: FMC_BWTR1_DATAST_Pos)            ;!< 0x00000100
FMC_BWTR1_DATAST_1          EQU (0x02 :SHL: FMC_BWTR1_DATAST_Pos)            ;!< 0x00000200
FMC_BWTR1_DATAST_2          EQU (0x04 :SHL: FMC_BWTR1_DATAST_Pos)            ;!< 0x00000400
FMC_BWTR1_DATAST_3          EQU (0x08 :SHL: FMC_BWTR1_DATAST_Pos)            ;!< 0x00000800
FMC_BWTR1_DATAST_4          EQU (0x10 :SHL: FMC_BWTR1_DATAST_Pos)            ;!< 0x00001000
FMC_BWTR1_DATAST_5          EQU (0x20 :SHL: FMC_BWTR1_DATAST_Pos)            ;!< 0x00002000
FMC_BWTR1_DATAST_6          EQU (0x40 :SHL: FMC_BWTR1_DATAST_Pos)            ;!< 0x00004000
FMC_BWTR1_DATAST_7          EQU (0x80 :SHL: FMC_BWTR1_DATAST_Pos)            ;!< 0x00008000

FMC_BWTR1_CLKDIV_Pos        EQU (20)
FMC_BWTR1_CLKDIV_Msk        EQU (0xF :SHL: FMC_BWTR1_CLKDIV_Pos)             ;!< 0x00F00000
FMC_BWTR1_CLKDIV            EQU FMC_BWTR1_CLKDIV_Msk                       ;!<CLKDIV[3:0] bits (Clock divide ratio)
FMC_BWTR1_CLKDIV_0          EQU (0x1 :SHL: FMC_BWTR1_CLKDIV_Pos)             ;!< 0x00100000
FMC_BWTR1_CLKDIV_1          EQU (0x2 :SHL: FMC_BWTR1_CLKDIV_Pos)             ;!< 0x00200000
FMC_BWTR1_CLKDIV_2          EQU (0x4 :SHL: FMC_BWTR1_CLKDIV_Pos)             ;!< 0x00400000
FMC_BWTR1_CLKDIV_3          EQU (0x8 :SHL: FMC_BWTR1_CLKDIV_Pos)             ;!< 0x00800000

FMC_BWTR1_DATLAT_Pos        EQU (24)
FMC_BWTR1_DATLAT_Msk        EQU (0xF :SHL: FMC_BWTR1_DATLAT_Pos)             ;!< 0x0F000000
FMC_BWTR1_DATLAT            EQU FMC_BWTR1_DATLAT_Msk                       ;!<DATLA[3:0] bits (Data latency)
FMC_BWTR1_DATLAT_0          EQU (0x1 :SHL: FMC_BWTR1_DATLAT_Pos)             ;!< 0x01000000
FMC_BWTR1_DATLAT_1          EQU (0x2 :SHL: FMC_BWTR1_DATLAT_Pos)             ;!< 0x02000000
FMC_BWTR1_DATLAT_2          EQU (0x4 :SHL: FMC_BWTR1_DATLAT_Pos)             ;!< 0x04000000
FMC_BWTR1_DATLAT_3          EQU (0x8 :SHL: FMC_BWTR1_DATLAT_Pos)             ;!< 0x08000000

FMC_BWTR1_ACCMOD_Pos        EQU (28)
FMC_BWTR1_ACCMOD_Msk        EQU (0x3 :SHL: FMC_BWTR1_ACCMOD_Pos)             ;!< 0x30000000
FMC_BWTR1_ACCMOD            EQU FMC_BWTR1_ACCMOD_Msk                       ;!<ACCMOD[1:0] bits (Access mode)
FMC_BWTR1_ACCMOD_0          EQU (0x1 :SHL: FMC_BWTR1_ACCMOD_Pos)             ;!< 0x10000000
FMC_BWTR1_ACCMOD_1          EQU (0x2 :SHL: FMC_BWTR1_ACCMOD_Pos)             ;!< 0x20000000

;*****************  Bit definition for FMC_BWTR2 register  *****************
FMC_BWTR2_ADDSET_Pos        EQU (0)
FMC_BWTR2_ADDSET_Msk        EQU (0xF :SHL: FMC_BWTR2_ADDSET_Pos)             ;!< 0x0000000F
FMC_BWTR2_ADDSET            EQU FMC_BWTR2_ADDSET_Msk                       ;!<ADDSET[3:0] bits (Address setup phase duration)
FMC_BWTR2_ADDSET_0          EQU (0x1 :SHL: FMC_BWTR2_ADDSET_Pos)             ;!< 0x00000001
FMC_BWTR2_ADDSET_1          EQU (0x2 :SHL: FMC_BWTR2_ADDSET_Pos)             ;!< 0x00000002
FMC_BWTR2_ADDSET_2          EQU (0x4 :SHL: FMC_BWTR2_ADDSET_Pos)             ;!< 0x00000004
FMC_BWTR2_ADDSET_3          EQU (0x8 :SHL: FMC_BWTR2_ADDSET_Pos)             ;!< 0x00000008

FMC_BWTR2_ADDHLD_Pos        EQU (4)
FMC_BWTR2_ADDHLD_Msk        EQU (0xF :SHL: FMC_BWTR2_ADDHLD_Pos)             ;!< 0x000000F0
FMC_BWTR2_ADDHLD            EQU FMC_BWTR2_ADDHLD_Msk                       ;!<ADDHLD[3:0] bits (Address-hold phase duration)
FMC_BWTR2_ADDHLD_0          EQU (0x1 :SHL: FMC_BWTR2_ADDHLD_Pos)             ;!< 0x00000010
FMC_BWTR2_ADDHLD_1          EQU (0x2 :SHL: FMC_BWTR2_ADDHLD_Pos)             ;!< 0x00000020
FMC_BWTR2_ADDHLD_2          EQU (0x4 :SHL: FMC_BWTR2_ADDHLD_Pos)             ;!< 0x00000040
FMC_BWTR2_ADDHLD_3          EQU (0x8 :SHL: FMC_BWTR2_ADDHLD_Pos)             ;!< 0x00000080

FMC_BWTR2_DATAST_Pos        EQU (8)
FMC_BWTR2_DATAST_Msk        EQU (0xFF :SHL: FMC_BWTR2_DATAST_Pos)            ;!< 0x0000FF00
FMC_BWTR2_DATAST            EQU FMC_BWTR2_DATAST_Msk                       ;!<DATAST [3:0] bits (Data-phase duration)
FMC_BWTR2_DATAST_0          EQU (0x01 :SHL: FMC_BWTR2_DATAST_Pos)            ;!< 0x00000100
FMC_BWTR2_DATAST_1          EQU (0x02 :SHL: FMC_BWTR2_DATAST_Pos)            ;!< 0x00000200
FMC_BWTR2_DATAST_2          EQU (0x04 :SHL: FMC_BWTR2_DATAST_Pos)            ;!< 0x00000400
FMC_BWTR2_DATAST_3          EQU (0x08 :SHL: FMC_BWTR2_DATAST_Pos)            ;!< 0x00000800
FMC_BWTR2_DATAST_4          EQU (0x10 :SHL: FMC_BWTR2_DATAST_Pos)            ;!< 0x00001000
FMC_BWTR2_DATAST_5          EQU (0x20 :SHL: FMC_BWTR2_DATAST_Pos)            ;!< 0x00002000
FMC_BWTR2_DATAST_6          EQU (0x40 :SHL: FMC_BWTR2_DATAST_Pos)            ;!< 0x00004000
FMC_BWTR2_DATAST_7          EQU (0x80 :SHL: FMC_BWTR2_DATAST_Pos)            ;!< 0x00008000

FMC_BWTR2_CLKDIV_Pos        EQU (20)
FMC_BWTR2_CLKDIV_Msk        EQU (0xF :SHL: FMC_BWTR2_CLKDIV_Pos)             ;!< 0x00F00000
FMC_BWTR2_CLKDIV            EQU FMC_BWTR2_CLKDIV_Msk                       ;!<CLKDIV[3:0] bits (Clock divide ratio)
FMC_BWTR2_CLKDIV_0          EQU (0x1 :SHL: FMC_BWTR2_CLKDIV_Pos)             ;!< 0x00100000
FMC_BWTR2_CLKDIV_1          EQU (0x2 :SHL: FMC_BWTR2_CLKDIV_Pos)             ;!< 0x00200000
FMC_BWTR2_CLKDIV_2          EQU (0x4 :SHL: FMC_BWTR2_CLKDIV_Pos)             ;!< 0x00400000
FMC_BWTR2_CLKDIV_3          EQU (0x8 :SHL: FMC_BWTR2_CLKDIV_Pos)             ;!< 0x00800000

FMC_BWTR2_DATLAT_Pos        EQU (24)
FMC_BWTR2_DATLAT_Msk        EQU (0xF :SHL: FMC_BWTR2_DATLAT_Pos)             ;!< 0x0F000000
FMC_BWTR2_DATLAT            EQU FMC_BWTR2_DATLAT_Msk                       ;!<DATLA[3:0] bits (Data latency)
FMC_BWTR2_DATLAT_0          EQU (0x1 :SHL: FMC_BWTR2_DATLAT_Pos)             ;!< 0x01000000
FMC_BWTR2_DATLAT_1          EQU (0x2 :SHL: FMC_BWTR2_DATLAT_Pos)             ;!< 0x02000000
FMC_BWTR2_DATLAT_2          EQU (0x4 :SHL: FMC_BWTR2_DATLAT_Pos)             ;!< 0x04000000
FMC_BWTR2_DATLAT_3          EQU (0x8 :SHL: FMC_BWTR2_DATLAT_Pos)             ;!< 0x08000000

FMC_BWTR2_ACCMOD_Pos        EQU (28)
FMC_BWTR2_ACCMOD_Msk        EQU (0x3 :SHL: FMC_BWTR2_ACCMOD_Pos)             ;!< 0x30000000
FMC_BWTR2_ACCMOD            EQU FMC_BWTR2_ACCMOD_Msk                       ;!<ACCMOD[1:0] bits (Access mode)
FMC_BWTR2_ACCMOD_0          EQU (0x1 :SHL: FMC_BWTR2_ACCMOD_Pos)             ;!< 0x10000000
FMC_BWTR2_ACCMOD_1          EQU (0x2 :SHL: FMC_BWTR2_ACCMOD_Pos)             ;!< 0x20000000

;*****************  Bit definition for FMC_BWTR3 register  *****************
FMC_BWTR3_ADDSET_Pos        EQU (0)
FMC_BWTR3_ADDSET_Msk        EQU (0xF :SHL: FMC_BWTR3_ADDSET_Pos)             ;!< 0x0000000F
FMC_BWTR3_ADDSET            EQU FMC_BWTR3_ADDSET_Msk                       ;!<ADDSET[3:0] bits (Address setup phase duration)
FMC_BWTR3_ADDSET_0          EQU (0x1 :SHL: FMC_BWTR3_ADDSET_Pos)             ;!< 0x00000001
FMC_BWTR3_ADDSET_1          EQU (0x2 :SHL: FMC_BWTR3_ADDSET_Pos)             ;!< 0x00000002
FMC_BWTR3_ADDSET_2          EQU (0x4 :SHL: FMC_BWTR3_ADDSET_Pos)             ;!< 0x00000004
FMC_BWTR3_ADDSET_3          EQU (0x8 :SHL: FMC_BWTR3_ADDSET_Pos)             ;!< 0x00000008

FMC_BWTR3_ADDHLD_Pos        EQU (4)
FMC_BWTR3_ADDHLD_Msk        EQU (0xF :SHL: FMC_BWTR3_ADDHLD_Pos)             ;!< 0x000000F0
FMC_BWTR3_ADDHLD            EQU FMC_BWTR3_ADDHLD_Msk                       ;!<ADDHLD[3:0] bits (Address-hold phase duration)
FMC_BWTR3_ADDHLD_0          EQU (0x1 :SHL: FMC_BWTR3_ADDHLD_Pos)             ;!< 0x00000010
FMC_BWTR3_ADDHLD_1          EQU (0x2 :SHL: FMC_BWTR3_ADDHLD_Pos)             ;!< 0x00000020
FMC_BWTR3_ADDHLD_2          EQU (0x4 :SHL: FMC_BWTR3_ADDHLD_Pos)             ;!< 0x00000040
FMC_BWTR3_ADDHLD_3          EQU (0x8 :SHL: FMC_BWTR3_ADDHLD_Pos)             ;!< 0x00000080

FMC_BWTR3_DATAST_Pos        EQU (8)
FMC_BWTR3_DATAST_Msk        EQU (0xFF :SHL: FMC_BWTR3_DATAST_Pos)            ;!< 0x0000FF00
FMC_BWTR3_DATAST            EQU FMC_BWTR3_DATAST_Msk                       ;!<DATAST [3:0] bits (Data-phase duration)
FMC_BWTR3_DATAST_0          EQU (0x01 :SHL: FMC_BWTR3_DATAST_Pos)            ;!< 0x00000100
FMC_BWTR3_DATAST_1          EQU (0x02 :SHL: FMC_BWTR3_DATAST_Pos)            ;!< 0x00000200
FMC_BWTR3_DATAST_2          EQU (0x04 :SHL: FMC_BWTR3_DATAST_Pos)            ;!< 0x00000400
FMC_BWTR3_DATAST_3          EQU (0x08 :SHL: FMC_BWTR3_DATAST_Pos)            ;!< 0x00000800
FMC_BWTR3_DATAST_4          EQU (0x10 :SHL: FMC_BWTR3_DATAST_Pos)            ;!< 0x00001000
FMC_BWTR3_DATAST_5          EQU (0x20 :SHL: FMC_BWTR3_DATAST_Pos)            ;!< 0x00002000
FMC_BWTR3_DATAST_6          EQU (0x40 :SHL: FMC_BWTR3_DATAST_Pos)            ;!< 0x00004000
FMC_BWTR3_DATAST_7          EQU (0x80 :SHL: FMC_BWTR3_DATAST_Pos)            ;!< 0x00008000

FMC_BWTR3_CLKDIV_Pos        EQU (20)
FMC_BWTR3_CLKDIV_Msk        EQU (0xF :SHL: FMC_BWTR3_CLKDIV_Pos)             ;!< 0x00F00000
FMC_BWTR3_CLKDIV            EQU FMC_BWTR3_CLKDIV_Msk                       ;!<CLKDIV[3:0] bits (Clock divide ratio)
FMC_BWTR3_CLKDIV_0          EQU (0x1 :SHL: FMC_BWTR3_CLKDIV_Pos)             ;!< 0x00100000
FMC_BWTR3_CLKDIV_1          EQU (0x2 :SHL: FMC_BWTR3_CLKDIV_Pos)             ;!< 0x00200000
FMC_BWTR3_CLKDIV_2          EQU (0x4 :SHL: FMC_BWTR3_CLKDIV_Pos)             ;!< 0x00400000
FMC_BWTR3_CLKDIV_3          EQU (0x8 :SHL: FMC_BWTR3_CLKDIV_Pos)             ;!< 0x00800000

FMC_BWTR3_DATLAT_Pos        EQU (24)
FMC_BWTR3_DATLAT_Msk        EQU (0xF :SHL: FMC_BWTR3_DATLAT_Pos)             ;!< 0x0F000000
FMC_BWTR3_DATLAT            EQU FMC_BWTR3_DATLAT_Msk                       ;!<DATLA[3:0] bits (Data latency)
FMC_BWTR3_DATLAT_0          EQU (0x1 :SHL: FMC_BWTR3_DATLAT_Pos)             ;!< 0x01000000
FMC_BWTR3_DATLAT_1          EQU (0x2 :SHL: FMC_BWTR3_DATLAT_Pos)             ;!< 0x02000000
FMC_BWTR3_DATLAT_2          EQU (0x4 :SHL: FMC_BWTR3_DATLAT_Pos)             ;!< 0x04000000
FMC_BWTR3_DATLAT_3          EQU (0x8 :SHL: FMC_BWTR3_DATLAT_Pos)             ;!< 0x08000000

FMC_BWTR3_ACCMOD_Pos        EQU (28)
FMC_BWTR3_ACCMOD_Msk        EQU (0x3 :SHL: FMC_BWTR3_ACCMOD_Pos)             ;!< 0x30000000
FMC_BWTR3_ACCMOD            EQU FMC_BWTR3_ACCMOD_Msk                       ;!<ACCMOD[1:0] bits (Access mode)
FMC_BWTR3_ACCMOD_0          EQU (0x1 :SHL: FMC_BWTR3_ACCMOD_Pos)             ;!< 0x10000000
FMC_BWTR3_ACCMOD_1          EQU (0x2 :SHL: FMC_BWTR3_ACCMOD_Pos)             ;!< 0x20000000

;*****************  Bit definition for FMC_BWTR4 register  *****************
FMC_BWTR4_ADDSET_Pos        EQU (0)
FMC_BWTR4_ADDSET_Msk        EQU (0xF :SHL: FMC_BWTR4_ADDSET_Pos)             ;!< 0x0000000F
FMC_BWTR4_ADDSET            EQU FMC_BWTR4_ADDSET_Msk                       ;!<ADDSET[3:0] bits (Address setup phase duration)
FMC_BWTR4_ADDSET_0          EQU (0x1 :SHL: FMC_BWTR4_ADDSET_Pos)             ;!< 0x00000001
FMC_BWTR4_ADDSET_1          EQU (0x2 :SHL: FMC_BWTR4_ADDSET_Pos)             ;!< 0x00000002
FMC_BWTR4_ADDSET_2          EQU (0x4 :SHL: FMC_BWTR4_ADDSET_Pos)             ;!< 0x00000004
FMC_BWTR4_ADDSET_3          EQU (0x8 :SHL: FMC_BWTR4_ADDSET_Pos)             ;!< 0x00000008

FMC_BWTR4_ADDHLD_Pos        EQU (4)
FMC_BWTR4_ADDHLD_Msk        EQU (0xF :SHL: FMC_BWTR4_ADDHLD_Pos)             ;!< 0x000000F0
FMC_BWTR4_ADDHLD            EQU FMC_BWTR4_ADDHLD_Msk                       ;!<ADDHLD[3:0] bits (Address-hold phase duration)
FMC_BWTR4_ADDHLD_0          EQU (0x1 :SHL: FMC_BWTR4_ADDHLD_Pos)             ;!< 0x00000010
FMC_BWTR4_ADDHLD_1          EQU (0x2 :SHL: FMC_BWTR4_ADDHLD_Pos)             ;!< 0x00000020
FMC_BWTR4_ADDHLD_2          EQU (0x4 :SHL: FMC_BWTR4_ADDHLD_Pos)             ;!< 0x00000040
FMC_BWTR4_ADDHLD_3          EQU (0x8 :SHL: FMC_BWTR4_ADDHLD_Pos)             ;!< 0x00000080

FMC_BWTR4_DATAST_Pos        EQU (8)
FMC_BWTR4_DATAST_Msk        EQU (0xFF :SHL: FMC_BWTR4_DATAST_Pos)            ;!< 0x0000FF00
FMC_BWTR4_DATAST            EQU FMC_BWTR4_DATAST_Msk                       ;!<DATAST [3:0] bits (Data-phase duration)
FMC_BWTR4_DATAST_0          EQU (0x01 :SHL: FMC_BWTR4_DATAST_Pos)            ;!< 0x00000100
FMC_BWTR4_DATAST_1          EQU (0x02 :SHL: FMC_BWTR4_DATAST_Pos)            ;!< 0x00000200
FMC_BWTR4_DATAST_2          EQU (0x04 :SHL: FMC_BWTR4_DATAST_Pos)            ;!< 0x00000400
FMC_BWTR4_DATAST_3          EQU (0x08 :SHL: FMC_BWTR4_DATAST_Pos)            ;!< 0x00000800
FMC_BWTR4_DATAST_4          EQU (0x10 :SHL: FMC_BWTR4_DATAST_Pos)            ;!< 0x00001000
FMC_BWTR4_DATAST_5          EQU (0x20 :SHL: FMC_BWTR4_DATAST_Pos)            ;!< 0x00002000
FMC_BWTR4_DATAST_6          EQU (0x40 :SHL: FMC_BWTR4_DATAST_Pos)            ;!< 0x00004000
FMC_BWTR4_DATAST_7          EQU (0x80 :SHL: FMC_BWTR4_DATAST_Pos)            ;!< 0x00008000

FMC_BWTR4_CLKDIV_Pos        EQU (20)
FMC_BWTR4_CLKDIV_Msk        EQU (0xF :SHL: FMC_BWTR4_CLKDIV_Pos)             ;!< 0x00F00000
FMC_BWTR4_CLKDIV            EQU FMC_BWTR4_CLKDIV_Msk                       ;!<CLKDIV[3:0] bits (Clock divide ratio)
FMC_BWTR4_CLKDIV_0          EQU (0x1 :SHL: FMC_BWTR4_CLKDIV_Pos)             ;!< 0x00100000
FMC_BWTR4_CLKDIV_1          EQU (0x2 :SHL: FMC_BWTR4_CLKDIV_Pos)             ;!< 0x00200000
FMC_BWTR4_CLKDIV_2          EQU (0x4 :SHL: FMC_BWTR4_CLKDIV_Pos)             ;!< 0x00400000
FMC_BWTR4_CLKDIV_3          EQU (0x8 :SHL: FMC_BWTR4_CLKDIV_Pos)             ;!< 0x00800000

FMC_BWTR4_DATLAT_Pos        EQU (24)
FMC_BWTR4_DATLAT_Msk        EQU (0xF :SHL: FMC_BWTR4_DATLAT_Pos)             ;!< 0x0F000000
FMC_BWTR4_DATLAT            EQU FMC_BWTR4_DATLAT_Msk                       ;!<DATLA[3:0] bits (Data latency)
FMC_BWTR4_DATLAT_0          EQU (0x1 :SHL: FMC_BWTR4_DATLAT_Pos)             ;!< 0x01000000
FMC_BWTR4_DATLAT_1          EQU (0x2 :SHL: FMC_BWTR4_DATLAT_Pos)             ;!< 0x02000000
FMC_BWTR4_DATLAT_2          EQU (0x4 :SHL: FMC_BWTR4_DATLAT_Pos)             ;!< 0x04000000
FMC_BWTR4_DATLAT_3          EQU (0x8 :SHL: FMC_BWTR4_DATLAT_Pos)             ;!< 0x08000000

FMC_BWTR4_ACCMOD_Pos        EQU (28)
FMC_BWTR4_ACCMOD_Msk        EQU (0x3 :SHL: FMC_BWTR4_ACCMOD_Pos)             ;!< 0x30000000
FMC_BWTR4_ACCMOD            EQU FMC_BWTR4_ACCMOD_Msk                       ;!<ACCMOD[1:0] bits (Access mode)
FMC_BWTR4_ACCMOD_0          EQU (0x1 :SHL: FMC_BWTR4_ACCMOD_Pos)             ;!< 0x10000000
FMC_BWTR4_ACCMOD_1          EQU (0x2 :SHL: FMC_BWTR4_ACCMOD_Pos)             ;!< 0x20000000

;*****************  Bit definition for FMC_PCRx register  ******************
FMC_PCRx_PWAITEN_Pos        EQU (1)
FMC_PCRx_PWAITEN_Msk        EQU (0x1 :SHL: FMC_PCRx_PWAITEN_Pos)             ;!< 0x00000002
FMC_PCRx_PWAITEN            EQU FMC_PCRx_PWAITEN_Msk                       ;!<Wait feature enable bit
FMC_PCRx_PBKEN_Pos          EQU (2)
FMC_PCRx_PBKEN_Msk          EQU (0x1 :SHL: FMC_PCRx_PBKEN_Pos)               ;!< 0x00000004
FMC_PCRx_PBKEN              EQU FMC_PCRx_PBKEN_Msk                         ;!<PC Card/NAND Flash memory bank enable bit
FMC_PCRx_PTYP_Pos           EQU (3)
FMC_PCRx_PTYP_Msk           EQU (0x1 :SHL: FMC_PCRx_PTYP_Pos)                ;!< 0x00000008
FMC_PCRx_PTYP               EQU FMC_PCRx_PTYP_Msk                          ;!<Memory type

FMC_PCRx_PWID_Pos           EQU (4)
FMC_PCRx_PWID_Msk           EQU (0x3 :SHL: FMC_PCRx_PWID_Pos)                ;!< 0x00000030
FMC_PCRx_PWID               EQU FMC_PCRx_PWID_Msk                          ;!<PWID[1:0] bits (NAND Flash databus width)
FMC_PCRx_PWID_0             EQU (0x1 :SHL: FMC_PCRx_PWID_Pos)                ;!< 0x00000010
FMC_PCRx_PWID_1             EQU (0x2 :SHL: FMC_PCRx_PWID_Pos)                ;!< 0x00000020

FMC_PCRx_ECCEN_Pos          EQU (6)
FMC_PCRx_ECCEN_Msk          EQU (0x1 :SHL: FMC_PCRx_ECCEN_Pos)               ;!< 0x00000040
FMC_PCRx_ECCEN              EQU FMC_PCRx_ECCEN_Msk                         ;!<ECC computation logic enable bit

FMC_PCRx_TCLR_Pos           EQU (9)
FMC_PCRx_TCLR_Msk           EQU (0xF :SHL: FMC_PCRx_TCLR_Pos)                ;!< 0x00001E00
FMC_PCRx_TCLR               EQU FMC_PCRx_TCLR_Msk                          ;!<TCLR[3:0] bits (CLE to RE delay)
FMC_PCRx_TCLR_0             EQU (0x1 :SHL: FMC_PCRx_TCLR_Pos)                ;!< 0x00000200
FMC_PCRx_TCLR_1             EQU (0x2 :SHL: FMC_PCRx_TCLR_Pos)                ;!< 0x00000400
FMC_PCRx_TCLR_2             EQU (0x4 :SHL: FMC_PCRx_TCLR_Pos)                ;!< 0x00000800
FMC_PCRx_TCLR_3             EQU (0x8 :SHL: FMC_PCRx_TCLR_Pos)                ;!< 0x00001000

FMC_PCRx_TAR_Pos            EQU (13)
FMC_PCRx_TAR_Msk            EQU (0xF :SHL: FMC_PCRx_TAR_Pos)                 ;!< 0x0001E000
FMC_PCRx_TAR                EQU FMC_PCRx_TAR_Msk                           ;!<TAR[3:0] bits (ALE to RE delay)
FMC_PCRx_TAR_0              EQU (0x1 :SHL: FMC_PCRx_TAR_Pos)                 ;!< 0x00002000
FMC_PCRx_TAR_1              EQU (0x2 :SHL: FMC_PCRx_TAR_Pos)                 ;!< 0x00004000
FMC_PCRx_TAR_2              EQU (0x4 :SHL: FMC_PCRx_TAR_Pos)                 ;!< 0x00008000
FMC_PCRx_TAR_3              EQU (0x8 :SHL: FMC_PCRx_TAR_Pos)                 ;!< 0x00010000

FMC_PCRx_ECCPS_Pos          EQU (17)
FMC_PCRx_ECCPS_Msk          EQU (0x7 :SHL: FMC_PCRx_ECCPS_Pos)               ;!< 0x000E0000
FMC_PCRx_ECCPS              EQU FMC_PCRx_ECCPS_Msk                         ;!<ECCPS[1:0] bits (ECC page size)
FMC_PCRx_ECCPS_0            EQU (0x1 :SHL: FMC_PCRx_ECCPS_Pos)               ;!< 0x00020000
FMC_PCRx_ECCPS_1            EQU (0x2 :SHL: FMC_PCRx_ECCPS_Pos)               ;!< 0x00040000
FMC_PCRx_ECCPS_2            EQU (0x4 :SHL: FMC_PCRx_ECCPS_Pos)               ;!< 0x00080000

;*****************  Bit definition for FMC_PCR2 register  ******************
FMC_PCR2_PWAITEN_Pos        EQU (1)
FMC_PCR2_PWAITEN_Msk        EQU (0x1 :SHL: FMC_PCR2_PWAITEN_Pos)             ;!< 0x00000002
FMC_PCR2_PWAITEN            EQU FMC_PCR2_PWAITEN_Msk                       ;!<Wait feature enable bit
FMC_PCR2_PBKEN_Pos          EQU (2)
FMC_PCR2_PBKEN_Msk          EQU (0x1 :SHL: FMC_PCR2_PBKEN_Pos)               ;!< 0x00000004
FMC_PCR2_PBKEN              EQU FMC_PCR2_PBKEN_Msk                         ;!<PC Card/NAND Flash memory bank enable bit
FMC_PCR2_PTYP_Pos           EQU (3)
FMC_PCR2_PTYP_Msk           EQU (0x1 :SHL: FMC_PCR2_PTYP_Pos)                ;!< 0x00000008
FMC_PCR2_PTYP               EQU FMC_PCR2_PTYP_Msk                          ;!<Memory type

FMC_PCR2_PWID_Pos           EQU (4)
FMC_PCR2_PWID_Msk           EQU (0x3 :SHL: FMC_PCR2_PWID_Pos)                ;!< 0x00000030
FMC_PCR2_PWID               EQU FMC_PCR2_PWID_Msk                          ;!<PWID[1:0] bits (NAND Flash databus width)
FMC_PCR2_PWID_0             EQU (0x1 :SHL: FMC_PCR2_PWID_Pos)                ;!< 0x00000010
FMC_PCR2_PWID_1             EQU (0x2 :SHL: FMC_PCR2_PWID_Pos)                ;!< 0x00000020

FMC_PCR2_ECCEN_Pos          EQU (6)
FMC_PCR2_ECCEN_Msk          EQU (0x1 :SHL: FMC_PCR2_ECCEN_Pos)               ;!< 0x00000040
FMC_PCR2_ECCEN              EQU FMC_PCR2_ECCEN_Msk                         ;!<ECC computation logic enable bit

FMC_PCR2_TCLR_Pos           EQU (9)
FMC_PCR2_TCLR_Msk           EQU (0xF :SHL: FMC_PCR2_TCLR_Pos)                ;!< 0x00001E00
FMC_PCR2_TCLR               EQU FMC_PCR2_TCLR_Msk                          ;!<TCLR[3:0] bits (CLE to RE delay)
FMC_PCR2_TCLR_0             EQU (0x1 :SHL: FMC_PCR2_TCLR_Pos)                ;!< 0x00000200
FMC_PCR2_TCLR_1             EQU (0x2 :SHL: FMC_PCR2_TCLR_Pos)                ;!< 0x00000400
FMC_PCR2_TCLR_2             EQU (0x4 :SHL: FMC_PCR2_TCLR_Pos)                ;!< 0x00000800
FMC_PCR2_TCLR_3             EQU (0x8 :SHL: FMC_PCR2_TCLR_Pos)                ;!< 0x00001000

FMC_PCR2_TAR_Pos            EQU (13)
FMC_PCR2_TAR_Msk            EQU (0xF :SHL: FMC_PCR2_TAR_Pos)                 ;!< 0x0001E000
FMC_PCR2_TAR                EQU FMC_PCR2_TAR_Msk                           ;!<TAR[3:0] bits (ALE to RE delay)
FMC_PCR2_TAR_0              EQU (0x1 :SHL: FMC_PCR2_TAR_Pos)                 ;!< 0x00002000
FMC_PCR2_TAR_1              EQU (0x2 :SHL: FMC_PCR2_TAR_Pos)                 ;!< 0x00004000
FMC_PCR2_TAR_2              EQU (0x4 :SHL: FMC_PCR2_TAR_Pos)                 ;!< 0x00008000
FMC_PCR2_TAR_3              EQU (0x8 :SHL: FMC_PCR2_TAR_Pos)                 ;!< 0x00010000

FMC_PCR2_ECCPS_Pos          EQU (17)
FMC_PCR2_ECCPS_Msk          EQU (0x7 :SHL: FMC_PCR2_ECCPS_Pos)               ;!< 0x000E0000
FMC_PCR2_ECCPS              EQU FMC_PCR2_ECCPS_Msk                         ;!<ECCPS[1:0] bits (ECC page size)
FMC_PCR2_ECCPS_0            EQU (0x1 :SHL: FMC_PCR2_ECCPS_Pos)               ;!< 0x00020000
FMC_PCR2_ECCPS_1            EQU (0x2 :SHL: FMC_PCR2_ECCPS_Pos)               ;!< 0x00040000
FMC_PCR2_ECCPS_2            EQU (0x4 :SHL: FMC_PCR2_ECCPS_Pos)               ;!< 0x00080000

;*****************  Bit definition for FMC_PCR3 register  ******************
FMC_PCR3_PWAITEN_Pos        EQU (1)
FMC_PCR3_PWAITEN_Msk        EQU (0x1 :SHL: FMC_PCR3_PWAITEN_Pos)             ;!< 0x00000002
FMC_PCR3_PWAITEN            EQU FMC_PCR3_PWAITEN_Msk                       ;!<Wait feature enable bit
FMC_PCR3_PBKEN_Pos          EQU (2)
FMC_PCR3_PBKEN_Msk          EQU (0x1 :SHL: FMC_PCR3_PBKEN_Pos)               ;!< 0x00000004
FMC_PCR3_PBKEN              EQU FMC_PCR3_PBKEN_Msk                         ;!<PC Card/NAND Flash memory bank enable bit
FMC_PCR3_PTYP_Pos           EQU (3)
FMC_PCR3_PTYP_Msk           EQU (0x1 :SHL: FMC_PCR3_PTYP_Pos)                ;!< 0x00000008
FMC_PCR3_PTYP               EQU FMC_PCR3_PTYP_Msk                          ;!<Memory type

FMC_PCR3_PWID_Pos           EQU (4)
FMC_PCR3_PWID_Msk           EQU (0x3 :SHL: FMC_PCR3_PWID_Pos)                ;!< 0x00000030
FMC_PCR3_PWID               EQU FMC_PCR3_PWID_Msk                          ;!<PWID[1:0] bits (NAND Flash databus width)
FMC_PCR3_PWID_0             EQU (0x1 :SHL: FMC_PCR3_PWID_Pos)                ;!< 0x00000010
FMC_PCR3_PWID_1             EQU (0x2 :SHL: FMC_PCR3_PWID_Pos)                ;!< 0x00000020

FMC_PCR3_ECCEN_Pos          EQU (6)
FMC_PCR3_ECCEN_Msk          EQU (0x1 :SHL: FMC_PCR3_ECCEN_Pos)               ;!< 0x00000040
FMC_PCR3_ECCEN              EQU FMC_PCR3_ECCEN_Msk                         ;!<ECC computation logic enable bit

FMC_PCR3_TCLR_Pos           EQU (9)
FMC_PCR3_TCLR_Msk           EQU (0xF :SHL: FMC_PCR3_TCLR_Pos)                ;!< 0x00001E00
FMC_PCR3_TCLR               EQU FMC_PCR3_TCLR_Msk                          ;!<TCLR[3:0] bits (CLE to RE delay)
FMC_PCR3_TCLR_0             EQU (0x1 :SHL: FMC_PCR3_TCLR_Pos)                ;!< 0x00000200
FMC_PCR3_TCLR_1             EQU (0x2 :SHL: FMC_PCR3_TCLR_Pos)                ;!< 0x00000400
FMC_PCR3_TCLR_2             EQU (0x4 :SHL: FMC_PCR3_TCLR_Pos)                ;!< 0x00000800
FMC_PCR3_TCLR_3             EQU (0x8 :SHL: FMC_PCR3_TCLR_Pos)                ;!< 0x00001000

FMC_PCR3_TAR_Pos            EQU (13)
FMC_PCR3_TAR_Msk            EQU (0xF :SHL: FMC_PCR3_TAR_Pos)                 ;!< 0x0001E000
FMC_PCR3_TAR                EQU FMC_PCR3_TAR_Msk                           ;!<TAR[3:0] bits (ALE to RE delay)
FMC_PCR3_TAR_0              EQU (0x1 :SHL: FMC_PCR3_TAR_Pos)                 ;!< 0x00002000
FMC_PCR3_TAR_1              EQU (0x2 :SHL: FMC_PCR3_TAR_Pos)                 ;!< 0x00004000
FMC_PCR3_TAR_2              EQU (0x4 :SHL: FMC_PCR3_TAR_Pos)                 ;!< 0x00008000
FMC_PCR3_TAR_3              EQU (0x8 :SHL: FMC_PCR3_TAR_Pos)                 ;!< 0x00010000

FMC_PCR3_ECCPS_Pos          EQU (17)
FMC_PCR3_ECCPS_Msk          EQU (0x7 :SHL: FMC_PCR3_ECCPS_Pos)               ;!< 0x000E0000
FMC_PCR3_ECCPS              EQU FMC_PCR3_ECCPS_Msk                         ;!<ECCPS[2:0] bits (ECC page size)
FMC_PCR3_ECCPS_0            EQU (0x1 :SHL: FMC_PCR3_ECCPS_Pos)               ;!< 0x00020000
FMC_PCR3_ECCPS_1            EQU (0x2 :SHL: FMC_PCR3_ECCPS_Pos)               ;!< 0x00040000
FMC_PCR3_ECCPS_2            EQU (0x4 :SHL: FMC_PCR3_ECCPS_Pos)               ;!< 0x00080000

;*****************  Bit definition for FMC_PCR4 register  ******************
FMC_PCR4_PWAITEN_Pos        EQU (1)
FMC_PCR4_PWAITEN_Msk        EQU (0x1 :SHL: FMC_PCR4_PWAITEN_Pos)             ;!< 0x00000002
FMC_PCR4_PWAITEN            EQU FMC_PCR4_PWAITEN_Msk                       ;!<Wait feature enable bit
FMC_PCR4_PBKEN_Pos          EQU (2)
FMC_PCR4_PBKEN_Msk          EQU (0x1 :SHL: FMC_PCR4_PBKEN_Pos)               ;!< 0x00000004
FMC_PCR4_PBKEN              EQU FMC_PCR4_PBKEN_Msk                         ;!<PC Card/NAND Flash memory bank enable bit
FMC_PCR4_PTYP_Pos           EQU (3)
FMC_PCR4_PTYP_Msk           EQU (0x1 :SHL: FMC_PCR4_PTYP_Pos)                ;!< 0x00000008
FMC_PCR4_PTYP               EQU FMC_PCR4_PTYP_Msk                          ;!<Memory type

FMC_PCR4_PWID_Pos           EQU (4)
FMC_PCR4_PWID_Msk           EQU (0x3 :SHL: FMC_PCR4_PWID_Pos)                ;!< 0x00000030
FMC_PCR4_PWID               EQU FMC_PCR4_PWID_Msk                          ;!<PWID[1:0] bits (NAND Flash databus width)
FMC_PCR4_PWID_0             EQU (0x1 :SHL: FMC_PCR4_PWID_Pos)                ;!< 0x00000010
FMC_PCR4_PWID_1             EQU (0x2 :SHL: FMC_PCR4_PWID_Pos)                ;!< 0x00000020

FMC_PCR4_ECCEN_Pos          EQU (6)
FMC_PCR4_ECCEN_Msk          EQU (0x1 :SHL: FMC_PCR4_ECCEN_Pos)               ;!< 0x00000040
FMC_PCR4_ECCEN              EQU FMC_PCR4_ECCEN_Msk                         ;!<ECC computation logic enable bit

FMC_PCR4_TCLR_Pos           EQU (9)
FMC_PCR4_TCLR_Msk           EQU (0xF :SHL: FMC_PCR4_TCLR_Pos)                ;!< 0x00001E00
FMC_PCR4_TCLR               EQU FMC_PCR4_TCLR_Msk                          ;!<TCLR[3:0] bits (CLE to RE delay)
FMC_PCR4_TCLR_0             EQU (0x1 :SHL: FMC_PCR4_TCLR_Pos)                ;!< 0x00000200
FMC_PCR4_TCLR_1             EQU (0x2 :SHL: FMC_PCR4_TCLR_Pos)                ;!< 0x00000400
FMC_PCR4_TCLR_2             EQU (0x4 :SHL: FMC_PCR4_TCLR_Pos)                ;!< 0x00000800
FMC_PCR4_TCLR_3             EQU (0x8 :SHL: FMC_PCR4_TCLR_Pos)                ;!< 0x00001000

FMC_PCR4_TAR_Pos            EQU (13)
FMC_PCR4_TAR_Msk            EQU (0xF :SHL: FMC_PCR4_TAR_Pos)                 ;!< 0x0001E000
FMC_PCR4_TAR                EQU FMC_PCR4_TAR_Msk                           ;!<TAR[3:0] bits (ALE to RE delay)
FMC_PCR4_TAR_0              EQU (0x1 :SHL: FMC_PCR4_TAR_Pos)                 ;!< 0x00002000
FMC_PCR4_TAR_1              EQU (0x2 :SHL: FMC_PCR4_TAR_Pos)                 ;!< 0x00004000
FMC_PCR4_TAR_2              EQU (0x4 :SHL: FMC_PCR4_TAR_Pos)                 ;!< 0x00008000
FMC_PCR4_TAR_3              EQU (0x8 :SHL: FMC_PCR4_TAR_Pos)                 ;!< 0x00010000

FMC_PCR4_ECCPS_Pos          EQU (17)
FMC_PCR4_ECCPS_Msk          EQU (0x7 :SHL: FMC_PCR4_ECCPS_Pos)               ;!< 0x000E0000
FMC_PCR4_ECCPS              EQU FMC_PCR4_ECCPS_Msk                         ;!<ECCPS[2:0] bits (ECC page size)
FMC_PCR4_ECCPS_0            EQU (0x1 :SHL: FMC_PCR4_ECCPS_Pos)               ;!< 0x00020000
FMC_PCR4_ECCPS_1            EQU (0x2 :SHL: FMC_PCR4_ECCPS_Pos)               ;!< 0x00040000
FMC_PCR4_ECCPS_2            EQU (0x4 :SHL: FMC_PCR4_ECCPS_Pos)               ;!< 0x00080000

;******************  Bit definition for FMC_SRx register  ******************
FMC_SRx_IRS_Pos             EQU (0)
FMC_SRx_IRS_Msk             EQU (0x1 :SHL: FMC_SRx_IRS_Pos)                  ;!< 0x00000001
FMC_SRx_IRS                 EQU FMC_SRx_IRS_Msk                            ;!<Interrupt Rising Edge status
FMC_SRx_ILS_Pos             EQU (1)
FMC_SRx_ILS_Msk             EQU (0x1 :SHL: FMC_SRx_ILS_Pos)                  ;!< 0x00000002
FMC_SRx_ILS                 EQU FMC_SRx_ILS_Msk                            ;!<Interrupt Level status
FMC_SRx_IFS_Pos             EQU (2)
FMC_SRx_IFS_Msk             EQU (0x1 :SHL: FMC_SRx_IFS_Pos)                  ;!< 0x00000004
FMC_SRx_IFS                 EQU FMC_SRx_IFS_Msk                            ;!<Interrupt Falling Edge status
FMC_SRx_IREN_Pos            EQU (3)
FMC_SRx_IREN_Msk            EQU (0x1 :SHL: FMC_SRx_IREN_Pos)                 ;!< 0x00000008
FMC_SRx_IREN                EQU FMC_SRx_IREN_Msk                           ;!<Interrupt Rising Edge detection Enable bit
FMC_SRx_ILEN_Pos            EQU (4)
FMC_SRx_ILEN_Msk            EQU (0x1 :SHL: FMC_SRx_ILEN_Pos)                 ;!< 0x00000010
FMC_SRx_ILEN                EQU FMC_SRx_ILEN_Msk                           ;!<Interrupt Level detection Enable bit
FMC_SRx_IFEN_Pos            EQU (5)
FMC_SRx_IFEN_Msk            EQU (0x1 :SHL: FMC_SRx_IFEN_Pos)                 ;!< 0x00000020
FMC_SRx_IFEN                EQU FMC_SRx_IFEN_Msk                           ;!<Interrupt Falling Edge detection Enable bit
FMC_SRx_FEMPT_Pos           EQU (6)
FMC_SRx_FEMPT_Msk           EQU (0x1 :SHL: FMC_SRx_FEMPT_Pos)                ;!< 0x00000040
FMC_SRx_FEMPT               EQU FMC_SRx_FEMPT_Msk                          ;!<FIFO empty

;******************  Bit definition for FMC_SR2 register  ******************
FMC_SR2_IRS_Pos             EQU (0)
FMC_SR2_IRS_Msk             EQU (0x1 :SHL: FMC_SR2_IRS_Pos)                  ;!< 0x00000001
FMC_SR2_IRS                 EQU FMC_SR2_IRS_Msk                            ;!<Interrupt Rising Edge status
FMC_SR2_ILS_Pos             EQU (1)
FMC_SR2_ILS_Msk             EQU (0x1 :SHL: FMC_SR2_ILS_Pos)                  ;!< 0x00000002
FMC_SR2_ILS                 EQU FMC_SR2_ILS_Msk                            ;!<Interrupt Level status
FMC_SR2_IFS_Pos             EQU (2)
FMC_SR2_IFS_Msk             EQU (0x1 :SHL: FMC_SR2_IFS_Pos)                  ;!< 0x00000004
FMC_SR2_IFS                 EQU FMC_SR2_IFS_Msk                            ;!<Interrupt Falling Edge status
FMC_SR2_IREN_Pos            EQU (3)
FMC_SR2_IREN_Msk            EQU (0x1 :SHL: FMC_SR2_IREN_Pos)                 ;!< 0x00000008
FMC_SR2_IREN                EQU FMC_SR2_IREN_Msk                           ;!<Interrupt Rising Edge detection Enable bit
FMC_SR2_ILEN_Pos            EQU (4)
FMC_SR2_ILEN_Msk            EQU (0x1 :SHL: FMC_SR2_ILEN_Pos)                 ;!< 0x00000010
FMC_SR2_ILEN                EQU FMC_SR2_ILEN_Msk                           ;!<Interrupt Level detection Enable bit
FMC_SR2_IFEN_Pos            EQU (5)
FMC_SR2_IFEN_Msk            EQU (0x1 :SHL: FMC_SR2_IFEN_Pos)                 ;!< 0x00000020
FMC_SR2_IFEN                EQU FMC_SR2_IFEN_Msk                           ;!<Interrupt Falling Edge detection Enable bit
FMC_SR2_FEMPT_Pos           EQU (6)
FMC_SR2_FEMPT_Msk           EQU (0x1 :SHL: FMC_SR2_FEMPT_Pos)                ;!< 0x00000040
FMC_SR2_FEMPT               EQU FMC_SR2_FEMPT_Msk                          ;!<FIFO empty

;******************  Bit definition for FMC_SR3 register  ******************
FMC_SR3_IRS_Pos             EQU (0)
FMC_SR3_IRS_Msk             EQU (0x1 :SHL: FMC_SR3_IRS_Pos)                  ;!< 0x00000001
FMC_SR3_IRS                 EQU FMC_SR3_IRS_Msk                            ;!<Interrupt Rising Edge status
FMC_SR3_ILS_Pos             EQU (1)
FMC_SR3_ILS_Msk             EQU (0x1 :SHL: FMC_SR3_ILS_Pos)                  ;!< 0x00000002
FMC_SR3_ILS                 EQU FMC_SR3_ILS_Msk                            ;!<Interrupt Level status
FMC_SR3_IFS_Pos             EQU (2)
FMC_SR3_IFS_Msk             EQU (0x1 :SHL: FMC_SR3_IFS_Pos)                  ;!< 0x00000004
FMC_SR3_IFS                 EQU FMC_SR3_IFS_Msk                            ;!<Interrupt Falling Edge status
FMC_SR3_IREN_Pos            EQU (3)
FMC_SR3_IREN_Msk            EQU (0x1 :SHL: FMC_SR3_IREN_Pos)                 ;!< 0x00000008
FMC_SR3_IREN                EQU FMC_SR3_IREN_Msk                           ;!<Interrupt Rising Edge detection Enable bit
FMC_SR3_ILEN_Pos            EQU (4)
FMC_SR3_ILEN_Msk            EQU (0x1 :SHL: FMC_SR3_ILEN_Pos)                 ;!< 0x00000010
FMC_SR3_ILEN                EQU FMC_SR3_ILEN_Msk                           ;!<Interrupt Level detection Enable bit
FMC_SR3_IFEN_Pos            EQU (5)
FMC_SR3_IFEN_Msk            EQU (0x1 :SHL: FMC_SR3_IFEN_Pos)                 ;!< 0x00000020
FMC_SR3_IFEN                EQU FMC_SR3_IFEN_Msk                           ;!<Interrupt Falling Edge detection Enable bit
FMC_SR3_FEMPT_Pos           EQU (6)
FMC_SR3_FEMPT_Msk           EQU (0x1 :SHL: FMC_SR3_FEMPT_Pos)                ;!< 0x00000040
FMC_SR3_FEMPT               EQU FMC_SR3_FEMPT_Msk                          ;!<FIFO empty

;******************  Bit definition for FMC_SR4 register  ******************
FMC_SR4_IRS_Pos             EQU (0)
FMC_SR4_IRS_Msk             EQU (0x1 :SHL: FMC_SR4_IRS_Pos)                  ;!< 0x00000001
FMC_SR4_IRS                 EQU FMC_SR4_IRS_Msk                            ;!<Interrupt Rising Edge status
FMC_SR4_ILS_Pos             EQU (1)
FMC_SR4_ILS_Msk             EQU (0x1 :SHL: FMC_SR4_ILS_Pos)                  ;!< 0x00000002
FMC_SR4_ILS                 EQU FMC_SR4_ILS_Msk                            ;!<Interrupt Level status
FMC_SR4_IFS_Pos             EQU (2)
FMC_SR4_IFS_Msk             EQU (0x1 :SHL: FMC_SR4_IFS_Pos)                  ;!< 0x00000004
FMC_SR4_IFS                 EQU FMC_SR4_IFS_Msk                            ;!<Interrupt Falling Edge status
FMC_SR4_IREN_Pos            EQU (3)
FMC_SR4_IREN_Msk            EQU (0x1 :SHL: FMC_SR4_IREN_Pos)                 ;!< 0x00000008
FMC_SR4_IREN                EQU FMC_SR4_IREN_Msk                           ;!<Interrupt Rising Edge detection Enable bit
FMC_SR4_ILEN_Pos            EQU (4)
FMC_SR4_ILEN_Msk            EQU (0x1 :SHL: FMC_SR4_ILEN_Pos)                 ;!< 0x00000010
FMC_SR4_ILEN                EQU FMC_SR4_ILEN_Msk                           ;!<Interrupt Level detection Enable bit
FMC_SR4_IFEN_Pos            EQU (5)
FMC_SR4_IFEN_Msk            EQU (0x1 :SHL: FMC_SR4_IFEN_Pos)                 ;!< 0x00000020
FMC_SR4_IFEN                EQU FMC_SR4_IFEN_Msk                           ;!<Interrupt Falling Edge detection Enable bit
FMC_SR4_FEMPT_Pos           EQU (6)
FMC_SR4_FEMPT_Msk           EQU (0x1 :SHL: FMC_SR4_FEMPT_Pos)                ;!< 0x00000040
FMC_SR4_FEMPT               EQU FMC_SR4_FEMPT_Msk                          ;!<FIFO empty

;*****************  Bit definition for FMC_PMEMx register  *****************
FMC_PMEMx_MEMSETx_Pos       EQU (0)
FMC_PMEMx_MEMSETx_Msk       EQU (0xFF :SHL: FMC_PMEMx_MEMSETx_Pos)           ;!< 0x000000FF
FMC_PMEMx_MEMSETx           EQU FMC_PMEMx_MEMSETx_Msk                      ;!<MEMSETx[7:0] bits (Common memory x setup time)
FMC_PMEMx_MEMSETx_0         EQU (0x01 :SHL: FMC_PMEMx_MEMSETx_Pos)           ;!< 0x00000001
FMC_PMEMx_MEMSETx_1         EQU (0x02 :SHL: FMC_PMEMx_MEMSETx_Pos)           ;!< 0x00000002
FMC_PMEMx_MEMSETx_2         EQU (0x04 :SHL: FMC_PMEMx_MEMSETx_Pos)           ;!< 0x00000004
FMC_PMEMx_MEMSETx_3         EQU (0x08 :SHL: FMC_PMEMx_MEMSETx_Pos)           ;!< 0x00000008
FMC_PMEMx_MEMSETx_4         EQU (0x10 :SHL: FMC_PMEMx_MEMSETx_Pos)           ;!< 0x00000010
FMC_PMEMx_MEMSETx_5         EQU (0x20 :SHL: FMC_PMEMx_MEMSETx_Pos)           ;!< 0x00000020
FMC_PMEMx_MEMSETx_6         EQU (0x40 :SHL: FMC_PMEMx_MEMSETx_Pos)           ;!< 0x00000040
FMC_PMEMx_MEMSETx_7         EQU (0x80 :SHL: FMC_PMEMx_MEMSETx_Pos)           ;!< 0x00000080

FMC_PMEMx_MEMWAITx_Pos      EQU (8)
FMC_PMEMx_MEMWAITx_Msk      EQU (0xFF :SHL: FMC_PMEMx_MEMWAITx_Pos)          ;!< 0x0000FF00
FMC_PMEMx_MEMWAITx          EQU FMC_PMEMx_MEMWAITx_Msk                     ;!<MEMWAITx[7:0] bits (Common memory x wait time)
FMC_PMEMx_MEMWAITx_0        EQU (0x01 :SHL: FMC_PMEMx_MEMWAITx_Pos)          ;!< 0x00000100
FMC_PMEMx_MEMWAITx_1        EQU (0x02 :SHL: FMC_PMEMx_MEMWAITx_Pos)          ;!< 0x00000200
FMC_PMEMx_MEMWAITx_2        EQU (0x04 :SHL: FMC_PMEMx_MEMWAITx_Pos)          ;!< 0x00000400
FMC_PMEMx_MEMWAITx_3        EQU (0x08 :SHL: FMC_PMEMx_MEMWAITx_Pos)          ;!< 0x00000800
FMC_PMEMx_MEMWAITx_4        EQU (0x10 :SHL: FMC_PMEMx_MEMWAITx_Pos)          ;!< 0x00001000
FMC_PMEMx_MEMWAITx_5        EQU (0x20 :SHL: FMC_PMEMx_MEMWAITx_Pos)          ;!< 0x00002000
FMC_PMEMx_MEMWAITx_6        EQU (0x40 :SHL: FMC_PMEMx_MEMWAITx_Pos)          ;!< 0x00004000
FMC_PMEMx_MEMWAITx_7        EQU (0x80 :SHL: FMC_PMEMx_MEMWAITx_Pos)          ;!< 0x00008000

FMC_PMEMx_MEMHOLDx_Pos      EQU (16)
FMC_PMEMx_MEMHOLDx_Msk      EQU (0xFF :SHL: FMC_PMEMx_MEMHOLDx_Pos)          ;!< 0x00FF0000
FMC_PMEMx_MEMHOLDx          EQU FMC_PMEMx_MEMHOLDx_Msk                     ;!<MEMHOLDx[7:0] bits (Common memory x hold time)
FMC_PMEMx_MEMHOLDx_0        EQU (0x01 :SHL: FMC_PMEMx_MEMHOLDx_Pos)          ;!< 0x00010000
FMC_PMEMx_MEMHOLDx_1        EQU (0x02 :SHL: FMC_PMEMx_MEMHOLDx_Pos)          ;!< 0x00020000
FMC_PMEMx_MEMHOLDx_2        EQU (0x04 :SHL: FMC_PMEMx_MEMHOLDx_Pos)          ;!< 0x00040000
FMC_PMEMx_MEMHOLDx_3        EQU (0x08 :SHL: FMC_PMEMx_MEMHOLDx_Pos)          ;!< 0x00080000
FMC_PMEMx_MEMHOLDx_4        EQU (0x10 :SHL: FMC_PMEMx_MEMHOLDx_Pos)          ;!< 0x00100000
FMC_PMEMx_MEMHOLDx_5        EQU (0x20 :SHL: FMC_PMEMx_MEMHOLDx_Pos)          ;!< 0x00200000
FMC_PMEMx_MEMHOLDx_6        EQU (0x40 :SHL: FMC_PMEMx_MEMHOLDx_Pos)          ;!< 0x00400000
FMC_PMEMx_MEMHOLDx_7        EQU (0x80 :SHL: FMC_PMEMx_MEMHOLDx_Pos)          ;!< 0x00800000

FMC_PMEMx_MEMHIZx_Pos       EQU (24)
FMC_PMEMx_MEMHIZx_Msk       EQU (0xFF :SHL: FMC_PMEMx_MEMHIZx_Pos)           ;!< 0xFF000000
FMC_PMEMx_MEMHIZx           EQU FMC_PMEMx_MEMHIZx_Msk                      ;!<MEMHIZx[7:0] bits (Common memory x databus HiZ time)
FMC_PMEMx_MEMHIZx_0         EQU (0x01 :SHL: FMC_PMEMx_MEMHIZx_Pos)           ;!< 0x01000000
FMC_PMEMx_MEMHIZx_1         EQU (0x02 :SHL: FMC_PMEMx_MEMHIZx_Pos)           ;!< 0x02000000
FMC_PMEMx_MEMHIZx_2         EQU (0x04 :SHL: FMC_PMEMx_MEMHIZx_Pos)           ;!< 0x04000000
FMC_PMEMx_MEMHIZx_3         EQU (0x08 :SHL: FMC_PMEMx_MEMHIZx_Pos)           ;!< 0x08000000
FMC_PMEMx_MEMHIZx_4         EQU (0x10 :SHL: FMC_PMEMx_MEMHIZx_Pos)           ;!< 0x10000000
FMC_PMEMx_MEMHIZx_5         EQU (0x20 :SHL: FMC_PMEMx_MEMHIZx_Pos)           ;!< 0x20000000
FMC_PMEMx_MEMHIZx_6         EQU (0x40 :SHL: FMC_PMEMx_MEMHIZx_Pos)           ;!< 0x40000000
FMC_PMEMx_MEMHIZx_7         EQU (0x80 :SHL: FMC_PMEMx_MEMHIZx_Pos)           ;!< 0x80000000

;*****************  Bit definition for FMC_PMEM2 register  *****************
FMC_PMEM2_MEMSET2_Pos       EQU (0)
FMC_PMEM2_MEMSET2_Msk       EQU (0xFF :SHL: FMC_PMEM2_MEMSET2_Pos)           ;!< 0x000000FF
FMC_PMEM2_MEMSET2           EQU FMC_PMEM2_MEMSET2_Msk                      ;!<MEMSET2[7:0] bits (Common memory 2 setup time)
FMC_PMEM2_MEMSET2_0         EQU (0x01 :SHL: FMC_PMEM2_MEMSET2_Pos)           ;!< 0x00000001
FMC_PMEM2_MEMSET2_1         EQU (0x02 :SHL: FMC_PMEM2_MEMSET2_Pos)           ;!< 0x00000002
FMC_PMEM2_MEMSET2_2         EQU (0x04 :SHL: FMC_PMEM2_MEMSET2_Pos)           ;!< 0x00000004
FMC_PMEM2_MEMSET2_3         EQU (0x08 :SHL: FMC_PMEM2_MEMSET2_Pos)           ;!< 0x00000008
FMC_PMEM2_MEMSET2_4         EQU (0x10 :SHL: FMC_PMEM2_MEMSET2_Pos)           ;!< 0x00000010
FMC_PMEM2_MEMSET2_5         EQU (0x20 :SHL: FMC_PMEM2_MEMSET2_Pos)           ;!< 0x00000020
FMC_PMEM2_MEMSET2_6         EQU (0x40 :SHL: FMC_PMEM2_MEMSET2_Pos)           ;!< 0x00000040
FMC_PMEM2_MEMSET2_7         EQU (0x80 :SHL: FMC_PMEM2_MEMSET2_Pos)           ;!< 0x00000080

FMC_PMEM2_MEMWAIT2_Pos      EQU (8)
FMC_PMEM2_MEMWAIT2_Msk      EQU (0xFF :SHL: FMC_PMEM2_MEMWAIT2_Pos)          ;!< 0x0000FF00
FMC_PMEM2_MEMWAIT2          EQU FMC_PMEM2_MEMWAIT2_Msk                     ;!<MEMWAIT2[7:0] bits (Common memory 2 wait time)
FMC_PMEM2_MEMWAIT2_0        EQU (0x01 :SHL: FMC_PMEM2_MEMWAIT2_Pos)          ;!< 0x00000100
FMC_PMEM2_MEMWAIT2_1        EQU (0x02 :SHL: FMC_PMEM2_MEMWAIT2_Pos)          ;!< 0x00000200
FMC_PMEM2_MEMWAIT2_2        EQU (0x04 :SHL: FMC_PMEM2_MEMWAIT2_Pos)          ;!< 0x00000400
FMC_PMEM2_MEMWAIT2_3        EQU (0x08 :SHL: FMC_PMEM2_MEMWAIT2_Pos)          ;!< 0x00000800
FMC_PMEM2_MEMWAIT2_4        EQU (0x10 :SHL: FMC_PMEM2_MEMWAIT2_Pos)          ;!< 0x00001000
FMC_PMEM2_MEMWAIT2_5        EQU (0x20 :SHL: FMC_PMEM2_MEMWAIT2_Pos)          ;!< 0x00002000
FMC_PMEM2_MEMWAIT2_6        EQU (0x40 :SHL: FMC_PMEM2_MEMWAIT2_Pos)          ;!< 0x00004000
FMC_PMEM2_MEMWAIT2_7        EQU (0x80 :SHL: FMC_PMEM2_MEMWAIT2_Pos)          ;!< 0x00008000

FMC_PMEM2_MEMHOLD2_Pos      EQU (16)
FMC_PMEM2_MEMHOLD2_Msk      EQU (0xFF :SHL: FMC_PMEM2_MEMHOLD2_Pos)          ;!< 0x00FF0000
FMC_PMEM2_MEMHOLD2          EQU FMC_PMEM2_MEMHOLD2_Msk                     ;!<MEMHOLD2[7:0] bits (Common memory 2 hold time)
FMC_PMEM2_MEMHOLD2_0        EQU (0x01 :SHL: FMC_PMEM2_MEMHOLD2_Pos)          ;!< 0x00010000
FMC_PMEM2_MEMHOLD2_1        EQU (0x02 :SHL: FMC_PMEM2_MEMHOLD2_Pos)          ;!< 0x00020000
FMC_PMEM2_MEMHOLD2_2        EQU (0x04 :SHL: FMC_PMEM2_MEMHOLD2_Pos)          ;!< 0x00040000
FMC_PMEM2_MEMHOLD2_3        EQU (0x08 :SHL: FMC_PMEM2_MEMHOLD2_Pos)          ;!< 0x00080000
FMC_PMEM2_MEMHOLD2_4        EQU (0x10 :SHL: FMC_PMEM2_MEMHOLD2_Pos)          ;!< 0x00100000
FMC_PMEM2_MEMHOLD2_5        EQU (0x20 :SHL: FMC_PMEM2_MEMHOLD2_Pos)          ;!< 0x00200000
FMC_PMEM2_MEMHOLD2_6        EQU (0x40 :SHL: FMC_PMEM2_MEMHOLD2_Pos)          ;!< 0x00400000
FMC_PMEM2_MEMHOLD2_7        EQU (0x80 :SHL: FMC_PMEM2_MEMHOLD2_Pos)          ;!< 0x00800000

FMC_PMEM2_MEMHIZ2_Pos       EQU (24)
FMC_PMEM2_MEMHIZ2_Msk       EQU (0xFF :SHL: FMC_PMEM2_MEMHIZ2_Pos)           ;!< 0xFF000000
FMC_PMEM2_MEMHIZ2           EQU FMC_PMEM2_MEMHIZ2_Msk                      ;!<MEMHIZ2[7:0] bits (Common memory 2 databus HiZ time)
FMC_PMEM2_MEMHIZ2_0         EQU (0x01 :SHL: FMC_PMEM2_MEMHIZ2_Pos)           ;!< 0x01000000
FMC_PMEM2_MEMHIZ2_1         EQU (0x02 :SHL: FMC_PMEM2_MEMHIZ2_Pos)           ;!< 0x02000000
FMC_PMEM2_MEMHIZ2_2         EQU (0x04 :SHL: FMC_PMEM2_MEMHIZ2_Pos)           ;!< 0x04000000
FMC_PMEM2_MEMHIZ2_3         EQU (0x08 :SHL: FMC_PMEM2_MEMHIZ2_Pos)           ;!< 0x08000000
FMC_PMEM2_MEMHIZ2_4         EQU (0x10 :SHL: FMC_PMEM2_MEMHIZ2_Pos)           ;!< 0x10000000
FMC_PMEM2_MEMHIZ2_5         EQU (0x20 :SHL: FMC_PMEM2_MEMHIZ2_Pos)           ;!< 0x20000000
FMC_PMEM2_MEMHIZ2_6         EQU (0x40 :SHL: FMC_PMEM2_MEMHIZ2_Pos)           ;!< 0x40000000
FMC_PMEM2_MEMHIZ2_7         EQU (0x80 :SHL: FMC_PMEM2_MEMHIZ2_Pos)           ;!< 0x80000000

;*****************  Bit definition for FMC_PMEM3 register  *****************
FMC_PMEM3_MEMSET3_Pos       EQU (0)
FMC_PMEM3_MEMSET3_Msk       EQU (0xFF :SHL: FMC_PMEM3_MEMSET3_Pos)           ;!< 0x000000FF
FMC_PMEM3_MEMSET3           EQU FMC_PMEM3_MEMSET3_Msk                      ;!<MEMSET3[7:0] bits (Common memory 3 setup time)
FMC_PMEM3_MEMSET3_0         EQU (0x01 :SHL: FMC_PMEM3_MEMSET3_Pos)           ;!< 0x00000001
FMC_PMEM3_MEMSET3_1         EQU (0x02 :SHL: FMC_PMEM3_MEMSET3_Pos)           ;!< 0x00000002
FMC_PMEM3_MEMSET3_2         EQU (0x04 :SHL: FMC_PMEM3_MEMSET3_Pos)           ;!< 0x00000004
FMC_PMEM3_MEMSET3_3         EQU (0x08 :SHL: FMC_PMEM3_MEMSET3_Pos)           ;!< 0x00000008
FMC_PMEM3_MEMSET3_4         EQU (0x10 :SHL: FMC_PMEM3_MEMSET3_Pos)           ;!< 0x00000010
FMC_PMEM3_MEMSET3_5         EQU (0x20 :SHL: FMC_PMEM3_MEMSET3_Pos)           ;!< 0x00000020
FMC_PMEM3_MEMSET3_6         EQU (0x40 :SHL: FMC_PMEM3_MEMSET3_Pos)           ;!< 0x00000040
FMC_PMEM3_MEMSET3_7         EQU (0x80 :SHL: FMC_PMEM3_MEMSET3_Pos)           ;!< 0x00000080

FMC_PMEM3_MEMWAIT3_Pos      EQU (8)
FMC_PMEM3_MEMWAIT3_Msk      EQU (0xFF :SHL: FMC_PMEM3_MEMWAIT3_Pos)          ;!< 0x0000FF00
FMC_PMEM3_MEMWAIT3          EQU FMC_PMEM3_MEMWAIT3_Msk                     ;!<MEMWAIT3[7:0] bits (Common memory 3 wait time)
FMC_PMEM3_MEMWAIT3_0        EQU (0x01 :SHL: FMC_PMEM3_MEMWAIT3_Pos)          ;!< 0x00000100
FMC_PMEM3_MEMWAIT3_1        EQU (0x02 :SHL: FMC_PMEM3_MEMWAIT3_Pos)          ;!< 0x00000200
FMC_PMEM3_MEMWAIT3_2        EQU (0x04 :SHL: FMC_PMEM3_MEMWAIT3_Pos)          ;!< 0x00000400
FMC_PMEM3_MEMWAIT3_3        EQU (0x08 :SHL: FMC_PMEM3_MEMWAIT3_Pos)          ;!< 0x00000800
FMC_PMEM3_MEMWAIT3_4        EQU (0x10 :SHL: FMC_PMEM3_MEMWAIT3_Pos)          ;!< 0x00001000
FMC_PMEM3_MEMWAIT3_5        EQU (0x20 :SHL: FMC_PMEM3_MEMWAIT3_Pos)          ;!< 0x00002000
FMC_PMEM3_MEMWAIT3_6        EQU (0x40 :SHL: FMC_PMEM3_MEMWAIT3_Pos)          ;!< 0x00004000
FMC_PMEM3_MEMWAIT3_7        EQU (0x80 :SHL: FMC_PMEM3_MEMWAIT3_Pos)          ;!< 0x00008000

FMC_PMEM3_MEMHOLD3_Pos      EQU (16)
FMC_PMEM3_MEMHOLD3_Msk      EQU (0xFF :SHL: FMC_PMEM3_MEMHOLD3_Pos)          ;!< 0x00FF0000
FMC_PMEM3_MEMHOLD3          EQU FMC_PMEM3_MEMHOLD3_Msk                     ;!<MEMHOLD3[7:0] bits (Common memory 3 hold time)
FMC_PMEM3_MEMHOLD3_0        EQU (0x01 :SHL: FMC_PMEM3_MEMHOLD3_Pos)          ;!< 0x00010000
FMC_PMEM3_MEMHOLD3_1        EQU (0x02 :SHL: FMC_PMEM3_MEMHOLD3_Pos)          ;!< 0x00020000
FMC_PMEM3_MEMHOLD3_2        EQU (0x04 :SHL: FMC_PMEM3_MEMHOLD3_Pos)          ;!< 0x00040000
FMC_PMEM3_MEMHOLD3_3        EQU (0x08 :SHL: FMC_PMEM3_MEMHOLD3_Pos)          ;!< 0x00080000
FMC_PMEM3_MEMHOLD3_4        EQU (0x10 :SHL: FMC_PMEM3_MEMHOLD3_Pos)          ;!< 0x00100000
FMC_PMEM3_MEMHOLD3_5        EQU (0x20 :SHL: FMC_PMEM3_MEMHOLD3_Pos)          ;!< 0x00200000
FMC_PMEM3_MEMHOLD3_6        EQU (0x40 :SHL: FMC_PMEM3_MEMHOLD3_Pos)          ;!< 0x00400000
FMC_PMEM3_MEMHOLD3_7        EQU (0x80 :SHL: FMC_PMEM3_MEMHOLD3_Pos)          ;!< 0x00800000

FMC_PMEM3_MEMHIZ3_Pos       EQU (24)
FMC_PMEM3_MEMHIZ3_Msk       EQU (0xFF :SHL: FMC_PMEM3_MEMHIZ3_Pos)           ;!< 0xFF000000
FMC_PMEM3_MEMHIZ3           EQU FMC_PMEM3_MEMHIZ3_Msk                      ;!<MEMHIZ3[7:0] bits (Common memory 3 databus HiZ time)
FMC_PMEM3_MEMHIZ3_0         EQU (0x01 :SHL: FMC_PMEM3_MEMHIZ3_Pos)           ;!< 0x01000000
FMC_PMEM3_MEMHIZ3_1         EQU (0x02 :SHL: FMC_PMEM3_MEMHIZ3_Pos)           ;!< 0x02000000
FMC_PMEM3_MEMHIZ3_2         EQU (0x04 :SHL: FMC_PMEM3_MEMHIZ3_Pos)           ;!< 0x04000000
FMC_PMEM3_MEMHIZ3_3         EQU (0x08 :SHL: FMC_PMEM3_MEMHIZ3_Pos)           ;!< 0x08000000
FMC_PMEM3_MEMHIZ3_4         EQU (0x10 :SHL: FMC_PMEM3_MEMHIZ3_Pos)           ;!< 0x10000000
FMC_PMEM3_MEMHIZ3_5         EQU (0x20 :SHL: FMC_PMEM3_MEMHIZ3_Pos)           ;!< 0x20000000
FMC_PMEM3_MEMHIZ3_6         EQU (0x40 :SHL: FMC_PMEM3_MEMHIZ3_Pos)           ;!< 0x40000000
FMC_PMEM3_MEMHIZ3_7         EQU (0x80 :SHL: FMC_PMEM3_MEMHIZ3_Pos)           ;!< 0x80000000

;*****************  Bit definition for FMC_PMEM4 register  *****************
FMC_PMEM4_MEMSET4_Pos       EQU (0)
FMC_PMEM4_MEMSET4_Msk       EQU (0xFF :SHL: FMC_PMEM4_MEMSET4_Pos)           ;!< 0x000000FF
FMC_PMEM4_MEMSET4           EQU FMC_PMEM4_MEMSET4_Msk                      ;!<MEMSET4[7:0] bits (Common memory 4 setup time)
FMC_PMEM4_MEMSET4_0         EQU (0x01 :SHL: FMC_PMEM4_MEMSET4_Pos)           ;!< 0x00000001
FMC_PMEM4_MEMSET4_1         EQU (0x02 :SHL: FMC_PMEM4_MEMSET4_Pos)           ;!< 0x00000002
FMC_PMEM4_MEMSET4_2         EQU (0x04 :SHL: FMC_PMEM4_MEMSET4_Pos)           ;!< 0x00000004
FMC_PMEM4_MEMSET4_3         EQU (0x08 :SHL: FMC_PMEM4_MEMSET4_Pos)           ;!< 0x00000008
FMC_PMEM4_MEMSET4_4         EQU (0x10 :SHL: FMC_PMEM4_MEMSET4_Pos)           ;!< 0x00000010
FMC_PMEM4_MEMSET4_5         EQU (0x20 :SHL: FMC_PMEM4_MEMSET4_Pos)           ;!< 0x00000020
FMC_PMEM4_MEMSET4_6         EQU (0x40 :SHL: FMC_PMEM4_MEMSET4_Pos)           ;!< 0x00000040
FMC_PMEM4_MEMSET4_7         EQU (0x80 :SHL: FMC_PMEM4_MEMSET4_Pos)           ;!< 0x00000080

FMC_PMEM4_MEMWAIT4_Pos      EQU (8)
FMC_PMEM4_MEMWAIT4_Msk      EQU (0xFF :SHL: FMC_PMEM4_MEMWAIT4_Pos)          ;!< 0x0000FF00
FMC_PMEM4_MEMWAIT4          EQU FMC_PMEM4_MEMWAIT4_Msk                     ;!<MEMWAIT4[7:0] bits (Common memory 4 wait time)
FMC_PMEM4_MEMWAIT4_0        EQU (0x01 :SHL: FMC_PMEM4_MEMWAIT4_Pos)          ;!< 0x00000100
FMC_PMEM4_MEMWAIT4_1        EQU (0x02 :SHL: FMC_PMEM4_MEMWAIT4_Pos)          ;!< 0x00000200
FMC_PMEM4_MEMWAIT4_2        EQU (0x04 :SHL: FMC_PMEM4_MEMWAIT4_Pos)          ;!< 0x00000400
FMC_PMEM4_MEMWAIT4_3        EQU (0x08 :SHL: FMC_PMEM4_MEMWAIT4_Pos)          ;!< 0x00000800
FMC_PMEM4_MEMWAIT4_4        EQU (0x10 :SHL: FMC_PMEM4_MEMWAIT4_Pos)          ;!< 0x00001000
FMC_PMEM4_MEMWAIT4_5        EQU (0x20 :SHL: FMC_PMEM4_MEMWAIT4_Pos)          ;!< 0x00002000
FMC_PMEM4_MEMWAIT4_6        EQU (0x40 :SHL: FMC_PMEM4_MEMWAIT4_Pos)          ;!< 0x00004000
FMC_PMEM4_MEMWAIT4_7        EQU (0x80 :SHL: FMC_PMEM4_MEMWAIT4_Pos)          ;!< 0x00008000

FMC_PMEM4_MEMHOLD4_Pos      EQU (16)
FMC_PMEM4_MEMHOLD4_Msk      EQU (0xFF :SHL: FMC_PMEM4_MEMHOLD4_Pos)          ;!< 0x00FF0000
FMC_PMEM4_MEMHOLD4          EQU FMC_PMEM4_MEMHOLD4_Msk                     ;!<MEMHOLD4[7:0] bits (Common memory 4 hold time)
FMC_PMEM4_MEMHOLD4_0        EQU (0x01 :SHL: FMC_PMEM4_MEMHOLD4_Pos)          ;!< 0x00010000
FMC_PMEM4_MEMHOLD4_1        EQU (0x02 :SHL: FMC_PMEM4_MEMHOLD4_Pos)          ;!< 0x00020000
FMC_PMEM4_MEMHOLD4_2        EQU (0x04 :SHL: FMC_PMEM4_MEMHOLD4_Pos)          ;!< 0x00040000
FMC_PMEM4_MEMHOLD4_3        EQU (0x08 :SHL: FMC_PMEM4_MEMHOLD4_Pos)          ;!< 0x00080000
FMC_PMEM4_MEMHOLD4_4        EQU (0x10 :SHL: FMC_PMEM4_MEMHOLD4_Pos)          ;!< 0x00100000
FMC_PMEM4_MEMHOLD4_5        EQU (0x20 :SHL: FMC_PMEM4_MEMHOLD4_Pos)          ;!< 0x00200000
FMC_PMEM4_MEMHOLD4_6        EQU (0x40 :SHL: FMC_PMEM4_MEMHOLD4_Pos)          ;!< 0x00400000
FMC_PMEM4_MEMHOLD4_7        EQU (0x80 :SHL: FMC_PMEM4_MEMHOLD4_Pos)          ;!< 0x00800000

FMC_PMEM4_MEMHIZ4_Pos       EQU (24)
FMC_PMEM4_MEMHIZ4_Msk       EQU (0xFF :SHL: FMC_PMEM4_MEMHIZ4_Pos)           ;!< 0xFF000000
FMC_PMEM4_MEMHIZ4           EQU FMC_PMEM4_MEMHIZ4_Msk                      ;!<MEMHIZ4[7:0] bits (Common memory 4 databus HiZ time)
FMC_PMEM4_MEMHIZ4_0         EQU (0x01 :SHL: FMC_PMEM4_MEMHIZ4_Pos)           ;!< 0x01000000
FMC_PMEM4_MEMHIZ4_1         EQU (0x02 :SHL: FMC_PMEM4_MEMHIZ4_Pos)           ;!< 0x02000000
FMC_PMEM4_MEMHIZ4_2         EQU (0x04 :SHL: FMC_PMEM4_MEMHIZ4_Pos)           ;!< 0x04000000
FMC_PMEM4_MEMHIZ4_3         EQU (0x08 :SHL: FMC_PMEM4_MEMHIZ4_Pos)           ;!< 0x08000000
FMC_PMEM4_MEMHIZ4_4         EQU (0x10 :SHL: FMC_PMEM4_MEMHIZ4_Pos)           ;!< 0x10000000
FMC_PMEM4_MEMHIZ4_5         EQU (0x20 :SHL: FMC_PMEM4_MEMHIZ4_Pos)           ;!< 0x20000000
FMC_PMEM4_MEMHIZ4_6         EQU (0x40 :SHL: FMC_PMEM4_MEMHIZ4_Pos)           ;!< 0x40000000
FMC_PMEM4_MEMHIZ4_7         EQU (0x80 :SHL: FMC_PMEM4_MEMHIZ4_Pos)           ;!< 0x80000000

;*****************  Bit definition for FMC_PATTx register  *****************
FMC_PATTx_ATTSETx_Pos       EQU (0)
FMC_PATTx_ATTSETx_Msk       EQU (0xFF :SHL: FMC_PATTx_ATTSETx_Pos)           ;!< 0x000000FF
FMC_PATTx_ATTSETx           EQU FMC_PATTx_ATTSETx_Msk                      ;!<ATTSETx[7:0] bits (Attribute memory x setup time)
FMC_PATTx_ATTSETx_0         EQU (0x01 :SHL: FMC_PATTx_ATTSETx_Pos)           ;!< 0x00000001
FMC_PATTx_ATTSETx_1         EQU (0x02 :SHL: FMC_PATTx_ATTSETx_Pos)           ;!< 0x00000002
FMC_PATTx_ATTSETx_2         EQU (0x04 :SHL: FMC_PATTx_ATTSETx_Pos)           ;!< 0x00000004
FMC_PATTx_ATTSETx_3         EQU (0x08 :SHL: FMC_PATTx_ATTSETx_Pos)           ;!< 0x00000008
FMC_PATTx_ATTSETx_4         EQU (0x10 :SHL: FMC_PATTx_ATTSETx_Pos)           ;!< 0x00000010
FMC_PATTx_ATTSETx_5         EQU (0x20 :SHL: FMC_PATTx_ATTSETx_Pos)           ;!< 0x00000020
FMC_PATTx_ATTSETx_6         EQU (0x40 :SHL: FMC_PATTx_ATTSETx_Pos)           ;!< 0x00000040
FMC_PATTx_ATTSETx_7         EQU (0x80 :SHL: FMC_PATTx_ATTSETx_Pos)           ;!< 0x00000080

FMC_PATTx_ATTWAITx_Pos      EQU (8)
FMC_PATTx_ATTWAITx_Msk      EQU (0xFF :SHL: FMC_PATTx_ATTWAITx_Pos)          ;!< 0x0000FF00
FMC_PATTx_ATTWAITx          EQU FMC_PATTx_ATTWAITx_Msk                     ;!<ATTWAITx[7:0] bits (Attribute memory x wait time)
FMC_PATTx_ATTWAITx_0        EQU (0x01 :SHL: FMC_PATTx_ATTWAITx_Pos)          ;!< 0x00000100
FMC_PATTx_ATTWAITx_1        EQU (0x02 :SHL: FMC_PATTx_ATTWAITx_Pos)          ;!< 0x00000200
FMC_PATTx_ATTWAITx_2        EQU (0x04 :SHL: FMC_PATTx_ATTWAITx_Pos)          ;!< 0x00000400
FMC_PATTx_ATTWAITx_3        EQU (0x08 :SHL: FMC_PATTx_ATTWAITx_Pos)          ;!< 0x00000800
FMC_PATTx_ATTWAITx_4        EQU (0x10 :SHL: FMC_PATTx_ATTWAITx_Pos)          ;!< 0x00001000
FMC_PATTx_ATTWAITx_5        EQU (0x20 :SHL: FMC_PATTx_ATTWAITx_Pos)          ;!< 0x00002000
FMC_PATTx_ATTWAITx_6        EQU (0x40 :SHL: FMC_PATTx_ATTWAITx_Pos)          ;!< 0x00004000
FMC_PATTx_ATTWAITx_7        EQU (0x80 :SHL: FMC_PATTx_ATTWAITx_Pos)          ;!< 0x00008000

FMC_PATTx_ATTHOLDx_Pos      EQU (16)
FMC_PATTx_ATTHOLDx_Msk      EQU (0xFF :SHL: FMC_PATTx_ATTHOLDx_Pos)          ;!< 0x00FF0000
FMC_PATTx_ATTHOLDx          EQU FMC_PATTx_ATTHOLDx_Msk                     ;!<ATTHOLDx[7:0] bits (Attribute memory x hold time)
FMC_PATTx_ATTHOLDx_0        EQU (0x01 :SHL: FMC_PATTx_ATTHOLDx_Pos)          ;!< 0x00010000
FMC_PATTx_ATTHOLDx_1        EQU (0x02 :SHL: FMC_PATTx_ATTHOLDx_Pos)          ;!< 0x00020000
FMC_PATTx_ATTHOLDx_2        EQU (0x04 :SHL: FMC_PATTx_ATTHOLDx_Pos)          ;!< 0x00040000
FMC_PATTx_ATTHOLDx_3        EQU (0x08 :SHL: FMC_PATTx_ATTHOLDx_Pos)          ;!< 0x00080000
FMC_PATTx_ATTHOLDx_4        EQU (0x10 :SHL: FMC_PATTx_ATTHOLDx_Pos)          ;!< 0x00100000
FMC_PATTx_ATTHOLDx_5        EQU (0x20 :SHL: FMC_PATTx_ATTHOLDx_Pos)          ;!< 0x00200000
FMC_PATTx_ATTHOLDx_6        EQU (0x40 :SHL: FMC_PATTx_ATTHOLDx_Pos)          ;!< 0x00400000
FMC_PATTx_ATTHOLDx_7        EQU (0x80 :SHL: FMC_PATTx_ATTHOLDx_Pos)          ;!< 0x00800000

FMC_PATTx_ATTHIZx_Pos       EQU (24)
FMC_PATTx_ATTHIZx_Msk       EQU (0xFF :SHL: FMC_PATTx_ATTHIZx_Pos)           ;!< 0xFF000000
FMC_PATTx_ATTHIZx           EQU FMC_PATTx_ATTHIZx_Msk                      ;!<ATTHIZx[7:0] bits (Attribute memory x databus HiZ time)
FMC_PATTx_ATTHIZx_0         EQU (0x01 :SHL: FMC_PATTx_ATTHIZx_Pos)           ;!< 0x01000000
FMC_PATTx_ATTHIZx_1         EQU (0x02 :SHL: FMC_PATTx_ATTHIZx_Pos)           ;!< 0x02000000
FMC_PATTx_ATTHIZx_2         EQU (0x04 :SHL: FMC_PATTx_ATTHIZx_Pos)           ;!< 0x04000000
FMC_PATTx_ATTHIZx_3         EQU (0x08 :SHL: FMC_PATTx_ATTHIZx_Pos)           ;!< 0x08000000
FMC_PATTx_ATTHIZx_4         EQU (0x10 :SHL: FMC_PATTx_ATTHIZx_Pos)           ;!< 0x10000000
FMC_PATTx_ATTHIZx_5         EQU (0x20 :SHL: FMC_PATTx_ATTHIZx_Pos)           ;!< 0x20000000
FMC_PATTx_ATTHIZx_6         EQU (0x40 :SHL: FMC_PATTx_ATTHIZx_Pos)           ;!< 0x40000000
FMC_PATTx_ATTHIZx_7         EQU (0x80 :SHL: FMC_PATTx_ATTHIZx_Pos)           ;!< 0x80000000

;*****************  Bit definition for FMC_PATT2 register  *****************
FMC_PATT2_ATTSET2_Pos       EQU (0)
FMC_PATT2_ATTSET2_Msk       EQU (0xFF :SHL: FMC_PATT2_ATTSET2_Pos)           ;!< 0x000000FF
FMC_PATT2_ATTSET2           EQU FMC_PATT2_ATTSET2_Msk                      ;!<ATTSET2[7:0] bits (Attribute memory 2 setup time)
FMC_PATT2_ATTSET2_0         EQU (0x01 :SHL: FMC_PATT2_ATTSET2_Pos)           ;!< 0x00000001
FMC_PATT2_ATTSET2_1         EQU (0x02 :SHL: FMC_PATT2_ATTSET2_Pos)           ;!< 0x00000002
FMC_PATT2_ATTSET2_2         EQU (0x04 :SHL: FMC_PATT2_ATTSET2_Pos)           ;!< 0x00000004
FMC_PATT2_ATTSET2_3         EQU (0x08 :SHL: FMC_PATT2_ATTSET2_Pos)           ;!< 0x00000008
FMC_PATT2_ATTSET2_4         EQU (0x10 :SHL: FMC_PATT2_ATTSET2_Pos)           ;!< 0x00000010
FMC_PATT2_ATTSET2_5         EQU (0x20 :SHL: FMC_PATT2_ATTSET2_Pos)           ;!< 0x00000020
FMC_PATT2_ATTSET2_6         EQU (0x40 :SHL: FMC_PATT2_ATTSET2_Pos)           ;!< 0x00000040
FMC_PATT2_ATTSET2_7         EQU (0x80 :SHL: FMC_PATT2_ATTSET2_Pos)           ;!< 0x00000080

FMC_PATT2_ATTWAIT2_Pos      EQU (8)
FMC_PATT2_ATTWAIT2_Msk      EQU (0xFF :SHL: FMC_PATT2_ATTWAIT2_Pos)          ;!< 0x0000FF00
FMC_PATT2_ATTWAIT2          EQU FMC_PATT2_ATTWAIT2_Msk                     ;!<ATTWAIT2[7:0] bits (Attribute memory 2 wait time)
FMC_PATT2_ATTWAIT2_0        EQU (0x01 :SHL: FMC_PATT2_ATTWAIT2_Pos)          ;!< 0x00000100
FMC_PATT2_ATTWAIT2_1        EQU (0x02 :SHL: FMC_PATT2_ATTWAIT2_Pos)          ;!< 0x00000200
FMC_PATT2_ATTWAIT2_2        EQU (0x04 :SHL: FMC_PATT2_ATTWAIT2_Pos)          ;!< 0x00000400
FMC_PATT2_ATTWAIT2_3        EQU (0x08 :SHL: FMC_PATT2_ATTWAIT2_Pos)          ;!< 0x00000800
FMC_PATT2_ATTWAIT2_4        EQU (0x10 :SHL: FMC_PATT2_ATTWAIT2_Pos)          ;!< 0x00001000
FMC_PATT2_ATTWAIT2_5        EQU (0x20 :SHL: FMC_PATT2_ATTWAIT2_Pos)          ;!< 0x00002000
FMC_PATT2_ATTWAIT2_6        EQU (0x40 :SHL: FMC_PATT2_ATTWAIT2_Pos)          ;!< 0x00004000
FMC_PATT2_ATTWAIT2_7        EQU (0x80 :SHL: FMC_PATT2_ATTWAIT2_Pos)          ;!< 0x00008000

FMC_PATT2_ATTHOLD2_Pos      EQU (16)
FMC_PATT2_ATTHOLD2_Msk      EQU (0xFF :SHL: FMC_PATT2_ATTHOLD2_Pos)          ;!< 0x00FF0000
FMC_PATT2_ATTHOLD2          EQU FMC_PATT2_ATTHOLD2_Msk                     ;!<ATTHOLD2[7:0] bits (Attribute memory 2 hold time)
FMC_PATT2_ATTHOLD2_0        EQU (0x01 :SHL: FMC_PATT2_ATTHOLD2_Pos)          ;!< 0x00010000
FMC_PATT2_ATTHOLD2_1        EQU (0x02 :SHL: FMC_PATT2_ATTHOLD2_Pos)          ;!< 0x00020000
FMC_PATT2_ATTHOLD2_2        EQU (0x04 :SHL: FMC_PATT2_ATTHOLD2_Pos)          ;!< 0x00040000
FMC_PATT2_ATTHOLD2_3        EQU (0x08 :SHL: FMC_PATT2_ATTHOLD2_Pos)          ;!< 0x00080000
FMC_PATT2_ATTHOLD2_4        EQU (0x10 :SHL: FMC_PATT2_ATTHOLD2_Pos)          ;!< 0x00100000
FMC_PATT2_ATTHOLD2_5        EQU (0x20 :SHL: FMC_PATT2_ATTHOLD2_Pos)          ;!< 0x00200000
FMC_PATT2_ATTHOLD2_6        EQU (0x40 :SHL: FMC_PATT2_ATTHOLD2_Pos)          ;!< 0x00400000
FMC_PATT2_ATTHOLD2_7        EQU (0x80 :SHL: FMC_PATT2_ATTHOLD2_Pos)          ;!< 0x00800000

FMC_PATT2_ATTHIZ2_Pos       EQU (24)
FMC_PATT2_ATTHIZ2_Msk       EQU (0xFF :SHL: FMC_PATT2_ATTHIZ2_Pos)           ;!< 0xFF000000
FMC_PATT2_ATTHIZ2           EQU FMC_PATT2_ATTHIZ2_Msk                      ;!<ATTHIZ2[7:0] bits (Attribute memory 2 databus HiZ time)
FMC_PATT2_ATTHIZ2_0         EQU (0x01 :SHL: FMC_PATT2_ATTHIZ2_Pos)           ;!< 0x01000000
FMC_PATT2_ATTHIZ2_1         EQU (0x02 :SHL: FMC_PATT2_ATTHIZ2_Pos)           ;!< 0x02000000
FMC_PATT2_ATTHIZ2_2         EQU (0x04 :SHL: FMC_PATT2_ATTHIZ2_Pos)           ;!< 0x04000000
FMC_PATT2_ATTHIZ2_3         EQU (0x08 :SHL: FMC_PATT2_ATTHIZ2_Pos)           ;!< 0x08000000
FMC_PATT2_ATTHIZ2_4         EQU (0x10 :SHL: FMC_PATT2_ATTHIZ2_Pos)           ;!< 0x10000000
FMC_PATT2_ATTHIZ2_5         EQU (0x20 :SHL: FMC_PATT2_ATTHIZ2_Pos)           ;!< 0x20000000
FMC_PATT2_ATTHIZ2_6         EQU (0x40 :SHL: FMC_PATT2_ATTHIZ2_Pos)           ;!< 0x40000000
FMC_PATT2_ATTHIZ2_7         EQU (0x80 :SHL: FMC_PATT2_ATTHIZ2_Pos)           ;!< 0x80000000

;*****************  Bit definition for FMC_PATT3 register  *****************
FMC_PATT3_ATTSET3_Pos       EQU (0)
FMC_PATT3_ATTSET3_Msk       EQU (0xFF :SHL: FMC_PATT3_ATTSET3_Pos)           ;!< 0x000000FF
FMC_PATT3_ATTSET3           EQU FMC_PATT3_ATTSET3_Msk                      ;!<ATTSET3[7:0] bits (Attribute memory 3 setup time)
FMC_PATT3_ATTSET3_0         EQU (0x01 :SHL: FMC_PATT3_ATTSET3_Pos)           ;!< 0x00000001
FMC_PATT3_ATTSET3_1         EQU (0x02 :SHL: FMC_PATT3_ATTSET3_Pos)           ;!< 0x00000002
FMC_PATT3_ATTSET3_2         EQU (0x04 :SHL: FMC_PATT3_ATTSET3_Pos)           ;!< 0x00000004
FMC_PATT3_ATTSET3_3         EQU (0x08 :SHL: FMC_PATT3_ATTSET3_Pos)           ;!< 0x00000008
FMC_PATT3_ATTSET3_4         EQU (0x10 :SHL: FMC_PATT3_ATTSET3_Pos)           ;!< 0x00000010
FMC_PATT3_ATTSET3_5         EQU (0x20 :SHL: FMC_PATT3_ATTSET3_Pos)           ;!< 0x00000020
FMC_PATT3_ATTSET3_6         EQU (0x40 :SHL: FMC_PATT3_ATTSET3_Pos)           ;!< 0x00000040
FMC_PATT3_ATTSET3_7         EQU (0x80 :SHL: FMC_PATT3_ATTSET3_Pos)           ;!< 0x00000080

FMC_PATT3_ATTWAIT3_Pos      EQU (8)
FMC_PATT3_ATTWAIT3_Msk      EQU (0xFF :SHL: FMC_PATT3_ATTWAIT3_Pos)          ;!< 0x0000FF00
FMC_PATT3_ATTWAIT3          EQU FMC_PATT3_ATTWAIT3_Msk                     ;!<ATTWAIT3[7:0] bits (Attribute memory 3 wait time)
FMC_PATT3_ATTWAIT3_0        EQU (0x01 :SHL: FMC_PATT3_ATTWAIT3_Pos)          ;!< 0x00000100
FMC_PATT3_ATTWAIT3_1        EQU (0x02 :SHL: FMC_PATT3_ATTWAIT3_Pos)          ;!< 0x00000200
FMC_PATT3_ATTWAIT3_2        EQU (0x04 :SHL: FMC_PATT3_ATTWAIT3_Pos)          ;!< 0x00000400
FMC_PATT3_ATTWAIT3_3        EQU (0x08 :SHL: FMC_PATT3_ATTWAIT3_Pos)          ;!< 0x00000800
FMC_PATT3_ATTWAIT3_4        EQU (0x10 :SHL: FMC_PATT3_ATTWAIT3_Pos)          ;!< 0x00001000
FMC_PATT3_ATTWAIT3_5        EQU (0x20 :SHL: FMC_PATT3_ATTWAIT3_Pos)          ;!< 0x00002000
FMC_PATT3_ATTWAIT3_6        EQU (0x40 :SHL: FMC_PATT3_ATTWAIT3_Pos)          ;!< 0x00004000
FMC_PATT3_ATTWAIT3_7        EQU (0x80 :SHL: FMC_PATT3_ATTWAIT3_Pos)          ;!< 0x00008000

FMC_PATT3_ATTHOLD3_Pos      EQU (16)
FMC_PATT3_ATTHOLD3_Msk      EQU (0xFF :SHL: FMC_PATT3_ATTHOLD3_Pos)          ;!< 0x00FF0000
FMC_PATT3_ATTHOLD3          EQU FMC_PATT3_ATTHOLD3_Msk                     ;!<ATTHOLD3[7:0] bits (Attribute memory 3 hold time)
FMC_PATT3_ATTHOLD3_0        EQU (0x01 :SHL: FMC_PATT3_ATTHOLD3_Pos)          ;!< 0x00010000
FMC_PATT3_ATTHOLD3_1        EQU (0x02 :SHL: FMC_PATT3_ATTHOLD3_Pos)          ;!< 0x00020000
FMC_PATT3_ATTHOLD3_2        EQU (0x04 :SHL: FMC_PATT3_ATTHOLD3_Pos)          ;!< 0x00040000
FMC_PATT3_ATTHOLD3_3        EQU (0x08 :SHL: FMC_PATT3_ATTHOLD3_Pos)          ;!< 0x00080000
FMC_PATT3_ATTHOLD3_4        EQU (0x10 :SHL: FMC_PATT3_ATTHOLD3_Pos)          ;!< 0x00100000
FMC_PATT3_ATTHOLD3_5        EQU (0x20 :SHL: FMC_PATT3_ATTHOLD3_Pos)          ;!< 0x00200000
FMC_PATT3_ATTHOLD3_6        EQU (0x40 :SHL: FMC_PATT3_ATTHOLD3_Pos)          ;!< 0x00400000
FMC_PATT3_ATTHOLD3_7        EQU (0x80 :SHL: FMC_PATT3_ATTHOLD3_Pos)          ;!< 0x00800000

FMC_PATT3_ATTHIZ3_Pos       EQU (24)
FMC_PATT3_ATTHIZ3_Msk       EQU (0xFF :SHL: FMC_PATT3_ATTHIZ3_Pos)           ;!< 0xFF000000
FMC_PATT3_ATTHIZ3           EQU FMC_PATT3_ATTHIZ3_Msk                      ;!<ATTHIZ3[7:0] bits (Attribute memory 3 databus HiZ time)
FMC_PATT3_ATTHIZ3_0         EQU (0x01 :SHL: FMC_PATT3_ATTHIZ3_Pos)           ;!< 0x01000000
FMC_PATT3_ATTHIZ3_1         EQU (0x02 :SHL: FMC_PATT3_ATTHIZ3_Pos)           ;!< 0x02000000
FMC_PATT3_ATTHIZ3_2         EQU (0x04 :SHL: FMC_PATT3_ATTHIZ3_Pos)           ;!< 0x04000000
FMC_PATT3_ATTHIZ3_3         EQU (0x08 :SHL: FMC_PATT3_ATTHIZ3_Pos)           ;!< 0x08000000
FMC_PATT3_ATTHIZ3_4         EQU (0x10 :SHL: FMC_PATT3_ATTHIZ3_Pos)           ;!< 0x10000000
FMC_PATT3_ATTHIZ3_5         EQU (0x20 :SHL: FMC_PATT3_ATTHIZ3_Pos)           ;!< 0x20000000
FMC_PATT3_ATTHIZ3_6         EQU (0x40 :SHL: FMC_PATT3_ATTHIZ3_Pos)           ;!< 0x40000000
FMC_PATT3_ATTHIZ3_7         EQU (0x80 :SHL: FMC_PATT3_ATTHIZ3_Pos)           ;!< 0x80000000

;*****************  Bit definition for FMC_PATT4 register  *****************
FMC_PATT4_ATTSET4_Pos       EQU (0)
FMC_PATT4_ATTSET4_Msk       EQU (0xFF :SHL: FMC_PATT4_ATTSET4_Pos)           ;!< 0x000000FF
FMC_PATT4_ATTSET4           EQU FMC_PATT4_ATTSET4_Msk                      ;!<ATTSET4[7:0] bits (Attribute memory 4 setup time)
FMC_PATT4_ATTSET4_0         EQU (0x01 :SHL: FMC_PATT4_ATTSET4_Pos)           ;!< 0x00000001
FMC_PATT4_ATTSET4_1         EQU (0x02 :SHL: FMC_PATT4_ATTSET4_Pos)           ;!< 0x00000002
FMC_PATT4_ATTSET4_2         EQU (0x04 :SHL: FMC_PATT4_ATTSET4_Pos)           ;!< 0x00000004
FMC_PATT4_ATTSET4_3         EQU (0x08 :SHL: FMC_PATT4_ATTSET4_Pos)           ;!< 0x00000008
FMC_PATT4_ATTSET4_4         EQU (0x10 :SHL: FMC_PATT4_ATTSET4_Pos)           ;!< 0x00000010
FMC_PATT4_ATTSET4_5         EQU (0x20 :SHL: FMC_PATT4_ATTSET4_Pos)           ;!< 0x00000020
FMC_PATT4_ATTSET4_6         EQU (0x40 :SHL: FMC_PATT4_ATTSET4_Pos)           ;!< 0x00000040
FMC_PATT4_ATTSET4_7         EQU (0x80 :SHL: FMC_PATT4_ATTSET4_Pos)           ;!< 0x00000080

FMC_PATT4_ATTWAIT4_Pos      EQU (8)
FMC_PATT4_ATTWAIT4_Msk      EQU (0xFF :SHL: FMC_PATT4_ATTWAIT4_Pos)          ;!< 0x0000FF00
FMC_PATT4_ATTWAIT4          EQU FMC_PATT4_ATTWAIT4_Msk                     ;!<ATTWAIT4[7:0] bits (Attribute memory 4 wait time)
FMC_PATT4_ATTWAIT4_0        EQU (0x01 :SHL: FMC_PATT4_ATTWAIT4_Pos)          ;!< 0x00000100
FMC_PATT4_ATTWAIT4_1        EQU (0x02 :SHL: FMC_PATT4_ATTWAIT4_Pos)          ;!< 0x00000200
FMC_PATT4_ATTWAIT4_2        EQU (0x04 :SHL: FMC_PATT4_ATTWAIT4_Pos)          ;!< 0x00000400
FMC_PATT4_ATTWAIT4_3        EQU (0x08 :SHL: FMC_PATT4_ATTWAIT4_Pos)          ;!< 0x00000800
FMC_PATT4_ATTWAIT4_4        EQU (0x10 :SHL: FMC_PATT4_ATTWAIT4_Pos)          ;!< 0x00001000
FMC_PATT4_ATTWAIT4_5        EQU (0x20 :SHL: FMC_PATT4_ATTWAIT4_Pos)          ;!< 0x00002000
FMC_PATT4_ATTWAIT4_6        EQU (0x40 :SHL: FMC_PATT4_ATTWAIT4_Pos)          ;!< 0x00004000
FMC_PATT4_ATTWAIT4_7        EQU (0x80 :SHL: FMC_PATT4_ATTWAIT4_Pos)          ;!< 0x00008000

FMC_PATT4_ATTHOLD4_Pos      EQU (16)
FMC_PATT4_ATTHOLD4_Msk      EQU (0xFF :SHL: FMC_PATT4_ATTHOLD4_Pos)          ;!< 0x00FF0000
FMC_PATT4_ATTHOLD4          EQU FMC_PATT4_ATTHOLD4_Msk                     ;!<ATTHOLD4[7:0] bits (Attribute memory 4 hold time)
FMC_PATT4_ATTHOLD4_0        EQU (0x01 :SHL: FMC_PATT4_ATTHOLD4_Pos)          ;!< 0x00010000
FMC_PATT4_ATTHOLD4_1        EQU (0x02 :SHL: FMC_PATT4_ATTHOLD4_Pos)          ;!< 0x00020000
FMC_PATT4_ATTHOLD4_2        EQU (0x04 :SHL: FMC_PATT4_ATTHOLD4_Pos)          ;!< 0x00040000
FMC_PATT4_ATTHOLD4_3        EQU (0x08 :SHL: FMC_PATT4_ATTHOLD4_Pos)          ;!< 0x00080000
FMC_PATT4_ATTHOLD4_4        EQU (0x10 :SHL: FMC_PATT4_ATTHOLD4_Pos)          ;!< 0x00100000
FMC_PATT4_ATTHOLD4_5        EQU (0x20 :SHL: FMC_PATT4_ATTHOLD4_Pos)          ;!< 0x00200000
FMC_PATT4_ATTHOLD4_6        EQU (0x40 :SHL: FMC_PATT4_ATTHOLD4_Pos)          ;!< 0x00400000
FMC_PATT4_ATTHOLD4_7        EQU (0x80 :SHL: FMC_PATT4_ATTHOLD4_Pos)          ;!< 0x00800000

FMC_PATT4_ATTHIZ4_Pos       EQU (24)
FMC_PATT4_ATTHIZ4_Msk       EQU (0xFF :SHL: FMC_PATT4_ATTHIZ4_Pos)           ;!< 0xFF000000
FMC_PATT4_ATTHIZ4           EQU FMC_PATT4_ATTHIZ4_Msk                      ;!<ATTHIZ4[7:0] bits (Attribute memory 4 databus HiZ time)
FMC_PATT4_ATTHIZ4_0         EQU (0x01 :SHL: FMC_PATT4_ATTHIZ4_Pos)           ;!< 0x01000000
FMC_PATT4_ATTHIZ4_1         EQU (0x02 :SHL: FMC_PATT4_ATTHIZ4_Pos)           ;!< 0x02000000
FMC_PATT4_ATTHIZ4_2         EQU (0x04 :SHL: FMC_PATT4_ATTHIZ4_Pos)           ;!< 0x04000000
FMC_PATT4_ATTHIZ4_3         EQU (0x08 :SHL: FMC_PATT4_ATTHIZ4_Pos)           ;!< 0x08000000
FMC_PATT4_ATTHIZ4_4         EQU (0x10 :SHL: FMC_PATT4_ATTHIZ4_Pos)           ;!< 0x10000000
FMC_PATT4_ATTHIZ4_5         EQU (0x20 :SHL: FMC_PATT4_ATTHIZ4_Pos)           ;!< 0x20000000
FMC_PATT4_ATTHIZ4_6         EQU (0x40 :SHL: FMC_PATT4_ATTHIZ4_Pos)           ;!< 0x40000000
FMC_PATT4_ATTHIZ4_7         EQU (0x80 :SHL: FMC_PATT4_ATTHIZ4_Pos)           ;!< 0x80000000

;*****************  Bit definition for FMC_PIO4 register  ******************
FMC_PIO4_IOSET4_Pos         EQU (0)
FMC_PIO4_IOSET4_Msk         EQU (0xFF :SHL: FMC_PIO4_IOSET4_Pos)             ;!< 0x000000FF
FMC_PIO4_IOSET4             EQU FMC_PIO4_IOSET4_Msk                        ;!<IOSET4[7:0] bits (I/O 4 setup time)
FMC_PIO4_IOSET4_0           EQU (0x01 :SHL: FMC_PIO4_IOSET4_Pos)             ;!< 0x00000001
FMC_PIO4_IOSET4_1           EQU (0x02 :SHL: FMC_PIO4_IOSET4_Pos)             ;!< 0x00000002
FMC_PIO4_IOSET4_2           EQU (0x04 :SHL: FMC_PIO4_IOSET4_Pos)             ;!< 0x00000004
FMC_PIO4_IOSET4_3           EQU (0x08 :SHL: FMC_PIO4_IOSET4_Pos)             ;!< 0x00000008
FMC_PIO4_IOSET4_4           EQU (0x10 :SHL: FMC_PIO4_IOSET4_Pos)             ;!< 0x00000010
FMC_PIO4_IOSET4_5           EQU (0x20 :SHL: FMC_PIO4_IOSET4_Pos)             ;!< 0x00000020
FMC_PIO4_IOSET4_6           EQU (0x40 :SHL: FMC_PIO4_IOSET4_Pos)             ;!< 0x00000040
FMC_PIO4_IOSET4_7           EQU (0x80 :SHL: FMC_PIO4_IOSET4_Pos)             ;!< 0x00000080

FMC_PIO4_IOWAIT4_Pos        EQU (8)
FMC_PIO4_IOWAIT4_Msk        EQU (0xFF :SHL: FMC_PIO4_IOWAIT4_Pos)            ;!< 0x0000FF00
FMC_PIO4_IOWAIT4            EQU FMC_PIO4_IOWAIT4_Msk                       ;!<IOWAIT4[7:0] bits (I/O 4 wait time)
FMC_PIO4_IOWAIT4_0          EQU (0x01 :SHL: FMC_PIO4_IOWAIT4_Pos)            ;!< 0x00000100
FMC_PIO4_IOWAIT4_1          EQU (0x02 :SHL: FMC_PIO4_IOWAIT4_Pos)            ;!< 0x00000200
FMC_PIO4_IOWAIT4_2          EQU (0x04 :SHL: FMC_PIO4_IOWAIT4_Pos)            ;!< 0x00000400
FMC_PIO4_IOWAIT4_3          EQU (0x08 :SHL: FMC_PIO4_IOWAIT4_Pos)            ;!< 0x00000800
FMC_PIO4_IOWAIT4_4          EQU (0x10 :SHL: FMC_PIO4_IOWAIT4_Pos)            ;!< 0x00001000
FMC_PIO4_IOWAIT4_5          EQU (0x20 :SHL: FMC_PIO4_IOWAIT4_Pos)            ;!< 0x00002000
FMC_PIO4_IOWAIT4_6          EQU (0x40 :SHL: FMC_PIO4_IOWAIT4_Pos)            ;!< 0x00004000
FMC_PIO4_IOWAIT4_7          EQU (0x80 :SHL: FMC_PIO4_IOWAIT4_Pos)            ;!< 0x00008000

FMC_PIO4_IOHOLD4_Pos        EQU (16)
FMC_PIO4_IOHOLD4_Msk        EQU (0xFF :SHL: FMC_PIO4_IOHOLD4_Pos)            ;!< 0x00FF0000
FMC_PIO4_IOHOLD4            EQU FMC_PIO4_IOHOLD4_Msk                       ;!<IOHOLD4[7:0] bits (I/O 4 hold time)
FMC_PIO4_IOHOLD4_0          EQU (0x01 :SHL: FMC_PIO4_IOHOLD4_Pos)            ;!< 0x00010000
FMC_PIO4_IOHOLD4_1          EQU (0x02 :SHL: FMC_PIO4_IOHOLD4_Pos)            ;!< 0x00020000
FMC_PIO4_IOHOLD4_2          EQU (0x04 :SHL: FMC_PIO4_IOHOLD4_Pos)            ;!< 0x00040000
FMC_PIO4_IOHOLD4_3          EQU (0x08 :SHL: FMC_PIO4_IOHOLD4_Pos)            ;!< 0x00080000
FMC_PIO4_IOHOLD4_4          EQU (0x10 :SHL: FMC_PIO4_IOHOLD4_Pos)            ;!< 0x00100000
FMC_PIO4_IOHOLD4_5          EQU (0x20 :SHL: FMC_PIO4_IOHOLD4_Pos)            ;!< 0x00200000
FMC_PIO4_IOHOLD4_6          EQU (0x40 :SHL: FMC_PIO4_IOHOLD4_Pos)            ;!< 0x00400000
FMC_PIO4_IOHOLD4_7          EQU (0x80 :SHL: FMC_PIO4_IOHOLD4_Pos)            ;!< 0x00800000

FMC_PIO4_IOHIZ4_Pos         EQU (24)
FMC_PIO4_IOHIZ4_Msk         EQU (0xFF :SHL: FMC_PIO4_IOHIZ4_Pos)             ;!< 0xFF000000
FMC_PIO4_IOHIZ4             EQU FMC_PIO4_IOHIZ4_Msk                        ;!<IOHIZ4[7:0] bits (I/O 4 databus HiZ time)
FMC_PIO4_IOHIZ4_0           EQU (0x01 :SHL: FMC_PIO4_IOHIZ4_Pos)             ;!< 0x01000000
FMC_PIO4_IOHIZ4_1           EQU (0x02 :SHL: FMC_PIO4_IOHIZ4_Pos)             ;!< 0x02000000
FMC_PIO4_IOHIZ4_2           EQU (0x04 :SHL: FMC_PIO4_IOHIZ4_Pos)             ;!< 0x04000000
FMC_PIO4_IOHIZ4_3           EQU (0x08 :SHL: FMC_PIO4_IOHIZ4_Pos)             ;!< 0x08000000
FMC_PIO4_IOHIZ4_4           EQU (0x10 :SHL: FMC_PIO4_IOHIZ4_Pos)             ;!< 0x10000000
FMC_PIO4_IOHIZ4_5           EQU (0x20 :SHL: FMC_PIO4_IOHIZ4_Pos)             ;!< 0x20000000
FMC_PIO4_IOHIZ4_6           EQU (0x40 :SHL: FMC_PIO4_IOHIZ4_Pos)             ;!< 0x40000000
FMC_PIO4_IOHIZ4_7           EQU (0x80 :SHL: FMC_PIO4_IOHIZ4_Pos)             ;!< 0x80000000

;*****************  Bit definition for FMC_ECCR2 register  *****************
FMC_ECCR2_ECC2_Pos          EQU (0)
FMC_ECCR2_ECC2_Msk          EQU (0xFFFFFFFF :SHL: FMC_ECCR2_ECC2_Pos)        ;!< 0xFFFFFFFF
FMC_ECCR2_ECC2              EQU FMC_ECCR2_ECC2_Msk                         ;!<ECC result

;*****************  Bit definition for FMC_ECCR3 register  *****************
FMC_ECCR3_ECC3_Pos          EQU (0)
FMC_ECCR3_ECC3_Msk          EQU (0xFFFFFFFF :SHL: FMC_ECCR3_ECC3_Pos)        ;!< 0xFFFFFFFF
FMC_ECCR3_ECC3              EQU FMC_ECCR3_ECC3_Msk                         ;!<ECC result

;****************************************************************************
;
;                            General Purpose I/O (GPIO)
;
;****************************************************************************
;******************  Bit definition for GPIO_MODER register  ****************
GPIO_MODER_MODER0_Pos            EQU (0)
GPIO_MODER_MODER0_Msk            EQU (0x3 :SHL: GPIO_MODER_MODER0_Pos)       ;!< 0x00000003
GPIO_MODER_MODER0                EQU GPIO_MODER_MODER0_Msk
GPIO_MODER_MODER0_0              EQU (0x1 :SHL: GPIO_MODER_MODER0_Pos)       ;!< 0x00000001
GPIO_MODER_MODER0_1              EQU (0x2 :SHL: GPIO_MODER_MODER0_Pos)       ;!< 0x00000002
GPIO_MODER_MODER1_Pos            EQU (2)
GPIO_MODER_MODER1_Msk            EQU (0x3 :SHL: GPIO_MODER_MODER1_Pos)       ;!< 0x0000000C
GPIO_MODER_MODER1                EQU GPIO_MODER_MODER1_Msk
GPIO_MODER_MODER1_0              EQU (0x1 :SHL: GPIO_MODER_MODER1_Pos)       ;!< 0x00000004
GPIO_MODER_MODER1_1              EQU (0x2 :SHL: GPIO_MODER_MODER1_Pos)       ;!< 0x00000008
GPIO_MODER_MODER2_Pos            EQU (4)
GPIO_MODER_MODER2_Msk            EQU (0x3 :SHL: GPIO_MODER_MODER2_Pos)       ;!< 0x00000030
GPIO_MODER_MODER2                EQU GPIO_MODER_MODER2_Msk
GPIO_MODER_MODER2_0              EQU (0x1 :SHL: GPIO_MODER_MODER2_Pos)       ;!< 0x00000010
GPIO_MODER_MODER2_1              EQU (0x2 :SHL: GPIO_MODER_MODER2_Pos)       ;!< 0x00000020
GPIO_MODER_MODER3_Pos            EQU (6)
GPIO_MODER_MODER3_Msk            EQU (0x3 :SHL: GPIO_MODER_MODER3_Pos)       ;!< 0x000000C0
GPIO_MODER_MODER3                EQU GPIO_MODER_MODER3_Msk
GPIO_MODER_MODER3_0              EQU (0x1 :SHL: GPIO_MODER_MODER3_Pos)       ;!< 0x00000040
GPIO_MODER_MODER3_1              EQU (0x2 :SHL: GPIO_MODER_MODER3_Pos)       ;!< 0x00000080
GPIO_MODER_MODER4_Pos            EQU (8)
GPIO_MODER_MODER4_Msk            EQU (0x3 :SHL: GPIO_MODER_MODER4_Pos)       ;!< 0x00000300
GPIO_MODER_MODER4                EQU GPIO_MODER_MODER4_Msk
GPIO_MODER_MODER4_0              EQU (0x1 :SHL: GPIO_MODER_MODER4_Pos)       ;!< 0x00000100
GPIO_MODER_MODER4_1              EQU (0x2 :SHL: GPIO_MODER_MODER4_Pos)       ;!< 0x00000200
GPIO_MODER_MODER5_Pos            EQU (10)
GPIO_MODER_MODER5_Msk            EQU (0x3 :SHL: GPIO_MODER_MODER5_Pos)       ;!< 0x00000C00
GPIO_MODER_MODER5                EQU GPIO_MODER_MODER5_Msk
GPIO_MODER_MODER5_0              EQU (0x1 :SHL: GPIO_MODER_MODER5_Pos)       ;!< 0x00000400
GPIO_MODER_MODER5_1              EQU (0x2 :SHL: GPIO_MODER_MODER5_Pos)       ;!< 0x00000800
GPIO_MODER_MODER6_Pos            EQU (12)
GPIO_MODER_MODER6_Msk            EQU (0x3 :SHL: GPIO_MODER_MODER6_Pos)       ;!< 0x00003000
GPIO_MODER_MODER6                EQU GPIO_MODER_MODER6_Msk
GPIO_MODER_MODER6_0              EQU (0x1 :SHL: GPIO_MODER_MODER6_Pos)       ;!< 0x00001000
GPIO_MODER_MODER6_1              EQU (0x2 :SHL: GPIO_MODER_MODER6_Pos)       ;!< 0x00002000
GPIO_MODER_MODER7_Pos            EQU (14)
GPIO_MODER_MODER7_Msk            EQU (0x3 :SHL: GPIO_MODER_MODER7_Pos)       ;!< 0x0000C000
GPIO_MODER_MODER7                EQU GPIO_MODER_MODER7_Msk
GPIO_MODER_MODER7_0              EQU (0x1 :SHL: GPIO_MODER_MODER7_Pos)       ;!< 0x00004000
GPIO_MODER_MODER7_1              EQU (0x2 :SHL: GPIO_MODER_MODER7_Pos)       ;!< 0x00008000
GPIO_MODER_MODER8_Pos            EQU (16)
GPIO_MODER_MODER8_Msk            EQU (0x3 :SHL: GPIO_MODER_MODER8_Pos)       ;!< 0x00030000
GPIO_MODER_MODER8                EQU GPIO_MODER_MODER8_Msk
GPIO_MODER_MODER8_0              EQU (0x1 :SHL: GPIO_MODER_MODER8_Pos)       ;!< 0x00010000
GPIO_MODER_MODER8_1              EQU (0x2 :SHL: GPIO_MODER_MODER8_Pos)       ;!< 0x00020000
GPIO_MODER_MODER9_Pos            EQU (18)
GPIO_MODER_MODER9_Msk            EQU (0x3 :SHL: GPIO_MODER_MODER9_Pos)       ;!< 0x000C0000
GPIO_MODER_MODER9                EQU GPIO_MODER_MODER9_Msk
GPIO_MODER_MODER9_0              EQU (0x1 :SHL: GPIO_MODER_MODER9_Pos)       ;!< 0x00040000
GPIO_MODER_MODER9_1              EQU (0x2 :SHL: GPIO_MODER_MODER9_Pos)       ;!< 0x00080000
GPIO_MODER_MODER10_Pos           EQU (20)
GPIO_MODER_MODER10_Msk           EQU (0x3 :SHL: GPIO_MODER_MODER10_Pos)      ;!< 0x00300000
GPIO_MODER_MODER10               EQU GPIO_MODER_MODER10_Msk
GPIO_MODER_MODER10_0             EQU (0x1 :SHL: GPIO_MODER_MODER10_Pos)      ;!< 0x00100000
GPIO_MODER_MODER10_1             EQU (0x2 :SHL: GPIO_MODER_MODER10_Pos)      ;!< 0x00200000
GPIO_MODER_MODER11_Pos           EQU (22)
GPIO_MODER_MODER11_Msk           EQU (0x3 :SHL: GPIO_MODER_MODER11_Pos)      ;!< 0x00C00000
GPIO_MODER_MODER11               EQU GPIO_MODER_MODER11_Msk
GPIO_MODER_MODER11_0             EQU (0x1 :SHL: GPIO_MODER_MODER11_Pos)      ;!< 0x00400000
GPIO_MODER_MODER11_1             EQU (0x2 :SHL: GPIO_MODER_MODER11_Pos)      ;!< 0x00800000
GPIO_MODER_MODER12_Pos           EQU (24)
GPIO_MODER_MODER12_Msk           EQU (0x3 :SHL: GPIO_MODER_MODER12_Pos)      ;!< 0x03000000
GPIO_MODER_MODER12               EQU GPIO_MODER_MODER12_Msk
GPIO_MODER_MODER12_0             EQU (0x1 :SHL: GPIO_MODER_MODER12_Pos)      ;!< 0x01000000
GPIO_MODER_MODER12_1             EQU (0x2 :SHL: GPIO_MODER_MODER12_Pos)      ;!< 0x02000000
GPIO_MODER_MODER13_Pos           EQU (26)
GPIO_MODER_MODER13_Msk           EQU (0x3 :SHL: GPIO_MODER_MODER13_Pos)      ;!< 0x0C000000
GPIO_MODER_MODER13               EQU GPIO_MODER_MODER13_Msk
GPIO_MODER_MODER13_0             EQU (0x1 :SHL: GPIO_MODER_MODER13_Pos)      ;!< 0x04000000
GPIO_MODER_MODER13_1             EQU (0x2 :SHL: GPIO_MODER_MODER13_Pos)      ;!< 0x08000000
GPIO_MODER_MODER14_Pos           EQU (28)
GPIO_MODER_MODER14_Msk           EQU (0x3 :SHL: GPIO_MODER_MODER14_Pos)      ;!< 0x30000000
GPIO_MODER_MODER14               EQU GPIO_MODER_MODER14_Msk
GPIO_MODER_MODER14_0             EQU (0x1 :SHL: GPIO_MODER_MODER14_Pos)      ;!< 0x10000000
GPIO_MODER_MODER14_1             EQU (0x2 :SHL: GPIO_MODER_MODER14_Pos)      ;!< 0x20000000
GPIO_MODER_MODER15_Pos           EQU (30)
GPIO_MODER_MODER15_Msk           EQU (0x3 :SHL: GPIO_MODER_MODER15_Pos)      ;!< 0xC0000000
GPIO_MODER_MODER15               EQU GPIO_MODER_MODER15_Msk
GPIO_MODER_MODER15_0             EQU (0x1 :SHL: GPIO_MODER_MODER15_Pos)      ;!< 0x40000000
GPIO_MODER_MODER15_1             EQU (0x2 :SHL: GPIO_MODER_MODER15_Pos)      ;!< 0x80000000

;*****************  Bit definition for GPIO_OTYPER register  ****************
GPIO_OTYPER_OT_0                 EQU (0x00000001)
GPIO_OTYPER_OT_1                 EQU (0x00000002)
GPIO_OTYPER_OT_2                 EQU (0x00000004)
GPIO_OTYPER_OT_3                 EQU (0x00000008)
GPIO_OTYPER_OT_4                 EQU (0x00000010)
GPIO_OTYPER_OT_5                 EQU (0x00000020)
GPIO_OTYPER_OT_6                 EQU (0x00000040)
GPIO_OTYPER_OT_7                 EQU (0x00000080)
GPIO_OTYPER_OT_8                 EQU (0x00000100)
GPIO_OTYPER_OT_9                 EQU (0x00000200)
GPIO_OTYPER_OT_10                EQU (0x00000400)
GPIO_OTYPER_OT_11                EQU (0x00000800)
GPIO_OTYPER_OT_12                EQU (0x00001000)
GPIO_OTYPER_OT_13                EQU (0x00002000)
GPIO_OTYPER_OT_14                EQU (0x00004000)
GPIO_OTYPER_OT_15                EQU (0x00008000)

;***************  Bit definition for GPIO_OSPEEDR register  *****************
GPIO_OSPEEDER_OSPEEDR0_Pos       EQU (0)
GPIO_OSPEEDER_OSPEEDR0_Msk       EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR0_Pos)  ;!< 0x00000003
GPIO_OSPEEDER_OSPEEDR0           EQU GPIO_OSPEEDER_OSPEEDR0_Msk
GPIO_OSPEEDER_OSPEEDR0_0         EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR0_Pos)  ;!< 0x00000001
GPIO_OSPEEDER_OSPEEDR0_1         EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR0_Pos)  ;!< 0x00000002
GPIO_OSPEEDER_OSPEEDR1_Pos       EQU (2)
GPIO_OSPEEDER_OSPEEDR1_Msk       EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR1_Pos)  ;!< 0x0000000C
GPIO_OSPEEDER_OSPEEDR1           EQU GPIO_OSPEEDER_OSPEEDR1_Msk
GPIO_OSPEEDER_OSPEEDR1_0         EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR1_Pos)  ;!< 0x00000004
GPIO_OSPEEDER_OSPEEDR1_1         EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR1_Pos)  ;!< 0x00000008
GPIO_OSPEEDER_OSPEEDR2_Pos       EQU (4)
GPIO_OSPEEDER_OSPEEDR2_Msk       EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR2_Pos)  ;!< 0x00000030
GPIO_OSPEEDER_OSPEEDR2           EQU GPIO_OSPEEDER_OSPEEDR2_Msk
GPIO_OSPEEDER_OSPEEDR2_0         EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR2_Pos)  ;!< 0x00000010
GPIO_OSPEEDER_OSPEEDR2_1         EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR2_Pos)  ;!< 0x00000020
GPIO_OSPEEDER_OSPEEDR3_Pos       EQU (6)
GPIO_OSPEEDER_OSPEEDR3_Msk       EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR3_Pos)  ;!< 0x000000C0
GPIO_OSPEEDER_OSPEEDR3           EQU GPIO_OSPEEDER_OSPEEDR3_Msk
GPIO_OSPEEDER_OSPEEDR3_0         EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR3_Pos)  ;!< 0x00000040
GPIO_OSPEEDER_OSPEEDR3_1         EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR3_Pos)  ;!< 0x00000080
GPIO_OSPEEDER_OSPEEDR4_Pos       EQU (8)
GPIO_OSPEEDER_OSPEEDR4_Msk       EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR4_Pos)  ;!< 0x00000300
GPIO_OSPEEDER_OSPEEDR4           EQU GPIO_OSPEEDER_OSPEEDR4_Msk
GPIO_OSPEEDER_OSPEEDR4_0         EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR4_Pos)  ;!< 0x00000100
GPIO_OSPEEDER_OSPEEDR4_1         EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR4_Pos)  ;!< 0x00000200
GPIO_OSPEEDER_OSPEEDR5_Pos       EQU (10)
GPIO_OSPEEDER_OSPEEDR5_Msk       EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR5_Pos)  ;!< 0x00000C00
GPIO_OSPEEDER_OSPEEDR5           EQU GPIO_OSPEEDER_OSPEEDR5_Msk
GPIO_OSPEEDER_OSPEEDR5_0         EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR5_Pos)  ;!< 0x00000400
GPIO_OSPEEDER_OSPEEDR5_1         EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR5_Pos)  ;!< 0x00000800
GPIO_OSPEEDER_OSPEEDR6_Pos       EQU (12)
GPIO_OSPEEDER_OSPEEDR6_Msk       EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR6_Pos)  ;!< 0x00003000
GPIO_OSPEEDER_OSPEEDR6           EQU GPIO_OSPEEDER_OSPEEDR6_Msk
GPIO_OSPEEDER_OSPEEDR6_0         EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR6_Pos)  ;!< 0x00001000
GPIO_OSPEEDER_OSPEEDR6_1         EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR6_Pos)  ;!< 0x00002000
GPIO_OSPEEDER_OSPEEDR7_Pos       EQU (14)
GPIO_OSPEEDER_OSPEEDR7_Msk       EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR7_Pos)  ;!< 0x0000C000
GPIO_OSPEEDER_OSPEEDR7           EQU GPIO_OSPEEDER_OSPEEDR7_Msk
GPIO_OSPEEDER_OSPEEDR7_0         EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR7_Pos)  ;!< 0x00004000
GPIO_OSPEEDER_OSPEEDR7_1         EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR7_Pos)  ;!< 0x00008000
GPIO_OSPEEDER_OSPEEDR8_Pos       EQU (16)
GPIO_OSPEEDER_OSPEEDR8_Msk       EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR8_Pos)  ;!< 0x00030000
GPIO_OSPEEDER_OSPEEDR8           EQU GPIO_OSPEEDER_OSPEEDR8_Msk
GPIO_OSPEEDER_OSPEEDR8_0         EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR8_Pos)  ;!< 0x00010000
GPIO_OSPEEDER_OSPEEDR8_1         EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR8_Pos)  ;!< 0x00020000
GPIO_OSPEEDER_OSPEEDR9_Pos       EQU (18)
GPIO_OSPEEDER_OSPEEDR9_Msk       EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR9_Pos)  ;!< 0x000C0000
GPIO_OSPEEDER_OSPEEDR9           EQU GPIO_OSPEEDER_OSPEEDR9_Msk
GPIO_OSPEEDER_OSPEEDR9_0         EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR9_Pos)  ;!< 0x00040000
GPIO_OSPEEDER_OSPEEDR9_1         EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR9_Pos)  ;!< 0x00080000
GPIO_OSPEEDER_OSPEEDR10_Pos      EQU (20)
GPIO_OSPEEDER_OSPEEDR10_Msk      EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR10_Pos) ;!< 0x00300000
GPIO_OSPEEDER_OSPEEDR10          EQU GPIO_OSPEEDER_OSPEEDR10_Msk
GPIO_OSPEEDER_OSPEEDR10_0        EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR10_Pos) ;!< 0x00100000
GPIO_OSPEEDER_OSPEEDR10_1        EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR10_Pos) ;!< 0x00200000
GPIO_OSPEEDER_OSPEEDR11_Pos      EQU (22)
GPIO_OSPEEDER_OSPEEDR11_Msk      EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR11_Pos) ;!< 0x00C00000
GPIO_OSPEEDER_OSPEEDR11          EQU GPIO_OSPEEDER_OSPEEDR11_Msk
GPIO_OSPEEDER_OSPEEDR11_0        EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR11_Pos) ;!< 0x00400000
GPIO_OSPEEDER_OSPEEDR11_1        EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR11_Pos) ;!< 0x00800000
GPIO_OSPEEDER_OSPEEDR12_Pos      EQU (24)
GPIO_OSPEEDER_OSPEEDR12_Msk      EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR12_Pos) ;!< 0x03000000
GPIO_OSPEEDER_OSPEEDR12          EQU GPIO_OSPEEDER_OSPEEDR12_Msk
GPIO_OSPEEDER_OSPEEDR12_0        EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR12_Pos) ;!< 0x01000000
GPIO_OSPEEDER_OSPEEDR12_1        EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR12_Pos) ;!< 0x02000000
GPIO_OSPEEDER_OSPEEDR13_Pos      EQU (26)
GPIO_OSPEEDER_OSPEEDR13_Msk      EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR13_Pos) ;!< 0x0C000000
GPIO_OSPEEDER_OSPEEDR13          EQU GPIO_OSPEEDER_OSPEEDR13_Msk
GPIO_OSPEEDER_OSPEEDR13_0        EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR13_Pos) ;!< 0x04000000
GPIO_OSPEEDER_OSPEEDR13_1        EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR13_Pos) ;!< 0x08000000
GPIO_OSPEEDER_OSPEEDR14_Pos      EQU (28)
GPIO_OSPEEDER_OSPEEDR14_Msk      EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR14_Pos) ;!< 0x30000000
GPIO_OSPEEDER_OSPEEDR14          EQU GPIO_OSPEEDER_OSPEEDR14_Msk
GPIO_OSPEEDER_OSPEEDR14_0        EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR14_Pos) ;!< 0x10000000
GPIO_OSPEEDER_OSPEEDR14_1        EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR14_Pos) ;!< 0x20000000
GPIO_OSPEEDER_OSPEEDR15_Pos      EQU (30)
GPIO_OSPEEDER_OSPEEDR15_Msk      EQU (0x3 :SHL: GPIO_OSPEEDER_OSPEEDR15_Pos) ;!< 0xC0000000
GPIO_OSPEEDER_OSPEEDR15          EQU GPIO_OSPEEDER_OSPEEDR15_Msk
GPIO_OSPEEDER_OSPEEDR15_0        EQU (0x1 :SHL: GPIO_OSPEEDER_OSPEEDR15_Pos) ;!< 0x40000000
GPIO_OSPEEDER_OSPEEDR15_1        EQU (0x2 :SHL: GPIO_OSPEEDER_OSPEEDR15_Pos) ;!< 0x80000000

;******************  Bit definition for GPIO_PUPDR register *****************
GPIO_PUPDR_PUPDR0_Pos            EQU (0)
GPIO_PUPDR_PUPDR0_Msk            EQU (0x3 :SHL: GPIO_PUPDR_PUPDR0_Pos)       ;!< 0x00000003
GPIO_PUPDR_PUPDR0                EQU GPIO_PUPDR_PUPDR0_Msk
GPIO_PUPDR_PUPDR0_0              EQU (0x1 :SHL: GPIO_PUPDR_PUPDR0_Pos)       ;!< 0x00000001
GPIO_PUPDR_PUPDR0_1              EQU (0x2 :SHL: GPIO_PUPDR_PUPDR0_Pos)       ;!< 0x00000002
GPIO_PUPDR_PUPDR1_Pos            EQU (2)
GPIO_PUPDR_PUPDR1_Msk            EQU (0x3 :SHL: GPIO_PUPDR_PUPDR1_Pos)       ;!< 0x0000000C
GPIO_PUPDR_PUPDR1                EQU GPIO_PUPDR_PUPDR1_Msk
GPIO_PUPDR_PUPDR1_0              EQU (0x1 :SHL: GPIO_PUPDR_PUPDR1_Pos)       ;!< 0x00000004
GPIO_PUPDR_PUPDR1_1              EQU (0x2 :SHL: GPIO_PUPDR_PUPDR1_Pos)       ;!< 0x00000008
GPIO_PUPDR_PUPDR2_Pos            EQU (4)
GPIO_PUPDR_PUPDR2_Msk            EQU (0x3 :SHL: GPIO_PUPDR_PUPDR2_Pos)       ;!< 0x00000030
GPIO_PUPDR_PUPDR2                EQU GPIO_PUPDR_PUPDR2_Msk
GPIO_PUPDR_PUPDR2_0              EQU (0x1 :SHL: GPIO_PUPDR_PUPDR2_Pos)       ;!< 0x00000010
GPIO_PUPDR_PUPDR2_1              EQU (0x2 :SHL: GPIO_PUPDR_PUPDR2_Pos)       ;!< 0x00000020
GPIO_PUPDR_PUPDR3_Pos            EQU (6)
GPIO_PUPDR_PUPDR3_Msk            EQU (0x3 :SHL: GPIO_PUPDR_PUPDR3_Pos)       ;!< 0x000000C0
GPIO_PUPDR_PUPDR3                EQU GPIO_PUPDR_PUPDR3_Msk
GPIO_PUPDR_PUPDR3_0              EQU (0x1 :SHL: GPIO_PUPDR_PUPDR3_Pos)       ;!< 0x00000040
GPIO_PUPDR_PUPDR3_1              EQU (0x2 :SHL: GPIO_PUPDR_PUPDR3_Pos)       ;!< 0x00000080
GPIO_PUPDR_PUPDR4_Pos            EQU (8)
GPIO_PUPDR_PUPDR4_Msk            EQU (0x3 :SHL: GPIO_PUPDR_PUPDR4_Pos)       ;!< 0x00000300
GPIO_PUPDR_PUPDR4                EQU GPIO_PUPDR_PUPDR4_Msk
GPIO_PUPDR_PUPDR4_0              EQU (0x1 :SHL: GPIO_PUPDR_PUPDR4_Pos)       ;!< 0x00000100
GPIO_PUPDR_PUPDR4_1              EQU (0x2 :SHL: GPIO_PUPDR_PUPDR4_Pos)       ;!< 0x00000200
GPIO_PUPDR_PUPDR5_Pos            EQU (10)
GPIO_PUPDR_PUPDR5_Msk            EQU (0x3 :SHL: GPIO_PUPDR_PUPDR5_Pos)       ;!< 0x00000C00
GPIO_PUPDR_PUPDR5                EQU GPIO_PUPDR_PUPDR5_Msk
GPIO_PUPDR_PUPDR5_0              EQU (0x1 :SHL: GPIO_PUPDR_PUPDR5_Pos)       ;!< 0x00000400
GPIO_PUPDR_PUPDR5_1              EQU (0x2 :SHL: GPIO_PUPDR_PUPDR5_Pos)       ;!< 0x00000800
GPIO_PUPDR_PUPDR6_Pos            EQU (12)
GPIO_PUPDR_PUPDR6_Msk            EQU (0x3 :SHL: GPIO_PUPDR_PUPDR6_Pos)       ;!< 0x00003000
GPIO_PUPDR_PUPDR6                EQU GPIO_PUPDR_PUPDR6_Msk
GPIO_PUPDR_PUPDR6_0              EQU (0x1 :SHL: GPIO_PUPDR_PUPDR6_Pos)       ;!< 0x00001000
GPIO_PUPDR_PUPDR6_1              EQU (0x2 :SHL: GPIO_PUPDR_PUPDR6_Pos)       ;!< 0x00002000
GPIO_PUPDR_PUPDR7_Pos            EQU (14)
GPIO_PUPDR_PUPDR7_Msk            EQU (0x3 :SHL: GPIO_PUPDR_PUPDR7_Pos)       ;!< 0x0000C000
GPIO_PUPDR_PUPDR7                EQU GPIO_PUPDR_PUPDR7_Msk
GPIO_PUPDR_PUPDR7_0              EQU (0x1 :SHL: GPIO_PUPDR_PUPDR7_Pos)       ;!< 0x00004000
GPIO_PUPDR_PUPDR7_1              EQU (0x2 :SHL: GPIO_PUPDR_PUPDR7_Pos)       ;!< 0x00008000
GPIO_PUPDR_PUPDR8_Pos            EQU (16)
GPIO_PUPDR_PUPDR8_Msk            EQU (0x3 :SHL: GPIO_PUPDR_PUPDR8_Pos)       ;!< 0x00030000
GPIO_PUPDR_PUPDR8                EQU GPIO_PUPDR_PUPDR8_Msk
GPIO_PUPDR_PUPDR8_0              EQU (0x1 :SHL: GPIO_PUPDR_PUPDR8_Pos)       ;!< 0x00010000
GPIO_PUPDR_PUPDR8_1              EQU (0x2 :SHL: GPIO_PUPDR_PUPDR8_Pos)       ;!< 0x00020000
GPIO_PUPDR_PUPDR9_Pos            EQU (18)
GPIO_PUPDR_PUPDR9_Msk            EQU (0x3 :SHL: GPIO_PUPDR_PUPDR9_Pos)       ;!< 0x000C0000
GPIO_PUPDR_PUPDR9                EQU GPIO_PUPDR_PUPDR9_Msk
GPIO_PUPDR_PUPDR9_0              EQU (0x1 :SHL: GPIO_PUPDR_PUPDR9_Pos)       ;!< 0x00040000
GPIO_PUPDR_PUPDR9_1              EQU (0x2 :SHL: GPIO_PUPDR_PUPDR9_Pos)       ;!< 0x00080000
GPIO_PUPDR_PUPDR10_Pos           EQU (20)
GPIO_PUPDR_PUPDR10_Msk           EQU (0x3 :SHL: GPIO_PUPDR_PUPDR10_Pos)      ;!< 0x00300000
GPIO_PUPDR_PUPDR10               EQU GPIO_PUPDR_PUPDR10_Msk
GPIO_PUPDR_PUPDR10_0             EQU (0x1 :SHL: GPIO_PUPDR_PUPDR10_Pos)      ;!< 0x00100000
GPIO_PUPDR_PUPDR10_1             EQU (0x2 :SHL: GPIO_PUPDR_PUPDR10_Pos)      ;!< 0x00200000
GPIO_PUPDR_PUPDR11_Pos           EQU (22)
GPIO_PUPDR_PUPDR11_Msk           EQU (0x3 :SHL: GPIO_PUPDR_PUPDR11_Pos)      ;!< 0x00C00000
GPIO_PUPDR_PUPDR11               EQU GPIO_PUPDR_PUPDR11_Msk
GPIO_PUPDR_PUPDR11_0             EQU (0x1 :SHL: GPIO_PUPDR_PUPDR11_Pos)      ;!< 0x00400000
GPIO_PUPDR_PUPDR11_1             EQU (0x2 :SHL: GPIO_PUPDR_PUPDR11_Pos)      ;!< 0x00800000
GPIO_PUPDR_PUPDR12_Pos           EQU (24)
GPIO_PUPDR_PUPDR12_Msk           EQU (0x3 :SHL: GPIO_PUPDR_PUPDR12_Pos)      ;!< 0x03000000
GPIO_PUPDR_PUPDR12               EQU GPIO_PUPDR_PUPDR12_Msk
GPIO_PUPDR_PUPDR12_0             EQU (0x1 :SHL: GPIO_PUPDR_PUPDR12_Pos)      ;!< 0x01000000
GPIO_PUPDR_PUPDR12_1             EQU (0x2 :SHL: GPIO_PUPDR_PUPDR12_Pos)      ;!< 0x02000000
GPIO_PUPDR_PUPDR13_Pos           EQU (26)
GPIO_PUPDR_PUPDR13_Msk           EQU (0x3 :SHL: GPIO_PUPDR_PUPDR13_Pos)      ;!< 0x0C000000
GPIO_PUPDR_PUPDR13               EQU GPIO_PUPDR_PUPDR13_Msk
GPIO_PUPDR_PUPDR13_0             EQU (0x1 :SHL: GPIO_PUPDR_PUPDR13_Pos)      ;!< 0x04000000
GPIO_PUPDR_PUPDR13_1             EQU (0x2 :SHL: GPIO_PUPDR_PUPDR13_Pos)      ;!< 0x08000000
GPIO_PUPDR_PUPDR14_Pos           EQU (28)
GPIO_PUPDR_PUPDR14_Msk           EQU (0x3 :SHL: GPIO_PUPDR_PUPDR14_Pos)      ;!< 0x30000000
GPIO_PUPDR_PUPDR14               EQU GPIO_PUPDR_PUPDR14_Msk
GPIO_PUPDR_PUPDR14_0             EQU (0x1 :SHL: GPIO_PUPDR_PUPDR14_Pos)      ;!< 0x10000000
GPIO_PUPDR_PUPDR14_1             EQU (0x2 :SHL: GPIO_PUPDR_PUPDR14_Pos)      ;!< 0x20000000
GPIO_PUPDR_PUPDR15_Pos           EQU (30)
GPIO_PUPDR_PUPDR15_Msk           EQU (0x3 :SHL: GPIO_PUPDR_PUPDR15_Pos)      ;!< 0xC0000000
GPIO_PUPDR_PUPDR15               EQU GPIO_PUPDR_PUPDR15_Msk
GPIO_PUPDR_PUPDR15_0             EQU (0x1 :SHL: GPIO_PUPDR_PUPDR15_Pos)      ;!< 0x40000000
GPIO_PUPDR_PUPDR15_1             EQU (0x2 :SHL: GPIO_PUPDR_PUPDR15_Pos)      ;!< 0x80000000

;******************  Bit definition for GPIO_IDR register  ******************
GPIO_IDR_0                       EQU (0x00000001)
GPIO_IDR_1                       EQU (0x00000002)
GPIO_IDR_2                       EQU (0x00000004)
GPIO_IDR_3                       EQU (0x00000008)
GPIO_IDR_4                       EQU (0x00000010)
GPIO_IDR_5                       EQU (0x00000020)
GPIO_IDR_6                       EQU (0x00000040)
GPIO_IDR_7                       EQU (0x00000080)
GPIO_IDR_8                       EQU (0x00000100)
GPIO_IDR_9                       EQU (0x00000200)
GPIO_IDR_10                      EQU (0x00000400)
GPIO_IDR_11                      EQU (0x00000800)
GPIO_IDR_12                      EQU (0x00001000)
GPIO_IDR_13                      EQU (0x00002000)
GPIO_IDR_14                      EQU (0x00004000)
GPIO_IDR_15                      EQU (0x00008000)

;*****************  Bit definition for GPIO_ODR register  *******************
GPIO_ODR_0                       EQU (0x00000001)
GPIO_ODR_1                       EQU (0x00000002)
GPIO_ODR_2                       EQU (0x00000004)
GPIO_ODR_3                       EQU (0x00000008)
GPIO_ODR_4                       EQU (0x00000010)
GPIO_ODR_5                       EQU (0x00000020)
GPIO_ODR_6                       EQU (0x00000040)
GPIO_ODR_7                       EQU (0x00000080)
GPIO_ODR_8                       EQU (0x00000100)
GPIO_ODR_9                       EQU (0x00000200)
GPIO_ODR_10                      EQU (0x00000400)
GPIO_ODR_11                      EQU (0x00000800)
GPIO_ODR_12                      EQU (0x00001000)
GPIO_ODR_13                      EQU (0x00002000)
GPIO_ODR_14                      EQU (0x00004000)
GPIO_ODR_15                      EQU (0x00008000)

;***************** Bit definition for GPIO_BSRR register  *******************
GPIO_BSRR_BS_0                   EQU (0x00000001)
GPIO_BSRR_BS_1                   EQU (0x00000002)
GPIO_BSRR_BS_2                   EQU (0x00000004)
GPIO_BSRR_BS_3                   EQU (0x00000008)
GPIO_BSRR_BS_4                   EQU (0x00000010)
GPIO_BSRR_BS_5                   EQU (0x00000020)
GPIO_BSRR_BS_6                   EQU (0x00000040)
GPIO_BSRR_BS_7                   EQU (0x00000080)
GPIO_BSRR_BS_8                   EQU (0x00000100)
GPIO_BSRR_BS_9                   EQU (0x00000200)
GPIO_BSRR_BS_10                  EQU (0x00000400)
GPIO_BSRR_BS_11                  EQU (0x00000800)
GPIO_BSRR_BS_12                  EQU (0x00001000)
GPIO_BSRR_BS_13                  EQU (0x00002000)
GPIO_BSRR_BS_14                  EQU (0x00004000)
GPIO_BSRR_BS_15                  EQU (0x00008000)
GPIO_BSRR_BR_0                   EQU (0x00010000)
GPIO_BSRR_BR_1                   EQU (0x00020000)
GPIO_BSRR_BR_2                   EQU (0x00040000)
GPIO_BSRR_BR_3                   EQU (0x00080000)
GPIO_BSRR_BR_4                   EQU (0x00100000)
GPIO_BSRR_BR_5                   EQU (0x00200000)
GPIO_BSRR_BR_6                   EQU (0x00400000)
GPIO_BSRR_BR_7                   EQU (0x00800000)
GPIO_BSRR_BR_8                   EQU (0x01000000)
GPIO_BSRR_BR_9                   EQU (0x02000000)
GPIO_BSRR_BR_10                  EQU (0x04000000)
GPIO_BSRR_BR_11                  EQU (0x08000000)
GPIO_BSRR_BR_12                  EQU (0x10000000)
GPIO_BSRR_BR_13                  EQU (0x20000000)
GPIO_BSRR_BR_14                  EQU (0x40000000)
GPIO_BSRR_BR_15                  EQU (0x80000000)

;***************** Bit definition for GPIO_LCKR register  *******************
GPIO_LCKR_LCK0_Pos               EQU (0)
GPIO_LCKR_LCK0_Msk               EQU (0x1 :SHL: GPIO_LCKR_LCK0_Pos)          ;!< 0x00000001
GPIO_LCKR_LCK0                   EQU GPIO_LCKR_LCK0_Msk
GPIO_LCKR_LCK1_Pos               EQU (1)
GPIO_LCKR_LCK1_Msk               EQU (0x1 :SHL: GPIO_LCKR_LCK1_Pos)          ;!< 0x00000002
GPIO_LCKR_LCK1                   EQU GPIO_LCKR_LCK1_Msk
GPIO_LCKR_LCK2_Pos               EQU (2)
GPIO_LCKR_LCK2_Msk               EQU (0x1 :SHL: GPIO_LCKR_LCK2_Pos)          ;!< 0x00000004
GPIO_LCKR_LCK2                   EQU GPIO_LCKR_LCK2_Msk
GPIO_LCKR_LCK3_Pos               EQU (3)
GPIO_LCKR_LCK3_Msk               EQU (0x1 :SHL: GPIO_LCKR_LCK3_Pos)          ;!< 0x00000008
GPIO_LCKR_LCK3                   EQU GPIO_LCKR_LCK3_Msk
GPIO_LCKR_LCK4_Pos               EQU (4)
GPIO_LCKR_LCK4_Msk               EQU (0x1 :SHL: GPIO_LCKR_LCK4_Pos)          ;!< 0x00000010
GPIO_LCKR_LCK4                   EQU GPIO_LCKR_LCK4_Msk
GPIO_LCKR_LCK5_Pos               EQU (5)
GPIO_LCKR_LCK5_Msk               EQU (0x1 :SHL: GPIO_LCKR_LCK5_Pos)          ;!< 0x00000020
GPIO_LCKR_LCK5                   EQU GPIO_LCKR_LCK5_Msk
GPIO_LCKR_LCK6_Pos               EQU (6)
GPIO_LCKR_LCK6_Msk               EQU (0x1 :SHL: GPIO_LCKR_LCK6_Pos)          ;!< 0x00000040
GPIO_LCKR_LCK6                   EQU GPIO_LCKR_LCK6_Msk
GPIO_LCKR_LCK7_Pos               EQU (7)
GPIO_LCKR_LCK7_Msk               EQU (0x1 :SHL: GPIO_LCKR_LCK7_Pos)          ;!< 0x00000080
GPIO_LCKR_LCK7                   EQU GPIO_LCKR_LCK7_Msk
GPIO_LCKR_LCK8_Pos               EQU (8)
GPIO_LCKR_LCK8_Msk               EQU (0x1 :SHL: GPIO_LCKR_LCK8_Pos)          ;!< 0x00000100
GPIO_LCKR_LCK8                   EQU GPIO_LCKR_LCK8_Msk
GPIO_LCKR_LCK9_Pos               EQU (9)
GPIO_LCKR_LCK9_Msk               EQU (0x1 :SHL: GPIO_LCKR_LCK9_Pos)          ;!< 0x00000200
GPIO_LCKR_LCK9                   EQU GPIO_LCKR_LCK9_Msk
GPIO_LCKR_LCK10_Pos              EQU (10)
GPIO_LCKR_LCK10_Msk              EQU (0x1 :SHL: GPIO_LCKR_LCK10_Pos)         ;!< 0x00000400
GPIO_LCKR_LCK10                  EQU GPIO_LCKR_LCK10_Msk
GPIO_LCKR_LCK11_Pos              EQU (11)
GPIO_LCKR_LCK11_Msk              EQU (0x1 :SHL: GPIO_LCKR_LCK11_Pos)         ;!< 0x00000800
GPIO_LCKR_LCK11                  EQU GPIO_LCKR_LCK11_Msk
GPIO_LCKR_LCK12_Pos              EQU (12)
GPIO_LCKR_LCK12_Msk              EQU (0x1 :SHL: GPIO_LCKR_LCK12_Pos)         ;!< 0x00001000
GPIO_LCKR_LCK12                  EQU GPIO_LCKR_LCK12_Msk
GPIO_LCKR_LCK13_Pos              EQU (13)
GPIO_LCKR_LCK13_Msk              EQU (0x1 :SHL: GPIO_LCKR_LCK13_Pos)         ;!< 0x00002000
GPIO_LCKR_LCK13                  EQU GPIO_LCKR_LCK13_Msk
GPIO_LCKR_LCK14_Pos              EQU (14)
GPIO_LCKR_LCK14_Msk              EQU (0x1 :SHL: GPIO_LCKR_LCK14_Pos)         ;!< 0x00004000
GPIO_LCKR_LCK14                  EQU GPIO_LCKR_LCK14_Msk
GPIO_LCKR_LCK15_Pos              EQU (15)
GPIO_LCKR_LCK15_Msk              EQU (0x1 :SHL: GPIO_LCKR_LCK15_Pos)         ;!< 0x00008000
GPIO_LCKR_LCK15                  EQU GPIO_LCKR_LCK15_Msk
GPIO_LCKR_LCKK_Pos               EQU (16)
GPIO_LCKR_LCKK_Msk               EQU (0x1 :SHL: GPIO_LCKR_LCKK_Pos)          ;!< 0x00010000
GPIO_LCKR_LCKK                   EQU GPIO_LCKR_LCKK_Msk

;***************** Bit definition for GPIO_AFRL register  *******************
GPIO_AFRL_AFRL0_Pos              EQU (0)
GPIO_AFRL_AFRL0_Msk              EQU (0xF :SHL: GPIO_AFRL_AFRL0_Pos)         ;!< 0x0000000F
GPIO_AFRL_AFRL0                  EQU GPIO_AFRL_AFRL0_Msk
GPIO_AFRL_AFRL1_Pos              EQU (4)
GPIO_AFRL_AFRL1_Msk              EQU (0xF :SHL: GPIO_AFRL_AFRL1_Pos)         ;!< 0x000000F0
GPIO_AFRL_AFRL1                  EQU GPIO_AFRL_AFRL1_Msk
GPIO_AFRL_AFRL2_Pos              EQU (8)
GPIO_AFRL_AFRL2_Msk              EQU (0xF :SHL: GPIO_AFRL_AFRL2_Pos)         ;!< 0x00000F00
GPIO_AFRL_AFRL2                  EQU GPIO_AFRL_AFRL2_Msk
GPIO_AFRL_AFRL3_Pos              EQU (12)
GPIO_AFRL_AFRL3_Msk              EQU (0xF :SHL: GPIO_AFRL_AFRL3_Pos)         ;!< 0x0000F000
GPIO_AFRL_AFRL3                  EQU GPIO_AFRL_AFRL3_Msk
GPIO_AFRL_AFRL4_Pos              EQU (16)
GPIO_AFRL_AFRL4_Msk              EQU (0xF :SHL: GPIO_AFRL_AFRL4_Pos)         ;!< 0x000F0000
GPIO_AFRL_AFRL4                  EQU GPIO_AFRL_AFRL4_Msk
GPIO_AFRL_AFRL5_Pos              EQU (20)
GPIO_AFRL_AFRL5_Msk              EQU (0xF :SHL: GPIO_AFRL_AFRL5_Pos)         ;!< 0x00F00000
GPIO_AFRL_AFRL5                  EQU GPIO_AFRL_AFRL5_Msk
GPIO_AFRL_AFRL6_Pos              EQU (24)
GPIO_AFRL_AFRL6_Msk              EQU (0xF :SHL: GPIO_AFRL_AFRL6_Pos)         ;!< 0x0F000000
GPIO_AFRL_AFRL6                  EQU GPIO_AFRL_AFRL6_Msk
GPIO_AFRL_AFRL7_Pos              EQU (28)
GPIO_AFRL_AFRL7_Msk              EQU (0xF :SHL: GPIO_AFRL_AFRL7_Pos)         ;!< 0xF0000000
GPIO_AFRL_AFRL7                  EQU GPIO_AFRL_AFRL7_Msk

;***************** Bit definition for GPIO_AFRH register  *******************
GPIO_AFRH_AFRH0_Pos              EQU (0)
GPIO_AFRH_AFRH0_Msk              EQU (0xF :SHL: GPIO_AFRH_AFRH0_Pos)         ;!< 0x0000000F
GPIO_AFRH_AFRH0                  EQU GPIO_AFRH_AFRH0_Msk
GPIO_AFRH_AFRH1_Pos              EQU (4)
GPIO_AFRH_AFRH1_Msk              EQU (0xF :SHL: GPIO_AFRH_AFRH1_Pos)         ;!< 0x000000F0
GPIO_AFRH_AFRH1                  EQU GPIO_AFRH_AFRH1_Msk
GPIO_AFRH_AFRH2_Pos              EQU (8)
GPIO_AFRH_AFRH2_Msk              EQU (0xF :SHL: GPIO_AFRH_AFRH2_Pos)         ;!< 0x00000F00
GPIO_AFRH_AFRH2                  EQU GPIO_AFRH_AFRH2_Msk
GPIO_AFRH_AFRH3_Pos              EQU (12)
GPIO_AFRH_AFRH3_Msk              EQU (0xF :SHL: GPIO_AFRH_AFRH3_Pos)         ;!< 0x0000F000
GPIO_AFRH_AFRH3                  EQU GPIO_AFRH_AFRH3_Msk
GPIO_AFRH_AFRH4_Pos              EQU (16)
GPIO_AFRH_AFRH4_Msk              EQU (0xF :SHL: GPIO_AFRH_AFRH4_Pos)         ;!< 0x000F0000
GPIO_AFRH_AFRH4                  EQU GPIO_AFRH_AFRH4_Msk
GPIO_AFRH_AFRH5_Pos              EQU (20)
GPIO_AFRH_AFRH5_Msk              EQU (0xF :SHL: GPIO_AFRH_AFRH5_Pos)         ;!< 0x00F00000
GPIO_AFRH_AFRH5                  EQU GPIO_AFRH_AFRH5_Msk
GPIO_AFRH_AFRH6_Pos              EQU (24)
GPIO_AFRH_AFRH6_Msk              EQU (0xF :SHL: GPIO_AFRH_AFRH6_Pos)         ;!< 0x0F000000
GPIO_AFRH_AFRH6                  EQU GPIO_AFRH_AFRH6_Msk
GPIO_AFRH_AFRH7_Pos              EQU (28)
GPIO_AFRH_AFRH7_Msk              EQU (0xF :SHL: GPIO_AFRH_AFRH7_Pos)         ;!< 0xF0000000
GPIO_AFRH_AFRH7                  EQU GPIO_AFRH_AFRH7_Msk

;***************** Bit definition for GPIO_BRR register  ********************
GPIO_BRR_BR_0                    EQU (0x00000001)
GPIO_BRR_BR_1                    EQU (0x00000002)
GPIO_BRR_BR_2                    EQU (0x00000004)
GPIO_BRR_BR_3                    EQU (0x00000008)
GPIO_BRR_BR_4                    EQU (0x00000010)
GPIO_BRR_BR_5                    EQU (0x00000020)
GPIO_BRR_BR_6                    EQU (0x00000040)
GPIO_BRR_BR_7                    EQU (0x00000080)
GPIO_BRR_BR_8                    EQU (0x00000100)
GPIO_BRR_BR_9                    EQU (0x00000200)
GPIO_BRR_BR_10                   EQU (0x00000400)
GPIO_BRR_BR_11                   EQU (0x00000800)
GPIO_BRR_BR_12                   EQU (0x00001000)
GPIO_BRR_BR_13                   EQU (0x00002000)
GPIO_BRR_BR_14                   EQU (0x00004000)
GPIO_BRR_BR_15                   EQU (0x00008000)

;****************************************************************************
;
;                      Inter-integrated Circuit Interface (I2C)
;
;****************************************************************************
;******************  Bit definition for I2C_CR1 register  ******************
I2C_CR1_PE_Pos               EQU (0)
I2C_CR1_PE_Msk               EQU (0x1 :SHL: I2C_CR1_PE_Pos)                  ;!< 0x00000001
I2C_CR1_PE                   EQU I2C_CR1_PE_Msk                            ;!< Peripheral enable
I2C_CR1_TXIE_Pos             EQU (1)
I2C_CR1_TXIE_Msk             EQU (0x1 :SHL: I2C_CR1_TXIE_Pos)                ;!< 0x00000002
I2C_CR1_TXIE                 EQU I2C_CR1_TXIE_Msk                          ;!< TX interrupt enable
I2C_CR1_RXIE_Pos             EQU (2)
I2C_CR1_RXIE_Msk             EQU (0x1 :SHL: I2C_CR1_RXIE_Pos)                ;!< 0x00000004
I2C_CR1_RXIE                 EQU I2C_CR1_RXIE_Msk                          ;!< RX interrupt enable
I2C_CR1_ADDRIE_Pos           EQU (3)
I2C_CR1_ADDRIE_Msk           EQU (0x1 :SHL: I2C_CR1_ADDRIE_Pos)              ;!< 0x00000008
I2C_CR1_ADDRIE               EQU I2C_CR1_ADDRIE_Msk                        ;!< Address match interrupt enable
I2C_CR1_NACKIE_Pos           EQU (4)
I2C_CR1_NACKIE_Msk           EQU (0x1 :SHL: I2C_CR1_NACKIE_Pos)              ;!< 0x00000010
I2C_CR1_NACKIE               EQU I2C_CR1_NACKIE_Msk                        ;!< NACK received interrupt enable
I2C_CR1_STOPIE_Pos           EQU (5)
I2C_CR1_STOPIE_Msk           EQU (0x1 :SHL: I2C_CR1_STOPIE_Pos)              ;!< 0x00000020
I2C_CR1_STOPIE               EQU I2C_CR1_STOPIE_Msk                        ;!< STOP detection interrupt enable
I2C_CR1_TCIE_Pos             EQU (6)
I2C_CR1_TCIE_Msk             EQU (0x1 :SHL: I2C_CR1_TCIE_Pos)                ;!< 0x00000040
I2C_CR1_TCIE                 EQU I2C_CR1_TCIE_Msk                          ;!< Transfer complete interrupt enable
I2C_CR1_ERRIE_Pos            EQU (7)
I2C_CR1_ERRIE_Msk            EQU (0x1 :SHL: I2C_CR1_ERRIE_Pos)               ;!< 0x00000080
I2C_CR1_ERRIE                EQU I2C_CR1_ERRIE_Msk                         ;!< Errors interrupt enable
I2C_CR1_DNF_Pos              EQU (8)
I2C_CR1_DNF_Msk              EQU (0xF :SHL: I2C_CR1_DNF_Pos)                 ;!< 0x00000F00
I2C_CR1_DNF                  EQU I2C_CR1_DNF_Msk                           ;!< Digital noise filter
I2C_CR1_ANFOFF_Pos           EQU (12)
I2C_CR1_ANFOFF_Msk           EQU (0x1 :SHL: I2C_CR1_ANFOFF_Pos)              ;!< 0x00001000
I2C_CR1_ANFOFF               EQU I2C_CR1_ANFOFF_Msk                        ;!< Analog noise filter OFF
I2C_CR1_SWRST_Pos            EQU (13)
I2C_CR1_SWRST_Msk            EQU (0x1 :SHL: I2C_CR1_SWRST_Pos)               ;!< 0x00002000
I2C_CR1_SWRST                EQU I2C_CR1_SWRST_Msk                         ;!< Software reset
I2C_CR1_TXDMAEN_Pos          EQU (14)
I2C_CR1_TXDMAEN_Msk          EQU (0x1 :SHL: I2C_CR1_TXDMAEN_Pos)             ;!< 0x00004000
I2C_CR1_TXDMAEN              EQU I2C_CR1_TXDMAEN_Msk                       ;!< DMA transmission requests enable
I2C_CR1_RXDMAEN_Pos          EQU (15)
I2C_CR1_RXDMAEN_Msk          EQU (0x1 :SHL: I2C_CR1_RXDMAEN_Pos)             ;!< 0x00008000
I2C_CR1_RXDMAEN              EQU I2C_CR1_RXDMAEN_Msk                       ;!< DMA reception requests enable
I2C_CR1_SBC_Pos              EQU (16)
I2C_CR1_SBC_Msk              EQU (0x1 :SHL: I2C_CR1_SBC_Pos)                 ;!< 0x00010000
I2C_CR1_SBC                  EQU I2C_CR1_SBC_Msk                           ;!< Slave byte control
I2C_CR1_NOSTRETCH_Pos        EQU (17)
I2C_CR1_NOSTRETCH_Msk        EQU (0x1 :SHL: I2C_CR1_NOSTRETCH_Pos)           ;!< 0x00020000
I2C_CR1_NOSTRETCH            EQU I2C_CR1_NOSTRETCH_Msk                     ;!< Clock stretching disable
I2C_CR1_WUPEN_Pos            EQU (18)
I2C_CR1_WUPEN_Msk            EQU (0x1 :SHL: I2C_CR1_WUPEN_Pos)               ;!< 0x00040000
I2C_CR1_WUPEN                EQU I2C_CR1_WUPEN_Msk                         ;!< Wakeup from STOP enable
I2C_CR1_GCEN_Pos             EQU (19)
I2C_CR1_GCEN_Msk             EQU (0x1 :SHL: I2C_CR1_GCEN_Pos)                ;!< 0x00080000
I2C_CR1_GCEN                 EQU I2C_CR1_GCEN_Msk                          ;!< General call enable
I2C_CR1_SMBHEN_Pos           EQU (20)
I2C_CR1_SMBHEN_Msk           EQU (0x1 :SHL: I2C_CR1_SMBHEN_Pos)              ;!< 0x00100000
I2C_CR1_SMBHEN               EQU I2C_CR1_SMBHEN_Msk                        ;!< SMBus host address enable
I2C_CR1_SMBDEN_Pos           EQU (21)
I2C_CR1_SMBDEN_Msk           EQU (0x1 :SHL: I2C_CR1_SMBDEN_Pos)              ;!< 0x00200000
I2C_CR1_SMBDEN               EQU I2C_CR1_SMBDEN_Msk                        ;!< SMBus device default address enable
I2C_CR1_ALERTEN_Pos          EQU (22)
I2C_CR1_ALERTEN_Msk          EQU (0x1 :SHL: I2C_CR1_ALERTEN_Pos)             ;!< 0x00400000
I2C_CR1_ALERTEN              EQU I2C_CR1_ALERTEN_Msk                       ;!< SMBus alert enable
I2C_CR1_PECEN_Pos            EQU (23)
I2C_CR1_PECEN_Msk            EQU (0x1 :SHL: I2C_CR1_PECEN_Pos)               ;!< 0x00800000
I2C_CR1_PECEN                EQU I2C_CR1_PECEN_Msk                         ;!< PEC enable

; Legacy defines
I2C_CR1_DFN EQU I2C_CR1_DNF

;*****************  Bit definition for I2C_CR2 register  *******************
I2C_CR2_SADD_Pos             EQU (0)
I2C_CR2_SADD_Msk             EQU (0x3FF :SHL: I2C_CR2_SADD_Pos)              ;!< 0x000003FF
I2C_CR2_SADD                 EQU I2C_CR2_SADD_Msk                          ;!< Slave address (master mode)
I2C_CR2_RD_WRN_Pos           EQU (10)
I2C_CR2_RD_WRN_Msk           EQU (0x1 :SHL: I2C_CR2_RD_WRN_Pos)              ;!< 0x00000400
I2C_CR2_RD_WRN               EQU I2C_CR2_RD_WRN_Msk                        ;!< Transfer direction (master mode)
I2C_CR2_ADD10_Pos            EQU (11)
I2C_CR2_ADD10_Msk            EQU (0x1 :SHL: I2C_CR2_ADD10_Pos)               ;!< 0x00000800
I2C_CR2_ADD10                EQU I2C_CR2_ADD10_Msk                         ;!< 10-bit addressing mode (master mode)
I2C_CR2_HEAD10R_Pos          EQU (12)
I2C_CR2_HEAD10R_Msk          EQU (0x1 :SHL: I2C_CR2_HEAD10R_Pos)             ;!< 0x00001000
I2C_CR2_HEAD10R              EQU I2C_CR2_HEAD10R_Msk                       ;!< 10-bit address header only read direction (master mode)
I2C_CR2_START_Pos            EQU (13)
I2C_CR2_START_Msk            EQU (0x1 :SHL: I2C_CR2_START_Pos)               ;!< 0x00002000
I2C_CR2_START                EQU I2C_CR2_START_Msk                         ;!< START generation
I2C_CR2_STOP_Pos             EQU (14)
I2C_CR2_STOP_Msk             EQU (0x1 :SHL: I2C_CR2_STOP_Pos)                ;!< 0x00004000
I2C_CR2_STOP                 EQU I2C_CR2_STOP_Msk                          ;!< STOP generation (master mode)
I2C_CR2_NACK_Pos             EQU (15)
I2C_CR2_NACK_Msk             EQU (0x1 :SHL: I2C_CR2_NACK_Pos)                ;!< 0x00008000
I2C_CR2_NACK                 EQU I2C_CR2_NACK_Msk                          ;!< NACK generation (slave mode)
I2C_CR2_NBYTES_Pos           EQU (16)
I2C_CR2_NBYTES_Msk           EQU (0xFF :SHL: I2C_CR2_NBYTES_Pos)             ;!< 0x00FF0000
I2C_CR2_NBYTES               EQU I2C_CR2_NBYTES_Msk                        ;!< Number of bytes
I2C_CR2_RELOAD_Pos           EQU (24)
I2C_CR2_RELOAD_Msk           EQU (0x1 :SHL: I2C_CR2_RELOAD_Pos)              ;!< 0x01000000
I2C_CR2_RELOAD               EQU I2C_CR2_RELOAD_Msk                        ;!< NBYTES reload mode
I2C_CR2_AUTOEND_Pos          EQU (25)
I2C_CR2_AUTOEND_Msk          EQU (0x1 :SHL: I2C_CR2_AUTOEND_Pos)             ;!< 0x02000000
I2C_CR2_AUTOEND              EQU I2C_CR2_AUTOEND_Msk                       ;!< Automatic end mode (master mode)
I2C_CR2_PECBYTE_Pos          EQU (26)
I2C_CR2_PECBYTE_Msk          EQU (0x1 :SHL: I2C_CR2_PECBYTE_Pos)             ;!< 0x04000000
I2C_CR2_PECBYTE              EQU I2C_CR2_PECBYTE_Msk                       ;!< Packet error checking byte

;******************  Bit definition for I2C_OAR1 register  *****************
I2C_OAR1_OA1_Pos             EQU (0)
I2C_OAR1_OA1_Msk             EQU (0x3FF :SHL: I2C_OAR1_OA1_Pos)              ;!< 0x000003FF
I2C_OAR1_OA1                 EQU I2C_OAR1_OA1_Msk                          ;!< Interface own address 1
I2C_OAR1_OA1MODE_Pos         EQU (10)
I2C_OAR1_OA1MODE_Msk         EQU (0x1 :SHL: I2C_OAR1_OA1MODE_Pos)            ;!< 0x00000400
I2C_OAR1_OA1MODE             EQU I2C_OAR1_OA1MODE_Msk                      ;!< Own address 1 10-bit mode
I2C_OAR1_OA1EN_Pos           EQU (15)
I2C_OAR1_OA1EN_Msk           EQU (0x1 :SHL: I2C_OAR1_OA1EN_Pos)              ;!< 0x00008000
I2C_OAR1_OA1EN               EQU I2C_OAR1_OA1EN_Msk                        ;!< Own address 1 enable

;******************  Bit definition for I2C_OAR2 register  ******************
I2C_OAR2_OA2_Pos             EQU (1)
I2C_OAR2_OA2_Msk             EQU (0x7F :SHL: I2C_OAR2_OA2_Pos)               ;!< 0x000000FE
I2C_OAR2_OA2                 EQU I2C_OAR2_OA2_Msk                          ;!< Interface own address 2
I2C_OAR2_OA2MSK_Pos          EQU (8)
I2C_OAR2_OA2MSK_Msk          EQU (0x7 :SHL: I2C_OAR2_OA2MSK_Pos)             ;!< 0x00000700
I2C_OAR2_OA2MSK              EQU I2C_OAR2_OA2MSK_Msk                       ;!< Own address 2 masks
I2C_OAR2_OA2NOMASK           EQU (0x00000000)                             ;!< No mask
I2C_OAR2_OA2MASK01_Pos       EQU (8)
I2C_OAR2_OA2MASK01_Msk       EQU (0x1 :SHL: I2C_OAR2_OA2MASK01_Pos)          ;!< 0x00000100
I2C_OAR2_OA2MASK01           EQU I2C_OAR2_OA2MASK01_Msk                    ;!< OA2[1] is masked, Only OA2[7:2] are compared
I2C_OAR2_OA2MASK02_Pos       EQU (9)
I2C_OAR2_OA2MASK02_Msk       EQU (0x1 :SHL: I2C_OAR2_OA2MASK02_Pos)          ;!< 0x00000200
I2C_OAR2_OA2MASK02           EQU I2C_OAR2_OA2MASK02_Msk                    ;!< OA2[2:1] is masked, Only OA2[7:3] are compared
I2C_OAR2_OA2MASK03_Pos       EQU (8)
I2C_OAR2_OA2MASK03_Msk       EQU (0x3 :SHL: I2C_OAR2_OA2MASK03_Pos)          ;!< 0x00000300
I2C_OAR2_OA2MASK03           EQU I2C_OAR2_OA2MASK03_Msk                    ;!< OA2[3:1] is masked, Only OA2[7:4] are compared
I2C_OAR2_OA2MASK04_Pos       EQU (10)
I2C_OAR2_OA2MASK04_Msk       EQU (0x1 :SHL: I2C_OAR2_OA2MASK04_Pos)          ;!< 0x00000400
I2C_OAR2_OA2MASK04           EQU I2C_OAR2_OA2MASK04_Msk                    ;!< OA2[4:1] is masked, Only OA2[7:5] are compared
I2C_OAR2_OA2MASK05_Pos       EQU (8)
I2C_OAR2_OA2MASK05_Msk       EQU (0x5 :SHL: I2C_OAR2_OA2MASK05_Pos)          ;!< 0x00000500
I2C_OAR2_OA2MASK05           EQU I2C_OAR2_OA2MASK05_Msk                    ;!< OA2[5:1] is masked, Only OA2[7:6] are compared
I2C_OAR2_OA2MASK06_Pos       EQU (9)
I2C_OAR2_OA2MASK06_Msk       EQU (0x3 :SHL: I2C_OAR2_OA2MASK06_Pos)          ;!< 0x00000600
I2C_OAR2_OA2MASK06           EQU I2C_OAR2_OA2MASK06_Msk                    ;!< OA2[6:1] is masked, Only OA2[7] are compared
I2C_OAR2_OA2MASK07_Pos       EQU (8)
I2C_OAR2_OA2MASK07_Msk       EQU (0x7 :SHL: I2C_OAR2_OA2MASK07_Pos)          ;!< 0x00000700
I2C_OAR2_OA2MASK07           EQU I2C_OAR2_OA2MASK07_Msk                    ;!< OA2[7:1] is masked, No comparison is done
I2C_OAR2_OA2EN_Pos           EQU (15)
I2C_OAR2_OA2EN_Msk           EQU (0x1 :SHL: I2C_OAR2_OA2EN_Pos)              ;!< 0x00008000
I2C_OAR2_OA2EN               EQU I2C_OAR2_OA2EN_Msk                        ;!< Own address 2 enable

;******************  Bit definition for I2C_TIMINGR register ****************
I2C_TIMINGR_SCLL_Pos         EQU (0)
I2C_TIMINGR_SCLL_Msk         EQU (0xFF :SHL: I2C_TIMINGR_SCLL_Pos)           ;!< 0x000000FF
I2C_TIMINGR_SCLL             EQU I2C_TIMINGR_SCLL_Msk                      ;!< SCL low period (master mode)
I2C_TIMINGR_SCLH_Pos         EQU (8)
I2C_TIMINGR_SCLH_Msk         EQU (0xFF :SHL: I2C_TIMINGR_SCLH_Pos)           ;!< 0x0000FF00
I2C_TIMINGR_SCLH             EQU I2C_TIMINGR_SCLH_Msk                      ;!< SCL high period (master mode)
I2C_TIMINGR_SDADEL_Pos       EQU (16)
I2C_TIMINGR_SDADEL_Msk       EQU (0xF :SHL: I2C_TIMINGR_SDADEL_Pos)          ;!< 0x000F0000
I2C_TIMINGR_SDADEL           EQU I2C_TIMINGR_SDADEL_Msk                    ;!< Data hold time
I2C_TIMINGR_SCLDEL_Pos       EQU (20)
I2C_TIMINGR_SCLDEL_Msk       EQU (0xF :SHL: I2C_TIMINGR_SCLDEL_Pos)          ;!< 0x00F00000
I2C_TIMINGR_SCLDEL           EQU I2C_TIMINGR_SCLDEL_Msk                    ;!< Data setup time
I2C_TIMINGR_PRESC_Pos        EQU (28)
I2C_TIMINGR_PRESC_Msk        EQU (0xF :SHL: I2C_TIMINGR_PRESC_Pos)           ;!< 0xF0000000
I2C_TIMINGR_PRESC            EQU I2C_TIMINGR_PRESC_Msk                     ;!< Timings prescaler

;****************** Bit definition for I2C_TIMEOUTR register ****************
I2C_TIMEOUTR_TIMEOUTA_Pos    EQU (0)
I2C_TIMEOUTR_TIMEOUTA_Msk    EQU (0xFFF :SHL: I2C_TIMEOUTR_TIMEOUTA_Pos)     ;!< 0x00000FFF
I2C_TIMEOUTR_TIMEOUTA        EQU I2C_TIMEOUTR_TIMEOUTA_Msk                 ;!< Bus timeout A
I2C_TIMEOUTR_TIDLE_Pos       EQU (12)
I2C_TIMEOUTR_TIDLE_Msk       EQU (0x1 :SHL: I2C_TIMEOUTR_TIDLE_Pos)          ;!< 0x00001000
I2C_TIMEOUTR_TIDLE           EQU I2C_TIMEOUTR_TIDLE_Msk                    ;!< Idle clock timeout detection
I2C_TIMEOUTR_TIMOUTEN_Pos    EQU (15)
I2C_TIMEOUTR_TIMOUTEN_Msk    EQU (0x1 :SHL: I2C_TIMEOUTR_TIMOUTEN_Pos)       ;!< 0x00008000
I2C_TIMEOUTR_TIMOUTEN        EQU I2C_TIMEOUTR_TIMOUTEN_Msk                 ;!< Clock timeout enable
I2C_TIMEOUTR_TIMEOUTB_Pos    EQU (16)
I2C_TIMEOUTR_TIMEOUTB_Msk    EQU (0xFFF :SHL: I2C_TIMEOUTR_TIMEOUTB_Pos)     ;!< 0x0FFF0000
I2C_TIMEOUTR_TIMEOUTB        EQU I2C_TIMEOUTR_TIMEOUTB_Msk                 ;!< Bus timeout B
I2C_TIMEOUTR_TEXTEN_Pos      EQU (31)
I2C_TIMEOUTR_TEXTEN_Msk      EQU (0x1 :SHL: I2C_TIMEOUTR_TEXTEN_Pos)         ;!< 0x80000000
I2C_TIMEOUTR_TEXTEN          EQU I2C_TIMEOUTR_TEXTEN_Msk                   ;!< Extended clock timeout enable

;*****************  Bit definition for I2C_ISR register  ********************
I2C_ISR_TXE_Pos              EQU (0)
I2C_ISR_TXE_Msk              EQU (0x1 :SHL: I2C_ISR_TXE_Pos)                 ;!< 0x00000001
I2C_ISR_TXE                  EQU I2C_ISR_TXE_Msk                           ;!< Transmit data register empty
I2C_ISR_TXIS_Pos             EQU (1)
I2C_ISR_TXIS_Msk             EQU (0x1 :SHL: I2C_ISR_TXIS_Pos)                ;!< 0x00000002
I2C_ISR_TXIS                 EQU I2C_ISR_TXIS_Msk                          ;!< Transmit interrupt status
I2C_ISR_RXNE_Pos             EQU (2)
I2C_ISR_RXNE_Msk             EQU (0x1 :SHL: I2C_ISR_RXNE_Pos)                ;!< 0x00000004
I2C_ISR_RXNE                 EQU I2C_ISR_RXNE_Msk                          ;!< Receive data register not empty
I2C_ISR_ADDR_Pos             EQU (3)
I2C_ISR_ADDR_Msk             EQU (0x1 :SHL: I2C_ISR_ADDR_Pos)                ;!< 0x00000008
I2C_ISR_ADDR                 EQU I2C_ISR_ADDR_Msk                          ;!< Address matched (slave mode)
I2C_ISR_NACKF_Pos            EQU (4)
I2C_ISR_NACKF_Msk            EQU (0x1 :SHL: I2C_ISR_NACKF_Pos)               ;!< 0x00000010
I2C_ISR_NACKF                EQU I2C_ISR_NACKF_Msk                         ;!< NACK received flag
I2C_ISR_STOPF_Pos            EQU (5)
I2C_ISR_STOPF_Msk            EQU (0x1 :SHL: I2C_ISR_STOPF_Pos)               ;!< 0x00000020
I2C_ISR_STOPF                EQU I2C_ISR_STOPF_Msk                         ;!< STOP detection flag
I2C_ISR_TC_Pos               EQU (6)
I2C_ISR_TC_Msk               EQU (0x1 :SHL: I2C_ISR_TC_Pos)                  ;!< 0x00000040
I2C_ISR_TC                   EQU I2C_ISR_TC_Msk                            ;!< Transfer complete (master mode)
I2C_ISR_TCR_Pos              EQU (7)
I2C_ISR_TCR_Msk              EQU (0x1 :SHL: I2C_ISR_TCR_Pos)                 ;!< 0x00000080
I2C_ISR_TCR                  EQU I2C_ISR_TCR_Msk                           ;!< Transfer complete reload
I2C_ISR_BERR_Pos             EQU (8)
I2C_ISR_BERR_Msk             EQU (0x1 :SHL: I2C_ISR_BERR_Pos)                ;!< 0x00000100
I2C_ISR_BERR                 EQU I2C_ISR_BERR_Msk                          ;!< Bus error
I2C_ISR_ARLO_Pos             EQU (9)
I2C_ISR_ARLO_Msk             EQU (0x1 :SHL: I2C_ISR_ARLO_Pos)                ;!< 0x00000200
I2C_ISR_ARLO                 EQU I2C_ISR_ARLO_Msk                          ;!< Arbitration lost
I2C_ISR_OVR_Pos              EQU (10)
I2C_ISR_OVR_Msk              EQU (0x1 :SHL: I2C_ISR_OVR_Pos)                 ;!< 0x00000400
I2C_ISR_OVR                  EQU I2C_ISR_OVR_Msk                           ;!< Overrun/Underrun
I2C_ISR_PECERR_Pos           EQU (11)
I2C_ISR_PECERR_Msk           EQU (0x1 :SHL: I2C_ISR_PECERR_Pos)              ;!< 0x00000800
I2C_ISR_PECERR               EQU I2C_ISR_PECERR_Msk                        ;!< PEC error in reception
I2C_ISR_TIMEOUT_Pos          EQU (12)
I2C_ISR_TIMEOUT_Msk          EQU (0x1 :SHL: I2C_ISR_TIMEOUT_Pos)             ;!< 0x00001000
I2C_ISR_TIMEOUT              EQU I2C_ISR_TIMEOUT_Msk                       ;!< Timeout or Tlow detection flag
I2C_ISR_ALERT_Pos            EQU (13)
I2C_ISR_ALERT_Msk            EQU (0x1 :SHL: I2C_ISR_ALERT_Pos)               ;!< 0x00002000
I2C_ISR_ALERT                EQU I2C_ISR_ALERT_Msk                         ;!< SMBus alert
I2C_ISR_BUSY_Pos             EQU (15)
I2C_ISR_BUSY_Msk             EQU (0x1 :SHL: I2C_ISR_BUSY_Pos)                ;!< 0x00008000
I2C_ISR_BUSY                 EQU I2C_ISR_BUSY_Msk                          ;!< Bus busy
I2C_ISR_DIR_Pos              EQU (16)
I2C_ISR_DIR_Msk              EQU (0x1 :SHL: I2C_ISR_DIR_Pos)                 ;!< 0x00010000
I2C_ISR_DIR                  EQU I2C_ISR_DIR_Msk                           ;!< Transfer direction (slave mode)
I2C_ISR_ADDCODE_Pos          EQU (17)
I2C_ISR_ADDCODE_Msk          EQU (0x7F :SHL: I2C_ISR_ADDCODE_Pos)            ;!< 0x00FE0000
I2C_ISR_ADDCODE              EQU I2C_ISR_ADDCODE_Msk                       ;!< Address match code (slave mode)

;*****************  Bit definition for I2C_ICR register  ********************
I2C_ICR_ADDRCF_Pos           EQU (3)
I2C_ICR_ADDRCF_Msk           EQU (0x1 :SHL: I2C_ICR_ADDRCF_Pos)              ;!< 0x00000008
I2C_ICR_ADDRCF               EQU I2C_ICR_ADDRCF_Msk                        ;!< Address matched clear flag
I2C_ICR_NACKCF_Pos           EQU (4)
I2C_ICR_NACKCF_Msk           EQU (0x1 :SHL: I2C_ICR_NACKCF_Pos)              ;!< 0x00000010
I2C_ICR_NACKCF               EQU I2C_ICR_NACKCF_Msk                        ;!< NACK clear flag
I2C_ICR_STOPCF_Pos           EQU (5)
I2C_ICR_STOPCF_Msk           EQU (0x1 :SHL: I2C_ICR_STOPCF_Pos)              ;!< 0x00000020
I2C_ICR_STOPCF               EQU I2C_ICR_STOPCF_Msk                        ;!< STOP detection clear flag
I2C_ICR_BERRCF_Pos           EQU (8)
I2C_ICR_BERRCF_Msk           EQU (0x1 :SHL: I2C_ICR_BERRCF_Pos)              ;!< 0x00000100
I2C_ICR_BERRCF               EQU I2C_ICR_BERRCF_Msk                        ;!< Bus error clear flag
I2C_ICR_ARLOCF_Pos           EQU (9)
I2C_ICR_ARLOCF_Msk           EQU (0x1 :SHL: I2C_ICR_ARLOCF_Pos)              ;!< 0x00000200
I2C_ICR_ARLOCF               EQU I2C_ICR_ARLOCF_Msk                        ;!< Arbitration lost clear flag
I2C_ICR_OVRCF_Pos            EQU (10)
I2C_ICR_OVRCF_Msk            EQU (0x1 :SHL: I2C_ICR_OVRCF_Pos)               ;!< 0x00000400
I2C_ICR_OVRCF                EQU I2C_ICR_OVRCF_Msk                         ;!< Overrun/Underrun clear flag
I2C_ICR_PECCF_Pos            EQU (11)
I2C_ICR_PECCF_Msk            EQU (0x1 :SHL: I2C_ICR_PECCF_Pos)               ;!< 0x00000800
I2C_ICR_PECCF                EQU I2C_ICR_PECCF_Msk                         ;!< PAC error clear flag
I2C_ICR_TIMOUTCF_Pos         EQU (12)
I2C_ICR_TIMOUTCF_Msk         EQU (0x1 :SHL: I2C_ICR_TIMOUTCF_Pos)            ;!< 0x00001000
I2C_ICR_TIMOUTCF             EQU I2C_ICR_TIMOUTCF_Msk                      ;!< Timeout clear flag
I2C_ICR_ALERTCF_Pos          EQU (13)
I2C_ICR_ALERTCF_Msk          EQU (0x1 :SHL: I2C_ICR_ALERTCF_Pos)             ;!< 0x00002000
I2C_ICR_ALERTCF              EQU I2C_ICR_ALERTCF_Msk                       ;!< Alert clear flag

;*****************  Bit definition for I2C_PECR register  *******************
I2C_PECR_PEC_Pos             EQU (0)
I2C_PECR_PEC_Msk             EQU (0xFF :SHL: I2C_PECR_PEC_Pos)               ;!< 0x000000FF
I2C_PECR_PEC                 EQU I2C_PECR_PEC_Msk                          ;!< PEC register

;*****************  Bit definition for I2C_RXDR register  ********************
I2C_RXDR_RXDATA_Pos          EQU (0)
I2C_RXDR_RXDATA_Msk          EQU (0xFF :SHL: I2C_RXDR_RXDATA_Pos)            ;!< 0x000000FF
I2C_RXDR_RXDATA              EQU I2C_RXDR_RXDATA_Msk                       ;!< 8-bit receive data

;*****************  Bit definition for I2C_TXDR register  ********************
I2C_TXDR_TXDATA_Pos          EQU (0)
I2C_TXDR_TXDATA_Msk          EQU (0xFF :SHL: I2C_TXDR_TXDATA_Pos)            ;!< 0x000000FF
I2C_TXDR_TXDATA              EQU I2C_TXDR_TXDATA_Msk                       ;!< 8-bit transmit data


;****************************************************************************
;
;                           Independent WATCHDOG (IWDG)
;
;****************************************************************************
;******************  Bit definition for IWDG_KR register  *******************
IWDG_KR_KEY_Pos      EQU (0)
IWDG_KR_KEY_Msk      EQU (0xFFFF :SHL: IWDG_KR_KEY_Pos)                      ;!< 0x0000FFFF
IWDG_KR_KEY          EQU IWDG_KR_KEY_Msk                                   ;!< Key value (write only, read 0000h)

;******************  Bit definition for IWDG_PR register  *******************
IWDG_PR_PR_Pos       EQU (0)
IWDG_PR_PR_Msk       EQU (0x7 :SHL: IWDG_PR_PR_Pos)                          ;!< 0x00000007
IWDG_PR_PR           EQU IWDG_PR_PR_Msk                                    ;!< PR[2:0] (Prescaler divider)
IWDG_PR_PR_0         EQU (0x1 :SHL: IWDG_PR_PR_Pos)                          ;!< 0x00000001
IWDG_PR_PR_1         EQU (0x2 :SHL: IWDG_PR_PR_Pos)                          ;!< 0x00000002
IWDG_PR_PR_2         EQU (0x4 :SHL: IWDG_PR_PR_Pos)                          ;!< 0x00000004

;******************  Bit definition for IWDG_RLR register  ******************
IWDG_RLR_RL_Pos      EQU (0)
IWDG_RLR_RL_Msk      EQU (0xFFF :SHL: IWDG_RLR_RL_Pos)                       ;!< 0x00000FFF
IWDG_RLR_RL          EQU IWDG_RLR_RL_Msk                                   ;!< Watchdog counter reload value

;******************  Bit definition for IWDG_SR register  *******************
IWDG_SR_PVU_Pos      EQU (0)
IWDG_SR_PVU_Msk      EQU (0x1 :SHL: IWDG_SR_PVU_Pos)                         ;!< 0x00000001
IWDG_SR_PVU          EQU IWDG_SR_PVU_Msk                                   ;!< Watchdog prescaler value update
IWDG_SR_RVU_Pos      EQU (1)
IWDG_SR_RVU_Msk      EQU (0x1 :SHL: IWDG_SR_RVU_Pos)                         ;!< 0x00000002
IWDG_SR_RVU          EQU IWDG_SR_RVU_Msk                                   ;!< Watchdog counter reload value update
IWDG_SR_WVU_Pos      EQU (2)
IWDG_SR_WVU_Msk      EQU (0x1 :SHL: IWDG_SR_WVU_Pos)                         ;!< 0x00000004
IWDG_SR_WVU          EQU IWDG_SR_WVU_Msk                                   ;!< Watchdog counter window value update

;******************  Bit definition for IWDG_KR register  *******************
IWDG_WINR_WIN_Pos    EQU (0)
IWDG_WINR_WIN_Msk    EQU (0xFFF :SHL: IWDG_WINR_WIN_Pos)                     ;!< 0x00000FFF
IWDG_WINR_WIN        EQU IWDG_WINR_WIN_Msk                                 ;!< Watchdog counter window value

;****************************************************************************
;
;                             Power Control
;
;****************************************************************************

;*******************  Bit definition for PWR_CR register  *******************
PWR_CR_LPDS_Pos            EQU (0)
PWR_CR_LPDS_Msk            EQU (0x1 :SHL: PWR_CR_LPDS_Pos)                   ;!< 0x00000001
PWR_CR_LPDS                EQU PWR_CR_LPDS_Msk                             ;!< Low-power Deepsleep
PWR_CR_PDDS_Pos            EQU (1)
PWR_CR_PDDS_Msk            EQU (0x1 :SHL: PWR_CR_PDDS_Pos)                   ;!< 0x00000002
PWR_CR_PDDS                EQU PWR_CR_PDDS_Msk                             ;!< Power Down Deepsleep
PWR_CR_CWUF_Pos            EQU (2)
PWR_CR_CWUF_Msk            EQU (0x1 :SHL: PWR_CR_CWUF_Pos)                   ;!< 0x00000004
PWR_CR_CWUF                EQU PWR_CR_CWUF_Msk                             ;!< Clear Wakeup Flag
PWR_CR_CSBF_Pos            EQU (3)
PWR_CR_CSBF_Msk            EQU (0x1 :SHL: PWR_CR_CSBF_Pos)                   ;!< 0x00000008
PWR_CR_CSBF                EQU PWR_CR_CSBF_Msk                             ;!< Clear Standby Flag
PWR_CR_PVDE_Pos            EQU (4)
PWR_CR_PVDE_Msk            EQU (0x1 :SHL: PWR_CR_PVDE_Pos)                   ;!< 0x00000010
PWR_CR_PVDE                EQU PWR_CR_PVDE_Msk                             ;!< Power Voltage Detector Enable

PWR_CR_PLS_Pos             EQU (5)
PWR_CR_PLS_Msk             EQU (0x7 :SHL: PWR_CR_PLS_Pos)                    ;!< 0x000000E0
PWR_CR_PLS                 EQU PWR_CR_PLS_Msk                              ;!< PLS[2:0] bits (PVD Level Selection)
PWR_CR_PLS_0               EQU (0x1 :SHL: PWR_CR_PLS_Pos)                    ;!< 0x00000020
PWR_CR_PLS_1               EQU (0x2 :SHL: PWR_CR_PLS_Pos)                    ;!< 0x00000040
PWR_CR_PLS_2               EQU (0x4 :SHL: PWR_CR_PLS_Pos)                    ;!< 0x00000080

;!< PVD level configuration
PWR_CR_PLS_LEV0            EQU (0x00000000)                               ;!< PVD level 0
PWR_CR_PLS_LEV1            EQU (0x00000020)                               ;!< PVD level 1
PWR_CR_PLS_LEV2            EQU (0x00000040)                               ;!< PVD level 2
PWR_CR_PLS_LEV3            EQU (0x00000060)                               ;!< PVD level 3
PWR_CR_PLS_LEV4            EQU (0x00000080)                               ;!< PVD level 4
PWR_CR_PLS_LEV5            EQU (0x000000A0)                               ;!< PVD level 5
PWR_CR_PLS_LEV6            EQU (0x000000C0)                               ;!< PVD level 6
PWR_CR_PLS_LEV7            EQU (0x000000E0)                               ;!< PVD level 7

PWR_CR_DBP_Pos             EQU (8)
PWR_CR_DBP_Msk             EQU (0x1 :SHL: PWR_CR_DBP_Pos)                    ;!< 0x00000100
PWR_CR_DBP                 EQU PWR_CR_DBP_Msk                              ;!< Disable Backup Domain write protection

;******************  Bit definition for PWR_CSR register  *******************
PWR_CSR_WUF_Pos            EQU (0)
PWR_CSR_WUF_Msk            EQU (0x1 :SHL: PWR_CSR_WUF_Pos)                   ;!< 0x00000001
PWR_CSR_WUF                EQU PWR_CSR_WUF_Msk                             ;!< Wakeup Flag
PWR_CSR_SBF_Pos            EQU (1)
PWR_CSR_SBF_Msk            EQU (0x1 :SHL: PWR_CSR_SBF_Pos)                   ;!< 0x00000002
PWR_CSR_SBF                EQU PWR_CSR_SBF_Msk                             ;!< Standby Flag
PWR_CSR_PVDO_Pos           EQU (2)
PWR_CSR_PVDO_Msk           EQU (0x1 :SHL: PWR_CSR_PVDO_Pos)                  ;!< 0x00000004
PWR_CSR_PVDO               EQU PWR_CSR_PVDO_Msk                            ;!< PVD Output
PWR_CSR_VREFINTRDYF_Pos    EQU (3)
PWR_CSR_VREFINTRDYF_Msk    EQU (0x1 :SHL: PWR_CSR_VREFINTRDYF_Pos)           ;!< 0x00000008
PWR_CSR_VREFINTRDYF        EQU PWR_CSR_VREFINTRDYF_Msk                     ;!< Internal voltage reference (VREFINT) ready flag

PWR_CSR_EWUP1_Pos          EQU (8)
PWR_CSR_EWUP1_Msk          EQU (0x1 :SHL: PWR_CSR_EWUP1_Pos)                 ;!< 0x00000100
PWR_CSR_EWUP1              EQU PWR_CSR_EWUP1_Msk                           ;!< Enable WKUP pin 1
PWR_CSR_EWUP2_Pos          EQU (9)
PWR_CSR_EWUP2_Msk          EQU (0x1 :SHL: PWR_CSR_EWUP2_Pos)                 ;!< 0x00000200
PWR_CSR_EWUP2              EQU PWR_CSR_EWUP2_Msk                           ;!< Enable WKUP pin 2
PWR_CSR_EWUP3_Pos          EQU (10)
PWR_CSR_EWUP3_Msk          EQU (0x1 :SHL: PWR_CSR_EWUP3_Pos)                 ;!< 0x00000400
PWR_CSR_EWUP3              EQU PWR_CSR_EWUP3_Msk                           ;!< Enable WKUP pin 3

;****************************************************************************
;
;                         Reset and Clock Control
;
;****************************************************************************

;*******************  Bit definition for RCC_CR register  *******************
RCC_CR_HSION_Pos                         EQU (0)
RCC_CR_HSION_Msk                         EQU (0x1 :SHL: RCC_CR_HSION_Pos)    ;!< 0x00000001
RCC_CR_HSION                             EQU RCC_CR_HSION_Msk
RCC_CR_HSIRDY_Pos                        EQU (1)
RCC_CR_HSIRDY_Msk                        EQU (0x1 :SHL: RCC_CR_HSIRDY_Pos)   ;!< 0x00000002
RCC_CR_HSIRDY                            EQU RCC_CR_HSIRDY_Msk

RCC_CR_HSITRIM_Pos                       EQU (3)
RCC_CR_HSITRIM_Msk                       EQU (0x1F :SHL: RCC_CR_HSITRIM_Pos) ;!< 0x000000F8
RCC_CR_HSITRIM                           EQU RCC_CR_HSITRIM_Msk
RCC_CR_HSITRIM_0                         EQU (0x01 :SHL: RCC_CR_HSITRIM_Pos) ;!< 0x00000008
RCC_CR_HSITRIM_1                         EQU (0x02 :SHL: RCC_CR_HSITRIM_Pos) ;!< 0x00000010
RCC_CR_HSITRIM_2                         EQU (0x04 :SHL: RCC_CR_HSITRIM_Pos) ;!< 0x00000020
RCC_CR_HSITRIM_3                         EQU (0x08 :SHL: RCC_CR_HSITRIM_Pos) ;!< 0x00000040
RCC_CR_HSITRIM_4                         EQU (0x10 :SHL: RCC_CR_HSITRIM_Pos) ;!< 0x00000080

RCC_CR_HSICAL_Pos                        EQU (8)
RCC_CR_HSICAL_Msk                        EQU (0xFF :SHL: RCC_CR_HSICAL_Pos)  ;!< 0x0000FF00
RCC_CR_HSICAL                            EQU RCC_CR_HSICAL_Msk
RCC_CR_HSICAL_0                          EQU (0x01 :SHL: RCC_CR_HSICAL_Pos)  ;!< 0x00000100
RCC_CR_HSICAL_1                          EQU (0x02 :SHL: RCC_CR_HSICAL_Pos)  ;!< 0x00000200
RCC_CR_HSICAL_2                          EQU (0x04 :SHL: RCC_CR_HSICAL_Pos)  ;!< 0x00000400
RCC_CR_HSICAL_3                          EQU (0x08 :SHL: RCC_CR_HSICAL_Pos)  ;!< 0x00000800
RCC_CR_HSICAL_4                          EQU (0x10 :SHL: RCC_CR_HSICAL_Pos)  ;!< 0x00001000
RCC_CR_HSICAL_5                          EQU (0x20 :SHL: RCC_CR_HSICAL_Pos)  ;!< 0x00002000
RCC_CR_HSICAL_6                          EQU (0x40 :SHL: RCC_CR_HSICAL_Pos)  ;!< 0x00004000
RCC_CR_HSICAL_7                          EQU (0x80 :SHL: RCC_CR_HSICAL_Pos)  ;!< 0x00008000

RCC_CR_HSEON_Pos                         EQU (16)
RCC_CR_HSEON_Msk                         EQU (0x1 :SHL: RCC_CR_HSEON_Pos)    ;!< 0x00010000
RCC_CR_HSEON                             EQU RCC_CR_HSEON_Msk
RCC_CR_HSERDY_Pos                        EQU (17)
RCC_CR_HSERDY_Msk                        EQU (0x1 :SHL: RCC_CR_HSERDY_Pos)   ;!< 0x00020000
RCC_CR_HSERDY                            EQU RCC_CR_HSERDY_Msk
RCC_CR_HSEBYP_Pos                        EQU (18)
RCC_CR_HSEBYP_Msk                        EQU (0x1 :SHL: RCC_CR_HSEBYP_Pos)   ;!< 0x00040000
RCC_CR_HSEBYP                            EQU RCC_CR_HSEBYP_Msk
RCC_CR_CSSON_Pos                         EQU (19)
RCC_CR_CSSON_Msk                         EQU (0x1 :SHL: RCC_CR_CSSON_Pos)    ;!< 0x00080000
RCC_CR_CSSON                             EQU RCC_CR_CSSON_Msk
RCC_CR_PLLON_Pos                         EQU (24)
RCC_CR_PLLON_Msk                         EQU (0x1 :SHL: RCC_CR_PLLON_Pos)    ;!< 0x01000000
RCC_CR_PLLON                             EQU RCC_CR_PLLON_Msk
RCC_CR_PLLRDY_Pos                        EQU (25)
RCC_CR_PLLRDY_Msk                        EQU (0x1 :SHL: RCC_CR_PLLRDY_Pos)   ;!< 0x02000000
RCC_CR_PLLRDY                            EQU RCC_CR_PLLRDY_Msk

;*******************  Bit definition for RCC_CFGR register  *****************
;!< SW configuration
RCC_CFGR_SW_Pos                          EQU (0)
RCC_CFGR_SW_Msk                          EQU (0x3 :SHL: RCC_CFGR_SW_Pos)     ;!< 0x00000003
RCC_CFGR_SW                              EQU RCC_CFGR_SW_Msk               ;!< SW[1:0] bits (System clock Switch)
RCC_CFGR_SW_0                            EQU (0x1 :SHL: RCC_CFGR_SW_Pos)     ;!< 0x00000001
RCC_CFGR_SW_1                            EQU (0x2 :SHL: RCC_CFGR_SW_Pos)     ;!< 0x00000002

RCC_CFGR_SW_HSI                          EQU (0x00000000)                 ;!< HSI selected as system clock
RCC_CFGR_SW_HSE                          EQU (0x00000001)                 ;!< HSE selected as system clock
RCC_CFGR_SW_PLL                          EQU (0x00000002)                 ;!< PLL selected as system clock

;!< SWS configuration
RCC_CFGR_SWS_Pos                         EQU (2)
RCC_CFGR_SWS_Msk                         EQU (0x3 :SHL: RCC_CFGR_SWS_Pos)    ;!< 0x0000000C
RCC_CFGR_SWS                             EQU RCC_CFGR_SWS_Msk              ;!< SWS[1:0] bits (System Clock Switch Status)
RCC_CFGR_SWS_0                           EQU (0x1 :SHL: RCC_CFGR_SWS_Pos)    ;!< 0x00000004
RCC_CFGR_SWS_1                           EQU (0x2 :SHL: RCC_CFGR_SWS_Pos)    ;!< 0x00000008

RCC_CFGR_SWS_HSI                         EQU (0x00000000)                 ;!< HSI oscillator used as system clock
RCC_CFGR_SWS_HSE                         EQU (0x00000004)                 ;!< HSE oscillator used as system clock
RCC_CFGR_SWS_PLL                         EQU (0x00000008)                 ;!< PLL used as system clock

;!< HPRE configuration
RCC_CFGR_HPRE_Pos                        EQU (4)
RCC_CFGR_HPRE_Msk                        EQU (0xF :SHL: RCC_CFGR_HPRE_Pos)   ;!< 0x000000F0
RCC_CFGR_HPRE                            EQU RCC_CFGR_HPRE_Msk             ;!< HPRE[3:0] bits (AHB prescaler)
RCC_CFGR_HPRE_0                          EQU (0x1 :SHL: RCC_CFGR_HPRE_Pos)   ;!< 0x00000010
RCC_CFGR_HPRE_1                          EQU (0x2 :SHL: RCC_CFGR_HPRE_Pos)   ;!< 0x00000020
RCC_CFGR_HPRE_2                          EQU (0x4 :SHL: RCC_CFGR_HPRE_Pos)   ;!< 0x00000040
RCC_CFGR_HPRE_3                          EQU (0x8 :SHL: RCC_CFGR_HPRE_Pos)   ;!< 0x00000080

RCC_CFGR_HPRE_DIV1                       EQU (0x00000000)                 ;!< SYSCLK not divided
RCC_CFGR_HPRE_DIV2                       EQU (0x00000080)                 ;!< SYSCLK divided by 2
RCC_CFGR_HPRE_DIV4                       EQU (0x00000090)                 ;!< SYSCLK divided by 4
RCC_CFGR_HPRE_DIV8                       EQU (0x000000A0)                 ;!< SYSCLK divided by 8
RCC_CFGR_HPRE_DIV16                      EQU (0x000000B0)                 ;!< SYSCLK divided by 16
RCC_CFGR_HPRE_DIV64                      EQU (0x000000C0)                 ;!< SYSCLK divided by 64
RCC_CFGR_HPRE_DIV128                     EQU (0x000000D0)                 ;!< SYSCLK divided by 128
RCC_CFGR_HPRE_DIV256                     EQU (0x000000E0)                 ;!< SYSCLK divided by 256
RCC_CFGR_HPRE_DIV512                     EQU (0x000000F0)                 ;!< SYSCLK divided by 512

;!< PPRE1 configuration
RCC_CFGR_PPRE1_Pos                       EQU (8)
RCC_CFGR_PPRE1_Msk                       EQU (0x7 :SHL: RCC_CFGR_PPRE1_Pos)  ;!< 0x00000700
RCC_CFGR_PPRE1                           EQU RCC_CFGR_PPRE1_Msk            ;!< PRE1[2:0] bits (APB1 prescaler)
RCC_CFGR_PPRE1_0                         EQU (0x1 :SHL: RCC_CFGR_PPRE1_Pos)  ;!< 0x00000100
RCC_CFGR_PPRE1_1                         EQU (0x2 :SHL: RCC_CFGR_PPRE1_Pos)  ;!< 0x00000200
RCC_CFGR_PPRE1_2                         EQU (0x4 :SHL: RCC_CFGR_PPRE1_Pos)  ;!< 0x00000400

RCC_CFGR_PPRE1_DIV1                      EQU (0x00000000)                 ;!< HCLK not divided
RCC_CFGR_PPRE1_DIV2                      EQU (0x00000400)                 ;!< HCLK divided by 2
RCC_CFGR_PPRE1_DIV4                      EQU (0x00000500)                 ;!< HCLK divided by 4
RCC_CFGR_PPRE1_DIV8                      EQU (0x00000600)                 ;!< HCLK divided by 8
RCC_CFGR_PPRE1_DIV16                     EQU (0x00000700)                 ;!< HCLK divided by 16

;!< PPRE2 configuration
RCC_CFGR_PPRE2_Pos                       EQU (11)
RCC_CFGR_PPRE2_Msk                       EQU (0x7 :SHL: RCC_CFGR_PPRE2_Pos)  ;!< 0x00003800
RCC_CFGR_PPRE2                           EQU RCC_CFGR_PPRE2_Msk            ;!< PRE2[2:0] bits (APB2 prescaler)
RCC_CFGR_PPRE2_0                         EQU (0x1 :SHL: RCC_CFGR_PPRE2_Pos)  ;!< 0x00000800
RCC_CFGR_PPRE2_1                         EQU (0x2 :SHL: RCC_CFGR_PPRE2_Pos)  ;!< 0x00001000
RCC_CFGR_PPRE2_2                         EQU (0x4 :SHL: RCC_CFGR_PPRE2_Pos)  ;!< 0x00002000

RCC_CFGR_PPRE2_DIV1                      EQU (0x00000000)                 ;!< HCLK not divided
RCC_CFGR_PPRE2_DIV2                      EQU (0x00002000)                 ;!< HCLK divided by 2
RCC_CFGR_PPRE2_DIV4                      EQU (0x00002800)                 ;!< HCLK divided by 4
RCC_CFGR_PPRE2_DIV8                      EQU (0x00003000)                 ;!< HCLK divided by 8
RCC_CFGR_PPRE2_DIV16                     EQU (0x00003800)                 ;!< HCLK divided by 16

RCC_CFGR_PLLSRC_Pos                      EQU (15)
RCC_CFGR_PLLSRC_Msk                      EQU (0x3 :SHL: RCC_CFGR_PLLSRC_Pos) ;!< 0x00018000
RCC_CFGR_PLLSRC                          EQU RCC_CFGR_PLLSRC_Msk           ;!< PLL entry clock source
RCC_CFGR_PLLSRC_HSI_PREDIV               EQU (0x00008000)                 ;!< HSI/PREDIV clock as PLL entry clock source
RCC_CFGR_PLLSRC_HSE_PREDIV               EQU (0x00010000)                 ;!< HSE/PREDIV clock selected as PLL entry clock source

RCC_CFGR_PLLXTPRE_Pos                    EQU (17)
RCC_CFGR_PLLXTPRE_Msk                    EQU (0x1 :SHL: RCC_CFGR_PLLXTPRE_Pos) ;!< 0x00020000
RCC_CFGR_PLLXTPRE                        EQU RCC_CFGR_PLLXTPRE_Msk         ;!< HSE divider for PLL entry
RCC_CFGR_PLLXTPRE_HSE_PREDIV_DIV1        EQU (0x00000000)                 ;!< HSE/PREDIV clock not divided for PLL entry
RCC_CFGR_PLLXTPRE_HSE_PREDIV_DIV2        EQU (0x00020000)                 ;!< HSE/PREDIV clock divided by 2 for PLL entry

;!< PLLMUL configuration
RCC_CFGR_PLLMUL_Pos                      EQU (18)
RCC_CFGR_PLLMUL_Msk                      EQU (0xF :SHL: RCC_CFGR_PLLMUL_Pos) ;!< 0x003C0000
RCC_CFGR_PLLMUL                          EQU RCC_CFGR_PLLMUL_Msk           ;!< PLLMUL[3:0] bits (PLL multiplication factor)
RCC_CFGR_PLLMUL_0                        EQU (0x1 :SHL: RCC_CFGR_PLLMUL_Pos) ;!< 0x00040000
RCC_CFGR_PLLMUL_1                        EQU (0x2 :SHL: RCC_CFGR_PLLMUL_Pos) ;!< 0x00080000
RCC_CFGR_PLLMUL_2                        EQU (0x4 :SHL: RCC_CFGR_PLLMUL_Pos) ;!< 0x00100000
RCC_CFGR_PLLMUL_3                        EQU (0x8 :SHL: RCC_CFGR_PLLMUL_Pos) ;!< 0x00200000

RCC_CFGR_PLLMUL2                         EQU (0x00000000)                 ;!< PLL input clock*2
RCC_CFGR_PLLMUL3                         EQU (0x00040000)                 ;!< PLL input clock*3
RCC_CFGR_PLLMUL4                         EQU (0x00080000)                 ;!< PLL input clock*4
RCC_CFGR_PLLMUL5                         EQU (0x000C0000)                 ;!< PLL input clock*5
RCC_CFGR_PLLMUL6                         EQU (0x00100000)                 ;!< PLL input clock*6
RCC_CFGR_PLLMUL7                         EQU (0x00140000)                 ;!< PLL input clock*7
RCC_CFGR_PLLMUL8                         EQU (0x00180000)                 ;!< PLL input clock*8
RCC_CFGR_PLLMUL9                         EQU (0x001C0000)                 ;!< PLL input clock*9
RCC_CFGR_PLLMUL10                        EQU (0x00200000)                 ;!< PLL input clock10
RCC_CFGR_PLLMUL11                        EQU (0x00240000)                 ;!< PLL input clock*11
RCC_CFGR_PLLMUL12                        EQU (0x00280000)                 ;!< PLL input clock*12
RCC_CFGR_PLLMUL13                        EQU (0x002C0000)                 ;!< PLL input clock*13
RCC_CFGR_PLLMUL14                        EQU (0x00300000)                 ;!< PLL input clock*14
RCC_CFGR_PLLMUL15                        EQU (0x00340000)                 ;!< PLL input clock*15
RCC_CFGR_PLLMUL16                        EQU (0x00380000)                 ;!< PLL input clock*16

;!< USB configuration
RCC_CFGR_USBPRE_Pos                      EQU (22)
RCC_CFGR_USBPRE_Msk                      EQU (0x1 :SHL: RCC_CFGR_USBPRE_Pos) ;!< 0x00400000
RCC_CFGR_USBPRE                          EQU RCC_CFGR_USBPRE_Msk           ;!< USB prescaler

RCC_CFGR_USBPRE_DIV1_5                   EQU (0x00000000)                 ;!< USB prescaler is PLL clock divided by 1.5
RCC_CFGR_USBPRE_DIV1                     EQU (0x00400000)                 ;!< USB prescaler is PLL clock divided by 1

;!< I2S configuration
RCC_CFGR_I2SSRC_Pos                      EQU (23)
RCC_CFGR_I2SSRC_Msk                      EQU (0x1 :SHL: RCC_CFGR_I2SSRC_Pos) ;!< 0x00800000
RCC_CFGR_I2SSRC                          EQU RCC_CFGR_I2SSRC_Msk           ;!< I2S external clock source selection

RCC_CFGR_I2SSRC_SYSCLK                   EQU (0x00000000)                 ;!< System clock selected as I2S clock source
RCC_CFGR_I2SSRC_EXT                      EQU (0x00800000)                 ;!< External clock selected as I2S clock source

;!< MCO configuration
RCC_CFGR_MCO_Pos                         EQU (24)
RCC_CFGR_MCO_Msk                         EQU (0x7 :SHL: RCC_CFGR_MCO_Pos)    ;!< 0x07000000
RCC_CFGR_MCO                             EQU RCC_CFGR_MCO_Msk              ;!< MCO[2:0] bits (Microcontroller Clock Output)
RCC_CFGR_MCO_0                           EQU (0x1 :SHL: RCC_CFGR_MCO_Pos)    ;!< 0x01000000
RCC_CFGR_MCO_1                           EQU (0x2 :SHL: RCC_CFGR_MCO_Pos)    ;!< 0x02000000
RCC_CFGR_MCO_2                           EQU (0x4 :SHL: RCC_CFGR_MCO_Pos)    ;!< 0x04000000

RCC_CFGR_MCO_NOCLOCK                     EQU (0x00000000)                 ;!< No clock
RCC_CFGR_MCO_LSI                         EQU (0x02000000)                 ;!< LSI clock selected as MCO source
RCC_CFGR_MCO_LSE                         EQU (0x03000000)                 ;!< LSE clock selected as MCO source
RCC_CFGR_MCO_SYSCLK                      EQU (0x04000000)                 ;!< System clock selected as MCO source
RCC_CFGR_MCO_HSI                         EQU (0x05000000)                 ;!< HSI clock selected as MCO source
RCC_CFGR_MCO_HSE                         EQU (0x06000000)                 ;!< HSE clock selected as MCO source
RCC_CFGR_MCO_PLL                         EQU (0x07000000)                 ;!< PLL clock divided by 2 selected as MCO source

RCC_CFGR_MCOPRE_Pos                      EQU (28)
RCC_CFGR_MCOPRE_Msk                      EQU (0x7 :SHL: RCC_CFGR_MCOPRE_Pos) ;!< 0x70000000
RCC_CFGR_MCOPRE                          EQU RCC_CFGR_MCOPRE_Msk           ;!< MCOPRE[3:0] bits (Microcontroller Clock Output Prescaler)
RCC_CFGR_MCOPRE_0                        EQU (0x1 :SHL: RCC_CFGR_MCOPRE_Pos) ;!< 0x10000000
RCC_CFGR_MCOPRE_1                        EQU (0x2 :SHL: RCC_CFGR_MCOPRE_Pos) ;!< 0x20000000
RCC_CFGR_MCOPRE_2                        EQU (0x4 :SHL: RCC_CFGR_MCOPRE_Pos) ;!< 0x40000000

RCC_CFGR_MCOPRE_DIV1                     EQU (0x00000000)                 ;!< MCO is divided by 1
RCC_CFGR_MCOPRE_DIV2                     EQU (0x10000000)                 ;!< MCO is divided by 2
RCC_CFGR_MCOPRE_DIV4                     EQU (0x20000000)                 ;!< MCO is divided by 4
RCC_CFGR_MCOPRE_DIV8                     EQU (0x30000000)                 ;!< MCO is divided by 8
RCC_CFGR_MCOPRE_DIV16                    EQU (0x40000000)                 ;!< MCO is divided by 16
RCC_CFGR_MCOPRE_DIV32                    EQU (0x50000000)                 ;!< MCO is divided by 32
RCC_CFGR_MCOPRE_DIV64                    EQU (0x60000000)                 ;!< MCO is divided by 64
RCC_CFGR_MCOPRE_DIV128                   EQU (0x70000000)                 ;!< MCO is divided by 128

RCC_CFGR_PLLNODIV_Pos                    EQU (31)
RCC_CFGR_PLLNODIV_Msk                    EQU (0x1 :SHL: RCC_CFGR_PLLNODIV_Pos) ;!< 0x80000000
RCC_CFGR_PLLNODIV                        EQU RCC_CFGR_PLLNODIV_Msk         ;!< Do not divide PLL to MCO

; Reference defines
RCC_CFGR_MCOSEL                      EQU RCC_CFGR_MCO
RCC_CFGR_MCOSEL_0                    EQU RCC_CFGR_MCO_0
RCC_CFGR_MCOSEL_1                    EQU RCC_CFGR_MCO_1
RCC_CFGR_MCOSEL_2                    EQU RCC_CFGR_MCO_2
RCC_CFGR_MCOSEL_NOCLOCK              EQU RCC_CFGR_MCO_NOCLOCK
RCC_CFGR_MCOSEL_LSI                  EQU RCC_CFGR_MCO_LSI
RCC_CFGR_MCOSEL_LSE                  EQU RCC_CFGR_MCO_LSE
RCC_CFGR_MCOSEL_SYSCLK               EQU RCC_CFGR_MCO_SYSCLK
RCC_CFGR_MCOSEL_HSI                  EQU RCC_CFGR_MCO_HSI
RCC_CFGR_MCOSEL_HSE                  EQU RCC_CFGR_MCO_HSE
RCC_CFGR_MCOSEL_PLL_DIV2             EQU RCC_CFGR_MCO_PLL

;********************  Bit definition for RCC_CIR register  *******************
RCC_CIR_LSIRDYF_Pos                      EQU (0)
RCC_CIR_LSIRDYF_Msk                      EQU (0x1 :SHL: RCC_CIR_LSIRDYF_Pos) ;!< 0x00000001
RCC_CIR_LSIRDYF                          EQU RCC_CIR_LSIRDYF_Msk           ;!< LSI Ready Interrupt flag
RCC_CIR_LSERDYF_Pos                      EQU (1)
RCC_CIR_LSERDYF_Msk                      EQU (0x1 :SHL: RCC_CIR_LSERDYF_Pos) ;!< 0x00000002
RCC_CIR_LSERDYF                          EQU RCC_CIR_LSERDYF_Msk           ;!< LSE Ready Interrupt flag
RCC_CIR_HSIRDYF_Pos                      EQU (2)
RCC_CIR_HSIRDYF_Msk                      EQU (0x1 :SHL: RCC_CIR_HSIRDYF_Pos) ;!< 0x00000004
RCC_CIR_HSIRDYF                          EQU RCC_CIR_HSIRDYF_Msk           ;!< HSI Ready Interrupt flag
RCC_CIR_HSERDYF_Pos                      EQU (3)
RCC_CIR_HSERDYF_Msk                      EQU (0x1 :SHL: RCC_CIR_HSERDYF_Pos) ;!< 0x00000008
RCC_CIR_HSERDYF                          EQU RCC_CIR_HSERDYF_Msk           ;!< HSE Ready Interrupt flag
RCC_CIR_PLLRDYF_Pos                      EQU (4)
RCC_CIR_PLLRDYF_Msk                      EQU (0x1 :SHL: RCC_CIR_PLLRDYF_Pos) ;!< 0x00000010
RCC_CIR_PLLRDYF                          EQU RCC_CIR_PLLRDYF_Msk           ;!< PLL Ready Interrupt flag
RCC_CIR_CSSF_Pos                         EQU (7)
RCC_CIR_CSSF_Msk                         EQU (0x1 :SHL: RCC_CIR_CSSF_Pos)    ;!< 0x00000080
RCC_CIR_CSSF                             EQU RCC_CIR_CSSF_Msk              ;!< Clock Security System Interrupt flag
RCC_CIR_LSIRDYIE_Pos                     EQU (8)
RCC_CIR_LSIRDYIE_Msk                     EQU (0x1 :SHL: RCC_CIR_LSIRDYIE_Pos) ;!< 0x00000100
RCC_CIR_LSIRDYIE                         EQU RCC_CIR_LSIRDYIE_Msk          ;!< LSI Ready Interrupt Enable
RCC_CIR_LSERDYIE_Pos                     EQU (9)
RCC_CIR_LSERDYIE_Msk                     EQU (0x1 :SHL: RCC_CIR_LSERDYIE_Pos) ;!< 0x00000200
RCC_CIR_LSERDYIE                         EQU RCC_CIR_LSERDYIE_Msk          ;!< LSE Ready Interrupt Enable
RCC_CIR_HSIRDYIE_Pos                     EQU (10)
RCC_CIR_HSIRDYIE_Msk                     EQU (0x1 :SHL: RCC_CIR_HSIRDYIE_Pos) ;!< 0x00000400
RCC_CIR_HSIRDYIE                         EQU RCC_CIR_HSIRDYIE_Msk          ;!< HSI Ready Interrupt Enable
RCC_CIR_HSERDYIE_Pos                     EQU (11)
RCC_CIR_HSERDYIE_Msk                     EQU (0x1 :SHL: RCC_CIR_HSERDYIE_Pos) ;!< 0x00000800
RCC_CIR_HSERDYIE                         EQU RCC_CIR_HSERDYIE_Msk          ;!< HSE Ready Interrupt Enable
RCC_CIR_PLLRDYIE_Pos                     EQU (12)
RCC_CIR_PLLRDYIE_Msk                     EQU (0x1 :SHL: RCC_CIR_PLLRDYIE_Pos) ;!< 0x00001000
RCC_CIR_PLLRDYIE                         EQU RCC_CIR_PLLRDYIE_Msk          ;!< PLL Ready Interrupt Enable
RCC_CIR_LSIRDYC_Pos                      EQU (16)
RCC_CIR_LSIRDYC_Msk                      EQU (0x1 :SHL: RCC_CIR_LSIRDYC_Pos) ;!< 0x00010000
RCC_CIR_LSIRDYC                          EQU RCC_CIR_LSIRDYC_Msk           ;!< LSI Ready Interrupt Clear
RCC_CIR_LSERDYC_Pos                      EQU (17)
RCC_CIR_LSERDYC_Msk                      EQU (0x1 :SHL: RCC_CIR_LSERDYC_Pos) ;!< 0x00020000
RCC_CIR_LSERDYC                          EQU RCC_CIR_LSERDYC_Msk           ;!< LSE Ready Interrupt Clear
RCC_CIR_HSIRDYC_Pos                      EQU (18)
RCC_CIR_HSIRDYC_Msk                      EQU (0x1 :SHL: RCC_CIR_HSIRDYC_Pos) ;!< 0x00040000
RCC_CIR_HSIRDYC                          EQU RCC_CIR_HSIRDYC_Msk           ;!< HSI Ready Interrupt Clear
RCC_CIR_HSERDYC_Pos                      EQU (19)
RCC_CIR_HSERDYC_Msk                      EQU (0x1 :SHL: RCC_CIR_HSERDYC_Pos) ;!< 0x00080000
RCC_CIR_HSERDYC                          EQU RCC_CIR_HSERDYC_Msk           ;!< HSE Ready Interrupt Clear
RCC_CIR_PLLRDYC_Pos                      EQU (20)
RCC_CIR_PLLRDYC_Msk                      EQU (0x1 :SHL: RCC_CIR_PLLRDYC_Pos) ;!< 0x00100000
RCC_CIR_PLLRDYC                          EQU RCC_CIR_PLLRDYC_Msk           ;!< PLL Ready Interrupt Clear
RCC_CIR_CSSC_Pos                         EQU (23)
RCC_CIR_CSSC_Msk                         EQU (0x1 :SHL: RCC_CIR_CSSC_Pos)    ;!< 0x00800000
RCC_CIR_CSSC                             EQU RCC_CIR_CSSC_Msk              ;!< Clock Security System Interrupt Clear

;*****************  Bit definition for RCC_APB2RSTR register  ****************
RCC_APB2RSTR_SYSCFGRST_Pos               EQU (0)
RCC_APB2RSTR_SYSCFGRST_Msk               EQU (0x1 :SHL: RCC_APB2RSTR_SYSCFGRST_Pos) ;!< 0x00000001
RCC_APB2RSTR_SYSCFGRST                   EQU RCC_APB2RSTR_SYSCFGRST_Msk    ;!< SYSCFG reset
RCC_APB2RSTR_TIM1RST_Pos                 EQU (11)
RCC_APB2RSTR_TIM1RST_Msk                 EQU (0x1 :SHL: RCC_APB2RSTR_TIM1RST_Pos) ;!< 0x00000800
RCC_APB2RSTR_TIM1RST                     EQU RCC_APB2RSTR_TIM1RST_Msk      ;!< TIM1 reset
RCC_APB2RSTR_SPI1RST_Pos                 EQU (12)
RCC_APB2RSTR_SPI1RST_Msk                 EQU (0x1 :SHL: RCC_APB2RSTR_SPI1RST_Pos) ;!< 0x00001000
RCC_APB2RSTR_SPI1RST                     EQU RCC_APB2RSTR_SPI1RST_Msk      ;!< SPI1 reset
RCC_APB2RSTR_TIM8RST_Pos                 EQU (13)
RCC_APB2RSTR_TIM8RST_Msk                 EQU (0x1 :SHL: RCC_APB2RSTR_TIM8RST_Pos) ;!< 0x00002000
RCC_APB2RSTR_TIM8RST                     EQU RCC_APB2RSTR_TIM8RST_Msk      ;!< TIM8 reset
RCC_APB2RSTR_USART1RST_Pos               EQU (14)
RCC_APB2RSTR_USART1RST_Msk               EQU (0x1 :SHL: RCC_APB2RSTR_USART1RST_Pos) ;!< 0x00004000
RCC_APB2RSTR_USART1RST                   EQU RCC_APB2RSTR_USART1RST_Msk    ;!< USART1 reset
RCC_APB2RSTR_SPI4RST_Pos                 EQU (15)
RCC_APB2RSTR_SPI4RST_Msk                 EQU (0x1 :SHL: RCC_APB2RSTR_SPI4RST_Pos) ;!< 0x00008000
RCC_APB2RSTR_SPI4RST                     EQU RCC_APB2RSTR_SPI4RST_Msk      ;!< SPI4 reset
RCC_APB2RSTR_TIM15RST_Pos                EQU (16)
RCC_APB2RSTR_TIM15RST_Msk                EQU (0x1 :SHL: RCC_APB2RSTR_TIM15RST_Pos) ;!< 0x00010000
RCC_APB2RSTR_TIM15RST                    EQU RCC_APB2RSTR_TIM15RST_Msk     ;!< TIM15 reset
RCC_APB2RSTR_TIM16RST_Pos                EQU (17)
RCC_APB2RSTR_TIM16RST_Msk                EQU (0x1 :SHL: RCC_APB2RSTR_TIM16RST_Pos) ;!< 0x00020000
RCC_APB2RSTR_TIM16RST                    EQU RCC_APB2RSTR_TIM16RST_Msk     ;!< TIM16 reset
RCC_APB2RSTR_TIM17RST_Pos                EQU (18)
RCC_APB2RSTR_TIM17RST_Msk                EQU (0x1 :SHL: RCC_APB2RSTR_TIM17RST_Pos) ;!< 0x00040000
RCC_APB2RSTR_TIM17RST                    EQU RCC_APB2RSTR_TIM17RST_Msk     ;!< TIM17 reset
RCC_APB2RSTR_TIM20RST_Pos                EQU (20)
RCC_APB2RSTR_TIM20RST_Msk                EQU (0x1 :SHL: RCC_APB2RSTR_TIM20RST_Pos) ;!< 0x00100000
RCC_APB2RSTR_TIM20RST                    EQU RCC_APB2RSTR_TIM20RST_Msk     ;!< TIM20 reset

;*****************  Bit definition for RCC_APB1RSTR register  *****************
RCC_APB1RSTR_TIM2RST_Pos                 EQU (0)
RCC_APB1RSTR_TIM2RST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_TIM2RST_Pos) ;!< 0x00000001
RCC_APB1RSTR_TIM2RST                     EQU RCC_APB1RSTR_TIM2RST_Msk      ;!< Timer 2 reset
RCC_APB1RSTR_TIM3RST_Pos                 EQU (1)
RCC_APB1RSTR_TIM3RST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_TIM3RST_Pos) ;!< 0x00000002
RCC_APB1RSTR_TIM3RST                     EQU RCC_APB1RSTR_TIM3RST_Msk      ;!< Timer 3 reset
RCC_APB1RSTR_TIM4RST_Pos                 EQU (2)
RCC_APB1RSTR_TIM4RST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_TIM4RST_Pos) ;!< 0x00000004
RCC_APB1RSTR_TIM4RST                     EQU RCC_APB1RSTR_TIM4RST_Msk      ;!< Timer 4 reset
RCC_APB1RSTR_TIM6RST_Pos                 EQU (4)
RCC_APB1RSTR_TIM6RST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_TIM6RST_Pos) ;!< 0x00000010
RCC_APB1RSTR_TIM6RST                     EQU RCC_APB1RSTR_TIM6RST_Msk      ;!< Timer 6 reset
RCC_APB1RSTR_TIM7RST_Pos                 EQU (5)
RCC_APB1RSTR_TIM7RST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_TIM7RST_Pos) ;!< 0x00000020
RCC_APB1RSTR_TIM7RST                     EQU RCC_APB1RSTR_TIM7RST_Msk      ;!< Timer 7 reset
RCC_APB1RSTR_WWDGRST_Pos                 EQU (11)
RCC_APB1RSTR_WWDGRST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_WWDGRST_Pos) ;!< 0x00000800
RCC_APB1RSTR_WWDGRST                     EQU RCC_APB1RSTR_WWDGRST_Msk      ;!< Window Watchdog reset
RCC_APB1RSTR_SPI2RST_Pos                 EQU (14)
RCC_APB1RSTR_SPI2RST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_SPI2RST_Pos) ;!< 0x00004000
RCC_APB1RSTR_SPI2RST                     EQU RCC_APB1RSTR_SPI2RST_Msk      ;!< SPI2 reset
RCC_APB1RSTR_SPI3RST_Pos                 EQU (15)
RCC_APB1RSTR_SPI3RST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_SPI3RST_Pos) ;!< 0x00008000
RCC_APB1RSTR_SPI3RST                     EQU RCC_APB1RSTR_SPI3RST_Msk      ;!< SPI3 reset
RCC_APB1RSTR_USART2RST_Pos               EQU (17)
RCC_APB1RSTR_USART2RST_Msk               EQU (0x1 :SHL: RCC_APB1RSTR_USART2RST_Pos) ;!< 0x00020000
RCC_APB1RSTR_USART2RST                   EQU RCC_APB1RSTR_USART2RST_Msk    ;!< USART 2 reset
RCC_APB1RSTR_USART3RST_Pos               EQU (18)
RCC_APB1RSTR_USART3RST_Msk               EQU (0x1 :SHL: RCC_APB1RSTR_USART3RST_Pos) ;!< 0x00040000
RCC_APB1RSTR_USART3RST                   EQU RCC_APB1RSTR_USART3RST_Msk    ;!< USART 3 reset
RCC_APB1RSTR_UART4RST_Pos                EQU (19)
RCC_APB1RSTR_UART4RST_Msk                EQU (0x1 :SHL: RCC_APB1RSTR_UART4RST_Pos) ;!< 0x00080000
RCC_APB1RSTR_UART4RST                    EQU RCC_APB1RSTR_UART4RST_Msk     ;!< UART 4 reset
RCC_APB1RSTR_UART5RST_Pos                EQU (20)
RCC_APB1RSTR_UART5RST_Msk                EQU (0x1 :SHL: RCC_APB1RSTR_UART5RST_Pos) ;!< 0x00100000
RCC_APB1RSTR_UART5RST                    EQU RCC_APB1RSTR_UART5RST_Msk     ;!< UART 5 reset
RCC_APB1RSTR_I2C1RST_Pos                 EQU (21)
RCC_APB1RSTR_I2C1RST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_I2C1RST_Pos) ;!< 0x00200000
RCC_APB1RSTR_I2C1RST                     EQU RCC_APB1RSTR_I2C1RST_Msk      ;!< I2C 1 reset
RCC_APB1RSTR_I2C2RST_Pos                 EQU (22)
RCC_APB1RSTR_I2C2RST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_I2C2RST_Pos) ;!< 0x00400000
RCC_APB1RSTR_I2C2RST                     EQU RCC_APB1RSTR_I2C2RST_Msk      ;!< I2C 2 reset
RCC_APB1RSTR_USBRST_Pos                  EQU (23)
RCC_APB1RSTR_USBRST_Msk                  EQU (0x1 :SHL: RCC_APB1RSTR_USBRST_Pos) ;!< 0x00800000
RCC_APB1RSTR_USBRST                      EQU RCC_APB1RSTR_USBRST_Msk       ;!< USB reset
RCC_APB1RSTR_CANRST_Pos                  EQU (25)
RCC_APB1RSTR_CANRST_Msk                  EQU (0x1 :SHL: RCC_APB1RSTR_CANRST_Pos) ;!< 0x02000000
RCC_APB1RSTR_CANRST                      EQU RCC_APB1RSTR_CANRST_Msk       ;!< CAN reset
RCC_APB1RSTR_PWRRST_Pos                  EQU (28)
RCC_APB1RSTR_PWRRST_Msk                  EQU (0x1 :SHL: RCC_APB1RSTR_PWRRST_Pos) ;!< 0x10000000
RCC_APB1RSTR_PWRRST                      EQU RCC_APB1RSTR_PWRRST_Msk       ;!< PWR reset
RCC_APB1RSTR_DAC1RST_Pos                 EQU (29)
RCC_APB1RSTR_DAC1RST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_DAC1RST_Pos) ;!< 0x20000000
RCC_APB1RSTR_DAC1RST                     EQU RCC_APB1RSTR_DAC1RST_Msk      ;!< DAC 1 reset
RCC_APB1RSTR_I2C3RST_Pos                 EQU (30)
RCC_APB1RSTR_I2C3RST_Msk                 EQU (0x1 :SHL: RCC_APB1RSTR_I2C3RST_Pos) ;!< 0x40000000
RCC_APB1RSTR_I2C3RST                     EQU RCC_APB1RSTR_I2C3RST_Msk      ;!< I2C 3 reset

;*****************  Bit definition for RCC_AHBENR register  *****************
RCC_AHBENR_DMA1EN_Pos                    EQU (0)
RCC_AHBENR_DMA1EN_Msk                    EQU (0x1 :SHL: RCC_AHBENR_DMA1EN_Pos) ;!< 0x00000001
RCC_AHBENR_DMA1EN                        EQU RCC_AHBENR_DMA1EN_Msk         ;!< DMA1 clock enable
RCC_AHBENR_DMA2EN_Pos                    EQU (1)
RCC_AHBENR_DMA2EN_Msk                    EQU (0x1 :SHL: RCC_AHBENR_DMA2EN_Pos) ;!< 0x00000002
RCC_AHBENR_DMA2EN                        EQU RCC_AHBENR_DMA2EN_Msk         ;!< DMA2 clock enable
RCC_AHBENR_SRAMEN_Pos                    EQU (2)
RCC_AHBENR_SRAMEN_Msk                    EQU (0x1 :SHL: RCC_AHBENR_SRAMEN_Pos) ;!< 0x00000004
RCC_AHBENR_SRAMEN                        EQU RCC_AHBENR_SRAMEN_Msk         ;!< SRAM interface clock enable
RCC_AHBENR_FLITFEN_Pos                   EQU (4)
RCC_AHBENR_FLITFEN_Msk                   EQU (0x1 :SHL: RCC_AHBENR_FLITFEN_Pos) ;!< 0x00000010
RCC_AHBENR_FLITFEN                       EQU RCC_AHBENR_FLITFEN_Msk        ;!< FLITF clock enable
RCC_AHBENR_FMCEN_Pos                     EQU (5)
RCC_AHBENR_FMCEN_Msk                     EQU (0x1 :SHL: RCC_AHBENR_FMCEN_Pos) ;!< 0x00000020
RCC_AHBENR_FMCEN                         EQU RCC_AHBENR_FMCEN_Msk          ;!< FMC clock enable
RCC_AHBENR_CRCEN_Pos                     EQU (6)
RCC_AHBENR_CRCEN_Msk                     EQU (0x1 :SHL: RCC_AHBENR_CRCEN_Pos) ;!< 0x00000040
RCC_AHBENR_CRCEN                         EQU RCC_AHBENR_CRCEN_Msk          ;!< CRC clock enable
RCC_AHBENR_GPIOHEN_Pos                   EQU (16)
RCC_AHBENR_GPIOHEN_Msk                   EQU (0x1 :SHL: RCC_AHBENR_GPIOHEN_Pos) ;!< 0x00010000
RCC_AHBENR_GPIOHEN                       EQU RCC_AHBENR_GPIOHEN_Msk        ;!< GPIOH clock enable
RCC_AHBENR_GPIOAEN_Pos                   EQU (17)
RCC_AHBENR_GPIOAEN_Msk                   EQU (0x1 :SHL: RCC_AHBENR_GPIOAEN_Pos) ;!< 0x00020000
RCC_AHBENR_GPIOAEN                       EQU RCC_AHBENR_GPIOAEN_Msk        ;!< GPIOA clock enable
RCC_AHBENR_GPIOBEN_Pos                   EQU (18)
RCC_AHBENR_GPIOBEN_Msk                   EQU (0x1 :SHL: RCC_AHBENR_GPIOBEN_Pos) ;!< 0x00040000
RCC_AHBENR_GPIOBEN                       EQU RCC_AHBENR_GPIOBEN_Msk        ;!< GPIOB clock enable
RCC_AHBENR_GPIOCEN_Pos                   EQU (19)
RCC_AHBENR_GPIOCEN_Msk                   EQU (0x1 :SHL: RCC_AHBENR_GPIOCEN_Pos) ;!< 0x00080000
RCC_AHBENR_GPIOCEN                       EQU RCC_AHBENR_GPIOCEN_Msk        ;!< GPIOC clock enable
RCC_AHBENR_GPIODEN_Pos                   EQU (20)
RCC_AHBENR_GPIODEN_Msk                   EQU (0x1 :SHL: RCC_AHBENR_GPIODEN_Pos) ;!< 0x00100000
RCC_AHBENR_GPIODEN                       EQU RCC_AHBENR_GPIODEN_Msk        ;!< GPIOD clock enable
RCC_AHBENR_GPIOEEN_Pos                   EQU (21)
RCC_AHBENR_GPIOEEN_Msk                   EQU (0x1 :SHL: RCC_AHBENR_GPIOEEN_Pos) ;!< 0x00200000
RCC_AHBENR_GPIOEEN                       EQU RCC_AHBENR_GPIOEEN_Msk        ;!< GPIOE clock enable
RCC_AHBENR_GPIOFEN_Pos                   EQU (22)
RCC_AHBENR_GPIOFEN_Msk                   EQU (0x1 :SHL: RCC_AHBENR_GPIOFEN_Pos) ;!< 0x00400000
RCC_AHBENR_GPIOFEN                       EQU RCC_AHBENR_GPIOFEN_Msk        ;!< GPIOF clock enable
RCC_AHBENR_GPIOGEN_Pos                   EQU (23)
RCC_AHBENR_GPIOGEN_Msk                   EQU (0x1 :SHL: RCC_AHBENR_GPIOGEN_Pos) ;!< 0x00800000
RCC_AHBENR_GPIOGEN                       EQU RCC_AHBENR_GPIOGEN_Msk        ;!< GPIOG clock enable
RCC_AHBENR_TSCEN_Pos                     EQU (24)
RCC_AHBENR_TSCEN_Msk                     EQU (0x1 :SHL: RCC_AHBENR_TSCEN_Pos) ;!< 0x01000000
RCC_AHBENR_TSCEN                         EQU RCC_AHBENR_TSCEN_Msk          ;!< TS clock enable
RCC_AHBENR_ADC12EN_Pos                   EQU (28)
RCC_AHBENR_ADC12EN_Msk                   EQU (0x1 :SHL: RCC_AHBENR_ADC12EN_Pos) ;!< 0x10000000
RCC_AHBENR_ADC12EN                       EQU RCC_AHBENR_ADC12EN_Msk        ;!< ADC1/ ADC2 clock enable
RCC_AHBENR_ADC34EN_Pos                   EQU (29)
RCC_AHBENR_ADC34EN_Msk                   EQU (0x1 :SHL: RCC_AHBENR_ADC34EN_Pos) ;!< 0x20000000
RCC_AHBENR_ADC34EN                       EQU RCC_AHBENR_ADC34EN_Msk        ;!< ADC3/ ADC4 clock enable

;****************  Bit definition for RCC_APB2ENR register  *****************
RCC_APB2ENR_SYSCFGEN_Pos                 EQU (0)
RCC_APB2ENR_SYSCFGEN_Msk                 EQU (0x1 :SHL: RCC_APB2ENR_SYSCFGEN_Pos) ;!< 0x00000001
RCC_APB2ENR_SYSCFGEN                     EQU RCC_APB2ENR_SYSCFGEN_Msk      ;!< SYSCFG clock enable
RCC_APB2ENR_TIM1EN_Pos                   EQU (11)
RCC_APB2ENR_TIM1EN_Msk                   EQU (0x1 :SHL: RCC_APB2ENR_TIM1EN_Pos) ;!< 0x00000800
RCC_APB2ENR_TIM1EN                       EQU RCC_APB2ENR_TIM1EN_Msk        ;!< TIM1 clock enable
RCC_APB2ENR_SPI1EN_Pos                   EQU (12)
RCC_APB2ENR_SPI1EN_Msk                   EQU (0x1 :SHL: RCC_APB2ENR_SPI1EN_Pos) ;!< 0x00001000
RCC_APB2ENR_SPI1EN                       EQU RCC_APB2ENR_SPI1EN_Msk        ;!< SPI1 clock enable
RCC_APB2ENR_TIM8EN_Pos                   EQU (13)
RCC_APB2ENR_TIM8EN_Msk                   EQU (0x1 :SHL: RCC_APB2ENR_TIM8EN_Pos) ;!< 0x00002000
RCC_APB2ENR_TIM8EN                       EQU RCC_APB2ENR_TIM8EN_Msk        ;!< TIM8 clock enable
RCC_APB2ENR_USART1EN_Pos                 EQU (14)
RCC_APB2ENR_USART1EN_Msk                 EQU (0x1 :SHL: RCC_APB2ENR_USART1EN_Pos) ;!< 0x00004000
RCC_APB2ENR_USART1EN                     EQU RCC_APB2ENR_USART1EN_Msk      ;!< USART1 clock enable
RCC_APB2ENR_SPI4EN_Pos                   EQU (15)
RCC_APB2ENR_SPI4EN_Msk                   EQU (0x1 :SHL: RCC_APB2ENR_SPI4EN_Pos) ;!< 0x00008000
RCC_APB2ENR_SPI4EN                       EQU RCC_APB2ENR_SPI4EN_Msk        ;!< SPI4 clock enable
RCC_APB2ENR_TIM15EN_Pos                  EQU (16)
RCC_APB2ENR_TIM15EN_Msk                  EQU (0x1 :SHL: RCC_APB2ENR_TIM15EN_Pos) ;!< 0x00010000
RCC_APB2ENR_TIM15EN                      EQU RCC_APB2ENR_TIM15EN_Msk       ;!< TIM15 clock enable
RCC_APB2ENR_TIM16EN_Pos                  EQU (17)
RCC_APB2ENR_TIM16EN_Msk                  EQU (0x1 :SHL: RCC_APB2ENR_TIM16EN_Pos) ;!< 0x00020000
RCC_APB2ENR_TIM16EN                      EQU RCC_APB2ENR_TIM16EN_Msk       ;!< TIM16 clock enable
RCC_APB2ENR_TIM17EN_Pos                  EQU (18)
RCC_APB2ENR_TIM17EN_Msk                  EQU (0x1 :SHL: RCC_APB2ENR_TIM17EN_Pos) ;!< 0x00040000
RCC_APB2ENR_TIM17EN                      EQU RCC_APB2ENR_TIM17EN_Msk       ;!< TIM17 clock enable
RCC_APB2ENR_TIM20EN_Pos                  EQU (20)
RCC_APB2ENR_TIM20EN_Msk                  EQU (0x1 :SHL: RCC_APB2ENR_TIM20EN_Pos) ;!< 0x00100000
RCC_APB2ENR_TIM20EN                      EQU RCC_APB2ENR_TIM20EN_Msk       ;!< TIM20 clock enable

;*****************  Bit definition for RCC_APB1ENR register  *****************
RCC_APB1ENR_TIM2EN_Pos                   EQU (0)
RCC_APB1ENR_TIM2EN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_TIM2EN_Pos) ;!< 0x00000001
RCC_APB1ENR_TIM2EN                       EQU RCC_APB1ENR_TIM2EN_Msk        ;!< Timer 2 clock enable
RCC_APB1ENR_TIM3EN_Pos                   EQU (1)
RCC_APB1ENR_TIM3EN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_TIM3EN_Pos) ;!< 0x00000002
RCC_APB1ENR_TIM3EN                       EQU RCC_APB1ENR_TIM3EN_Msk        ;!< Timer 3 clock enable
RCC_APB1ENR_TIM4EN_Pos                   EQU (2)
RCC_APB1ENR_TIM4EN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_TIM4EN_Pos) ;!< 0x00000004
RCC_APB1ENR_TIM4EN                       EQU RCC_APB1ENR_TIM4EN_Msk        ;!< Timer 4 clock enable
RCC_APB1ENR_TIM6EN_Pos                   EQU (4)
RCC_APB1ENR_TIM6EN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_TIM6EN_Pos) ;!< 0x00000010
RCC_APB1ENR_TIM6EN                       EQU RCC_APB1ENR_TIM6EN_Msk        ;!< Timer 6 clock enable
RCC_APB1ENR_TIM7EN_Pos                   EQU (5)
RCC_APB1ENR_TIM7EN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_TIM7EN_Pos) ;!< 0x00000020
RCC_APB1ENR_TIM7EN                       EQU RCC_APB1ENR_TIM7EN_Msk        ;!< Timer 7 clock enable
RCC_APB1ENR_WWDGEN_Pos                   EQU (11)
RCC_APB1ENR_WWDGEN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_WWDGEN_Pos) ;!< 0x00000800
RCC_APB1ENR_WWDGEN                       EQU RCC_APB1ENR_WWDGEN_Msk        ;!< Window Watchdog clock enable
RCC_APB1ENR_SPI2EN_Pos                   EQU (14)
RCC_APB1ENR_SPI2EN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_SPI2EN_Pos) ;!< 0x00004000
RCC_APB1ENR_SPI2EN                       EQU RCC_APB1ENR_SPI2EN_Msk        ;!< SPI2 clock enable
RCC_APB1ENR_SPI3EN_Pos                   EQU (15)
RCC_APB1ENR_SPI3EN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_SPI3EN_Pos) ;!< 0x00008000
RCC_APB1ENR_SPI3EN                       EQU RCC_APB1ENR_SPI3EN_Msk        ;!< SPI3 clock enable
RCC_APB1ENR_USART2EN_Pos                 EQU (17)
RCC_APB1ENR_USART2EN_Msk                 EQU (0x1 :SHL: RCC_APB1ENR_USART2EN_Pos) ;!< 0x00020000
RCC_APB1ENR_USART2EN                     EQU RCC_APB1ENR_USART2EN_Msk      ;!< USART 2 clock enable
RCC_APB1ENR_USART3EN_Pos                 EQU (18)
RCC_APB1ENR_USART3EN_Msk                 EQU (0x1 :SHL: RCC_APB1ENR_USART3EN_Pos) ;!< 0x00040000
RCC_APB1ENR_USART3EN                     EQU RCC_APB1ENR_USART3EN_Msk      ;!< USART 3 clock enable
RCC_APB1ENR_UART4EN_Pos                  EQU (19)
RCC_APB1ENR_UART4EN_Msk                  EQU (0x1 :SHL: RCC_APB1ENR_UART4EN_Pos) ;!< 0x00080000
RCC_APB1ENR_UART4EN                      EQU RCC_APB1ENR_UART4EN_Msk       ;!< UART 4 clock enable
RCC_APB1ENR_UART5EN_Pos                  EQU (20)
RCC_APB1ENR_UART5EN_Msk                  EQU (0x1 :SHL: RCC_APB1ENR_UART5EN_Pos) ;!< 0x00100000
RCC_APB1ENR_UART5EN                      EQU RCC_APB1ENR_UART5EN_Msk       ;!< UART 5 clock enable
RCC_APB1ENR_I2C1EN_Pos                   EQU (21)
RCC_APB1ENR_I2C1EN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_I2C1EN_Pos) ;!< 0x00200000
RCC_APB1ENR_I2C1EN                       EQU RCC_APB1ENR_I2C1EN_Msk        ;!< I2C 1 clock enable
RCC_APB1ENR_I2C2EN_Pos                   EQU (22)
RCC_APB1ENR_I2C2EN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_I2C2EN_Pos) ;!< 0x00400000
RCC_APB1ENR_I2C2EN                       EQU RCC_APB1ENR_I2C2EN_Msk        ;!< I2C 2 clock enable
RCC_APB1ENR_USBEN_Pos                    EQU (23)
RCC_APB1ENR_USBEN_Msk                    EQU (0x1 :SHL: RCC_APB1ENR_USBEN_Pos) ;!< 0x00800000
RCC_APB1ENR_USBEN                        EQU RCC_APB1ENR_USBEN_Msk         ;!< USB clock enable
RCC_APB1ENR_CANEN_Pos                    EQU (25)
RCC_APB1ENR_CANEN_Msk                    EQU (0x1 :SHL: RCC_APB1ENR_CANEN_Pos) ;!< 0x02000000
RCC_APB1ENR_CANEN                        EQU RCC_APB1ENR_CANEN_Msk         ;!< CAN clock enable
RCC_APB1ENR_PWREN_Pos                    EQU (28)
RCC_APB1ENR_PWREN_Msk                    EQU (0x1 :SHL: RCC_APB1ENR_PWREN_Pos) ;!< 0x10000000
RCC_APB1ENR_PWREN                        EQU RCC_APB1ENR_PWREN_Msk         ;!< PWR clock enable
RCC_APB1ENR_DAC1EN_Pos                   EQU (29)
RCC_APB1ENR_DAC1EN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_DAC1EN_Pos) ;!< 0x20000000
RCC_APB1ENR_DAC1EN                       EQU RCC_APB1ENR_DAC1EN_Msk        ;!< DAC 1 clock enable
RCC_APB1ENR_I2C3EN_Pos                   EQU (30)
RCC_APB1ENR_I2C3EN_Msk                   EQU (0x1 :SHL: RCC_APB1ENR_I2C3EN_Pos) ;!< 0x40000000
RCC_APB1ENR_I2C3EN                       EQU RCC_APB1ENR_I2C3EN_Msk        ;!< I2C 3 clock enable

;*******************  Bit definition for RCC_BDCR register  *****************
RCC_BDCR_LSE_Pos                         EQU (0)
RCC_BDCR_LSE_Msk                         EQU (0x7 :SHL: RCC_BDCR_LSE_Pos)    ;!< 0x00000007
RCC_BDCR_LSE                             EQU RCC_BDCR_LSE_Msk              ;!< External Low Speed oscillator [2:0] bits
RCC_BDCR_LSEON_Pos                       EQU (0)
RCC_BDCR_LSEON_Msk                       EQU (0x1 :SHL: RCC_BDCR_LSEON_Pos)  ;!< 0x00000001
RCC_BDCR_LSEON                           EQU RCC_BDCR_LSEON_Msk            ;!< External Low Speed oscillator enable
RCC_BDCR_LSERDY_Pos                      EQU (1)
RCC_BDCR_LSERDY_Msk                      EQU (0x1 :SHL: RCC_BDCR_LSERDY_Pos) ;!< 0x00000002
RCC_BDCR_LSERDY                          EQU RCC_BDCR_LSERDY_Msk           ;!< External Low Speed oscillator Ready
RCC_BDCR_LSEBYP_Pos                      EQU (2)
RCC_BDCR_LSEBYP_Msk                      EQU (0x1 :SHL: RCC_BDCR_LSEBYP_Pos) ;!< 0x00000004
RCC_BDCR_LSEBYP                          EQU RCC_BDCR_LSEBYP_Msk           ;!< External Low Speed oscillator Bypass

RCC_BDCR_LSEDRV_Pos                      EQU (3)
RCC_BDCR_LSEDRV_Msk                      EQU (0x3 :SHL: RCC_BDCR_LSEDRV_Pos) ;!< 0x00000018
RCC_BDCR_LSEDRV                          EQU RCC_BDCR_LSEDRV_Msk           ;!< LSEDRV[1:0] bits (LSE Osc. drive capability)
RCC_BDCR_LSEDRV_0                        EQU (0x1 :SHL: RCC_BDCR_LSEDRV_Pos) ;!< 0x00000008
RCC_BDCR_LSEDRV_1                        EQU (0x2 :SHL: RCC_BDCR_LSEDRV_Pos) ;!< 0x00000010

RCC_BDCR_RTCSEL_Pos                      EQU (8)
RCC_BDCR_RTCSEL_Msk                      EQU (0x3 :SHL: RCC_BDCR_RTCSEL_Pos) ;!< 0x00000300
RCC_BDCR_RTCSEL                          EQU RCC_BDCR_RTCSEL_Msk           ;!< RTCSEL[1:0] bits (RTC clock source selection)
RCC_BDCR_RTCSEL_0                        EQU (0x1 :SHL: RCC_BDCR_RTCSEL_Pos) ;!< 0x00000100
RCC_BDCR_RTCSEL_1                        EQU (0x2 :SHL: RCC_BDCR_RTCSEL_Pos) ;!< 0x00000200

;!< RTC configuration
RCC_BDCR_RTCSEL_NOCLOCK                  EQU (0x00000000)                 ;!< No clock
RCC_BDCR_RTCSEL_LSE                      EQU (0x00000100)                 ;!< LSE oscillator clock used as RTC clock
RCC_BDCR_RTCSEL_LSI                      EQU (0x00000200)                 ;!< LSI oscillator clock used as RTC clock
RCC_BDCR_RTCSEL_HSE                      EQU (0x00000300)                 ;!< HSE oscillator clock divided by 32 used as RTC clock

RCC_BDCR_RTCEN_Pos                       EQU (15)
RCC_BDCR_RTCEN_Msk                       EQU (0x1 :SHL: RCC_BDCR_RTCEN_Pos)  ;!< 0x00008000
RCC_BDCR_RTCEN                           EQU RCC_BDCR_RTCEN_Msk            ;!< RTC clock enable
RCC_BDCR_BDRST_Pos                       EQU (16)
RCC_BDCR_BDRST_Msk                       EQU (0x1 :SHL: RCC_BDCR_BDRST_Pos)  ;!< 0x00010000
RCC_BDCR_BDRST                           EQU RCC_BDCR_BDRST_Msk            ;!< Backup domain software reset

;*******************  Bit definition for RCC_CSR register  ******************
RCC_CSR_LSION_Pos                        EQU (0)
RCC_CSR_LSION_Msk                        EQU (0x1 :SHL: RCC_CSR_LSION_Pos)   ;!< 0x00000001
RCC_CSR_LSION                            EQU RCC_CSR_LSION_Msk             ;!< Internal Low Speed oscillator enable
RCC_CSR_LSIRDY_Pos                       EQU (1)
RCC_CSR_LSIRDY_Msk                       EQU (0x1 :SHL: RCC_CSR_LSIRDY_Pos)  ;!< 0x00000002
RCC_CSR_LSIRDY                           EQU RCC_CSR_LSIRDY_Msk            ;!< Internal Low Speed oscillator Ready
RCC_CSR_V18PWRRSTF_Pos                   EQU (23)
RCC_CSR_V18PWRRSTF_Msk                   EQU (0x1 :SHL: RCC_CSR_V18PWRRSTF_Pos) ;!< 0x00800000
RCC_CSR_V18PWRRSTF                       EQU RCC_CSR_V18PWRRSTF_Msk        ;!< V1.8 power domain reset flag
RCC_CSR_RMVF_Pos                         EQU (24)
RCC_CSR_RMVF_Msk                         EQU (0x1 :SHL: RCC_CSR_RMVF_Pos)    ;!< 0x01000000
RCC_CSR_RMVF                             EQU RCC_CSR_RMVF_Msk              ;!< Remove reset flag
RCC_CSR_OBLRSTF_Pos                      EQU (25)
RCC_CSR_OBLRSTF_Msk                      EQU (0x1 :SHL: RCC_CSR_OBLRSTF_Pos) ;!< 0x02000000
RCC_CSR_OBLRSTF                          EQU RCC_CSR_OBLRSTF_Msk           ;!< OBL reset flag
RCC_CSR_PINRSTF_Pos                      EQU (26)
RCC_CSR_PINRSTF_Msk                      EQU (0x1 :SHL: RCC_CSR_PINRSTF_Pos) ;!< 0x04000000
RCC_CSR_PINRSTF                          EQU RCC_CSR_PINRSTF_Msk           ;!< PIN reset flag
RCC_CSR_PORRSTF_Pos                      EQU (27)
RCC_CSR_PORRSTF_Msk                      EQU (0x1 :SHL: RCC_CSR_PORRSTF_Pos) ;!< 0x08000000
RCC_CSR_PORRSTF                          EQU RCC_CSR_PORRSTF_Msk           ;!< POR/PDR reset flag
RCC_CSR_SFTRSTF_Pos                      EQU (28)
RCC_CSR_SFTRSTF_Msk                      EQU (0x1 :SHL: RCC_CSR_SFTRSTF_Pos) ;!< 0x10000000
RCC_CSR_SFTRSTF                          EQU RCC_CSR_SFTRSTF_Msk           ;!< Software Reset flag
RCC_CSR_IWDGRSTF_Pos                     EQU (29)
RCC_CSR_IWDGRSTF_Msk                     EQU (0x1 :SHL: RCC_CSR_IWDGRSTF_Pos) ;!< 0x20000000
RCC_CSR_IWDGRSTF                         EQU RCC_CSR_IWDGRSTF_Msk          ;!< Independent Watchdog reset flag
RCC_CSR_WWDGRSTF_Pos                     EQU (30)
RCC_CSR_WWDGRSTF_Msk                     EQU (0x1 :SHL: RCC_CSR_WWDGRSTF_Pos) ;!< 0x40000000
RCC_CSR_WWDGRSTF                         EQU RCC_CSR_WWDGRSTF_Msk          ;!< Window watchdog reset flag
RCC_CSR_LPWRRSTF_Pos                     EQU (31)
RCC_CSR_LPWRRSTF_Msk                     EQU (0x1 :SHL: RCC_CSR_LPWRRSTF_Pos) ;!< 0x80000000
RCC_CSR_LPWRRSTF                         EQU RCC_CSR_LPWRRSTF_Msk          ;!< Low-Power reset flag

; Legacy defines
RCC_CSR_VREGRSTF                    EQU RCC_CSR_V18PWRRSTF

;******************  Bit definition for RCC_AHBRSTR register  ***************
RCC_AHBRSTR_FMCRST_Pos                   EQU (5)
RCC_AHBRSTR_FMCRST_Msk                   EQU (0x1 :SHL: RCC_AHBRSTR_FMCRST_Pos) ;!< 0x00000020
RCC_AHBRSTR_FMCRST                       EQU RCC_AHBRSTR_FMCRST_Msk        ;!< FMC reset
RCC_AHBRSTR_GPIOHRST_Pos                 EQU (16)
RCC_AHBRSTR_GPIOHRST_Msk                 EQU (0x1 :SHL: RCC_AHBRSTR_GPIOHRST_Pos) ;!< 0x00010000
RCC_AHBRSTR_GPIOHRST                     EQU RCC_AHBRSTR_GPIOHRST_Msk      ;!< GPIOH reset
RCC_AHBRSTR_GPIOARST_Pos                 EQU (17)
RCC_AHBRSTR_GPIOARST_Msk                 EQU (0x1 :SHL: RCC_AHBRSTR_GPIOARST_Pos) ;!< 0x00020000
RCC_AHBRSTR_GPIOARST                     EQU RCC_AHBRSTR_GPIOARST_Msk      ;!< GPIOA reset
RCC_AHBRSTR_GPIOBRST_Pos                 EQU (18)
RCC_AHBRSTR_GPIOBRST_Msk                 EQU (0x1 :SHL: RCC_AHBRSTR_GPIOBRST_Pos) ;!< 0x00040000
RCC_AHBRSTR_GPIOBRST                     EQU RCC_AHBRSTR_GPIOBRST_Msk      ;!< GPIOB reset
RCC_AHBRSTR_GPIOCRST_Pos                 EQU (19)
RCC_AHBRSTR_GPIOCRST_Msk                 EQU (0x1 :SHL: RCC_AHBRSTR_GPIOCRST_Pos) ;!< 0x00080000
RCC_AHBRSTR_GPIOCRST                     EQU RCC_AHBRSTR_GPIOCRST_Msk      ;!< GPIOC reset
RCC_AHBRSTR_GPIODRST_Pos                 EQU (20)
RCC_AHBRSTR_GPIODRST_Msk                 EQU (0x1 :SHL: RCC_AHBRSTR_GPIODRST_Pos) ;!< 0x00100000
RCC_AHBRSTR_GPIODRST                     EQU RCC_AHBRSTR_GPIODRST_Msk      ;!< GPIOD reset
RCC_AHBRSTR_GPIOERST_Pos                 EQU (21)
RCC_AHBRSTR_GPIOERST_Msk                 EQU (0x1 :SHL: RCC_AHBRSTR_GPIOERST_Pos) ;!< 0x00200000
RCC_AHBRSTR_GPIOERST                     EQU RCC_AHBRSTR_GPIOERST_Msk      ;!< GPIOE reset
RCC_AHBRSTR_GPIOFRST_Pos                 EQU (22)
RCC_AHBRSTR_GPIOFRST_Msk                 EQU (0x1 :SHL: RCC_AHBRSTR_GPIOFRST_Pos) ;!< 0x00400000
RCC_AHBRSTR_GPIOFRST                     EQU RCC_AHBRSTR_GPIOFRST_Msk      ;!< GPIOF reset
RCC_AHBRSTR_GPIOGRST_Pos                 EQU (23)
RCC_AHBRSTR_GPIOGRST_Msk                 EQU (0x1 :SHL: RCC_AHBRSTR_GPIOGRST_Pos) ;!< 0x00800000
RCC_AHBRSTR_GPIOGRST                     EQU RCC_AHBRSTR_GPIOGRST_Msk      ;!< GPIOG reset
RCC_AHBRSTR_TSCRST_Pos                   EQU (24)
RCC_AHBRSTR_TSCRST_Msk                   EQU (0x1 :SHL: RCC_AHBRSTR_TSCRST_Pos) ;!< 0x01000000
RCC_AHBRSTR_TSCRST                       EQU RCC_AHBRSTR_TSCRST_Msk        ;!< TSC reset
RCC_AHBRSTR_ADC12RST_Pos                 EQU (28)
RCC_AHBRSTR_ADC12RST_Msk                 EQU (0x1 :SHL: RCC_AHBRSTR_ADC12RST_Pos) ;!< 0x10000000
RCC_AHBRSTR_ADC12RST                     EQU RCC_AHBRSTR_ADC12RST_Msk      ;!< ADC1 & ADC2 reset
RCC_AHBRSTR_ADC34RST_Pos                 EQU (29)
RCC_AHBRSTR_ADC34RST_Msk                 EQU (0x1 :SHL: RCC_AHBRSTR_ADC34RST_Pos) ;!< 0x20000000
RCC_AHBRSTR_ADC34RST                     EQU RCC_AHBRSTR_ADC34RST_Msk      ;!< ADC3 & ADC4 reset

;******************  Bit definition for RCC_CFGR2 register  *****************
;!< PREDIV configuration
RCC_CFGR2_PREDIV_Pos                     EQU (0)
RCC_CFGR2_PREDIV_Msk                     EQU (0xF :SHL: RCC_CFGR2_PREDIV_Pos) ;!< 0x0000000F
RCC_CFGR2_PREDIV                         EQU RCC_CFGR2_PREDIV_Msk          ;!< PREDIV[3:0] bits
RCC_CFGR2_PREDIV_0                       EQU (0x1 :SHL: RCC_CFGR2_PREDIV_Pos) ;!< 0x00000001
RCC_CFGR2_PREDIV_1                       EQU (0x2 :SHL: RCC_CFGR2_PREDIV_Pos) ;!< 0x00000002
RCC_CFGR2_PREDIV_2                       EQU (0x4 :SHL: RCC_CFGR2_PREDIV_Pos) ;!< 0x00000004
RCC_CFGR2_PREDIV_3                       EQU (0x8 :SHL: RCC_CFGR2_PREDIV_Pos) ;!< 0x00000008

RCC_CFGR2_PREDIV_DIV1                    EQU (0x00000000)                 ;!< PREDIV input clock not divided
RCC_CFGR2_PREDIV_DIV2                    EQU (0x00000001)                 ;!< PREDIV input clock divided by 2
RCC_CFGR2_PREDIV_DIV3                    EQU (0x00000002)                 ;!< PREDIV input clock divided by 3
RCC_CFGR2_PREDIV_DIV4                    EQU (0x00000003)                 ;!< PREDIV input clock divided by 4
RCC_CFGR2_PREDIV_DIV5                    EQU (0x00000004)                 ;!< PREDIV input clock divided by 5
RCC_CFGR2_PREDIV_DIV6                    EQU (0x00000005)                 ;!< PREDIV input clock divided by 6
RCC_CFGR2_PREDIV_DIV7                    EQU (0x00000006)                 ;!< PREDIV input clock divided by 7
RCC_CFGR2_PREDIV_DIV8                    EQU (0x00000007)                 ;!< PREDIV input clock divided by 8
RCC_CFGR2_PREDIV_DIV9                    EQU (0x00000008)                 ;!< PREDIV input clock divided by 9
RCC_CFGR2_PREDIV_DIV10                   EQU (0x00000009)                 ;!< PREDIV input clock divided by 10
RCC_CFGR2_PREDIV_DIV11                   EQU (0x0000000A)                 ;!< PREDIV input clock divided by 11
RCC_CFGR2_PREDIV_DIV12                   EQU (0x0000000B)                 ;!< PREDIV input clock divided by 12
RCC_CFGR2_PREDIV_DIV13                   EQU (0x0000000C)                 ;!< PREDIV input clock divided by 13
RCC_CFGR2_PREDIV_DIV14                   EQU (0x0000000D)                 ;!< PREDIV input clock divided by 14
RCC_CFGR2_PREDIV_DIV15                   EQU (0x0000000E)                 ;!< PREDIV input clock divided by 15
RCC_CFGR2_PREDIV_DIV16                   EQU (0x0000000F)                 ;!< PREDIV input clock divided by 16

;!< ADCPRE12 configuration
RCC_CFGR2_ADCPRE12_Pos                   EQU (4)
RCC_CFGR2_ADCPRE12_Msk                   EQU (0x1F :SHL: RCC_CFGR2_ADCPRE12_Pos) ;!< 0x000001F0
RCC_CFGR2_ADCPRE12                       EQU RCC_CFGR2_ADCPRE12_Msk        ;!< ADCPRE12[8:4] bits
RCC_CFGR2_ADCPRE12_0                     EQU (0x01 :SHL: RCC_CFGR2_ADCPRE12_Pos) ;!< 0x00000010
RCC_CFGR2_ADCPRE12_1                     EQU (0x02 :SHL: RCC_CFGR2_ADCPRE12_Pos) ;!< 0x00000020
RCC_CFGR2_ADCPRE12_2                     EQU (0x04 :SHL: RCC_CFGR2_ADCPRE12_Pos) ;!< 0x00000040
RCC_CFGR2_ADCPRE12_3                     EQU (0x08 :SHL: RCC_CFGR2_ADCPRE12_Pos) ;!< 0x00000080
RCC_CFGR2_ADCPRE12_4                     EQU (0x10 :SHL: RCC_CFGR2_ADCPRE12_Pos) ;!< 0x00000100

RCC_CFGR2_ADCPRE12_NO                    EQU (0x00000000)                 ;!< ADC12 clock disabled, ADC12 can use AHB clock
RCC_CFGR2_ADCPRE12_DIV1                  EQU (0x00000100)                 ;!< ADC12 PLL clock divided by 1
RCC_CFGR2_ADCPRE12_DIV2                  EQU (0x00000110)                 ;!< ADC12 PLL clock divided by 2
RCC_CFGR2_ADCPRE12_DIV4                  EQU (0x00000120)                 ;!< ADC12 PLL clock divided by 4
RCC_CFGR2_ADCPRE12_DIV6                  EQU (0x00000130)                 ;!< ADC12 PLL clock divided by 6
RCC_CFGR2_ADCPRE12_DIV8                  EQU (0x00000140)                 ;!< ADC12 PLL clock divided by 8
RCC_CFGR2_ADCPRE12_DIV10                 EQU (0x00000150)                 ;!< ADC12 PLL clock divided by 10
RCC_CFGR2_ADCPRE12_DIV12                 EQU (0x00000160)                 ;!< ADC12 PLL clock divided by 12
RCC_CFGR2_ADCPRE12_DIV16                 EQU (0x00000170)                 ;!< ADC12 PLL clock divided by 16
RCC_CFGR2_ADCPRE12_DIV32                 EQU (0x00000180)                 ;!< ADC12 PLL clock divided by 32
RCC_CFGR2_ADCPRE12_DIV64                 EQU (0x00000190)                 ;!< ADC12 PLL clock divided by 64
RCC_CFGR2_ADCPRE12_DIV128                EQU (0x000001A0)                 ;!< ADC12 PLL clock divided by 128
RCC_CFGR2_ADCPRE12_DIV256                EQU (0x000001B0)                 ;!< ADC12 PLL clock divided by 256

;!< ADCPRE34 configuration
RCC_CFGR2_ADCPRE34_Pos                   EQU (9)
RCC_CFGR2_ADCPRE34_Msk                   EQU (0x1F :SHL: RCC_CFGR2_ADCPRE34_Pos) ;!< 0x00003E00
RCC_CFGR2_ADCPRE34                       EQU RCC_CFGR2_ADCPRE34_Msk        ;!< ADCPRE34[13:5] bits
RCC_CFGR2_ADCPRE34_0                     EQU (0x01 :SHL: RCC_CFGR2_ADCPRE34_Pos) ;!< 0x00000200
RCC_CFGR2_ADCPRE34_1                     EQU (0x02 :SHL: RCC_CFGR2_ADCPRE34_Pos) ;!< 0x00000400
RCC_CFGR2_ADCPRE34_2                     EQU (0x04 :SHL: RCC_CFGR2_ADCPRE34_Pos) ;!< 0x00000800
RCC_CFGR2_ADCPRE34_3                     EQU (0x08 :SHL: RCC_CFGR2_ADCPRE34_Pos) ;!< 0x00001000
RCC_CFGR2_ADCPRE34_4                     EQU (0x10 :SHL: RCC_CFGR2_ADCPRE34_Pos) ;!< 0x00002000

RCC_CFGR2_ADCPRE34_NO                    EQU (0x00000000)                 ;!< ADC34 clock disabled, ADC34 can use AHB clock
RCC_CFGR2_ADCPRE34_DIV1                  EQU (0x00002000)                 ;!< ADC34 PLL clock divided by 1
RCC_CFGR2_ADCPRE34_DIV2                  EQU (0x00002200)                 ;!< ADC34 PLL clock divided by 2
RCC_CFGR2_ADCPRE34_DIV4                  EQU (0x00002400)                 ;!< ADC34 PLL clock divided by 4
RCC_CFGR2_ADCPRE34_DIV6                  EQU (0x00002600)                 ;!< ADC34 PLL clock divided by 6
RCC_CFGR2_ADCPRE34_DIV8                  EQU (0x00002800)                 ;!< ADC34 PLL clock divided by 8
RCC_CFGR2_ADCPRE34_DIV10                 EQU (0x00002A00)                 ;!< ADC34 PLL clock divided by 10
RCC_CFGR2_ADCPRE34_DIV12                 EQU (0x00002C00)                 ;!< ADC34 PLL clock divided by 12
RCC_CFGR2_ADCPRE34_DIV16                 EQU (0x00002E00)                 ;!< ADC34 PLL clock divided by 16
RCC_CFGR2_ADCPRE34_DIV32                 EQU (0x00003000)                 ;!< ADC34 PLL clock divided by 32
RCC_CFGR2_ADCPRE34_DIV64                 EQU (0x00003200)                 ;!< ADC34 PLL clock divided by 64
RCC_CFGR2_ADCPRE34_DIV128                EQU (0x00003400)                 ;!< ADC34 PLL clock divided by 128
RCC_CFGR2_ADCPRE34_DIV256                EQU (0x00003600)                 ;!< ADC34 PLL clock divided by 256

;******************  Bit definition for RCC_CFGR3 register  *****************
RCC_CFGR3_USART1SW_Pos                   EQU (0)
RCC_CFGR3_USART1SW_Msk                   EQU (0x3 :SHL: RCC_CFGR3_USART1SW_Pos) ;!< 0x00000003
RCC_CFGR3_USART1SW                       EQU RCC_CFGR3_USART1SW_Msk        ;!< USART1SW[1:0] bits
RCC_CFGR3_USART1SW_0                     EQU (0x1 :SHL: RCC_CFGR3_USART1SW_Pos) ;!< 0x00000001
RCC_CFGR3_USART1SW_1                     EQU (0x2 :SHL: RCC_CFGR3_USART1SW_Pos) ;!< 0x00000002

RCC_CFGR3_USART1SW_PCLK2                 EQU (0x00000000)                 ;!< PCLK2 clock used as USART1 clock source
RCC_CFGR3_USART1SW_SYSCLK                EQU (0x00000001)                 ;!< System clock selected as USART1 clock source
RCC_CFGR3_USART1SW_LSE                   EQU (0x00000002)                 ;!< LSE oscillator clock used as USART1 clock source
RCC_CFGR3_USART1SW_HSI                   EQU (0x00000003)                 ;!< HSI oscillator clock used as USART1 clock source
; Legacy defines
RCC_CFGR3_USART1SW_PCLK             EQU RCC_CFGR3_USART1SW_PCLK2

RCC_CFGR3_I2CSW_Pos                      EQU (4)
RCC_CFGR3_I2CSW_Msk                      EQU (0x7 :SHL: RCC_CFGR3_I2CSW_Pos) ;!< 0x00000070
RCC_CFGR3_I2CSW                          EQU RCC_CFGR3_I2CSW_Msk           ;!< I2CSW bits
RCC_CFGR3_I2C1SW_Pos                     EQU (4)
RCC_CFGR3_I2C1SW_Msk                     EQU (0x1 :SHL: RCC_CFGR3_I2C1SW_Pos) ;!< 0x00000010
RCC_CFGR3_I2C1SW                         EQU RCC_CFGR3_I2C1SW_Msk          ;!< I2C1SW bits
RCC_CFGR3_I2C2SW_Pos                     EQU (5)
RCC_CFGR3_I2C2SW_Msk                     EQU (0x1 :SHL: RCC_CFGR3_I2C2SW_Pos) ;!< 0x00000020
RCC_CFGR3_I2C2SW                         EQU RCC_CFGR3_I2C2SW_Msk          ;!< I2C2SW bits
RCC_CFGR3_I2C3SW_Pos                     EQU (6)
RCC_CFGR3_I2C3SW_Msk                     EQU (0x1 :SHL: RCC_CFGR3_I2C3SW_Pos) ;!< 0x00000040
RCC_CFGR3_I2C3SW                         EQU RCC_CFGR3_I2C3SW_Msk          ;!< I2C3SW bits

RCC_CFGR3_I2C1SW_HSI                     EQU (0x00000000)                 ;!< HSI oscillator clock used as I2C1 clock source
RCC_CFGR3_I2C1SW_SYSCLK_Pos              EQU (4)
RCC_CFGR3_I2C1SW_SYSCLK_Msk              EQU (0x1 :SHL: RCC_CFGR3_I2C1SW_SYSCLK_Pos) ;!< 0x00000010
RCC_CFGR3_I2C1SW_SYSCLK                  EQU RCC_CFGR3_I2C1SW_SYSCLK_Msk   ;!< System clock selected as I2C1 clock source
RCC_CFGR3_I2C2SW_HSI                     EQU (0x00000000)                 ;!< HSI oscillator clock used as I2C2 clock source
RCC_CFGR3_I2C2SW_SYSCLK_Pos              EQU (5)
RCC_CFGR3_I2C2SW_SYSCLK_Msk              EQU (0x1 :SHL: RCC_CFGR3_I2C2SW_SYSCLK_Pos) ;!< 0x00000020
RCC_CFGR3_I2C2SW_SYSCLK                  EQU RCC_CFGR3_I2C2SW_SYSCLK_Msk   ;!< System clock selected as I2C2 clock source
RCC_CFGR3_I2C3SW_HSI                     EQU (0x00000000)                 ;!< HSI oscillator clock used as I2C3 clock source
RCC_CFGR3_I2C3SW_SYSCLK_Pos              EQU (6)
RCC_CFGR3_I2C3SW_SYSCLK_Msk              EQU (0x1 :SHL: RCC_CFGR3_I2C3SW_SYSCLK_Pos) ;!< 0x00000040
RCC_CFGR3_I2C3SW_SYSCLK                  EQU RCC_CFGR3_I2C3SW_SYSCLK_Msk   ;!< System clock selected as I2C3 clock source

RCC_CFGR3_TIMSW_Pos                      EQU (8)
RCC_CFGR3_TIMSW_Msk                      EQU (0xAF :SHL: RCC_CFGR3_TIMSW_Pos) ;!< 0x0000AF00
RCC_CFGR3_TIMSW                          EQU RCC_CFGR3_TIMSW_Msk           ;!< TIMSW bits
RCC_CFGR3_TIM1SW_Pos                     EQU (8)
RCC_CFGR3_TIM1SW_Msk                     EQU (0x1 :SHL: RCC_CFGR3_TIM1SW_Pos) ;!< 0x00000100
RCC_CFGR3_TIM1SW                         EQU RCC_CFGR3_TIM1SW_Msk          ;!< TIM1SW bits
RCC_CFGR3_TIM8SW_Pos                     EQU (9)
RCC_CFGR3_TIM8SW_Msk                     EQU (0x1 :SHL: RCC_CFGR3_TIM8SW_Pos) ;!< 0x00000200
RCC_CFGR3_TIM8SW                         EQU RCC_CFGR3_TIM8SW_Msk          ;!< TIM8SW bits
RCC_CFGR3_TIM15SW_Pos                    EQU (10)
RCC_CFGR3_TIM15SW_Msk                    EQU (0x1 :SHL: RCC_CFGR3_TIM15SW_Pos) ;!< 0x00000400
RCC_CFGR3_TIM15SW                        EQU RCC_CFGR3_TIM15SW_Msk         ;!< TIM15SW bits
RCC_CFGR3_TIM16SW_Pos                    EQU (11)
RCC_CFGR3_TIM16SW_Msk                    EQU (0x1 :SHL: RCC_CFGR3_TIM16SW_Pos) ;!< 0x00000800
RCC_CFGR3_TIM16SW                        EQU RCC_CFGR3_TIM16SW_Msk         ;!< TIM16SW bits
RCC_CFGR3_TIM17SW_Pos                    EQU (13)
RCC_CFGR3_TIM17SW_Msk                    EQU (0x1 :SHL: RCC_CFGR3_TIM17SW_Pos) ;!< 0x00002000
RCC_CFGR3_TIM17SW                        EQU RCC_CFGR3_TIM17SW_Msk         ;!< TIM17SW bits
RCC_CFGR3_TIM20SW_Pos                    EQU (15)
RCC_CFGR3_TIM20SW_Msk                    EQU (0x1 :SHL: RCC_CFGR3_TIM20SW_Pos) ;!< 0x00008000
RCC_CFGR3_TIM20SW                        EQU RCC_CFGR3_TIM20SW_Msk         ;!< TIM20SW bits
RCC_CFGR3_TIM2SW_Pos                     EQU (24)
RCC_CFGR3_TIM2SW_Msk                     EQU (0x1 :SHL: RCC_CFGR3_TIM2SW_Pos) ;!< 0x01000000
RCC_CFGR3_TIM2SW                         EQU RCC_CFGR3_TIM2SW_Msk          ;!< TIM2SW bits
RCC_CFGR3_TIM34SW_Pos                    EQU (25)
RCC_CFGR3_TIM34SW_Msk                    EQU (0x1 :SHL: RCC_CFGR3_TIM34SW_Pos) ;!< 0x02000000
RCC_CFGR3_TIM34SW                        EQU RCC_CFGR3_TIM34SW_Msk         ;!< TIM34SW bits
RCC_CFGR3_TIM1SW_PCLK2                   EQU (0x00000000)                 ;!< PCLK2 used as TIM1 clock source
RCC_CFGR3_TIM1SW_PLL_Pos                 EQU (8)
RCC_CFGR3_TIM1SW_PLL_Msk                 EQU (0x1 :SHL: RCC_CFGR3_TIM1SW_PLL_Pos) ;!< 0x00000100
RCC_CFGR3_TIM1SW_PLL                     EQU RCC_CFGR3_TIM1SW_PLL_Msk      ;!< PLL clock used as TIM1 clock source
RCC_CFGR3_TIM8SW_PCLK2                   EQU (0x00000000)                 ;!< PCLK2 used as TIM8 clock source
RCC_CFGR3_TIM8SW_PLL_Pos                 EQU (9)
RCC_CFGR3_TIM8SW_PLL_Msk                 EQU (0x1 :SHL: RCC_CFGR3_TIM8SW_PLL_Pos) ;!< 0x00000200
RCC_CFGR3_TIM8SW_PLL                     EQU RCC_CFGR3_TIM8SW_PLL_Msk      ;!< PLL clock used as TIM8 clock source
RCC_CFGR3_TIM15SW_PCLK2                  EQU (0x00000000)                 ;!< PCLK2 used as TIM15 clock source
RCC_CFGR3_TIM15SW_PLL_Pos                EQU (10)
RCC_CFGR3_TIM15SW_PLL_Msk                EQU (0x1 :SHL: RCC_CFGR3_TIM15SW_PLL_Pos) ;!< 0x00000400
RCC_CFGR3_TIM15SW_PLL                    EQU RCC_CFGR3_TIM15SW_PLL_Msk     ;!< PLL clock used as TIM15 clock source
RCC_CFGR3_TIM16SW_PCLK2                  EQU (0x00000000)                 ;!< PCLK2 used as TIM16 clock source
RCC_CFGR3_TIM16SW_PLL_Pos                EQU (11)
RCC_CFGR3_TIM16SW_PLL_Msk                EQU (0x1 :SHL: RCC_CFGR3_TIM16SW_PLL_Pos) ;!< 0x00000800
RCC_CFGR3_TIM16SW_PLL                    EQU RCC_CFGR3_TIM16SW_PLL_Msk     ;!< PLL clock used as TIM16 clock source
RCC_CFGR3_TIM17SW_PCLK2                  EQU (0x00000000)                 ;!< PCLK2 used as TIM17 clock source
RCC_CFGR3_TIM17SW_PLL_Pos                EQU (13)
RCC_CFGR3_TIM17SW_PLL_Msk                EQU (0x1 :SHL: RCC_CFGR3_TIM17SW_PLL_Pos) ;!< 0x00002000
RCC_CFGR3_TIM17SW_PLL                    EQU RCC_CFGR3_TIM17SW_PLL_Msk     ;!< PLL clock used as TIM17 clock source
RCC_CFGR3_TIM20SW_PCLK2                  EQU (0x00000000)                 ;!< PCLK2 used as TIM20 clock source
RCC_CFGR3_TIM20SW_PLL_Pos                EQU (15)
RCC_CFGR3_TIM20SW_PLL_Msk                EQU (0x1 :SHL: RCC_CFGR3_TIM20SW_PLL_Pos) ;!< 0x00008000
RCC_CFGR3_TIM20SW_PLL                    EQU RCC_CFGR3_TIM20SW_PLL_Msk     ;!< PLL clock used as TIM20 clock source

RCC_CFGR3_USART2SW_Pos                   EQU (16)
RCC_CFGR3_USART2SW_Msk                   EQU (0x3 :SHL: RCC_CFGR3_USART2SW_Pos) ;!< 0x00030000
RCC_CFGR3_USART2SW                       EQU RCC_CFGR3_USART2SW_Msk        ;!< USART2SW[1:0] bits
RCC_CFGR3_USART2SW_0                     EQU (0x1 :SHL: RCC_CFGR3_USART2SW_Pos) ;!< 0x00010000
RCC_CFGR3_USART2SW_1                     EQU (0x2 :SHL: RCC_CFGR3_USART2SW_Pos) ;!< 0x00020000

RCC_CFGR3_USART2SW_PCLK                  EQU (0x00000000)                 ;!< PCLK1 clock used as USART2 clock source
RCC_CFGR3_USART2SW_SYSCLK                EQU (0x00010000)                 ;!< System clock selected as USART2 clock source
RCC_CFGR3_USART2SW_LSE                   EQU (0x00020000)                 ;!< LSE oscillator clock used as USART2 clock source
RCC_CFGR3_USART2SW_HSI                   EQU (0x00030000)                 ;!< HSI oscillator clock used as USART2 clock source

RCC_CFGR3_USART3SW_Pos                   EQU (18)
RCC_CFGR3_USART3SW_Msk                   EQU (0x3 :SHL: RCC_CFGR3_USART3SW_Pos) ;!< 0x000C0000
RCC_CFGR3_USART3SW                       EQU RCC_CFGR3_USART3SW_Msk        ;!< USART3SW[1:0] bits
RCC_CFGR3_USART3SW_0                     EQU (0x1 :SHL: RCC_CFGR3_USART3SW_Pos) ;!< 0x00040000
RCC_CFGR3_USART3SW_1                     EQU (0x2 :SHL: RCC_CFGR3_USART3SW_Pos) ;!< 0x00080000

RCC_CFGR3_USART3SW_PCLK                  EQU (0x00000000)                 ;!< PCLK1 clock used as USART3 clock source
RCC_CFGR3_USART3SW_SYSCLK                EQU (0x00040000)                 ;!< System clock selected as USART3 clock source
RCC_CFGR3_USART3SW_LSE                   EQU (0x00080000)                 ;!< LSE oscillator clock used as USART3 clock source
RCC_CFGR3_USART3SW_HSI                   EQU (0x000C0000)                 ;!< HSI oscillator clock used as USART3 clock source

RCC_CFGR3_UART4SW_Pos                    EQU (20)
RCC_CFGR3_UART4SW_Msk                    EQU (0x3 :SHL: RCC_CFGR3_UART4SW_Pos) ;!< 0x00300000
RCC_CFGR3_UART4SW                        EQU RCC_CFGR3_UART4SW_Msk         ;!< UART4SW[1:0] bits
RCC_CFGR3_UART4SW_0                      EQU (0x1 :SHL: RCC_CFGR3_UART4SW_Pos) ;!< 0x00100000
RCC_CFGR3_UART4SW_1                      EQU (0x2 :SHL: RCC_CFGR3_UART4SW_Pos) ;!< 0x00200000

RCC_CFGR3_UART4SW_PCLK                   EQU (0x00000000)                 ;!< PCLK1 clock used as UART4 clock source
RCC_CFGR3_UART4SW_SYSCLK                 EQU (0x00100000)                 ;!< System clock selected as UART4 clock source
RCC_CFGR3_UART4SW_LSE                    EQU (0x00200000)                 ;!< LSE oscillator clock used as UART4 clock source
RCC_CFGR3_UART4SW_HSI                    EQU (0x00300000)                 ;!< HSI oscillator clock used as UART4 clock source

RCC_CFGR3_UART5SW_Pos                    EQU (22)
RCC_CFGR3_UART5SW_Msk                    EQU (0x3 :SHL: RCC_CFGR3_UART5SW_Pos) ;!< 0x00C00000
RCC_CFGR3_UART5SW                        EQU RCC_CFGR3_UART5SW_Msk         ;!< UART5SW[1:0] bits
RCC_CFGR3_UART5SW_0                      EQU (0x1 :SHL: RCC_CFGR3_UART5SW_Pos) ;!< 0x00400000
RCC_CFGR3_UART5SW_1                      EQU (0x2 :SHL: RCC_CFGR3_UART5SW_Pos) ;!< 0x00800000

RCC_CFGR3_UART5SW_PCLK                   EQU (0x00000000)                 ;!< PCLK1 clock used as UART5 clock source
RCC_CFGR3_UART5SW_SYSCLK                 EQU (0x00400000)                 ;!< System clock selected as UART5 clock source
RCC_CFGR3_UART5SW_LSE                    EQU (0x00800000)                 ;!< LSE oscillator clock used as UART5 clock source
RCC_CFGR3_UART5SW_HSI                    EQU (0x00C00000)                 ;!< HSI oscillator clock used as UART5 clock source

RCC_CFGR3_TIM2SW_PCLK1                   EQU (0x00000000)                 ;!< PCLK1 used as TIM2 clock source
RCC_CFGR3_TIM2SW_PLL_Pos                 EQU (24)
RCC_CFGR3_TIM2SW_PLL_Msk                 EQU (0x1 :SHL: RCC_CFGR3_TIM2SW_PLL_Pos) ;!< 0x01000000
RCC_CFGR3_TIM2SW_PLL                     EQU RCC_CFGR3_TIM2SW_PLL_Msk      ;!< PLL clock used as TIM2 clock source

RCC_CFGR3_TIM34SW_PCLK1                  EQU (0x00000000)                 ;!< PCLK1 used as TIM3/TIM4 clock source
RCC_CFGR3_TIM34SW_PLL_Pos                EQU (25)
RCC_CFGR3_TIM34SW_PLL_Msk                EQU (0x1 :SHL: RCC_CFGR3_TIM34SW_PLL_Pos) ;!< 0x02000000
RCC_CFGR3_TIM34SW_PLL                    EQU RCC_CFGR3_TIM34SW_PLL_Msk     ;!< PLL clock used as TIM3/TIM4 clock source

; Legacy defines
RCC_CFGR3_TIM1SW_HCLK                EQU RCC_CFGR3_TIM1SW_PCLK2
RCC_CFGR3_TIM8SW_HCLK                EQU RCC_CFGR3_TIM8SW_PCLK2
RCC_CFGR3_TIM15SW_HCLK               EQU RCC_CFGR3_TIM15SW_PCLK2
RCC_CFGR3_TIM16SW_HCLK               EQU RCC_CFGR3_TIM16SW_PCLK2
RCC_CFGR3_TIM17SW_HCLK               EQU RCC_CFGR3_TIM17SW_PCLK2
RCC_CFGR3_TIM20SW_HCLK               EQU RCC_CFGR3_TIM20SW_PCLK2
RCC_CFGR3_TIM2SW_HCLK                EQU RCC_CFGR3_TIM2SW_PCLK1
RCC_CFGR3_TIM34SW_HCLK               EQU RCC_CFGR3_TIM34SW_PCLK1

;****************************************************************************
;
;                           Real-Time Clock (RTC)
;
;****************************************************************************

;*******************  Bits definition for RTC_TR register  ******************
RTC_TR_PM_Pos                EQU (22)
RTC_TR_PM_Msk                EQU (0x1 :SHL: RTC_TR_PM_Pos)                   ;!< 0x00400000
RTC_TR_PM                    EQU RTC_TR_PM_Msk
RTC_TR_HT_Pos                EQU (20)
RTC_TR_HT_Msk                EQU (0x3 :SHL: RTC_TR_HT_Pos)                   ;!< 0x00300000
RTC_TR_HT                    EQU RTC_TR_HT_Msk
RTC_TR_HT_0                  EQU (0x1 :SHL: RTC_TR_HT_Pos)                   ;!< 0x00100000
RTC_TR_HT_1                  EQU (0x2 :SHL: RTC_TR_HT_Pos)                   ;!< 0x00200000
RTC_TR_HU_Pos                EQU (16)
RTC_TR_HU_Msk                EQU (0xF :SHL: RTC_TR_HU_Pos)                   ;!< 0x000F0000
RTC_TR_HU                    EQU RTC_TR_HU_Msk
RTC_TR_HU_0                  EQU (0x1 :SHL: RTC_TR_HU_Pos)                   ;!< 0x00010000
RTC_TR_HU_1                  EQU (0x2 :SHL: RTC_TR_HU_Pos)                   ;!< 0x00020000
RTC_TR_HU_2                  EQU (0x4 :SHL: RTC_TR_HU_Pos)                   ;!< 0x00040000
RTC_TR_HU_3                  EQU (0x8 :SHL: RTC_TR_HU_Pos)                   ;!< 0x00080000
RTC_TR_MNT_Pos               EQU (12)
RTC_TR_MNT_Msk               EQU (0x7 :SHL: RTC_TR_MNT_Pos)                  ;!< 0x00007000
RTC_TR_MNT                   EQU RTC_TR_MNT_Msk
RTC_TR_MNT_0                 EQU (0x1 :SHL: RTC_TR_MNT_Pos)                  ;!< 0x00001000
RTC_TR_MNT_1                 EQU (0x2 :SHL: RTC_TR_MNT_Pos)                  ;!< 0x00002000
RTC_TR_MNT_2                 EQU (0x4 :SHL: RTC_TR_MNT_Pos)                  ;!< 0x00004000
RTC_TR_MNU_Pos               EQU (8)
RTC_TR_MNU_Msk               EQU (0xF :SHL: RTC_TR_MNU_Pos)                  ;!< 0x00000F00
RTC_TR_MNU                   EQU RTC_TR_MNU_Msk
RTC_TR_MNU_0                 EQU (0x1 :SHL: RTC_TR_MNU_Pos)                  ;!< 0x00000100
RTC_TR_MNU_1                 EQU (0x2 :SHL: RTC_TR_MNU_Pos)                  ;!< 0x00000200
RTC_TR_MNU_2                 EQU (0x4 :SHL: RTC_TR_MNU_Pos)                  ;!< 0x00000400
RTC_TR_MNU_3                 EQU (0x8 :SHL: RTC_TR_MNU_Pos)                  ;!< 0x00000800
RTC_TR_ST_Pos                EQU (4)
RTC_TR_ST_Msk                EQU (0x7 :SHL: RTC_TR_ST_Pos)                   ;!< 0x00000070
RTC_TR_ST                    EQU RTC_TR_ST_Msk
RTC_TR_ST_0                  EQU (0x1 :SHL: RTC_TR_ST_Pos)                   ;!< 0x00000010
RTC_TR_ST_1                  EQU (0x2 :SHL: RTC_TR_ST_Pos)                   ;!< 0x00000020
RTC_TR_ST_2                  EQU (0x4 :SHL: RTC_TR_ST_Pos)                   ;!< 0x00000040
RTC_TR_SU_Pos                EQU (0)
RTC_TR_SU_Msk                EQU (0xF :SHL: RTC_TR_SU_Pos)                   ;!< 0x0000000F
RTC_TR_SU                    EQU RTC_TR_SU_Msk
RTC_TR_SU_0                  EQU (0x1 :SHL: RTC_TR_SU_Pos)                   ;!< 0x00000001
RTC_TR_SU_1                  EQU (0x2 :SHL: RTC_TR_SU_Pos)                   ;!< 0x00000002
RTC_TR_SU_2                  EQU (0x4 :SHL: RTC_TR_SU_Pos)                   ;!< 0x00000004
RTC_TR_SU_3                  EQU (0x8 :SHL: RTC_TR_SU_Pos)                   ;!< 0x00000008

;*******************  Bits definition for RTC_DR register  ******************
RTC_DR_YT_Pos                EQU (20)
RTC_DR_YT_Msk                EQU (0xF :SHL: RTC_DR_YT_Pos)                   ;!< 0x00F00000
RTC_DR_YT                    EQU RTC_DR_YT_Msk
RTC_DR_YT_0                  EQU (0x1 :SHL: RTC_DR_YT_Pos)                   ;!< 0x00100000
RTC_DR_YT_1                  EQU (0x2 :SHL: RTC_DR_YT_Pos)                   ;!< 0x00200000
RTC_DR_YT_2                  EQU (0x4 :SHL: RTC_DR_YT_Pos)                   ;!< 0x00400000
RTC_DR_YT_3                  EQU (0x8 :SHL: RTC_DR_YT_Pos)                   ;!< 0x00800000
RTC_DR_YU_Pos                EQU (16)
RTC_DR_YU_Msk                EQU (0xF :SHL: RTC_DR_YU_Pos)                   ;!< 0x000F0000
RTC_DR_YU                    EQU RTC_DR_YU_Msk
RTC_DR_YU_0                  EQU (0x1 :SHL: RTC_DR_YU_Pos)                   ;!< 0x00010000
RTC_DR_YU_1                  EQU (0x2 :SHL: RTC_DR_YU_Pos)                   ;!< 0x00020000
RTC_DR_YU_2                  EQU (0x4 :SHL: RTC_DR_YU_Pos)                   ;!< 0x00040000
RTC_DR_YU_3                  EQU (0x8 :SHL: RTC_DR_YU_Pos)                   ;!< 0x00080000
RTC_DR_WDU_Pos               EQU (13)
RTC_DR_WDU_Msk               EQU (0x7 :SHL: RTC_DR_WDU_Pos)                  ;!< 0x0000E000
RTC_DR_WDU                   EQU RTC_DR_WDU_Msk
RTC_DR_WDU_0                 EQU (0x1 :SHL: RTC_DR_WDU_Pos)                  ;!< 0x00002000
RTC_DR_WDU_1                 EQU (0x2 :SHL: RTC_DR_WDU_Pos)                  ;!< 0x00004000
RTC_DR_WDU_2                 EQU (0x4 :SHL: RTC_DR_WDU_Pos)                  ;!< 0x00008000
RTC_DR_MT_Pos                EQU (12)
RTC_DR_MT_Msk                EQU (0x1 :SHL: RTC_DR_MT_Pos)                   ;!< 0x00001000
RTC_DR_MT                    EQU RTC_DR_MT_Msk
RTC_DR_MU_Pos                EQU (8)
RTC_DR_MU_Msk                EQU (0xF :SHL: RTC_DR_MU_Pos)                   ;!< 0x00000F00
RTC_DR_MU                    EQU RTC_DR_MU_Msk
RTC_DR_MU_0                  EQU (0x1 :SHL: RTC_DR_MU_Pos)                   ;!< 0x00000100
RTC_DR_MU_1                  EQU (0x2 :SHL: RTC_DR_MU_Pos)                   ;!< 0x00000200
RTC_DR_MU_2                  EQU (0x4 :SHL: RTC_DR_MU_Pos)                   ;!< 0x00000400
RTC_DR_MU_3                  EQU (0x8 :SHL: RTC_DR_MU_Pos)                   ;!< 0x00000800
RTC_DR_DT_Pos                EQU (4)
RTC_DR_DT_Msk                EQU (0x3 :SHL: RTC_DR_DT_Pos)                   ;!< 0x00000030
RTC_DR_DT                    EQU RTC_DR_DT_Msk
RTC_DR_DT_0                  EQU (0x1 :SHL: RTC_DR_DT_Pos)                   ;!< 0x00000010
RTC_DR_DT_1                  EQU (0x2 :SHL: RTC_DR_DT_Pos)                   ;!< 0x00000020
RTC_DR_DU_Pos                EQU (0)
RTC_DR_DU_Msk                EQU (0xF :SHL: RTC_DR_DU_Pos)                   ;!< 0x0000000F
RTC_DR_DU                    EQU RTC_DR_DU_Msk
RTC_DR_DU_0                  EQU (0x1 :SHL: RTC_DR_DU_Pos)                   ;!< 0x00000001
RTC_DR_DU_1                  EQU (0x2 :SHL: RTC_DR_DU_Pos)                   ;!< 0x00000002
RTC_DR_DU_2                  EQU (0x4 :SHL: RTC_DR_DU_Pos)                   ;!< 0x00000004
RTC_DR_DU_3                  EQU (0x8 :SHL: RTC_DR_DU_Pos)                   ;!< 0x00000008

;*******************  Bits definition for RTC_CR register  ******************
RTC_CR_COE_Pos               EQU (23)
RTC_CR_COE_Msk               EQU (0x1 :SHL: RTC_CR_COE_Pos)                  ;!< 0x00800000
RTC_CR_COE                   EQU RTC_CR_COE_Msk
RTC_CR_OSEL_Pos              EQU (21)
RTC_CR_OSEL_Msk              EQU (0x3 :SHL: RTC_CR_OSEL_Pos)                 ;!< 0x00600000
RTC_CR_OSEL                  EQU RTC_CR_OSEL_Msk
RTC_CR_OSEL_0                EQU (0x1 :SHL: RTC_CR_OSEL_Pos)                 ;!< 0x00200000
RTC_CR_OSEL_1                EQU (0x2 :SHL: RTC_CR_OSEL_Pos)                 ;!< 0x00400000
RTC_CR_POL_Pos               EQU (20)
RTC_CR_POL_Msk               EQU (0x1 :SHL: RTC_CR_POL_Pos)                  ;!< 0x00100000
RTC_CR_POL                   EQU RTC_CR_POL_Msk
RTC_CR_COSEL_Pos             EQU (19)
RTC_CR_COSEL_Msk             EQU (0x1 :SHL: RTC_CR_COSEL_Pos)                ;!< 0x00080000
RTC_CR_COSEL                 EQU RTC_CR_COSEL_Msk
RTC_CR_BKP_Pos               EQU (18)
RTC_CR_BKP_Msk               EQU (0x1 :SHL: RTC_CR_BKP_Pos)                  ;!< 0x00040000
RTC_CR_BKP                   EQU RTC_CR_BKP_Msk
RTC_CR_SUB1H_Pos             EQU (17)
RTC_CR_SUB1H_Msk             EQU (0x1 :SHL: RTC_CR_SUB1H_Pos)                ;!< 0x00020000
RTC_CR_SUB1H                 EQU RTC_CR_SUB1H_Msk
RTC_CR_ADD1H_Pos             EQU (16)
RTC_CR_ADD1H_Msk             EQU (0x1 :SHL: RTC_CR_ADD1H_Pos)                ;!< 0x00010000
RTC_CR_ADD1H                 EQU RTC_CR_ADD1H_Msk
RTC_CR_TSIE_Pos              EQU (15)
RTC_CR_TSIE_Msk              EQU (0x1 :SHL: RTC_CR_TSIE_Pos)                 ;!< 0x00008000
RTC_CR_TSIE                  EQU RTC_CR_TSIE_Msk
RTC_CR_WUTIE_Pos             EQU (14)
RTC_CR_WUTIE_Msk             EQU (0x1 :SHL: RTC_CR_WUTIE_Pos)                ;!< 0x00004000
RTC_CR_WUTIE                 EQU RTC_CR_WUTIE_Msk
RTC_CR_ALRBIE_Pos            EQU (13)
RTC_CR_ALRBIE_Msk            EQU (0x1 :SHL: RTC_CR_ALRBIE_Pos)               ;!< 0x00002000
RTC_CR_ALRBIE                EQU RTC_CR_ALRBIE_Msk
RTC_CR_ALRAIE_Pos            EQU (12)
RTC_CR_ALRAIE_Msk            EQU (0x1 :SHL: RTC_CR_ALRAIE_Pos)               ;!< 0x00001000
RTC_CR_ALRAIE                EQU RTC_CR_ALRAIE_Msk
RTC_CR_TSE_Pos               EQU (11)
RTC_CR_TSE_Msk               EQU (0x1 :SHL: RTC_CR_TSE_Pos)                  ;!< 0x00000800
RTC_CR_TSE                   EQU RTC_CR_TSE_Msk
RTC_CR_WUTE_Pos              EQU (10)
RTC_CR_WUTE_Msk              EQU (0x1 :SHL: RTC_CR_WUTE_Pos)                 ;!< 0x00000400
RTC_CR_WUTE                  EQU RTC_CR_WUTE_Msk
RTC_CR_ALRBE_Pos             EQU (9)
RTC_CR_ALRBE_Msk             EQU (0x1 :SHL: RTC_CR_ALRBE_Pos)                ;!< 0x00000200
RTC_CR_ALRBE                 EQU RTC_CR_ALRBE_Msk
RTC_CR_ALRAE_Pos             EQU (8)
RTC_CR_ALRAE_Msk             EQU (0x1 :SHL: RTC_CR_ALRAE_Pos)                ;!< 0x00000100
RTC_CR_ALRAE                 EQU RTC_CR_ALRAE_Msk
RTC_CR_FMT_Pos               EQU (6)
RTC_CR_FMT_Msk               EQU (0x1 :SHL: RTC_CR_FMT_Pos)                  ;!< 0x00000040
RTC_CR_FMT                   EQU RTC_CR_FMT_Msk
RTC_CR_BYPSHAD_Pos           EQU (5)
RTC_CR_BYPSHAD_Msk           EQU (0x1 :SHL: RTC_CR_BYPSHAD_Pos)              ;!< 0x00000020
RTC_CR_BYPSHAD               EQU RTC_CR_BYPSHAD_Msk
RTC_CR_REFCKON_Pos           EQU (4)
RTC_CR_REFCKON_Msk           EQU (0x1 :SHL: RTC_CR_REFCKON_Pos)              ;!< 0x00000010
RTC_CR_REFCKON               EQU RTC_CR_REFCKON_Msk
RTC_CR_TSEDGE_Pos            EQU (3)
RTC_CR_TSEDGE_Msk            EQU (0x1 :SHL: RTC_CR_TSEDGE_Pos)               ;!< 0x00000008
RTC_CR_TSEDGE                EQU RTC_CR_TSEDGE_Msk
RTC_CR_WUCKSEL_Pos           EQU (0)
RTC_CR_WUCKSEL_Msk           EQU (0x7 :SHL: RTC_CR_WUCKSEL_Pos)              ;!< 0x00000007
RTC_CR_WUCKSEL               EQU RTC_CR_WUCKSEL_Msk
RTC_CR_WUCKSEL_0             EQU (0x1 :SHL: RTC_CR_WUCKSEL_Pos)              ;!< 0x00000001
RTC_CR_WUCKSEL_1             EQU (0x2 :SHL: RTC_CR_WUCKSEL_Pos)              ;!< 0x00000002
RTC_CR_WUCKSEL_2             EQU (0x4 :SHL: RTC_CR_WUCKSEL_Pos)              ;!< 0x00000004

; Legacy defines
RTC_CR_BCK_Pos               EQU RTC_CR_BKP_Pos
RTC_CR_BCK_Msk               EQU RTC_CR_BKP_Msk
RTC_CR_BCK                   EQU RTC_CR_BKP

;*******************  Bits definition for RTC_ISR register  *****************
RTC_ISR_RECALPF_Pos          EQU (16)
RTC_ISR_RECALPF_Msk          EQU (0x1 :SHL: RTC_ISR_RECALPF_Pos)             ;!< 0x00010000
RTC_ISR_RECALPF              EQU RTC_ISR_RECALPF_Msk
RTC_ISR_TAMP3F_Pos           EQU (15)
RTC_ISR_TAMP3F_Msk           EQU (0x1 :SHL: RTC_ISR_TAMP3F_Pos)              ;!< 0x00008000
RTC_ISR_TAMP3F               EQU RTC_ISR_TAMP3F_Msk
RTC_ISR_TAMP2F_Pos           EQU (14)
RTC_ISR_TAMP2F_Msk           EQU (0x1 :SHL: RTC_ISR_TAMP2F_Pos)              ;!< 0x00004000
RTC_ISR_TAMP2F               EQU RTC_ISR_TAMP2F_Msk
RTC_ISR_TAMP1F_Pos           EQU (13)
RTC_ISR_TAMP1F_Msk           EQU (0x1 :SHL: RTC_ISR_TAMP1F_Pos)              ;!< 0x00002000
RTC_ISR_TAMP1F               EQU RTC_ISR_TAMP1F_Msk
RTC_ISR_TSOVF_Pos            EQU (12)
RTC_ISR_TSOVF_Msk            EQU (0x1 :SHL: RTC_ISR_TSOVF_Pos)               ;!< 0x00001000
RTC_ISR_TSOVF                EQU RTC_ISR_TSOVF_Msk
RTC_ISR_TSF_Pos              EQU (11)
RTC_ISR_TSF_Msk              EQU (0x1 :SHL: RTC_ISR_TSF_Pos)                 ;!< 0x00000800
RTC_ISR_TSF                  EQU RTC_ISR_TSF_Msk
RTC_ISR_WUTF_Pos             EQU (10)
RTC_ISR_WUTF_Msk             EQU (0x1 :SHL: RTC_ISR_WUTF_Pos)                ;!< 0x00000400
RTC_ISR_WUTF                 EQU RTC_ISR_WUTF_Msk
RTC_ISR_ALRBF_Pos            EQU (9)
RTC_ISR_ALRBF_Msk            EQU (0x1 :SHL: RTC_ISR_ALRBF_Pos)               ;!< 0x00000200
RTC_ISR_ALRBF                EQU RTC_ISR_ALRBF_Msk
RTC_ISR_ALRAF_Pos            EQU (8)
RTC_ISR_ALRAF_Msk            EQU (0x1 :SHL: RTC_ISR_ALRAF_Pos)               ;!< 0x00000100
RTC_ISR_ALRAF                EQU RTC_ISR_ALRAF_Msk
RTC_ISR_INIT_Pos             EQU (7)
RTC_ISR_INIT_Msk             EQU (0x1 :SHL: RTC_ISR_INIT_Pos)                ;!< 0x00000080
RTC_ISR_INIT                 EQU RTC_ISR_INIT_Msk
RTC_ISR_INITF_Pos            EQU (6)
RTC_ISR_INITF_Msk            EQU (0x1 :SHL: RTC_ISR_INITF_Pos)               ;!< 0x00000040
RTC_ISR_INITF                EQU RTC_ISR_INITF_Msk
RTC_ISR_RSF_Pos              EQU (5)
RTC_ISR_RSF_Msk              EQU (0x1 :SHL: RTC_ISR_RSF_Pos)                 ;!< 0x00000020
RTC_ISR_RSF                  EQU RTC_ISR_RSF_Msk
RTC_ISR_INITS_Pos            EQU (4)
RTC_ISR_INITS_Msk            EQU (0x1 :SHL: RTC_ISR_INITS_Pos)               ;!< 0x00000010
RTC_ISR_INITS                EQU RTC_ISR_INITS_Msk
RTC_ISR_SHPF_Pos             EQU (3)
RTC_ISR_SHPF_Msk             EQU (0x1 :SHL: RTC_ISR_SHPF_Pos)                ;!< 0x00000008
RTC_ISR_SHPF                 EQU RTC_ISR_SHPF_Msk
RTC_ISR_WUTWF_Pos            EQU (2)
RTC_ISR_WUTWF_Msk            EQU (0x1 :SHL: RTC_ISR_WUTWF_Pos)               ;!< 0x00000004
RTC_ISR_WUTWF                EQU RTC_ISR_WUTWF_Msk
RTC_ISR_ALRBWF_Pos           EQU (1)
RTC_ISR_ALRBWF_Msk           EQU (0x1 :SHL: RTC_ISR_ALRBWF_Pos)              ;!< 0x00000002
RTC_ISR_ALRBWF               EQU RTC_ISR_ALRBWF_Msk
RTC_ISR_ALRAWF_Pos           EQU (0)
RTC_ISR_ALRAWF_Msk           EQU (0x1 :SHL: RTC_ISR_ALRAWF_Pos)              ;!< 0x00000001
RTC_ISR_ALRAWF               EQU RTC_ISR_ALRAWF_Msk

;*******************  Bits definition for RTC_PRER register  ****************
RTC_PRER_PREDIV_A_Pos        EQU (16)
RTC_PRER_PREDIV_A_Msk        EQU (0x7F :SHL: RTC_PRER_PREDIV_A_Pos)          ;!< 0x007F0000
RTC_PRER_PREDIV_A            EQU RTC_PRER_PREDIV_A_Msk
RTC_PRER_PREDIV_S_Pos        EQU (0)
RTC_PRER_PREDIV_S_Msk        EQU (0x7FFF :SHL: RTC_PRER_PREDIV_S_Pos)        ;!< 0x00007FFF
RTC_PRER_PREDIV_S            EQU RTC_PRER_PREDIV_S_Msk

;*******************  Bits definition for RTC_WUTR register  ****************
RTC_WUTR_WUT_Pos             EQU (0)
RTC_WUTR_WUT_Msk             EQU (0xFFFF :SHL: RTC_WUTR_WUT_Pos)             ;!< 0x0000FFFF
RTC_WUTR_WUT                 EQU RTC_WUTR_WUT_Msk

;*******************  Bits definition for RTC_ALRMAR register  **************
RTC_ALRMAR_MSK4_Pos          EQU (31)
RTC_ALRMAR_MSK4_Msk          EQU (0x1 :SHL: RTC_ALRMAR_MSK4_Pos)             ;!< 0x80000000
RTC_ALRMAR_MSK4              EQU RTC_ALRMAR_MSK4_Msk
RTC_ALRMAR_WDSEL_Pos         EQU (30)
RTC_ALRMAR_WDSEL_Msk         EQU (0x1 :SHL: RTC_ALRMAR_WDSEL_Pos)            ;!< 0x40000000
RTC_ALRMAR_WDSEL             EQU RTC_ALRMAR_WDSEL_Msk
RTC_ALRMAR_DT_Pos            EQU (28)
RTC_ALRMAR_DT_Msk            EQU (0x3 :SHL: RTC_ALRMAR_DT_Pos)               ;!< 0x30000000
RTC_ALRMAR_DT                EQU RTC_ALRMAR_DT_Msk
RTC_ALRMAR_DT_0              EQU (0x1 :SHL: RTC_ALRMAR_DT_Pos)               ;!< 0x10000000
RTC_ALRMAR_DT_1              EQU (0x2 :SHL: RTC_ALRMAR_DT_Pos)               ;!< 0x20000000
RTC_ALRMAR_DU_Pos            EQU (24)
RTC_ALRMAR_DU_Msk            EQU (0xF :SHL: RTC_ALRMAR_DU_Pos)               ;!< 0x0F000000
RTC_ALRMAR_DU                EQU RTC_ALRMAR_DU_Msk
RTC_ALRMAR_DU_0              EQU (0x1 :SHL: RTC_ALRMAR_DU_Pos)               ;!< 0x01000000
RTC_ALRMAR_DU_1              EQU (0x2 :SHL: RTC_ALRMAR_DU_Pos)               ;!< 0x02000000
RTC_ALRMAR_DU_2              EQU (0x4 :SHL: RTC_ALRMAR_DU_Pos)               ;!< 0x04000000
RTC_ALRMAR_DU_3              EQU (0x8 :SHL: RTC_ALRMAR_DU_Pos)               ;!< 0x08000000
RTC_ALRMAR_MSK3_Pos          EQU (23)
RTC_ALRMAR_MSK3_Msk          EQU (0x1 :SHL: RTC_ALRMAR_MSK3_Pos)             ;!< 0x00800000
RTC_ALRMAR_MSK3              EQU RTC_ALRMAR_MSK3_Msk
RTC_ALRMAR_PM_Pos            EQU (22)
RTC_ALRMAR_PM_Msk            EQU (0x1 :SHL: RTC_ALRMAR_PM_Pos)               ;!< 0x00400000
RTC_ALRMAR_PM                EQU RTC_ALRMAR_PM_Msk
RTC_ALRMAR_HT_Pos            EQU (20)
RTC_ALRMAR_HT_Msk            EQU (0x3 :SHL: RTC_ALRMAR_HT_Pos)               ;!< 0x00300000
RTC_ALRMAR_HT                EQU RTC_ALRMAR_HT_Msk
RTC_ALRMAR_HT_0              EQU (0x1 :SHL: RTC_ALRMAR_HT_Pos)               ;!< 0x00100000
RTC_ALRMAR_HT_1              EQU (0x2 :SHL: RTC_ALRMAR_HT_Pos)               ;!< 0x00200000
RTC_ALRMAR_HU_Pos            EQU (16)
RTC_ALRMAR_HU_Msk            EQU (0xF :SHL: RTC_ALRMAR_HU_Pos)               ;!< 0x000F0000
RTC_ALRMAR_HU                EQU RTC_ALRMAR_HU_Msk
RTC_ALRMAR_HU_0              EQU (0x1 :SHL: RTC_ALRMAR_HU_Pos)               ;!< 0x00010000
RTC_ALRMAR_HU_1              EQU (0x2 :SHL: RTC_ALRMAR_HU_Pos)               ;!< 0x00020000
RTC_ALRMAR_HU_2              EQU (0x4 :SHL: RTC_ALRMAR_HU_Pos)               ;!< 0x00040000
RTC_ALRMAR_HU_3              EQU (0x8 :SHL: RTC_ALRMAR_HU_Pos)               ;!< 0x00080000
RTC_ALRMAR_MSK2_Pos          EQU (15)
RTC_ALRMAR_MSK2_Msk          EQU (0x1 :SHL: RTC_ALRMAR_MSK2_Pos)             ;!< 0x00008000
RTC_ALRMAR_MSK2              EQU RTC_ALRMAR_MSK2_Msk
RTC_ALRMAR_MNT_Pos           EQU (12)
RTC_ALRMAR_MNT_Msk           EQU (0x7 :SHL: RTC_ALRMAR_MNT_Pos)              ;!< 0x00007000
RTC_ALRMAR_MNT               EQU RTC_ALRMAR_MNT_Msk
RTC_ALRMAR_MNT_0             EQU (0x1 :SHL: RTC_ALRMAR_MNT_Pos)              ;!< 0x00001000
RTC_ALRMAR_MNT_1             EQU (0x2 :SHL: RTC_ALRMAR_MNT_Pos)              ;!< 0x00002000
RTC_ALRMAR_MNT_2             EQU (0x4 :SHL: RTC_ALRMAR_MNT_Pos)              ;!< 0x00004000
RTC_ALRMAR_MNU_Pos           EQU (8)
RTC_ALRMAR_MNU_Msk           EQU (0xF :SHL: RTC_ALRMAR_MNU_Pos)              ;!< 0x00000F00
RTC_ALRMAR_MNU               EQU RTC_ALRMAR_MNU_Msk
RTC_ALRMAR_MNU_0             EQU (0x1 :SHL: RTC_ALRMAR_MNU_Pos)              ;!< 0x00000100
RTC_ALRMAR_MNU_1             EQU (0x2 :SHL: RTC_ALRMAR_MNU_Pos)              ;!< 0x00000200
RTC_ALRMAR_MNU_2             EQU (0x4 :SHL: RTC_ALRMAR_MNU_Pos)              ;!< 0x00000400
RTC_ALRMAR_MNU_3             EQU (0x8 :SHL: RTC_ALRMAR_MNU_Pos)              ;!< 0x00000800
RTC_ALRMAR_MSK1_Pos          EQU (7)
RTC_ALRMAR_MSK1_Msk          EQU (0x1 :SHL: RTC_ALRMAR_MSK1_Pos)             ;!< 0x00000080
RTC_ALRMAR_MSK1              EQU RTC_ALRMAR_MSK1_Msk
RTC_ALRMAR_ST_Pos            EQU (4)
RTC_ALRMAR_ST_Msk            EQU (0x7 :SHL: RTC_ALRMAR_ST_Pos)               ;!< 0x00000070
RTC_ALRMAR_ST                EQU RTC_ALRMAR_ST_Msk
RTC_ALRMAR_ST_0              EQU (0x1 :SHL: RTC_ALRMAR_ST_Pos)               ;!< 0x00000010
RTC_ALRMAR_ST_1              EQU (0x2 :SHL: RTC_ALRMAR_ST_Pos)               ;!< 0x00000020
RTC_ALRMAR_ST_2              EQU (0x4 :SHL: RTC_ALRMAR_ST_Pos)               ;!< 0x00000040
RTC_ALRMAR_SU_Pos            EQU (0)
RTC_ALRMAR_SU_Msk            EQU (0xF :SHL: RTC_ALRMAR_SU_Pos)               ;!< 0x0000000F
RTC_ALRMAR_SU                EQU RTC_ALRMAR_SU_Msk
RTC_ALRMAR_SU_0              EQU (0x1 :SHL: RTC_ALRMAR_SU_Pos)               ;!< 0x00000001
RTC_ALRMAR_SU_1              EQU (0x2 :SHL: RTC_ALRMAR_SU_Pos)               ;!< 0x00000002
RTC_ALRMAR_SU_2              EQU (0x4 :SHL: RTC_ALRMAR_SU_Pos)               ;!< 0x00000004
RTC_ALRMAR_SU_3              EQU (0x8 :SHL: RTC_ALRMAR_SU_Pos)               ;!< 0x00000008

;*******************  Bits definition for RTC_ALRMBR register  **************
RTC_ALRMBR_MSK4_Pos          EQU (31)
RTC_ALRMBR_MSK4_Msk          EQU (0x1 :SHL: RTC_ALRMBR_MSK4_Pos)             ;!< 0x80000000
RTC_ALRMBR_MSK4              EQU RTC_ALRMBR_MSK4_Msk
RTC_ALRMBR_WDSEL_Pos         EQU (30)
RTC_ALRMBR_WDSEL_Msk         EQU (0x1 :SHL: RTC_ALRMBR_WDSEL_Pos)            ;!< 0x40000000
RTC_ALRMBR_WDSEL             EQU RTC_ALRMBR_WDSEL_Msk
RTC_ALRMBR_DT_Pos            EQU (28)
RTC_ALRMBR_DT_Msk            EQU (0x3 :SHL: RTC_ALRMBR_DT_Pos)               ;!< 0x30000000
RTC_ALRMBR_DT                EQU RTC_ALRMBR_DT_Msk
RTC_ALRMBR_DT_0              EQU (0x1 :SHL: RTC_ALRMBR_DT_Pos)               ;!< 0x10000000
RTC_ALRMBR_DT_1              EQU (0x2 :SHL: RTC_ALRMBR_DT_Pos)               ;!< 0x20000000
RTC_ALRMBR_DU_Pos            EQU (24)
RTC_ALRMBR_DU_Msk            EQU (0xF :SHL: RTC_ALRMBR_DU_Pos)               ;!< 0x0F000000
RTC_ALRMBR_DU                EQU RTC_ALRMBR_DU_Msk
RTC_ALRMBR_DU_0              EQU (0x1 :SHL: RTC_ALRMBR_DU_Pos)               ;!< 0x01000000
RTC_ALRMBR_DU_1              EQU (0x2 :SHL: RTC_ALRMBR_DU_Pos)               ;!< 0x02000000
RTC_ALRMBR_DU_2              EQU (0x4 :SHL: RTC_ALRMBR_DU_Pos)               ;!< 0x04000000
RTC_ALRMBR_DU_3              EQU (0x8 :SHL: RTC_ALRMBR_DU_Pos)               ;!< 0x08000000
RTC_ALRMBR_MSK3_Pos          EQU (23)
RTC_ALRMBR_MSK3_Msk          EQU (0x1 :SHL: RTC_ALRMBR_MSK3_Pos)             ;!< 0x00800000
RTC_ALRMBR_MSK3              EQU RTC_ALRMBR_MSK3_Msk
RTC_ALRMBR_PM_Pos            EQU (22)
RTC_ALRMBR_PM_Msk            EQU (0x1 :SHL: RTC_ALRMBR_PM_Pos)               ;!< 0x00400000
RTC_ALRMBR_PM                EQU RTC_ALRMBR_PM_Msk
RTC_ALRMBR_HT_Pos            EQU (20)
RTC_ALRMBR_HT_Msk            EQU (0x3 :SHL: RTC_ALRMBR_HT_Pos)               ;!< 0x00300000
RTC_ALRMBR_HT                EQU RTC_ALRMBR_HT_Msk
RTC_ALRMBR_HT_0              EQU (0x1 :SHL: RTC_ALRMBR_HT_Pos)               ;!< 0x00100000
RTC_ALRMBR_HT_1              EQU (0x2 :SHL: RTC_ALRMBR_HT_Pos)               ;!< 0x00200000
RTC_ALRMBR_HU_Pos            EQU (16)
RTC_ALRMBR_HU_Msk            EQU (0xF :SHL: RTC_ALRMBR_HU_Pos)               ;!< 0x000F0000
RTC_ALRMBR_HU                EQU RTC_ALRMBR_HU_Msk
RTC_ALRMBR_HU_0              EQU (0x1 :SHL: RTC_ALRMBR_HU_Pos)               ;!< 0x00010000
RTC_ALRMBR_HU_1              EQU (0x2 :SHL: RTC_ALRMBR_HU_Pos)               ;!< 0x00020000
RTC_ALRMBR_HU_2              EQU (0x4 :SHL: RTC_ALRMBR_HU_Pos)               ;!< 0x00040000
RTC_ALRMBR_HU_3              EQU (0x8 :SHL: RTC_ALRMBR_HU_Pos)               ;!< 0x00080000
RTC_ALRMBR_MSK2_Pos          EQU (15)
RTC_ALRMBR_MSK2_Msk          EQU (0x1 :SHL: RTC_ALRMBR_MSK2_Pos)             ;!< 0x00008000
RTC_ALRMBR_MSK2              EQU RTC_ALRMBR_MSK2_Msk
RTC_ALRMBR_MNT_Pos           EQU (12)
RTC_ALRMBR_MNT_Msk           EQU (0x7 :SHL: RTC_ALRMBR_MNT_Pos)              ;!< 0x00007000
RTC_ALRMBR_MNT               EQU RTC_ALRMBR_MNT_Msk
RTC_ALRMBR_MNT_0             EQU (0x1 :SHL: RTC_ALRMBR_MNT_Pos)              ;!< 0x00001000
RTC_ALRMBR_MNT_1             EQU (0x2 :SHL: RTC_ALRMBR_MNT_Pos)              ;!< 0x00002000
RTC_ALRMBR_MNT_2             EQU (0x4 :SHL: RTC_ALRMBR_MNT_Pos)              ;!< 0x00004000
RTC_ALRMBR_MNU_Pos           EQU (8)
RTC_ALRMBR_MNU_Msk           EQU (0xF :SHL: RTC_ALRMBR_MNU_Pos)              ;!< 0x00000F00
RTC_ALRMBR_MNU               EQU RTC_ALRMBR_MNU_Msk
RTC_ALRMBR_MNU_0             EQU (0x1 :SHL: RTC_ALRMBR_MNU_Pos)              ;!< 0x00000100
RTC_ALRMBR_MNU_1             EQU (0x2 :SHL: RTC_ALRMBR_MNU_Pos)              ;!< 0x00000200
RTC_ALRMBR_MNU_2             EQU (0x4 :SHL: RTC_ALRMBR_MNU_Pos)              ;!< 0x00000400
RTC_ALRMBR_MNU_3             EQU (0x8 :SHL: RTC_ALRMBR_MNU_Pos)              ;!< 0x00000800
RTC_ALRMBR_MSK1_Pos          EQU (7)
RTC_ALRMBR_MSK1_Msk          EQU (0x1 :SHL: RTC_ALRMBR_MSK1_Pos)             ;!< 0x00000080
RTC_ALRMBR_MSK1              EQU RTC_ALRMBR_MSK1_Msk
RTC_ALRMBR_ST_Pos            EQU (4)
RTC_ALRMBR_ST_Msk            EQU (0x7 :SHL: RTC_ALRMBR_ST_Pos)               ;!< 0x00000070
RTC_ALRMBR_ST                EQU RTC_ALRMBR_ST_Msk
RTC_ALRMBR_ST_0              EQU (0x1 :SHL: RTC_ALRMBR_ST_Pos)               ;!< 0x00000010
RTC_ALRMBR_ST_1              EQU (0x2 :SHL: RTC_ALRMBR_ST_Pos)               ;!< 0x00000020
RTC_ALRMBR_ST_2              EQU (0x4 :SHL: RTC_ALRMBR_ST_Pos)               ;!< 0x00000040
RTC_ALRMBR_SU_Pos            EQU (0)
RTC_ALRMBR_SU_Msk            EQU (0xF :SHL: RTC_ALRMBR_SU_Pos)               ;!< 0x0000000F
RTC_ALRMBR_SU                EQU RTC_ALRMBR_SU_Msk
RTC_ALRMBR_SU_0              EQU (0x1 :SHL: RTC_ALRMBR_SU_Pos)               ;!< 0x00000001
RTC_ALRMBR_SU_1              EQU (0x2 :SHL: RTC_ALRMBR_SU_Pos)               ;!< 0x00000002
RTC_ALRMBR_SU_2              EQU (0x4 :SHL: RTC_ALRMBR_SU_Pos)               ;!< 0x00000004
RTC_ALRMBR_SU_3              EQU (0x8 :SHL: RTC_ALRMBR_SU_Pos)               ;!< 0x00000008

;*******************  Bits definition for RTC_WPR register  *****************
RTC_WPR_KEY_Pos              EQU (0)
RTC_WPR_KEY_Msk              EQU (0xFF :SHL: RTC_WPR_KEY_Pos)                ;!< 0x000000FF
RTC_WPR_KEY                  EQU RTC_WPR_KEY_Msk

;*******************  Bits definition for RTC_SSR register  *****************
RTC_SSR_SS_Pos               EQU (0)
RTC_SSR_SS_Msk               EQU (0xFFFF :SHL: RTC_SSR_SS_Pos)               ;!< 0x0000FFFF
RTC_SSR_SS                   EQU RTC_SSR_SS_Msk

;*******************  Bits definition for RTC_SHIFTR register  **************
RTC_SHIFTR_SUBFS_Pos         EQU (0)
RTC_SHIFTR_SUBFS_Msk         EQU (0x7FFF :SHL: RTC_SHIFTR_SUBFS_Pos)         ;!< 0x00007FFF
RTC_SHIFTR_SUBFS             EQU RTC_SHIFTR_SUBFS_Msk
RTC_SHIFTR_ADD1S_Pos         EQU (31)
RTC_SHIFTR_ADD1S_Msk         EQU (0x1 :SHL: RTC_SHIFTR_ADD1S_Pos)            ;!< 0x80000000
RTC_SHIFTR_ADD1S             EQU RTC_SHIFTR_ADD1S_Msk

;*******************  Bits definition for RTC_TSTR register  ****************
RTC_TSTR_PM_Pos              EQU (22)
RTC_TSTR_PM_Msk              EQU (0x1 :SHL: RTC_TSTR_PM_Pos)                 ;!< 0x00400000
RTC_TSTR_PM                  EQU RTC_TSTR_PM_Msk
RTC_TSTR_HT_Pos              EQU (20)
RTC_TSTR_HT_Msk              EQU (0x3 :SHL: RTC_TSTR_HT_Pos)                 ;!< 0x00300000
RTC_TSTR_HT                  EQU RTC_TSTR_HT_Msk
RTC_TSTR_HT_0                EQU (0x1 :SHL: RTC_TSTR_HT_Pos)                 ;!< 0x00100000
RTC_TSTR_HT_1                EQU (0x2 :SHL: RTC_TSTR_HT_Pos)                 ;!< 0x00200000
RTC_TSTR_HU_Pos              EQU (16)
RTC_TSTR_HU_Msk              EQU (0xF :SHL: RTC_TSTR_HU_Pos)                 ;!< 0x000F0000
RTC_TSTR_HU                  EQU RTC_TSTR_HU_Msk
RTC_TSTR_HU_0                EQU (0x1 :SHL: RTC_TSTR_HU_Pos)                 ;!< 0x00010000
RTC_TSTR_HU_1                EQU (0x2 :SHL: RTC_TSTR_HU_Pos)                 ;!< 0x00020000
RTC_TSTR_HU_2                EQU (0x4 :SHL: RTC_TSTR_HU_Pos)                 ;!< 0x00040000
RTC_TSTR_HU_3                EQU (0x8 :SHL: RTC_TSTR_HU_Pos)                 ;!< 0x00080000
RTC_TSTR_MNT_Pos             EQU (12)
RTC_TSTR_MNT_Msk             EQU (0x7 :SHL: RTC_TSTR_MNT_Pos)                ;!< 0x00007000
RTC_TSTR_MNT                 EQU RTC_TSTR_MNT_Msk
RTC_TSTR_MNT_0               EQU (0x1 :SHL: RTC_TSTR_MNT_Pos)                ;!< 0x00001000
RTC_TSTR_MNT_1               EQU (0x2 :SHL: RTC_TSTR_MNT_Pos)                ;!< 0x00002000
RTC_TSTR_MNT_2               EQU (0x4 :SHL: RTC_TSTR_MNT_Pos)                ;!< 0x00004000
RTC_TSTR_MNU_Pos             EQU (8)
RTC_TSTR_MNU_Msk             EQU (0xF :SHL: RTC_TSTR_MNU_Pos)                ;!< 0x00000F00
RTC_TSTR_MNU                 EQU RTC_TSTR_MNU_Msk
RTC_TSTR_MNU_0               EQU (0x1 :SHL: RTC_TSTR_MNU_Pos)                ;!< 0x00000100
RTC_TSTR_MNU_1               EQU (0x2 :SHL: RTC_TSTR_MNU_Pos)                ;!< 0x00000200
RTC_TSTR_MNU_2               EQU (0x4 :SHL: RTC_TSTR_MNU_Pos)                ;!< 0x00000400
RTC_TSTR_MNU_3               EQU (0x8 :SHL: RTC_TSTR_MNU_Pos)                ;!< 0x00000800
RTC_TSTR_ST_Pos              EQU (4)
RTC_TSTR_ST_Msk              EQU (0x7 :SHL: RTC_TSTR_ST_Pos)                 ;!< 0x00000070
RTC_TSTR_ST                  EQU RTC_TSTR_ST_Msk
RTC_TSTR_ST_0                EQU (0x1 :SHL: RTC_TSTR_ST_Pos)                 ;!< 0x00000010
RTC_TSTR_ST_1                EQU (0x2 :SHL: RTC_TSTR_ST_Pos)                 ;!< 0x00000020
RTC_TSTR_ST_2                EQU (0x4 :SHL: RTC_TSTR_ST_Pos)                 ;!< 0x00000040
RTC_TSTR_SU_Pos              EQU (0)
RTC_TSTR_SU_Msk              EQU (0xF :SHL: RTC_TSTR_SU_Pos)                 ;!< 0x0000000F
RTC_TSTR_SU                  EQU RTC_TSTR_SU_Msk
RTC_TSTR_SU_0                EQU (0x1 :SHL: RTC_TSTR_SU_Pos)                 ;!< 0x00000001
RTC_TSTR_SU_1                EQU (0x2 :SHL: RTC_TSTR_SU_Pos)                 ;!< 0x00000002
RTC_TSTR_SU_2                EQU (0x4 :SHL: RTC_TSTR_SU_Pos)                 ;!< 0x00000004
RTC_TSTR_SU_3                EQU (0x8 :SHL: RTC_TSTR_SU_Pos)                 ;!< 0x00000008

;*******************  Bits definition for RTC_TSDR register  ****************
RTC_TSDR_WDU_Pos             EQU (13)
RTC_TSDR_WDU_Msk             EQU (0x7 :SHL: RTC_TSDR_WDU_Pos)                ;!< 0x0000E000
RTC_TSDR_WDU                 EQU RTC_TSDR_WDU_Msk
RTC_TSDR_WDU_0               EQU (0x1 :SHL: RTC_TSDR_WDU_Pos)                ;!< 0x00002000
RTC_TSDR_WDU_1               EQU (0x2 :SHL: RTC_TSDR_WDU_Pos)                ;!< 0x00004000
RTC_TSDR_WDU_2               EQU (0x4 :SHL: RTC_TSDR_WDU_Pos)                ;!< 0x00008000
RTC_TSDR_MT_Pos              EQU (12)
RTC_TSDR_MT_Msk              EQU (0x1 :SHL: RTC_TSDR_MT_Pos)                 ;!< 0x00001000
RTC_TSDR_MT                  EQU RTC_TSDR_MT_Msk
RTC_TSDR_MU_Pos              EQU (8)
RTC_TSDR_MU_Msk              EQU (0xF :SHL: RTC_TSDR_MU_Pos)                 ;!< 0x00000F00
RTC_TSDR_MU                  EQU RTC_TSDR_MU_Msk
RTC_TSDR_MU_0                EQU (0x1 :SHL: RTC_TSDR_MU_Pos)                 ;!< 0x00000100
RTC_TSDR_MU_1                EQU (0x2 :SHL: RTC_TSDR_MU_Pos)                 ;!< 0x00000200
RTC_TSDR_MU_2                EQU (0x4 :SHL: RTC_TSDR_MU_Pos)                 ;!< 0x00000400
RTC_TSDR_MU_3                EQU (0x8 :SHL: RTC_TSDR_MU_Pos)                 ;!< 0x00000800
RTC_TSDR_DT_Pos              EQU (4)
RTC_TSDR_DT_Msk              EQU (0x3 :SHL: RTC_TSDR_DT_Pos)                 ;!< 0x00000030
RTC_TSDR_DT                  EQU RTC_TSDR_DT_Msk
RTC_TSDR_DT_0                EQU (0x1 :SHL: RTC_TSDR_DT_Pos)                 ;!< 0x00000010
RTC_TSDR_DT_1                EQU (0x2 :SHL: RTC_TSDR_DT_Pos)                 ;!< 0x00000020
RTC_TSDR_DU_Pos              EQU (0)
RTC_TSDR_DU_Msk              EQU (0xF :SHL: RTC_TSDR_DU_Pos)                 ;!< 0x0000000F
RTC_TSDR_DU                  EQU RTC_TSDR_DU_Msk
RTC_TSDR_DU_0                EQU (0x1 :SHL: RTC_TSDR_DU_Pos)                 ;!< 0x00000001
RTC_TSDR_DU_1                EQU (0x2 :SHL: RTC_TSDR_DU_Pos)                 ;!< 0x00000002
RTC_TSDR_DU_2                EQU (0x4 :SHL: RTC_TSDR_DU_Pos)                 ;!< 0x00000004
RTC_TSDR_DU_3                EQU (0x8 :SHL: RTC_TSDR_DU_Pos)                 ;!< 0x00000008

;*******************  Bits definition for RTC_TSSSR register  ***************
RTC_TSSSR_SS_Pos             EQU (0)
RTC_TSSSR_SS_Msk             EQU (0xFFFF :SHL: RTC_TSSSR_SS_Pos)             ;!< 0x0000FFFF
RTC_TSSSR_SS                 EQU RTC_TSSSR_SS_Msk

;*******************  Bits definition for RTC_CAL register  ****************
RTC_CALR_CALP_Pos            EQU (15)
RTC_CALR_CALP_Msk            EQU (0x1 :SHL: RTC_CALR_CALP_Pos)               ;!< 0x00008000
RTC_CALR_CALP                EQU RTC_CALR_CALP_Msk
RTC_CALR_CALW8_Pos           EQU (14)
RTC_CALR_CALW8_Msk           EQU (0x1 :SHL: RTC_CALR_CALW8_Pos)              ;!< 0x00004000
RTC_CALR_CALW8               EQU RTC_CALR_CALW8_Msk
RTC_CALR_CALW16_Pos          EQU (13)
RTC_CALR_CALW16_Msk          EQU (0x1 :SHL: RTC_CALR_CALW16_Pos)             ;!< 0x00002000
RTC_CALR_CALW16              EQU RTC_CALR_CALW16_Msk
RTC_CALR_CALM_Pos            EQU (0)
RTC_CALR_CALM_Msk            EQU (0x1FF :SHL: RTC_CALR_CALM_Pos)             ;!< 0x000001FF
RTC_CALR_CALM                EQU RTC_CALR_CALM_Msk
RTC_CALR_CALM_0              EQU (0x001 :SHL: RTC_CALR_CALM_Pos)             ;!< 0x00000001
RTC_CALR_CALM_1              EQU (0x002 :SHL: RTC_CALR_CALM_Pos)             ;!< 0x00000002
RTC_CALR_CALM_2              EQU (0x004 :SHL: RTC_CALR_CALM_Pos)             ;!< 0x00000004
RTC_CALR_CALM_3              EQU (0x008 :SHL: RTC_CALR_CALM_Pos)             ;!< 0x00000008
RTC_CALR_CALM_4              EQU (0x010 :SHL: RTC_CALR_CALM_Pos)             ;!< 0x00000010
RTC_CALR_CALM_5              EQU (0x020 :SHL: RTC_CALR_CALM_Pos)             ;!< 0x00000020
RTC_CALR_CALM_6              EQU (0x040 :SHL: RTC_CALR_CALM_Pos)             ;!< 0x00000040
RTC_CALR_CALM_7              EQU (0x080 :SHL: RTC_CALR_CALM_Pos)             ;!< 0x00000080
RTC_CALR_CALM_8              EQU (0x100 :SHL: RTC_CALR_CALM_Pos)             ;!< 0x00000100

;*******************  Bits definition for RTC_TAFCR register  ***************
RTC_TAFCR_PC15MODE_Pos       EQU (23)
RTC_TAFCR_PC15MODE_Msk       EQU (0x1 :SHL: RTC_TAFCR_PC15MODE_Pos)          ;!< 0x00800000
RTC_TAFCR_PC15MODE           EQU RTC_TAFCR_PC15MODE_Msk
RTC_TAFCR_PC15VALUE_Pos      EQU (22)
RTC_TAFCR_PC15VALUE_Msk      EQU (0x1 :SHL: RTC_TAFCR_PC15VALUE_Pos)         ;!< 0x00400000
RTC_TAFCR_PC15VALUE          EQU RTC_TAFCR_PC15VALUE_Msk
RTC_TAFCR_PC14MODE_Pos       EQU (21)
RTC_TAFCR_PC14MODE_Msk       EQU (0x1 :SHL: RTC_TAFCR_PC14MODE_Pos)          ;!< 0x00200000
RTC_TAFCR_PC14MODE           EQU RTC_TAFCR_PC14MODE_Msk
RTC_TAFCR_PC14VALUE_Pos      EQU (20)
RTC_TAFCR_PC14VALUE_Msk      EQU (0x1 :SHL: RTC_TAFCR_PC14VALUE_Pos)         ;!< 0x00100000
RTC_TAFCR_PC14VALUE          EQU RTC_TAFCR_PC14VALUE_Msk
RTC_TAFCR_PC13MODE_Pos       EQU (19)
RTC_TAFCR_PC13MODE_Msk       EQU (0x1 :SHL: RTC_TAFCR_PC13MODE_Pos)          ;!< 0x00080000
RTC_TAFCR_PC13MODE           EQU RTC_TAFCR_PC13MODE_Msk
RTC_TAFCR_PC13VALUE_Pos      EQU (18)
RTC_TAFCR_PC13VALUE_Msk      EQU (0x1 :SHL: RTC_TAFCR_PC13VALUE_Pos)         ;!< 0x00040000
RTC_TAFCR_PC13VALUE          EQU RTC_TAFCR_PC13VALUE_Msk
RTC_TAFCR_TAMPPUDIS_Pos      EQU (15)
RTC_TAFCR_TAMPPUDIS_Msk      EQU (0x1 :SHL: RTC_TAFCR_TAMPPUDIS_Pos)         ;!< 0x00008000
RTC_TAFCR_TAMPPUDIS          EQU RTC_TAFCR_TAMPPUDIS_Msk
RTC_TAFCR_TAMPPRCH_Pos       EQU (13)
RTC_TAFCR_TAMPPRCH_Msk       EQU (0x3 :SHL: RTC_TAFCR_TAMPPRCH_Pos)          ;!< 0x00006000
RTC_TAFCR_TAMPPRCH           EQU RTC_TAFCR_TAMPPRCH_Msk
RTC_TAFCR_TAMPPRCH_0         EQU (0x1 :SHL: RTC_TAFCR_TAMPPRCH_Pos)          ;!< 0x00002000
RTC_TAFCR_TAMPPRCH_1         EQU (0x2 :SHL: RTC_TAFCR_TAMPPRCH_Pos)          ;!< 0x00004000
RTC_TAFCR_TAMPFLT_Pos        EQU (11)
RTC_TAFCR_TAMPFLT_Msk        EQU (0x3 :SHL: RTC_TAFCR_TAMPFLT_Pos)           ;!< 0x00001800
RTC_TAFCR_TAMPFLT            EQU RTC_TAFCR_TAMPFLT_Msk
RTC_TAFCR_TAMPFLT_0          EQU (0x1 :SHL: RTC_TAFCR_TAMPFLT_Pos)           ;!< 0x00000800
RTC_TAFCR_TAMPFLT_1          EQU (0x2 :SHL: RTC_TAFCR_TAMPFLT_Pos)           ;!< 0x00001000
RTC_TAFCR_TAMPFREQ_Pos       EQU (8)
RTC_TAFCR_TAMPFREQ_Msk       EQU (0x7 :SHL: RTC_TAFCR_TAMPFREQ_Pos)          ;!< 0x00000700
RTC_TAFCR_TAMPFREQ           EQU RTC_TAFCR_TAMPFREQ_Msk
RTC_TAFCR_TAMPFREQ_0         EQU (0x1 :SHL: RTC_TAFCR_TAMPFREQ_Pos)          ;!< 0x00000100
RTC_TAFCR_TAMPFREQ_1         EQU (0x2 :SHL: RTC_TAFCR_TAMPFREQ_Pos)          ;!< 0x00000200
RTC_TAFCR_TAMPFREQ_2         EQU (0x4 :SHL: RTC_TAFCR_TAMPFREQ_Pos)          ;!< 0x00000400
RTC_TAFCR_TAMPTS_Pos         EQU (7)
RTC_TAFCR_TAMPTS_Msk         EQU (0x1 :SHL: RTC_TAFCR_TAMPTS_Pos)            ;!< 0x00000080
RTC_TAFCR_TAMPTS             EQU RTC_TAFCR_TAMPTS_Msk
RTC_TAFCR_TAMP3TRG_Pos       EQU (6)
RTC_TAFCR_TAMP3TRG_Msk       EQU (0x1 :SHL: RTC_TAFCR_TAMP3TRG_Pos)          ;!< 0x00000040
RTC_TAFCR_TAMP3TRG           EQU RTC_TAFCR_TAMP3TRG_Msk
RTC_TAFCR_TAMP3E_Pos         EQU (5)
RTC_TAFCR_TAMP3E_Msk         EQU (0x1 :SHL: RTC_TAFCR_TAMP3E_Pos)            ;!< 0x00000020
RTC_TAFCR_TAMP3E             EQU RTC_TAFCR_TAMP3E_Msk
RTC_TAFCR_TAMP2TRG_Pos       EQU (4)
RTC_TAFCR_TAMP2TRG_Msk       EQU (0x1 :SHL: RTC_TAFCR_TAMP2TRG_Pos)          ;!< 0x00000010
RTC_TAFCR_TAMP2TRG           EQU RTC_TAFCR_TAMP2TRG_Msk
RTC_TAFCR_TAMP2E_Pos         EQU (3)
RTC_TAFCR_TAMP2E_Msk         EQU (0x1 :SHL: RTC_TAFCR_TAMP2E_Pos)            ;!< 0x00000008
RTC_TAFCR_TAMP2E             EQU RTC_TAFCR_TAMP2E_Msk
RTC_TAFCR_TAMPIE_Pos         EQU (2)
RTC_TAFCR_TAMPIE_Msk         EQU (0x1 :SHL: RTC_TAFCR_TAMPIE_Pos)            ;!< 0x00000004
RTC_TAFCR_TAMPIE             EQU RTC_TAFCR_TAMPIE_Msk
RTC_TAFCR_TAMP1TRG_Pos       EQU (1)
RTC_TAFCR_TAMP1TRG_Msk       EQU (0x1 :SHL: RTC_TAFCR_TAMP1TRG_Pos)          ;!< 0x00000002
RTC_TAFCR_TAMP1TRG           EQU RTC_TAFCR_TAMP1TRG_Msk
RTC_TAFCR_TAMP1E_Pos         EQU (0)
RTC_TAFCR_TAMP1E_Msk         EQU (0x1 :SHL: RTC_TAFCR_TAMP1E_Pos)            ;!< 0x00000001
RTC_TAFCR_TAMP1E             EQU RTC_TAFCR_TAMP1E_Msk

; Reference defines
RTC_TAFCR_ALARMOUTTYPE               EQU RTC_TAFCR_PC13VALUE

;*******************  Bits definition for RTC_ALRMASSR register  ************
RTC_ALRMASSR_MASKSS_Pos      EQU (24)
RTC_ALRMASSR_MASKSS_Msk      EQU (0xF :SHL: RTC_ALRMASSR_MASKSS_Pos)         ;!< 0x0F000000
RTC_ALRMASSR_MASKSS          EQU RTC_ALRMASSR_MASKSS_Msk
RTC_ALRMASSR_MASKSS_0        EQU (0x1 :SHL: RTC_ALRMASSR_MASKSS_Pos)         ;!< 0x01000000
RTC_ALRMASSR_MASKSS_1        EQU (0x2 :SHL: RTC_ALRMASSR_MASKSS_Pos)         ;!< 0x02000000
RTC_ALRMASSR_MASKSS_2        EQU (0x4 :SHL: RTC_ALRMASSR_MASKSS_Pos)         ;!< 0x04000000
RTC_ALRMASSR_MASKSS_3        EQU (0x8 :SHL: RTC_ALRMASSR_MASKSS_Pos)         ;!< 0x08000000
RTC_ALRMASSR_SS_Pos          EQU (0)
RTC_ALRMASSR_SS_Msk          EQU (0x7FFF :SHL: RTC_ALRMASSR_SS_Pos)          ;!< 0x00007FFF
RTC_ALRMASSR_SS              EQU RTC_ALRMASSR_SS_Msk

;*******************  Bits definition for RTC_ALRMBSSR register  ************
RTC_ALRMBSSR_MASKSS_Pos      EQU (24)
RTC_ALRMBSSR_MASKSS_Msk      EQU (0xF :SHL: RTC_ALRMBSSR_MASKSS_Pos)         ;!< 0x0F000000
RTC_ALRMBSSR_MASKSS          EQU RTC_ALRMBSSR_MASKSS_Msk
RTC_ALRMBSSR_MASKSS_0        EQU (0x1 :SHL: RTC_ALRMBSSR_MASKSS_Pos)         ;!< 0x01000000
RTC_ALRMBSSR_MASKSS_1        EQU (0x2 :SHL: RTC_ALRMBSSR_MASKSS_Pos)         ;!< 0x02000000
RTC_ALRMBSSR_MASKSS_2        EQU (0x4 :SHL: RTC_ALRMBSSR_MASKSS_Pos)         ;!< 0x04000000
RTC_ALRMBSSR_MASKSS_3        EQU (0x8 :SHL: RTC_ALRMBSSR_MASKSS_Pos)         ;!< 0x08000000
RTC_ALRMBSSR_SS_Pos          EQU (0)
RTC_ALRMBSSR_SS_Msk          EQU (0x7FFF :SHL: RTC_ALRMBSSR_SS_Pos)          ;!< 0x00007FFF
RTC_ALRMBSSR_SS              EQU RTC_ALRMBSSR_SS_Msk

;*******************  Bits definition for RTC_BKP0R register  ***************
RTC_BKP0R_Pos                EQU (0)
RTC_BKP0R_Msk                EQU (0xFFFFFFFF :SHL: RTC_BKP0R_Pos)            ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP1R register  ***************
RTC_BKP1R_Pos                EQU (0)
RTC_BKP1R_Msk                EQU (0xFFFFFFFF :SHL: RTC_BKP1R_Pos)            ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP2R register  ***************
RTC_BKP2R_Pos                EQU (0)
RTC_BKP2R_Msk                EQU (0xFFFFFFFF :SHL: RTC_BKP2R_Pos)            ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP3R register  ***************
RTC_BKP3R_Pos                EQU (0)
RTC_BKP3R_Msk                EQU (0xFFFFFFFF :SHL: RTC_BKP3R_Pos)            ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP4R register  ***************
RTC_BKP4R_Pos                EQU (0)
RTC_BKP4R_Msk                EQU (0xFFFFFFFF :SHL: RTC_BKP4R_Pos)            ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP5R register  ***************
RTC_BKP5R_Pos                EQU (0)
RTC_BKP5R_Msk                EQU (0xFFFFFFFF :SHL: RTC_BKP5R_Pos)            ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP6R register  ***************
RTC_BKP6R_Pos                EQU (0)
RTC_BKP6R_Msk                EQU (0xFFFFFFFF :SHL: RTC_BKP6R_Pos)            ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP7R register  ***************
RTC_BKP7R_Pos                EQU (0)
RTC_BKP7R_Msk                EQU (0xFFFFFFFF :SHL: RTC_BKP7R_Pos)            ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP8R register  ***************
RTC_BKP8R_Pos                EQU (0)
RTC_BKP8R_Msk                EQU (0xFFFFFFFF :SHL: RTC_BKP8R_Pos)            ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP9R register  ***************
RTC_BKP9R_Pos                EQU (0)
RTC_BKP9R_Msk                EQU (0xFFFFFFFF :SHL: RTC_BKP9R_Pos)            ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP10R register  **************
RTC_BKP10R_Pos               EQU (0)
RTC_BKP10R_Msk               EQU (0xFFFFFFFF :SHL: RTC_BKP10R_Pos)           ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP11R register  **************
RTC_BKP11R_Pos               EQU (0)
RTC_BKP11R_Msk               EQU (0xFFFFFFFF :SHL: RTC_BKP11R_Pos)           ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP12R register  **************
RTC_BKP12R_Pos               EQU (0)
RTC_BKP12R_Msk               EQU (0xFFFFFFFF :SHL: RTC_BKP12R_Pos)           ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP13R register  **************
RTC_BKP13R_Pos               EQU (0)
RTC_BKP13R_Msk               EQU (0xFFFFFFFF :SHL: RTC_BKP13R_Pos)           ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP14R register  **************
RTC_BKP14R_Pos               EQU (0)
RTC_BKP14R_Msk               EQU (0xFFFFFFFF :SHL: RTC_BKP14R_Pos)           ;!< 0xFFFFFFFF

;*******************  Bits definition for RTC_BKP15R register  **************
RTC_BKP15R_Pos               EQU (0)
RTC_BKP15R_Msk               EQU (0xFFFFFFFF :SHL: RTC_BKP15R_Pos)           ;!< 0xFFFFFFFF

;******************* Number of backup registers *****************************
RTC_BKP_NUMBER                       EQU 16

;****************************************************************************
;
;                        Serial Peripheral Interface (SPI)
;
;****************************************************************************

;******************  Bit definition for SPI_CR1 register  *******************
SPI_CR1_CPHA_Pos            EQU (0)
SPI_CR1_CPHA_Msk            EQU (0x1 :SHL: SPI_CR1_CPHA_Pos)                 ;!< 0x00000001
SPI_CR1_CPHA                EQU SPI_CR1_CPHA_Msk                           ;!< Clock Phase
SPI_CR1_CPOL_Pos            EQU (1)
SPI_CR1_CPOL_Msk            EQU (0x1 :SHL: SPI_CR1_CPOL_Pos)                 ;!< 0x00000002
SPI_CR1_CPOL                EQU SPI_CR1_CPOL_Msk                           ;!< Clock Polarity
SPI_CR1_MSTR_Pos            EQU (2)
SPI_CR1_MSTR_Msk            EQU (0x1 :SHL: SPI_CR1_MSTR_Pos)                 ;!< 0x00000004
SPI_CR1_MSTR                EQU SPI_CR1_MSTR_Msk                           ;!< Master Selection
SPI_CR1_BR_Pos              EQU (3)
SPI_CR1_BR_Msk              EQU (0x7 :SHL: SPI_CR1_BR_Pos)                   ;!< 0x00000038
SPI_CR1_BR                  EQU SPI_CR1_BR_Msk                             ;!< BR[2:0] bits (Baud Rate Control)
SPI_CR1_BR_0                EQU (0x1 :SHL: SPI_CR1_BR_Pos)                   ;!< 0x00000008
SPI_CR1_BR_1                EQU (0x2 :SHL: SPI_CR1_BR_Pos)                   ;!< 0x00000010
SPI_CR1_BR_2                EQU (0x4 :SHL: SPI_CR1_BR_Pos)                   ;!< 0x00000020
SPI_CR1_SPE_Pos             EQU (6)
SPI_CR1_SPE_Msk             EQU (0x1 :SHL: SPI_CR1_SPE_Pos)                  ;!< 0x00000040
SPI_CR1_SPE                 EQU SPI_CR1_SPE_Msk                            ;!< SPI Enable
SPI_CR1_LSBFIRST_Pos        EQU (7)
SPI_CR1_LSBFIRST_Msk        EQU (0x1 :SHL: SPI_CR1_LSBFIRST_Pos)             ;!< 0x00000080
SPI_CR1_LSBFIRST            EQU SPI_CR1_LSBFIRST_Msk                       ;!< Frame Format
SPI_CR1_SSI_Pos             EQU (8)
SPI_CR1_SSI_Msk             EQU (0x1 :SHL: SPI_CR1_SSI_Pos)                  ;!< 0x00000100
SPI_CR1_SSI                 EQU SPI_CR1_SSI_Msk                            ;!< Internal slave select
SPI_CR1_SSM_Pos             EQU (9)
SPI_CR1_SSM_Msk             EQU (0x1 :SHL: SPI_CR1_SSM_Pos)                  ;!< 0x00000200
SPI_CR1_SSM                 EQU SPI_CR1_SSM_Msk                            ;!< Software slave management
SPI_CR1_RXONLY_Pos          EQU (10)
SPI_CR1_RXONLY_Msk          EQU (0x1 :SHL: SPI_CR1_RXONLY_Pos)               ;!< 0x00000400
SPI_CR1_RXONLY              EQU SPI_CR1_RXONLY_Msk                         ;!< Receive only
SPI_CR1_CRCL_Pos            EQU (11)
SPI_CR1_CRCL_Msk            EQU (0x1 :SHL: SPI_CR1_CRCL_Pos)                 ;!< 0x00000800
SPI_CR1_CRCL                EQU SPI_CR1_CRCL_Msk                           ;!< CRC Length
SPI_CR1_CRCNEXT_Pos         EQU (12)
SPI_CR1_CRCNEXT_Msk         EQU (0x1 :SHL: SPI_CR1_CRCNEXT_Pos)              ;!< 0x00001000
SPI_CR1_CRCNEXT             EQU SPI_CR1_CRCNEXT_Msk                        ;!< Transmit CRC next
SPI_CR1_CRCEN_Pos           EQU (13)
SPI_CR1_CRCEN_Msk           EQU (0x1 :SHL: SPI_CR1_CRCEN_Pos)                ;!< 0x00002000
SPI_CR1_CRCEN               EQU SPI_CR1_CRCEN_Msk                          ;!< Hardware CRC calculation enable
SPI_CR1_BIDIOE_Pos          EQU (14)
SPI_CR1_BIDIOE_Msk          EQU (0x1 :SHL: SPI_CR1_BIDIOE_Pos)               ;!< 0x00004000
SPI_CR1_BIDIOE              EQU SPI_CR1_BIDIOE_Msk                         ;!< Output enable in bidirectional mode
SPI_CR1_BIDIMODE_Pos        EQU (15)
SPI_CR1_BIDIMODE_Msk        EQU (0x1 :SHL: SPI_CR1_BIDIMODE_Pos)             ;!< 0x00008000
SPI_CR1_BIDIMODE            EQU SPI_CR1_BIDIMODE_Msk                       ;!< Bidirectional data mode enable

;******************  Bit definition for SPI_CR2 register  *******************
SPI_CR2_RXDMAEN_Pos         EQU (0)
SPI_CR2_RXDMAEN_Msk         EQU (0x1 :SHL: SPI_CR2_RXDMAEN_Pos)              ;!< 0x00000001
SPI_CR2_RXDMAEN             EQU SPI_CR2_RXDMAEN_Msk                        ;!< Rx Buffer DMA Enable
SPI_CR2_TXDMAEN_Pos         EQU (1)
SPI_CR2_TXDMAEN_Msk         EQU (0x1 :SHL: SPI_CR2_TXDMAEN_Pos)              ;!< 0x00000002
SPI_CR2_TXDMAEN             EQU SPI_CR2_TXDMAEN_Msk                        ;!< Tx Buffer DMA Enable
SPI_CR2_SSOE_Pos            EQU (2)
SPI_CR2_SSOE_Msk            EQU (0x1 :SHL: SPI_CR2_SSOE_Pos)                 ;!< 0x00000004
SPI_CR2_SSOE                EQU SPI_CR2_SSOE_Msk                           ;!< SS Output Enable
SPI_CR2_NSSP_Pos            EQU (3)
SPI_CR2_NSSP_Msk            EQU (0x1 :SHL: SPI_CR2_NSSP_Pos)                 ;!< 0x00000008
SPI_CR2_NSSP                EQU SPI_CR2_NSSP_Msk                           ;!< NSS pulse management Enable
SPI_CR2_FRF_Pos             EQU (4)
SPI_CR2_FRF_Msk             EQU (0x1 :SHL: SPI_CR2_FRF_Pos)                  ;!< 0x00000010
SPI_CR2_FRF                 EQU SPI_CR2_FRF_Msk                            ;!< Frame Format Enable
SPI_CR2_ERRIE_Pos           EQU (5)
SPI_CR2_ERRIE_Msk           EQU (0x1 :SHL: SPI_CR2_ERRIE_Pos)                ;!< 0x00000020
SPI_CR2_ERRIE               EQU SPI_CR2_ERRIE_Msk                          ;!< Error Interrupt Enable
SPI_CR2_RXNEIE_Pos          EQU (6)
SPI_CR2_RXNEIE_Msk          EQU (0x1 :SHL: SPI_CR2_RXNEIE_Pos)               ;!< 0x00000040
SPI_CR2_RXNEIE              EQU SPI_CR2_RXNEIE_Msk                         ;!< RX buffer Not Empty Interrupt Enable
SPI_CR2_TXEIE_Pos           EQU (7)
SPI_CR2_TXEIE_Msk           EQU (0x1 :SHL: SPI_CR2_TXEIE_Pos)                ;!< 0x00000080
SPI_CR2_TXEIE               EQU SPI_CR2_TXEIE_Msk                          ;!< Tx buffer Empty Interrupt Enable
SPI_CR2_DS_Pos              EQU (8)
SPI_CR2_DS_Msk              EQU (0xF :SHL: SPI_CR2_DS_Pos)                   ;!< 0x00000F00
SPI_CR2_DS                  EQU SPI_CR2_DS_Msk                             ;!< DS[3:0] Data Size
SPI_CR2_DS_0                EQU (0x1 :SHL: SPI_CR2_DS_Pos)                   ;!< 0x00000100
SPI_CR2_DS_1                EQU (0x2 :SHL: SPI_CR2_DS_Pos)                   ;!< 0x00000200
SPI_CR2_DS_2                EQU (0x4 :SHL: SPI_CR2_DS_Pos)                   ;!< 0x00000400
SPI_CR2_DS_3                EQU (0x8 :SHL: SPI_CR2_DS_Pos)                   ;!< 0x00000800
SPI_CR2_FRXTH_Pos           EQU (12)
SPI_CR2_FRXTH_Msk           EQU (0x1 :SHL: SPI_CR2_FRXTH_Pos)                ;!< 0x00001000
SPI_CR2_FRXTH               EQU SPI_CR2_FRXTH_Msk                          ;!< FIFO reception Threshold
SPI_CR2_LDMARX_Pos          EQU (13)
SPI_CR2_LDMARX_Msk          EQU (0x1 :SHL: SPI_CR2_LDMARX_Pos)               ;!< 0x00002000
SPI_CR2_LDMARX              EQU SPI_CR2_LDMARX_Msk                         ;!< Last DMA transfer for reception
SPI_CR2_LDMATX_Pos          EQU (14)
SPI_CR2_LDMATX_Msk          EQU (0x1 :SHL: SPI_CR2_LDMATX_Pos)               ;!< 0x00004000
SPI_CR2_LDMATX              EQU SPI_CR2_LDMATX_Msk                         ;!< Last DMA transfer for transmission

;*******************  Bit definition for SPI_SR register  *******************
SPI_SR_RXNE_Pos             EQU (0)
SPI_SR_RXNE_Msk             EQU (0x1 :SHL: SPI_SR_RXNE_Pos)                  ;!< 0x00000001
SPI_SR_RXNE                 EQU SPI_SR_RXNE_Msk                            ;!< Receive buffer Not Empty
SPI_SR_TXE_Pos              EQU (1)
SPI_SR_TXE_Msk              EQU (0x1 :SHL: SPI_SR_TXE_Pos)                   ;!< 0x00000002
SPI_SR_TXE                  EQU SPI_SR_TXE_Msk                             ;!< Transmit buffer Empty
SPI_SR_CHSIDE_Pos           EQU (2)
SPI_SR_CHSIDE_Msk           EQU (0x1 :SHL: SPI_SR_CHSIDE_Pos)                ;!< 0x00000004
SPI_SR_CHSIDE               EQU SPI_SR_CHSIDE_Msk                          ;!< Channel side
SPI_SR_UDR_Pos              EQU (3)
SPI_SR_UDR_Msk              EQU (0x1 :SHL: SPI_SR_UDR_Pos)                   ;!< 0x00000008
SPI_SR_UDR                  EQU SPI_SR_UDR_Msk                             ;!< Underrun flag
SPI_SR_CRCERR_Pos           EQU (4)
SPI_SR_CRCERR_Msk           EQU (0x1 :SHL: SPI_SR_CRCERR_Pos)                ;!< 0x00000010
SPI_SR_CRCERR               EQU SPI_SR_CRCERR_Msk                          ;!< CRC Error flag
SPI_SR_MODF_Pos             EQU (5)
SPI_SR_MODF_Msk             EQU (0x1 :SHL: SPI_SR_MODF_Pos)                  ;!< 0x00000020
SPI_SR_MODF                 EQU SPI_SR_MODF_Msk                            ;!< Mode fault
SPI_SR_OVR_Pos              EQU (6)
SPI_SR_OVR_Msk              EQU (0x1 :SHL: SPI_SR_OVR_Pos)                   ;!< 0x00000040
SPI_SR_OVR                  EQU SPI_SR_OVR_Msk                             ;!< Overrun flag
SPI_SR_BSY_Pos              EQU (7)
SPI_SR_BSY_Msk              EQU (0x1 :SHL: SPI_SR_BSY_Pos)                   ;!< 0x00000080
SPI_SR_BSY                  EQU SPI_SR_BSY_Msk                             ;!< Busy flag
SPI_SR_FRE_Pos              EQU (8)
SPI_SR_FRE_Msk              EQU (0x1 :SHL: SPI_SR_FRE_Pos)                   ;!< 0x00000100
SPI_SR_FRE                  EQU SPI_SR_FRE_Msk                             ;!< TI frame format error
SPI_SR_FRLVL_Pos            EQU (9)
SPI_SR_FRLVL_Msk            EQU (0x3 :SHL: SPI_SR_FRLVL_Pos)                 ;!< 0x00000600
SPI_SR_FRLVL                EQU SPI_SR_FRLVL_Msk                           ;!< FIFO Reception Level
SPI_SR_FRLVL_0              EQU (0x1 :SHL: SPI_SR_FRLVL_Pos)                 ;!< 0x00000200
SPI_SR_FRLVL_1              EQU (0x2 :SHL: SPI_SR_FRLVL_Pos)                 ;!< 0x00000400
SPI_SR_FTLVL_Pos            EQU (11)
SPI_SR_FTLVL_Msk            EQU (0x3 :SHL: SPI_SR_FTLVL_Pos)                 ;!< 0x00001800
SPI_SR_FTLVL                EQU SPI_SR_FTLVL_Msk                           ;!< FIFO Transmission Level
SPI_SR_FTLVL_0              EQU (0x1 :SHL: SPI_SR_FTLVL_Pos)                 ;!< 0x00000800
SPI_SR_FTLVL_1              EQU (0x2 :SHL: SPI_SR_FTLVL_Pos)                 ;!< 0x00001000

;*******************  Bit definition for SPI_DR register  *******************
SPI_DR_DR_Pos               EQU (0)
SPI_DR_DR_Msk               EQU (0xFFFF :SHL: SPI_DR_DR_Pos)                 ;!< 0x0000FFFF
SPI_DR_DR                   EQU SPI_DR_DR_Msk                              ;!< Data Register

;******************  Bit definition for SPI_CRCPR register  *****************
SPI_CRCPR_CRCPOLY_Pos       EQU (0)
SPI_CRCPR_CRCPOLY_Msk       EQU (0xFFFF :SHL: SPI_CRCPR_CRCPOLY_Pos)         ;!< 0x0000FFFF
SPI_CRCPR_CRCPOLY           EQU SPI_CRCPR_CRCPOLY_Msk                      ;!< CRC polynomial register

;*****************  Bit definition for SPI_RXCRCR register  *****************
SPI_RXCRCR_RXCRC_Pos        EQU (0)
SPI_RXCRCR_RXCRC_Msk        EQU (0xFFFF :SHL: SPI_RXCRCR_RXCRC_Pos)          ;!< 0x0000FFFF
SPI_RXCRCR_RXCRC            EQU SPI_RXCRCR_RXCRC_Msk                       ;!< Rx CRC Register

;*****************  Bit definition for SPI_TXCRCR register  *****************
SPI_TXCRCR_TXCRC_Pos        EQU (0)
SPI_TXCRCR_TXCRC_Msk        EQU (0xFFFF :SHL: SPI_TXCRCR_TXCRC_Pos)          ;!< 0x0000FFFF
SPI_TXCRCR_TXCRC            EQU SPI_TXCRCR_TXCRC_Msk                       ;!< Tx CRC Register

;*****************  Bit definition for SPI_I2SCFGR register  ****************
SPI_I2SCFGR_CHLEN_Pos       EQU (0)
SPI_I2SCFGR_CHLEN_Msk       EQU (0x1 :SHL: SPI_I2SCFGR_CHLEN_Pos)            ;!< 0x00000001
SPI_I2SCFGR_CHLEN           EQU SPI_I2SCFGR_CHLEN_Msk                      ;!<Channel length (number of bits per audio channel)
SPI_I2SCFGR_DATLEN_Pos      EQU (1)
SPI_I2SCFGR_DATLEN_Msk      EQU (0x3 :SHL: SPI_I2SCFGR_DATLEN_Pos)           ;!< 0x00000006
SPI_I2SCFGR_DATLEN          EQU SPI_I2SCFGR_DATLEN_Msk                     ;!<DATLEN[1:0] bits (Data length to be transferred)
SPI_I2SCFGR_DATLEN_0        EQU (0x1 :SHL: SPI_I2SCFGR_DATLEN_Pos)           ;!< 0x00000002
SPI_I2SCFGR_DATLEN_1        EQU (0x2 :SHL: SPI_I2SCFGR_DATLEN_Pos)           ;!< 0x00000004
SPI_I2SCFGR_CKPOL_Pos       EQU (3)
SPI_I2SCFGR_CKPOL_Msk       EQU (0x1 :SHL: SPI_I2SCFGR_CKPOL_Pos)            ;!< 0x00000008
SPI_I2SCFGR_CKPOL           EQU SPI_I2SCFGR_CKPOL_Msk                      ;!<steady state clock polarity
SPI_I2SCFGR_I2SSTD_Pos      EQU (4)
SPI_I2SCFGR_I2SSTD_Msk      EQU (0x3 :SHL: SPI_I2SCFGR_I2SSTD_Pos)           ;!< 0x00000030
SPI_I2SCFGR_I2SSTD          EQU SPI_I2SCFGR_I2SSTD_Msk                     ;!<I2SSTD[1:0] bits (I2S standard selection)
SPI_I2SCFGR_I2SSTD_0        EQU (0x1 :SHL: SPI_I2SCFGR_I2SSTD_Pos)           ;!< 0x00000010
SPI_I2SCFGR_I2SSTD_1        EQU (0x2 :SHL: SPI_I2SCFGR_I2SSTD_Pos)           ;!< 0x00000020
SPI_I2SCFGR_PCMSYNC_Pos     EQU (7)
SPI_I2SCFGR_PCMSYNC_Msk     EQU (0x1 :SHL: SPI_I2SCFGR_PCMSYNC_Pos)          ;!< 0x00000080
SPI_I2SCFGR_PCMSYNC         EQU SPI_I2SCFGR_PCMSYNC_Msk                    ;!<PCM frame synchronization
SPI_I2SCFGR_I2SCFG_Pos      EQU (8)
SPI_I2SCFGR_I2SCFG_Msk      EQU (0x3 :SHL: SPI_I2SCFGR_I2SCFG_Pos)           ;!< 0x00000300
SPI_I2SCFGR_I2SCFG          EQU SPI_I2SCFGR_I2SCFG_Msk                     ;!<I2SCFG[1:0] bits (I2S configuration mode)
SPI_I2SCFGR_I2SCFG_0        EQU (0x1 :SHL: SPI_I2SCFGR_I2SCFG_Pos)           ;!< 0x00000100
SPI_I2SCFGR_I2SCFG_1        EQU (0x2 :SHL: SPI_I2SCFGR_I2SCFG_Pos)           ;!< 0x00000200
SPI_I2SCFGR_I2SE_Pos        EQU (10)
SPI_I2SCFGR_I2SE_Msk        EQU (0x1 :SHL: SPI_I2SCFGR_I2SE_Pos)             ;!< 0x00000400
SPI_I2SCFGR_I2SE            EQU SPI_I2SCFGR_I2SE_Msk                       ;!<I2S Enable
SPI_I2SCFGR_I2SMOD_Pos      EQU (11)
SPI_I2SCFGR_I2SMOD_Msk      EQU (0x1 :SHL: SPI_I2SCFGR_I2SMOD_Pos)           ;!< 0x00000800
SPI_I2SCFGR_I2SMOD          EQU SPI_I2SCFGR_I2SMOD_Msk                     ;!<I2S mode selection

;*****************  Bit definition for SPI_I2SPR register  ******************
SPI_I2SPR_I2SDIV_Pos        EQU (0)
SPI_I2SPR_I2SDIV_Msk        EQU (0xFF :SHL: SPI_I2SPR_I2SDIV_Pos)            ;!< 0x000000FF
SPI_I2SPR_I2SDIV            EQU SPI_I2SPR_I2SDIV_Msk                       ;!<I2S Linear prescaler
SPI_I2SPR_ODD_Pos           EQU (8)
SPI_I2SPR_ODD_Msk           EQU (0x1 :SHL: SPI_I2SPR_ODD_Pos)                ;!< 0x00000100
SPI_I2SPR_ODD               EQU SPI_I2SPR_ODD_Msk                          ;!<Odd factor for the prescaler
SPI_I2SPR_MCKOE_Pos         EQU (9)
SPI_I2SPR_MCKOE_Msk         EQU (0x1 :SHL: SPI_I2SPR_MCKOE_Pos)              ;!< 0x00000200
SPI_I2SPR_MCKOE             EQU SPI_I2SPR_MCKOE_Msk                        ;!<Master Clock Output Enable

;****************************************************************************
;
;                        System Configuration(SYSCFG)
;
;****************************************************************************
;****************  Bit definition for SYSCFG_CFGR1 register  ***************
SYSCFG_CFGR1_MEM_MODE_Pos                EQU (0)
SYSCFG_CFGR1_MEM_MODE_Msk                EQU (0x7 :SHL: SYSCFG_CFGR1_MEM_MODE_Pos) ;!< 0x00000007
SYSCFG_CFGR1_MEM_MODE                    EQU SYSCFG_CFGR1_MEM_MODE_Msk     ;!< SYSCFG_Memory Remap Config
SYSCFG_CFGR1_MEM_MODE_0                  EQU (0x00000001)                 ;!< Bit 0
SYSCFG_CFGR1_MEM_MODE_1                  EQU (0x00000002)                 ;!< Bit 1
SYSCFG_CFGR1_MEM_MODE_2                  EQU (0x00000004)                 ;!< Bit 2
SYSCFG_CFGR1_USB_IT_RMP_Pos              EQU (5)
SYSCFG_CFGR1_USB_IT_RMP_Msk              EQU (0x1 :SHL: SYSCFG_CFGR1_USB_IT_RMP_Pos) ;!< 0x00000020
SYSCFG_CFGR1_USB_IT_RMP                  EQU SYSCFG_CFGR1_USB_IT_RMP_Msk   ;!< USB interrupt remap
SYSCFG_CFGR1_TIM1_ITR3_RMP_Pos           EQU (6)
SYSCFG_CFGR1_TIM1_ITR3_RMP_Msk           EQU (0x1 :SHL: SYSCFG_CFGR1_TIM1_ITR3_RMP_Pos) ;!< 0x00000040
SYSCFG_CFGR1_TIM1_ITR3_RMP               EQU SYSCFG_CFGR1_TIM1_ITR3_RMP_Msk ;!< Timer 1 ITR3 selection
SYSCFG_CFGR1_DAC1_TRIG1_RMP_Pos          EQU (7)
SYSCFG_CFGR1_DAC1_TRIG1_RMP_Msk          EQU (0x1 :SHL: SYSCFG_CFGR1_DAC1_TRIG1_RMP_Pos) ;!< 0x00000080
SYSCFG_CFGR1_DAC1_TRIG1_RMP              EQU SYSCFG_CFGR1_DAC1_TRIG1_RMP_Msk ;!< DAC1 Trigger1 remap
SYSCFG_CFGR1_DMA_RMP_Pos                 EQU (8)
SYSCFG_CFGR1_DMA_RMP_Msk                 EQU (0x79 :SHL: SYSCFG_CFGR1_DMA_RMP_Pos) ;!< 0x00007900
SYSCFG_CFGR1_DMA_RMP                     EQU SYSCFG_CFGR1_DMA_RMP_Msk      ;!< DMA remap mask
SYSCFG_CFGR1_ADC24_DMA_RMP_Pos           EQU (8)
SYSCFG_CFGR1_ADC24_DMA_RMP_Msk           EQU (0x1 :SHL: SYSCFG_CFGR1_ADC24_DMA_RMP_Pos) ;!< 0x00000100
SYSCFG_CFGR1_ADC24_DMA_RMP               EQU SYSCFG_CFGR1_ADC24_DMA_RMP_Msk ;!< ADC2 and ADC4 DMA remap
SYSCFG_CFGR1_TIM16_DMA_RMP_Pos           EQU (11)
SYSCFG_CFGR1_TIM16_DMA_RMP_Msk           EQU (0x1 :SHL: SYSCFG_CFGR1_TIM16_DMA_RMP_Pos) ;!< 0x00000800
SYSCFG_CFGR1_TIM16_DMA_RMP               EQU SYSCFG_CFGR1_TIM16_DMA_RMP_Msk ;!< Timer 16 DMA remap
SYSCFG_CFGR1_TIM17_DMA_RMP_Pos           EQU (12)
SYSCFG_CFGR1_TIM17_DMA_RMP_Msk           EQU (0x1 :SHL: SYSCFG_CFGR1_TIM17_DMA_RMP_Pos) ;!< 0x00001000
SYSCFG_CFGR1_TIM17_DMA_RMP               EQU SYSCFG_CFGR1_TIM17_DMA_RMP_Msk ;!< Timer 17 DMA remap
SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP_Pos     EQU (13)
SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP_Msk     EQU (0x1 :SHL: SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP_Pos) ;!< 0x00002000
SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP         EQU SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP_Msk ;!< Timer 6 / DAC1 Ch1 DMA remap
SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP_Pos     EQU (14)
SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP_Msk     EQU (0x1 :SHL: SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP_Pos) ;!< 0x00004000
SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP         EQU SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP_Msk ;!< Timer 7 / DAC1 Ch2 DMA remap
SYSCFG_CFGR1_I2C_PB6_FMP_Pos             EQU (16)
SYSCFG_CFGR1_I2C_PB6_FMP_Msk             EQU (0x1 :SHL: SYSCFG_CFGR1_I2C_PB6_FMP_Pos) ;!< 0x00010000
SYSCFG_CFGR1_I2C_PB6_FMP                 EQU SYSCFG_CFGR1_I2C_PB6_FMP_Msk  ;!< I2C PB6 Fast mode plus
SYSCFG_CFGR1_I2C_PB7_FMP_Pos             EQU (17)
SYSCFG_CFGR1_I2C_PB7_FMP_Msk             EQU (0x1 :SHL: SYSCFG_CFGR1_I2C_PB7_FMP_Pos) ;!< 0x00020000
SYSCFG_CFGR1_I2C_PB7_FMP                 EQU SYSCFG_CFGR1_I2C_PB7_FMP_Msk  ;!< I2C PB7 Fast mode plus
SYSCFG_CFGR1_I2C_PB8_FMP_Pos             EQU (18)
SYSCFG_CFGR1_I2C_PB8_FMP_Msk             EQU (0x1 :SHL: SYSCFG_CFGR1_I2C_PB8_FMP_Pos) ;!< 0x00040000
SYSCFG_CFGR1_I2C_PB8_FMP                 EQU SYSCFG_CFGR1_I2C_PB8_FMP_Msk  ;!< I2C PB8 Fast mode plus
SYSCFG_CFGR1_I2C_PB9_FMP_Pos             EQU (19)
SYSCFG_CFGR1_I2C_PB9_FMP_Msk             EQU (0x1 :SHL: SYSCFG_CFGR1_I2C_PB9_FMP_Pos) ;!< 0x00080000
SYSCFG_CFGR1_I2C_PB9_FMP                 EQU SYSCFG_CFGR1_I2C_PB9_FMP_Msk  ;!< I2C PB9 Fast mode plus
SYSCFG_CFGR1_I2C1_FMP_Pos                EQU (20)
SYSCFG_CFGR1_I2C1_FMP_Msk                EQU (0x1 :SHL: SYSCFG_CFGR1_I2C1_FMP_Pos) ;!< 0x00100000
SYSCFG_CFGR1_I2C1_FMP                    EQU SYSCFG_CFGR1_I2C1_FMP_Msk     ;!< I2C1 Fast mode plus
SYSCFG_CFGR1_I2C2_FMP_Pos                EQU (21)
SYSCFG_CFGR1_I2C2_FMP_Msk                EQU (0x1 :SHL: SYSCFG_CFGR1_I2C2_FMP_Pos) ;!< 0x00200000
SYSCFG_CFGR1_I2C2_FMP                    EQU SYSCFG_CFGR1_I2C2_FMP_Msk     ;!< I2C2 Fast mode plus
SYSCFG_CFGR1_ENCODER_MODE_Pos            EQU (22)
SYSCFG_CFGR1_ENCODER_MODE_Msk            EQU (0x3 :SHL: SYSCFG_CFGR1_ENCODER_MODE_Pos) ;!< 0x00C00000
SYSCFG_CFGR1_ENCODER_MODE                EQU SYSCFG_CFGR1_ENCODER_MODE_Msk ;!< Encoder Mode
SYSCFG_CFGR1_ENCODER_MODE_0              EQU (0x1 :SHL: SYSCFG_CFGR1_ENCODER_MODE_Pos) ;!< 0x00400000
SYSCFG_CFGR1_ENCODER_MODE_1              EQU (0x2 :SHL: SYSCFG_CFGR1_ENCODER_MODE_Pos) ;!< 0x00800000
SYSCFG_CFGR1_ENCODER_MODE_TIM2_Pos       EQU (22)
SYSCFG_CFGR1_ENCODER_MODE_TIM2_Msk       EQU (0x1 :SHL: SYSCFG_CFGR1_ENCODER_MODE_TIM2_Pos) ;!< 0x00400000
SYSCFG_CFGR1_ENCODER_MODE_TIM2           EQU SYSCFG_CFGR1_ENCODER_MODE_TIM2_Msk ;!< TIM2 IC1 and TIM2 IC2 are connected to TIM15 IC1 and TIM15 IC2 respectively
SYSCFG_CFGR1_ENCODER_MODE_TIM3_Pos       EQU (23)
SYSCFG_CFGR1_ENCODER_MODE_TIM3_Msk       EQU (0x1 :SHL: SYSCFG_CFGR1_ENCODER_MODE_TIM3_Pos) ;!< 0x00800000
SYSCFG_CFGR1_ENCODER_MODE_TIM3           EQU SYSCFG_CFGR1_ENCODER_MODE_TIM3_Msk ;!< TIM3 IC1 and TIM3 IC2 are connected to TIM15 IC1 and TIM15 IC2 respectively
SYSCFG_CFGR1_I2C3_FMP_Pos                EQU (24)
SYSCFG_CFGR1_I2C3_FMP_Msk                EQU (0x1 :SHL: SYSCFG_CFGR1_I2C3_FMP_Pos) ;!< 0x01000000
SYSCFG_CFGR1_I2C3_FMP                    EQU SYSCFG_CFGR1_I2C3_FMP_Msk     ;!< I2C3 Fast mode plus
SYSCFG_CFGR1_FPU_IE_Pos                  EQU (26)
SYSCFG_CFGR1_FPU_IE_Msk                  EQU (0x3F :SHL: SYSCFG_CFGR1_FPU_IE_Pos) ;!< 0xFC000000
SYSCFG_CFGR1_FPU_IE                      EQU SYSCFG_CFGR1_FPU_IE_Msk       ;!< Floating Point Unit Interrupt Enable
SYSCFG_CFGR1_FPU_IE_0                    EQU (0x01 :SHL: SYSCFG_CFGR1_FPU_IE_Pos) ;!< 0x04000000
SYSCFG_CFGR1_FPU_IE_1                    EQU (0x02 :SHL: SYSCFG_CFGR1_FPU_IE_Pos) ;!< 0x08000000
SYSCFG_CFGR1_FPU_IE_2                    EQU (0x04 :SHL: SYSCFG_CFGR1_FPU_IE_Pos) ;!< 0x10000000
SYSCFG_CFGR1_FPU_IE_3                    EQU (0x08 :SHL: SYSCFG_CFGR1_FPU_IE_Pos) ;!< 0x20000000
SYSCFG_CFGR1_FPU_IE_4                    EQU (0x10 :SHL: SYSCFG_CFGR1_FPU_IE_Pos) ;!< 0x40000000
SYSCFG_CFGR1_FPU_IE_5                    EQU (0x20 :SHL: SYSCFG_CFGR1_FPU_IE_Pos) ;!< 0x80000000

;****************  Bit definition for SYSCFG_RCR register  ******************
SYSCFG_RCR_PAGE0_Pos                     EQU (0)
SYSCFG_RCR_PAGE0_Msk                     EQU (0x1 :SHL: SYSCFG_RCR_PAGE0_Pos) ;!< 0x00000001
SYSCFG_RCR_PAGE0                         EQU SYSCFG_RCR_PAGE0_Msk          ;!< ICODE SRAM Write protection page 0
SYSCFG_RCR_PAGE1_Pos                     EQU (1)
SYSCFG_RCR_PAGE1_Msk                     EQU (0x1 :SHL: SYSCFG_RCR_PAGE1_Pos) ;!< 0x00000002
SYSCFG_RCR_PAGE1                         EQU SYSCFG_RCR_PAGE1_Msk          ;!< ICODE SRAM Write protection page 1
SYSCFG_RCR_PAGE2_Pos                     EQU (2)
SYSCFG_RCR_PAGE2_Msk                     EQU (0x1 :SHL: SYSCFG_RCR_PAGE2_Pos) ;!< 0x00000004
SYSCFG_RCR_PAGE2                         EQU SYSCFG_RCR_PAGE2_Msk          ;!< ICODE SRAM Write protection page 2
SYSCFG_RCR_PAGE3_Pos                     EQU (3)
SYSCFG_RCR_PAGE3_Msk                     EQU (0x1 :SHL: SYSCFG_RCR_PAGE3_Pos) ;!< 0x00000008
SYSCFG_RCR_PAGE3                         EQU SYSCFG_RCR_PAGE3_Msk          ;!< ICODE SRAM Write protection page 3
SYSCFG_RCR_PAGE4_Pos                     EQU (4)
SYSCFG_RCR_PAGE4_Msk                     EQU (0x1 :SHL: SYSCFG_RCR_PAGE4_Pos) ;!< 0x00000010
SYSCFG_RCR_PAGE4                         EQU SYSCFG_RCR_PAGE4_Msk          ;!< ICODE SRAM Write protection page 4
SYSCFG_RCR_PAGE5_Pos                     EQU (5)
SYSCFG_RCR_PAGE5_Msk                     EQU (0x1 :SHL: SYSCFG_RCR_PAGE5_Pos) ;!< 0x00000020
SYSCFG_RCR_PAGE5                         EQU SYSCFG_RCR_PAGE5_Msk          ;!< ICODE SRAM Write protection page 5
SYSCFG_RCR_PAGE6_Pos                     EQU (6)
SYSCFG_RCR_PAGE6_Msk                     EQU (0x1 :SHL: SYSCFG_RCR_PAGE6_Pos) ;!< 0x00000040
SYSCFG_RCR_PAGE6                         EQU SYSCFG_RCR_PAGE6_Msk          ;!< ICODE SRAM Write protection page 6
SYSCFG_RCR_PAGE7_Pos                     EQU (7)
SYSCFG_RCR_PAGE7_Msk                     EQU (0x1 :SHL: SYSCFG_RCR_PAGE7_Pos) ;!< 0x00000080
SYSCFG_RCR_PAGE7                         EQU SYSCFG_RCR_PAGE7_Msk          ;!< ICODE SRAM Write protection page 7
SYSCFG_RCR_PAGE8_Pos                     EQU (8)
SYSCFG_RCR_PAGE8_Msk                     EQU (0x1 :SHL: SYSCFG_RCR_PAGE8_Pos) ;!< 0x00000100
SYSCFG_RCR_PAGE8                         EQU SYSCFG_RCR_PAGE8_Msk          ;!< ICODE SRAM Write protection page 8
SYSCFG_RCR_PAGE9_Pos                     EQU (9)
SYSCFG_RCR_PAGE9_Msk                     EQU (0x1 :SHL: SYSCFG_RCR_PAGE9_Pos) ;!< 0x00000200
SYSCFG_RCR_PAGE9                         EQU SYSCFG_RCR_PAGE9_Msk          ;!< ICODE SRAM Write protection page 9
SYSCFG_RCR_PAGE10_Pos                    EQU (10)
SYSCFG_RCR_PAGE10_Msk                    EQU (0x1 :SHL: SYSCFG_RCR_PAGE10_Pos) ;!< 0x00000400
SYSCFG_RCR_PAGE10                        EQU SYSCFG_RCR_PAGE10_Msk         ;!< ICODE SRAM Write protection page 10
SYSCFG_RCR_PAGE11_Pos                    EQU (11)
SYSCFG_RCR_PAGE11_Msk                    EQU (0x1 :SHL: SYSCFG_RCR_PAGE11_Pos) ;!< 0x00000800
SYSCFG_RCR_PAGE11                        EQU SYSCFG_RCR_PAGE11_Msk         ;!< ICODE SRAM Write protection page 11
SYSCFG_RCR_PAGE12_Pos                    EQU (12)
SYSCFG_RCR_PAGE12_Msk                    EQU (0x1 :SHL: SYSCFG_RCR_PAGE12_Pos) ;!< 0x00001000
SYSCFG_RCR_PAGE12                        EQU SYSCFG_RCR_PAGE12_Msk         ;!< ICODE SRAM Write protection page 12
SYSCFG_RCR_PAGE13_Pos                    EQU (13)
SYSCFG_RCR_PAGE13_Msk                    EQU (0x1 :SHL: SYSCFG_RCR_PAGE13_Pos) ;!< 0x00002000
SYSCFG_RCR_PAGE13                        EQU SYSCFG_RCR_PAGE13_Msk         ;!< ICODE SRAM Write protection page 13
SYSCFG_RCR_PAGE14_Pos                    EQU (14)
SYSCFG_RCR_PAGE14_Msk                    EQU (0x1 :SHL: SYSCFG_RCR_PAGE14_Pos) ;!< 0x00004000
SYSCFG_RCR_PAGE14                        EQU SYSCFG_RCR_PAGE14_Msk         ;!< ICODE SRAM Write protection page 14
SYSCFG_RCR_PAGE15_Pos                    EQU (15)
SYSCFG_RCR_PAGE15_Msk                    EQU (0x1 :SHL: SYSCFG_RCR_PAGE15_Pos) ;!< 0x00008000
SYSCFG_RCR_PAGE15                        EQU SYSCFG_RCR_PAGE15_Msk         ;!< ICODE SRAM Write protection page 15

;****************  Bit definition for SYSCFG_EXTICR1 register  **************
SYSCFG_EXTICR1_EXTI0_Pos                 EQU (0)
SYSCFG_EXTICR1_EXTI0_Msk                 EQU (0xF :SHL: SYSCFG_EXTICR1_EXTI0_Pos) ;!< 0x0000000F
SYSCFG_EXTICR1_EXTI0                     EQU SYSCFG_EXTICR1_EXTI0_Msk      ;!< EXTI 0 configuration
SYSCFG_EXTICR1_EXTI1_Pos                 EQU (4)
SYSCFG_EXTICR1_EXTI1_Msk                 EQU (0xF :SHL: SYSCFG_EXTICR1_EXTI1_Pos) ;!< 0x000000F0
SYSCFG_EXTICR1_EXTI1                     EQU SYSCFG_EXTICR1_EXTI1_Msk      ;!< EXTI 1 configuration
SYSCFG_EXTICR1_EXTI2_Pos                 EQU (8)
SYSCFG_EXTICR1_EXTI2_Msk                 EQU (0xF :SHL: SYSCFG_EXTICR1_EXTI2_Pos) ;!< 0x00000F00
SYSCFG_EXTICR1_EXTI2                     EQU SYSCFG_EXTICR1_EXTI2_Msk      ;!< EXTI 2 configuration
SYSCFG_EXTICR1_EXTI3_Pos                 EQU (12)
SYSCFG_EXTICR1_EXTI3_Msk                 EQU (0xF :SHL: SYSCFG_EXTICR1_EXTI3_Pos) ;!< 0x0000F000
SYSCFG_EXTICR1_EXTI3                     EQU SYSCFG_EXTICR1_EXTI3_Msk      ;!< EXTI 3 configuration

;!<  EXTI0 configuration
SYSCFG_EXTICR1_EXTI0_PA                  EQU (0x00000000)                 ;!< PA[0] pin
SYSCFG_EXTICR1_EXTI0_PB                  EQU (0x00000001)                 ;!< PB[0] pin
SYSCFG_EXTICR1_EXTI0_PC                  EQU (0x00000002)                 ;!< PC[0] pin
SYSCFG_EXTICR1_EXTI0_PD                  EQU (0x00000003)                 ;!< PD[0] pin
SYSCFG_EXTICR1_EXTI0_PE                  EQU (0x00000004)                 ;!< PE[0] pin
SYSCFG_EXTICR1_EXTI0_PF                  EQU (0x00000005)                 ;!< PF[0] pin
SYSCFG_EXTICR1_EXTI0_PG                  EQU (0x00000006)                 ;!< PG[0] pin
SYSCFG_EXTICR1_EXTI0_PH                  EQU (0x00000007)                 ;!< PH[0] pin

;!<  EXTI1 configuration
SYSCFG_EXTICR1_EXTI1_PA                  EQU (0x00000000)                 ;!< PA[1] pin
SYSCFG_EXTICR1_EXTI1_PB                  EQU (0x00000010)                 ;!< PB[1] pin
SYSCFG_EXTICR1_EXTI1_PC                  EQU (0x00000020)                 ;!< PC[1] pin
SYSCFG_EXTICR1_EXTI1_PD                  EQU (0x00000030)                 ;!< PD[1] pin
SYSCFG_EXTICR1_EXTI1_PE                  EQU (0x00000040)                 ;!< PE[1] pin
SYSCFG_EXTICR1_EXTI1_PF                  EQU (0x00000050)                 ;!< PF[1] pin
SYSCFG_EXTICR1_EXTI1_PG                  EQU (0x00000060)                 ;!< PG[1] pin
SYSCFG_EXTICR1_EXTI1_PH                  EQU (0x00000070)                 ;!< PH[1] pin

;!<  EXTI2 configuration
SYSCFG_EXTICR1_EXTI2_PA                  EQU (0x00000000)                 ;!< PA[2] pin
SYSCFG_EXTICR1_EXTI2_PB                  EQU (0x00000100)                 ;!< PB[2] pin
SYSCFG_EXTICR1_EXTI2_PC                  EQU (0x00000200)                 ;!< PC[2] pin
SYSCFG_EXTICR1_EXTI2_PD                  EQU (0x00000300)                 ;!< PD[2] pin
SYSCFG_EXTICR1_EXTI2_PE                  EQU (0x00000400)                 ;!< PE[2] pin
SYSCFG_EXTICR1_EXTI2_PF                  EQU (0x00000500)                 ;!< PF[2] pin
SYSCFG_EXTICR1_EXTI2_PG                  EQU (0x00000600)                 ;!< PG[2] pin

;!<  EXTI3 configuration
SYSCFG_EXTICR1_EXTI3_PA                  EQU (0x00000000)                 ;!< PA[3] pin
SYSCFG_EXTICR1_EXTI3_PB                  EQU (0x00001000)                 ;!< PB[3] pin
SYSCFG_EXTICR1_EXTI3_PC                  EQU (0x00002000)                 ;!< PC[3] pin
SYSCFG_EXTICR1_EXTI3_PD                  EQU (0x00003000)                 ;!< PD[3] pin
SYSCFG_EXTICR1_EXTI3_PE                  EQU (0x00004000)                 ;!< PE[3] pin
SYSCFG_EXTICR1_EXTI3_PF                  EQU (0x00005000)                 ;!< PE[3] pin
SYSCFG_EXTICR1_EXTI3_PG                  EQU (0x00006000)                 ;!< PG[3] pin

;****************  Bit definition for SYSCFG_EXTICR2 register  **************
SYSCFG_EXTICR2_EXTI4_Pos                 EQU (0)
SYSCFG_EXTICR2_EXTI4_Msk                 EQU (0xF :SHL: SYSCFG_EXTICR2_EXTI4_Pos) ;!< 0x0000000F
SYSCFG_EXTICR2_EXTI4                     EQU SYSCFG_EXTICR2_EXTI4_Msk      ;!< EXTI 4 configuration
SYSCFG_EXTICR2_EXTI5_Pos                 EQU (4)
SYSCFG_EXTICR2_EXTI5_Msk                 EQU (0xF :SHL: SYSCFG_EXTICR2_EXTI5_Pos) ;!< 0x000000F0
SYSCFG_EXTICR2_EXTI5                     EQU SYSCFG_EXTICR2_EXTI5_Msk      ;!< EXTI 5 configuration
SYSCFG_EXTICR2_EXTI6_Pos                 EQU (8)
SYSCFG_EXTICR2_EXTI6_Msk                 EQU (0xF :SHL: SYSCFG_EXTICR2_EXTI6_Pos) ;!< 0x00000F00
SYSCFG_EXTICR2_EXTI6                     EQU SYSCFG_EXTICR2_EXTI6_Msk      ;!< EXTI 6 configuration
SYSCFG_EXTICR2_EXTI7_Pos                 EQU (12)
SYSCFG_EXTICR2_EXTI7_Msk                 EQU (0xF :SHL: SYSCFG_EXTICR2_EXTI7_Pos) ;!< 0x0000F000
SYSCFG_EXTICR2_EXTI7                     EQU SYSCFG_EXTICR2_EXTI7_Msk      ;!< EXTI 7 configuration

;!<  EXTI4 configuration
SYSCFG_EXTICR2_EXTI4_PA                  EQU (0x00000000)                 ;!< PA[4] pin
SYSCFG_EXTICR2_EXTI4_PB                  EQU (0x00000001)                 ;!< PB[4] pin
SYSCFG_EXTICR2_EXTI4_PC                  EQU (0x00000002)                 ;!< PC[4] pin
SYSCFG_EXTICR2_EXTI4_PD                  EQU (0x00000003)                 ;!< PD[4] pin
SYSCFG_EXTICR2_EXTI4_PE                  EQU (0x00000004)                 ;!< PE[4] pin
SYSCFG_EXTICR2_EXTI4_PF                  EQU (0x00000005)                 ;!< PF[4] pin
SYSCFG_EXTICR2_EXTI4_PG                  EQU (0x00000006)                 ;!< PG[4] pin
SYSCFG_EXTICR2_EXTI4_PH                  EQU (0x00000007)                 ;!< PH[4] pin

;!<  EXTI5 configuration
SYSCFG_EXTICR2_EXTI5_PA                  EQU (0x00000000)                 ;!< PA[5] pin
SYSCFG_EXTICR2_EXTI5_PB                  EQU (0x00000010)                 ;!< PB[5] pin
SYSCFG_EXTICR2_EXTI5_PC                  EQU (0x00000020)                 ;!< PC[5] pin
SYSCFG_EXTICR2_EXTI5_PD                  EQU (0x00000030)                 ;!< PD[5] pin
SYSCFG_EXTICR2_EXTI5_PE                  EQU (0x00000040)                 ;!< PE[5] pin
SYSCFG_EXTICR2_EXTI5_PF                  EQU (0x00000050)                 ;!< PF[5] pin
SYSCFG_EXTICR2_EXTI5_PG                  EQU (0x00000060)                 ;!< PG[5] pin

;!<  EXTI6 configuration
SYSCFG_EXTICR2_EXTI6_PA                  EQU (0x00000000)                 ;!< PA[6] pin
SYSCFG_EXTICR2_EXTI6_PB                  EQU (0x00000100)                 ;!< PB[6] pin
SYSCFG_EXTICR2_EXTI6_PC                  EQU (0x00000200)                 ;!< PC[6] pin
SYSCFG_EXTICR2_EXTI6_PD                  EQU (0x00000300)                 ;!< PD[6] pin
SYSCFG_EXTICR2_EXTI6_PE                  EQU (0x00000400)                 ;!< PE[6] pin
SYSCFG_EXTICR2_EXTI6_PF                  EQU (0x00000500)                 ;!< PF[6] pin
SYSCFG_EXTICR2_EXTI6_PG                  EQU (0x00000600)                 ;!< PG[6] pin

;!<  EXTI7 configuration
SYSCFG_EXTICR2_EXTI7_PA                  EQU (0x00000000)                 ;!< PA[7] pin
SYSCFG_EXTICR2_EXTI7_PB                  EQU (0x00001000)                 ;!< PB[7] pin
SYSCFG_EXTICR2_EXTI7_PC                  EQU (0x00002000)                 ;!< PC[7] pin
SYSCFG_EXTICR2_EXTI7_PD                  EQU (0x00003000)                 ;!< PD[7] pin
SYSCFG_EXTICR2_EXTI7_PE                  EQU (0x00004000)                 ;!< PE[7] pin
SYSCFG_EXTICR2_EXTI7_PF                  EQU (0x00005000)                 ;!< PF[7] pin
SYSCFG_EXTICR2_EXTI7_PG                  EQU (0x00006000)                 ;!< PG[7] pin

;****************  Bit definition for SYSCFG_EXTICR3 register  **************
SYSCFG_EXTICR3_EXTI8_Pos                 EQU (0)
SYSCFG_EXTICR3_EXTI8_Msk                 EQU (0xF :SHL: SYSCFG_EXTICR3_EXTI8_Pos) ;!< 0x0000000F
SYSCFG_EXTICR3_EXTI8                     EQU SYSCFG_EXTICR3_EXTI8_Msk      ;!< EXTI 8 configuration
SYSCFG_EXTICR3_EXTI9_Pos                 EQU (4)
SYSCFG_EXTICR3_EXTI9_Msk                 EQU (0xF :SHL: SYSCFG_EXTICR3_EXTI9_Pos) ;!< 0x000000F0
SYSCFG_EXTICR3_EXTI9                     EQU SYSCFG_EXTICR3_EXTI9_Msk      ;!< EXTI 9 configuration
SYSCFG_EXTICR3_EXTI10_Pos                EQU (8)
SYSCFG_EXTICR3_EXTI10_Msk                EQU (0xF :SHL: SYSCFG_EXTICR3_EXTI10_Pos) ;!< 0x00000F00
SYSCFG_EXTICR3_EXTI10                    EQU SYSCFG_EXTICR3_EXTI10_Msk     ;!< EXTI 10 configuration
SYSCFG_EXTICR3_EXTI11_Pos                EQU (12)
SYSCFG_EXTICR3_EXTI11_Msk                EQU (0xF :SHL: SYSCFG_EXTICR3_EXTI11_Pos) ;!< 0x0000F000
SYSCFG_EXTICR3_EXTI11                    EQU SYSCFG_EXTICR3_EXTI11_Msk     ;!< EXTI 11 configuration

;!<  EXTI8 configuration
SYSCFG_EXTICR3_EXTI8_PA                  EQU (0x00000000)                 ;!< PA[8] pin
SYSCFG_EXTICR3_EXTI8_PB                  EQU (0x00000001)                 ;!< PB[8] pin
SYSCFG_EXTICR3_EXTI8_PC                  EQU (0x00000002)                 ;!< PC[8] pin
SYSCFG_EXTICR3_EXTI8_PD                  EQU (0x00000003)                 ;!< PD[8] pin
SYSCFG_EXTICR3_EXTI8_PE                  EQU (0x00000004)                 ;!< PE[8] pin
SYSCFG_EXTICR3_EXTI8_PF                  EQU (0x00000005)                 ;!< PF[8] pin
SYSCFG_EXTICR3_EXTI8_PG                  EQU (0x00000006)                 ;!< PG[8] pin

;!<  EXTI9 configuration
SYSCFG_EXTICR3_EXTI9_PA                  EQU (0x00000000)                 ;!< PA[9] pin
SYSCFG_EXTICR3_EXTI9_PB                  EQU (0x00000010)                 ;!< PB[9] pin
SYSCFG_EXTICR3_EXTI9_PC                  EQU (0x00000020)                 ;!< PC[9] pin
SYSCFG_EXTICR3_EXTI9_PD                  EQU (0x00000030)                 ;!< PD[9] pin
SYSCFG_EXTICR3_EXTI9_PE                  EQU (0x00000040)                 ;!< PE[9] pin
SYSCFG_EXTICR3_EXTI9_PF                  EQU (0x00000050)                 ;!< PF[9] pin
SYSCFG_EXTICR3_EXTI9_PG                  EQU (0x00000060)                 ;!< PG[9] pin

;!<  EXTI10 configuration
SYSCFG_EXTICR3_EXTI10_PA                 EQU (0x00000000)                 ;!< PA[10] pin
SYSCFG_EXTICR3_EXTI10_PB                 EQU (0x00000100)                 ;!< PB[10] pin
SYSCFG_EXTICR3_EXTI10_PC                 EQU (0x00000200)                 ;!< PC[10] pin
SYSCFG_EXTICR3_EXTI10_PD                 EQU (0x00000300)                 ;!< PD[10] pin
SYSCFG_EXTICR3_EXTI10_PE                 EQU (0x00000400)                 ;!< PE[10] pin
SYSCFG_EXTICR3_EXTI10_PF                 EQU (0x00000500)                 ;!< PF[10] pin
SYSCFG_EXTICR3_EXTI10_PG                 EQU (0x00000600)                 ;!< PG[10] pin

;!<  EXTI11 configuration
SYSCFG_EXTICR3_EXTI11_PA                 EQU (0x00000000)                 ;!< PA[11] pin
SYSCFG_EXTICR3_EXTI11_PB                 EQU (0x00001000)                 ;!< PB[11] pin
SYSCFG_EXTICR3_EXTI11_PC                 EQU (0x00002000)                 ;!< PC[11] pin
SYSCFG_EXTICR3_EXTI11_PD                 EQU (0x00003000)                 ;!< PD[11] pin
SYSCFG_EXTICR3_EXTI11_PE                 EQU (0x00004000)                 ;!< PE[11] pin
SYSCFG_EXTICR3_EXTI11_PF                 EQU (0x00005000)                 ;!< PF[11] pin
SYSCFG_EXTICR3_EXTI11_PG                 EQU (0x00006000)                 ;!< PG[11] pin

;****************  Bit definition for SYSCFG_EXTICR4 register  ****************
SYSCFG_EXTICR4_EXTI12_Pos                EQU (0)
SYSCFG_EXTICR4_EXTI12_Msk                EQU (0xF :SHL: SYSCFG_EXTICR4_EXTI12_Pos) ;!< 0x0000000F
SYSCFG_EXTICR4_EXTI12                    EQU SYSCFG_EXTICR4_EXTI12_Msk     ;!< EXTI 12 configuration
SYSCFG_EXTICR4_EXTI13_Pos                EQU (4)
SYSCFG_EXTICR4_EXTI13_Msk                EQU (0xF :SHL: SYSCFG_EXTICR4_EXTI13_Pos) ;!< 0x000000F0
SYSCFG_EXTICR4_EXTI13                    EQU SYSCFG_EXTICR4_EXTI13_Msk     ;!< EXTI 13 configuration
SYSCFG_EXTICR4_EXTI14_Pos                EQU (8)
SYSCFG_EXTICR4_EXTI14_Msk                EQU (0xF :SHL: SYSCFG_EXTICR4_EXTI14_Pos) ;!< 0x00000F00
SYSCFG_EXTICR4_EXTI14                    EQU SYSCFG_EXTICR4_EXTI14_Msk     ;!< EXTI 14 configuration
SYSCFG_EXTICR4_EXTI15_Pos                EQU (12)
SYSCFG_EXTICR4_EXTI15_Msk                EQU (0xF :SHL: SYSCFG_EXTICR4_EXTI15_Pos) ;!< 0x0000F000
SYSCFG_EXTICR4_EXTI15                    EQU SYSCFG_EXTICR4_EXTI15_Msk     ;!< EXTI 15 configuration

;!<  EXTI12 configuration
SYSCFG_EXTICR4_EXTI12_PA                 EQU (0x00000000)                 ;!< PA[12] pin
SYSCFG_EXTICR4_EXTI12_PB                 EQU (0x00000001)                 ;!< PB[12] pin
SYSCFG_EXTICR4_EXTI12_PC                 EQU (0x00000002)                 ;!< PC[12] pin
SYSCFG_EXTICR4_EXTI12_PD                 EQU (0x00000003)                 ;!< PD[12] pin
SYSCFG_EXTICR4_EXTI12_PE                 EQU (0x00000004)                 ;!< PE[12] pin
SYSCFG_EXTICR4_EXTI12_PF                 EQU (0x00000005)                 ;!< PF[12] pin
SYSCFG_EXTICR4_EXTI12_PG                 EQU (0x00000006)                 ;!< PG[12] pin

;!<  EXTI13 configuration
SYSCFG_EXTICR4_EXTI13_PA                 EQU (0x00000000)                 ;!< PA[13] pin
SYSCFG_EXTICR4_EXTI13_PB                 EQU (0x00000010)                 ;!< PB[13] pin
SYSCFG_EXTICR4_EXTI13_PC                 EQU (0x00000020)                 ;!< PC[13] pin
SYSCFG_EXTICR4_EXTI13_PD                 EQU (0x00000030)                 ;!< PD[13] pin
SYSCFG_EXTICR4_EXTI13_PE                 EQU (0x00000040)                 ;!< PE[13] pin
SYSCFG_EXTICR4_EXTI13_PF                 EQU (0x00000050)                 ;!< PF[13] pin
SYSCFG_EXTICR4_EXTI13_PG                 EQU (0x00000060)                 ;!< PG[13] pin

;!<  EXTI14 configuration
SYSCFG_EXTICR4_EXTI14_PA                 EQU (0x00000000)                 ;!< PA[14] pin
SYSCFG_EXTICR4_EXTI14_PB                 EQU (0x00000100)                 ;!< PB[14] pin
SYSCFG_EXTICR4_EXTI14_PC                 EQU (0x00000200)                 ;!< PC[14] pin
SYSCFG_EXTICR4_EXTI14_PD                 EQU (0x00000300)                 ;!< PD[14] pin
SYSCFG_EXTICR4_EXTI14_PE                 EQU (0x00000400)                 ;!< PE[14] pin
SYSCFG_EXTICR4_EXTI14_PF                 EQU (0x00000500)                 ;!< PF[14] pin
SYSCFG_EXTICR4_EXTI14_PG                 EQU (0x00000600)                 ;!< PG[14] pin

;!<  EXTI15 configuration
SYSCFG_EXTICR4_EXTI15_PA                 EQU (0x00000000)                 ;!< PA[15] pin
SYSCFG_EXTICR4_EXTI15_PB                 EQU (0x00001000)                 ;!< PB[15] pin
SYSCFG_EXTICR4_EXTI15_PC                 EQU (0x00002000)                 ;!< PC[15] pin
SYSCFG_EXTICR4_EXTI15_PD                 EQU (0x00003000)                 ;!< PD[15] pin
SYSCFG_EXTICR4_EXTI15_PE                 EQU (0x00004000)                 ;!< PE[15] pin
SYSCFG_EXTICR4_EXTI15_PF                 EQU (0x00005000)                 ;!< PF[15] pin
SYSCFG_EXTICR4_EXTI15_PG                 EQU (0x00006000)                 ;!< PG[15] pin

;****************  Bit definition for SYSCFG_CFGR2 register  ***************
SYSCFG_CFGR2_LOCKUP_LOCK_Pos             EQU (0)
SYSCFG_CFGR2_LOCKUP_LOCK_Msk             EQU (0x1 :SHL: SYSCFG_CFGR2_LOCKUP_LOCK_Pos) ;!< 0x00000001
SYSCFG_CFGR2_LOCKUP_LOCK                 EQU SYSCFG_CFGR2_LOCKUP_LOCK_Msk  ;!< Enables and locks the LOCKUP (Hardfault) output of CortexM4 with Break Input of TIMx
SYSCFG_CFGR2_SRAM_PARITY_LOCK_Pos        EQU (1)
SYSCFG_CFGR2_SRAM_PARITY_LOCK_Msk        EQU (0x1 :SHL: SYSCFG_CFGR2_SRAM_PARITY_LOCK_Pos) ;!< 0x00000002
SYSCFG_CFGR2_SRAM_PARITY_LOCK            EQU SYSCFG_CFGR2_SRAM_PARITY_LOCK_Msk ;!< Enables and locks the SRAM_PARITY error signal with Break Input of TIMx
SYSCFG_CFGR2_PVD_LOCK_Pos                EQU (2)
SYSCFG_CFGR2_PVD_LOCK_Msk                EQU (0x1 :SHL: SYSCFG_CFGR2_PVD_LOCK_Pos) ;!< 0x00000004
SYSCFG_CFGR2_PVD_LOCK                    EQU SYSCFG_CFGR2_PVD_LOCK_Msk     ;!< Enables and locks the PVD connection with TIMx Break Input, as well as the PVDE and PLS[2:0] in the PWR_CR register
SYSCFG_CFGR2_BYP_ADDR_PAR_Pos            EQU (4)
SYSCFG_CFGR2_BYP_ADDR_PAR_Msk            EQU (0x1 :SHL: SYSCFG_CFGR2_BYP_ADDR_PAR_Pos) ;!< 0x00000010
SYSCFG_CFGR2_BYP_ADDR_PAR                EQU SYSCFG_CFGR2_BYP_ADDR_PAR_Msk ;!< Disables the adddress parity check on RAM
SYSCFG_CFGR2_SRAM_PE_Pos                 EQU (8)
SYSCFG_CFGR2_SRAM_PE_Msk                 EQU (0x1 :SHL: SYSCFG_CFGR2_SRAM_PE_Pos) ;!< 0x00000100
SYSCFG_CFGR2_SRAM_PE                     EQU SYSCFG_CFGR2_SRAM_PE_Msk      ;!< SRAM Parity error flag
;****************  Bit definition for SYSCFG_CFGR4 register  ****************
SYSCFG_CFGR4_ADC12_EXT2_RMP_Pos          EQU (0)
SYSCFG_CFGR4_ADC12_EXT2_RMP_Msk          EQU (0x1 :SHL: SYSCFG_CFGR4_ADC12_EXT2_RMP_Pos) ;!< 0x00000001
SYSCFG_CFGR4_ADC12_EXT2_RMP              EQU SYSCFG_CFGR4_ADC12_EXT2_RMP_Msk ;!< ADC12 regular channel EXT2 remap
SYSCFG_CFGR4_ADC12_EXT3_RMP_Pos          EQU (1)
SYSCFG_CFGR4_ADC12_EXT3_RMP_Msk          EQU (0x1 :SHL: SYSCFG_CFGR4_ADC12_EXT3_RMP_Pos) ;!< 0x00000002
SYSCFG_CFGR4_ADC12_EXT3_RMP              EQU SYSCFG_CFGR4_ADC12_EXT3_RMP_Msk ;!< ADC12 regular channel EXT3 remap
SYSCFG_CFGR4_ADC12_EXT5_RMP_Pos          EQU (2)
SYSCFG_CFGR4_ADC12_EXT5_RMP_Msk          EQU (0x1 :SHL: SYSCFG_CFGR4_ADC12_EXT5_RMP_Pos) ;!< 0x00000004
SYSCFG_CFGR4_ADC12_EXT5_RMP              EQU SYSCFG_CFGR4_ADC12_EXT5_RMP_Msk ;!< ADC12 regular channel EXT5 remap
SYSCFG_CFGR4_ADC12_EXT13_RMP_Pos         EQU (3)
SYSCFG_CFGR4_ADC12_EXT13_RMP_Msk         EQU (0x1 :SHL: SYSCFG_CFGR4_ADC12_EXT13_RMP_Pos) ;!< 0x00000008
SYSCFG_CFGR4_ADC12_EXT13_RMP             EQU SYSCFG_CFGR4_ADC12_EXT13_RMP_Msk ;!< ADC12 regular channel EXT13 remap
SYSCFG_CFGR4_ADC12_EXT15_RMP_Pos         EQU (4)
SYSCFG_CFGR4_ADC12_EXT15_RMP_Msk         EQU (0x1 :SHL: SYSCFG_CFGR4_ADC12_EXT15_RMP_Pos) ;!< 0x00000010
SYSCFG_CFGR4_ADC12_EXT15_RMP             EQU SYSCFG_CFGR4_ADC12_EXT15_RMP_Msk ;!< ADC12 regular channel EXT15 remap
SYSCFG_CFGR4_ADC12_JEXT3_RMP_Pos         EQU (5)
SYSCFG_CFGR4_ADC12_JEXT3_RMP_Msk         EQU (0x1 :SHL: SYSCFG_CFGR4_ADC12_JEXT3_RMP_Pos) ;!< 0x00000020
SYSCFG_CFGR4_ADC12_JEXT3_RMP             EQU SYSCFG_CFGR4_ADC12_JEXT3_RMP_Msk ;!< ADC12 injected channel JEXT3 remap
SYSCFG_CFGR4_ADC12_JEXT6_RMP_Pos         EQU (6)
SYSCFG_CFGR4_ADC12_JEXT6_RMP_Msk         EQU (0x1 :SHL: SYSCFG_CFGR4_ADC12_JEXT6_RMP_Pos) ;!< 0x00000040
SYSCFG_CFGR4_ADC12_JEXT6_RMP             EQU SYSCFG_CFGR4_ADC12_JEXT6_RMP_Msk ;!< ADC12 injected channel JEXT6 remap
SYSCFG_CFGR4_ADC12_JEXT13_RMP_Pos        EQU (7)
SYSCFG_CFGR4_ADC12_JEXT13_RMP_Msk        EQU (0x1 :SHL: SYSCFG_CFGR4_ADC12_JEXT13_RMP_Pos) ;!< 0x00000080
SYSCFG_CFGR4_ADC12_JEXT13_RMP            EQU SYSCFG_CFGR4_ADC12_JEXT13_RMP_Msk ;!< ADC12 injected channel JEXT13 remap
SYSCFG_CFGR4_ADC34_EXT5_RMP_Pos          EQU (8)
SYSCFG_CFGR4_ADC34_EXT5_RMP_Msk          EQU (0x1 :SHL: SYSCFG_CFGR4_ADC34_EXT5_RMP_Pos) ;!< 0x00000100
SYSCFG_CFGR4_ADC34_EXT5_RMP              EQU SYSCFG_CFGR4_ADC34_EXT5_RMP_Msk ;!< ADC34 regular channel EXT5 remap
SYSCFG_CFGR4_ADC34_EXT6_RMP_Pos          EQU (9)
SYSCFG_CFGR4_ADC34_EXT6_RMP_Msk          EQU (0x1 :SHL: SYSCFG_CFGR4_ADC34_EXT6_RMP_Pos) ;!< 0x00000200
SYSCFG_CFGR4_ADC34_EXT6_RMP              EQU SYSCFG_CFGR4_ADC34_EXT6_RMP_Msk ;!< ADC34 regular channel EXT6 remap
SYSCFG_CFGR4_ADC34_EXT15_RMP_Pos         EQU (10)
SYSCFG_CFGR4_ADC34_EXT15_RMP_Msk         EQU (0x1 :SHL: SYSCFG_CFGR4_ADC34_EXT15_RMP_Pos) ;!< 0x00000400
SYSCFG_CFGR4_ADC34_EXT15_RMP             EQU SYSCFG_CFGR4_ADC34_EXT15_RMP_Msk ;!< ADC34 regular channel EXT15 remap
SYSCFG_CFGR4_ADC34_JEXT5_RMP_Pos         EQU (11)
SYSCFG_CFGR4_ADC34_JEXT5_RMP_Msk         EQU (0x1 :SHL: SYSCFG_CFGR4_ADC34_JEXT5_RMP_Pos) ;!< 0x00000800
SYSCFG_CFGR4_ADC34_JEXT5_RMP             EQU SYSCFG_CFGR4_ADC34_JEXT5_RMP_Msk ;!< ADC34 injected channel JEXT5 remap
SYSCFG_CFGR4_ADC34_JEXT11_RMP_Pos        EQU (12)
SYSCFG_CFGR4_ADC34_JEXT11_RMP_Msk        EQU (0x1 :SHL: SYSCFG_CFGR4_ADC34_JEXT11_RMP_Pos) ;!< 0x00001000
SYSCFG_CFGR4_ADC34_JEXT11_RMP            EQU SYSCFG_CFGR4_ADC34_JEXT11_RMP_Msk ;!< ADC34 injected channel JEXT11 remap
SYSCFG_CFGR4_ADC34_JEXT14_RMP_Pos        EQU (13)
SYSCFG_CFGR4_ADC34_JEXT14_RMP_Msk        EQU (0x1 :SHL: SYSCFG_CFGR4_ADC34_JEXT14_RMP_Pos) ;!< 0x00002000
SYSCFG_CFGR4_ADC34_JEXT14_RMP            EQU SYSCFG_CFGR4_ADC34_JEXT14_RMP_Msk ;!< ADC34 injected channel JEXT14 remap

;****************************************************************************
;
;                                    TIM
;
;****************************************************************************
;******************  Bit definition for TIM_CR1 register  *******************
TIM_CR1_CEN_Pos           EQU (0)
TIM_CR1_CEN_Msk           EQU (0x1 :SHL: TIM_CR1_CEN_Pos)                    ;!< 0x00000001
TIM_CR1_CEN               EQU TIM_CR1_CEN_Msk                              ;!<Counter enable
TIM_CR1_UDIS_Pos          EQU (1)
TIM_CR1_UDIS_Msk          EQU (0x1 :SHL: TIM_CR1_UDIS_Pos)                   ;!< 0x00000002
TIM_CR1_UDIS              EQU TIM_CR1_UDIS_Msk                             ;!<Update disable
TIM_CR1_URS_Pos           EQU (2)
TIM_CR1_URS_Msk           EQU (0x1 :SHL: TIM_CR1_URS_Pos)                    ;!< 0x00000004
TIM_CR1_URS               EQU TIM_CR1_URS_Msk                              ;!<Update request source
TIM_CR1_OPM_Pos           EQU (3)
TIM_CR1_OPM_Msk           EQU (0x1 :SHL: TIM_CR1_OPM_Pos)                    ;!< 0x00000008
TIM_CR1_OPM               EQU TIM_CR1_OPM_Msk                              ;!<One pulse mode
TIM_CR1_DIR_Pos           EQU (4)
TIM_CR1_DIR_Msk           EQU (0x1 :SHL: TIM_CR1_DIR_Pos)                    ;!< 0x00000010
TIM_CR1_DIR               EQU TIM_CR1_DIR_Msk                              ;!<Direction

TIM_CR1_CMS_Pos           EQU (5)
TIM_CR1_CMS_Msk           EQU (0x3 :SHL: TIM_CR1_CMS_Pos)                    ;!< 0x00000060
TIM_CR1_CMS               EQU TIM_CR1_CMS_Msk                              ;!<CMS[1:0] bits (Center-aligned mode selection)
TIM_CR1_CMS_0             EQU (0x1 :SHL: TIM_CR1_CMS_Pos)                    ;!< 0x00000020
TIM_CR1_CMS_1             EQU (0x2 :SHL: TIM_CR1_CMS_Pos)                    ;!< 0x00000040

TIM_CR1_ARPE_Pos          EQU (7)
TIM_CR1_ARPE_Msk          EQU (0x1 :SHL: TIM_CR1_ARPE_Pos)                   ;!< 0x00000080
TIM_CR1_ARPE              EQU TIM_CR1_ARPE_Msk                             ;!<Auto-reload preload enable

TIM_CR1_CKD_Pos           EQU (8)
TIM_CR1_CKD_Msk           EQU (0x3 :SHL: TIM_CR1_CKD_Pos)                    ;!< 0x00000300
TIM_CR1_CKD               EQU TIM_CR1_CKD_Msk                              ;!<CKD[1:0] bits (clock division)
TIM_CR1_CKD_0             EQU (0x1 :SHL: TIM_CR1_CKD_Pos)                    ;!< 0x00000100
TIM_CR1_CKD_1             EQU (0x2 :SHL: TIM_CR1_CKD_Pos)                    ;!< 0x00000200

TIM_CR1_UIFREMAP_Pos      EQU (11)
TIM_CR1_UIFREMAP_Msk      EQU (0x1 :SHL: TIM_CR1_UIFREMAP_Pos)               ;!< 0x00000800
TIM_CR1_UIFREMAP          EQU TIM_CR1_UIFREMAP_Msk                         ;!<Update interrupt flag remap

;******************  Bit definition for TIM_CR2 register  *******************
TIM_CR2_CCPC_Pos          EQU (0)
TIM_CR2_CCPC_Msk          EQU (0x1 :SHL: TIM_CR2_CCPC_Pos)                   ;!< 0x00000001
TIM_CR2_CCPC              EQU TIM_CR2_CCPC_Msk                             ;!<Capture/Compare Preloaded Control
TIM_CR2_CCUS_Pos          EQU (2)
TIM_CR2_CCUS_Msk          EQU (0x1 :SHL: TIM_CR2_CCUS_Pos)                   ;!< 0x00000004
TIM_CR2_CCUS              EQU TIM_CR2_CCUS_Msk                             ;!<Capture/Compare Control Update Selection
TIM_CR2_CCDS_Pos          EQU (3)
TIM_CR2_CCDS_Msk          EQU (0x1 :SHL: TIM_CR2_CCDS_Pos)                   ;!< 0x00000008
TIM_CR2_CCDS              EQU TIM_CR2_CCDS_Msk                             ;!<Capture/Compare DMA Selection

TIM_CR2_MMS_Pos           EQU (4)
TIM_CR2_MMS_Msk           EQU (0x7 :SHL: TIM_CR2_MMS_Pos)                    ;!< 0x00000070
TIM_CR2_MMS               EQU TIM_CR2_MMS_Msk                              ;!<MMS[2:0] bits (Master Mode Selection)
TIM_CR2_MMS_0             EQU (0x1 :SHL: TIM_CR2_MMS_Pos)                    ;!< 0x00000010
TIM_CR2_MMS_1             EQU (0x2 :SHL: TIM_CR2_MMS_Pos)                    ;!< 0x00000020
TIM_CR2_MMS_2             EQU (0x4 :SHL: TIM_CR2_MMS_Pos)                    ;!< 0x00000040

TIM_CR2_TI1S_Pos          EQU (7)
TIM_CR2_TI1S_Msk          EQU (0x1 :SHL: TIM_CR2_TI1S_Pos)                   ;!< 0x00000080
TIM_CR2_TI1S              EQU TIM_CR2_TI1S_Msk                             ;!<TI1 Selection
TIM_CR2_OIS1_Pos          EQU (8)
TIM_CR2_OIS1_Msk          EQU (0x1 :SHL: TIM_CR2_OIS1_Pos)                   ;!< 0x00000100
TIM_CR2_OIS1              EQU TIM_CR2_OIS1_Msk                             ;!<Output Idle state 1 (OC1 output)
TIM_CR2_OIS1N_Pos         EQU (9)
TIM_CR2_OIS1N_Msk         EQU (0x1 :SHL: TIM_CR2_OIS1N_Pos)                  ;!< 0x00000200
TIM_CR2_OIS1N             EQU TIM_CR2_OIS1N_Msk                            ;!<Output Idle state 1 (OC1N output)
TIM_CR2_OIS2_Pos          EQU (10)
TIM_CR2_OIS2_Msk          EQU (0x1 :SHL: TIM_CR2_OIS2_Pos)                   ;!< 0x00000400
TIM_CR2_OIS2              EQU TIM_CR2_OIS2_Msk                             ;!<Output Idle state 2 (OC2 output)
TIM_CR2_OIS2N_Pos         EQU (11)
TIM_CR2_OIS2N_Msk         EQU (0x1 :SHL: TIM_CR2_OIS2N_Pos)                  ;!< 0x00000800
TIM_CR2_OIS2N             EQU TIM_CR2_OIS2N_Msk                            ;!<Output Idle state 2 (OC2N output)
TIM_CR2_OIS3_Pos          EQU (12)
TIM_CR2_OIS3_Msk          EQU (0x1 :SHL: TIM_CR2_OIS3_Pos)                   ;!< 0x00001000
TIM_CR2_OIS3              EQU TIM_CR2_OIS3_Msk                             ;!<Output Idle state 3 (OC3 output)
TIM_CR2_OIS3N_Pos         EQU (13)
TIM_CR2_OIS3N_Msk         EQU (0x1 :SHL: TIM_CR2_OIS3N_Pos)                  ;!< 0x00002000
TIM_CR2_OIS3N             EQU TIM_CR2_OIS3N_Msk                            ;!<Output Idle state 3 (OC3N output)
TIM_CR2_OIS4_Pos          EQU (14)
TIM_CR2_OIS4_Msk          EQU (0x1 :SHL: TIM_CR2_OIS4_Pos)                   ;!< 0x00004000
TIM_CR2_OIS4              EQU TIM_CR2_OIS4_Msk                             ;!<Output Idle state 4 (OC4 output)

TIM_CR2_OIS5_Pos          EQU (16)
TIM_CR2_OIS5_Msk          EQU (0x1 :SHL: TIM_CR2_OIS5_Pos)                   ;!< 0x00010000
TIM_CR2_OIS5              EQU TIM_CR2_OIS5_Msk                             ;!<Output Idle state 4 (OC4 output)
TIM_CR2_OIS6_Pos          EQU (18)
TIM_CR2_OIS6_Msk          EQU (0x1 :SHL: TIM_CR2_OIS6_Pos)                   ;!< 0x00040000
TIM_CR2_OIS6              EQU TIM_CR2_OIS6_Msk                             ;!<Output Idle state 4 (OC4 output)

TIM_CR2_MMS2_Pos          EQU (20)
TIM_CR2_MMS2_Msk          EQU (0xF :SHL: TIM_CR2_MMS2_Pos)                   ;!< 0x00F00000
TIM_CR2_MMS2              EQU TIM_CR2_MMS2_Msk                             ;!<MMS[2:0] bits (Master Mode Selection)
TIM_CR2_MMS2_0            EQU (0x1 :SHL: TIM_CR2_MMS2_Pos)                   ;!< 0x00100000
TIM_CR2_MMS2_1            EQU (0x2 :SHL: TIM_CR2_MMS2_Pos)                   ;!< 0x00200000
TIM_CR2_MMS2_2            EQU (0x4 :SHL: TIM_CR2_MMS2_Pos)                   ;!< 0x00400000
TIM_CR2_MMS2_3            EQU (0x8 :SHL: TIM_CR2_MMS2_Pos)                   ;!< 0x00800000

;******************  Bit definition for TIM_SMCR register  ******************
TIM_SMCR_SMS_Pos          EQU (0)
TIM_SMCR_SMS_Msk          EQU (0x10007 :SHL: TIM_SMCR_SMS_Pos)               ;!< 0x00010007
TIM_SMCR_SMS              EQU TIM_SMCR_SMS_Msk                             ;!<SMS[2:0] bits (Slave mode selection)
TIM_SMCR_SMS_0            EQU (0x00000001)                                ;!<Bit 0
TIM_SMCR_SMS_1            EQU (0x00000002)                                ;!<Bit 1
TIM_SMCR_SMS_2            EQU (0x00000004)                                ;!<Bit 2
TIM_SMCR_SMS_3            EQU (0x00010000)                                ;!<Bit 3

TIM_SMCR_OCCS_Pos         EQU (3)
TIM_SMCR_OCCS_Msk         EQU (0x1 :SHL: TIM_SMCR_OCCS_Pos)                  ;!< 0x00000008
TIM_SMCR_OCCS             EQU TIM_SMCR_OCCS_Msk                            ;!< OCREF clear selection

TIM_SMCR_TS_Pos           EQU (4)
TIM_SMCR_TS_Msk           EQU (0x7 :SHL: TIM_SMCR_TS_Pos)                    ;!< 0x00000070
TIM_SMCR_TS               EQU TIM_SMCR_TS_Msk                              ;!<TS[2:0] bits (Trigger selection)
TIM_SMCR_TS_0             EQU (0x1 :SHL: TIM_SMCR_TS_Pos)                    ;!< 0x00000010
TIM_SMCR_TS_1             EQU (0x2 :SHL: TIM_SMCR_TS_Pos)                    ;!< 0x00000020
TIM_SMCR_TS_2             EQU (0x4 :SHL: TIM_SMCR_TS_Pos)                    ;!< 0x00000040

TIM_SMCR_MSM_Pos          EQU (7)
TIM_SMCR_MSM_Msk          EQU (0x1 :SHL: TIM_SMCR_MSM_Pos)                   ;!< 0x00000080
TIM_SMCR_MSM              EQU TIM_SMCR_MSM_Msk                             ;!<Master/slave mode

TIM_SMCR_ETF_Pos          EQU (8)
TIM_SMCR_ETF_Msk          EQU (0xF :SHL: TIM_SMCR_ETF_Pos)                   ;!< 0x00000F00
TIM_SMCR_ETF              EQU TIM_SMCR_ETF_Msk                             ;!<ETF[3:0] bits (External trigger filter)
TIM_SMCR_ETF_0            EQU (0x1 :SHL: TIM_SMCR_ETF_Pos)                   ;!< 0x00000100
TIM_SMCR_ETF_1            EQU (0x2 :SHL: TIM_SMCR_ETF_Pos)                   ;!< 0x00000200
TIM_SMCR_ETF_2            EQU (0x4 :SHL: TIM_SMCR_ETF_Pos)                   ;!< 0x00000400
TIM_SMCR_ETF_3            EQU (0x8 :SHL: TIM_SMCR_ETF_Pos)                   ;!< 0x00000800

TIM_SMCR_ETPS_Pos         EQU (12)
TIM_SMCR_ETPS_Msk         EQU (0x3 :SHL: TIM_SMCR_ETPS_Pos)                  ;!< 0x00003000
TIM_SMCR_ETPS             EQU TIM_SMCR_ETPS_Msk                            ;!<ETPS[1:0] bits (External trigger prescaler)
TIM_SMCR_ETPS_0           EQU (0x1 :SHL: TIM_SMCR_ETPS_Pos)                  ;!< 0x00001000
TIM_SMCR_ETPS_1           EQU (0x2 :SHL: TIM_SMCR_ETPS_Pos)                  ;!< 0x00002000

TIM_SMCR_ECE_Pos          EQU (14)
TIM_SMCR_ECE_Msk          EQU (0x1 :SHL: TIM_SMCR_ECE_Pos)                   ;!< 0x00004000
TIM_SMCR_ECE              EQU TIM_SMCR_ECE_Msk                             ;!<External clock enable
TIM_SMCR_ETP_Pos          EQU (15)
TIM_SMCR_ETP_Msk          EQU (0x1 :SHL: TIM_SMCR_ETP_Pos)                   ;!< 0x00008000
TIM_SMCR_ETP              EQU TIM_SMCR_ETP_Msk                             ;!<External trigger polarity

;******************  Bit definition for TIM_DIER register  ******************
TIM_DIER_UIE_Pos          EQU (0)
TIM_DIER_UIE_Msk          EQU (0x1 :SHL: TIM_DIER_UIE_Pos)                   ;!< 0x00000001
TIM_DIER_UIE              EQU TIM_DIER_UIE_Msk                             ;!<Update interrupt enable
TIM_DIER_CC1IE_Pos        EQU (1)
TIM_DIER_CC1IE_Msk        EQU (0x1 :SHL: TIM_DIER_CC1IE_Pos)                 ;!< 0x00000002
TIM_DIER_CC1IE            EQU TIM_DIER_CC1IE_Msk                           ;!<Capture/Compare 1 interrupt enable
TIM_DIER_CC2IE_Pos        EQU (2)
TIM_DIER_CC2IE_Msk        EQU (0x1 :SHL: TIM_DIER_CC2IE_Pos)                 ;!< 0x00000004
TIM_DIER_CC2IE            EQU TIM_DIER_CC2IE_Msk                           ;!<Capture/Compare 2 interrupt enable
TIM_DIER_CC3IE_Pos        EQU (3)
TIM_DIER_CC3IE_Msk        EQU (0x1 :SHL: TIM_DIER_CC3IE_Pos)                 ;!< 0x00000008
TIM_DIER_CC3IE            EQU TIM_DIER_CC3IE_Msk                           ;!<Capture/Compare 3 interrupt enable
TIM_DIER_CC4IE_Pos        EQU (4)
TIM_DIER_CC4IE_Msk        EQU (0x1 :SHL: TIM_DIER_CC4IE_Pos)                 ;!< 0x00000010
TIM_DIER_CC4IE            EQU TIM_DIER_CC4IE_Msk                           ;!<Capture/Compare 4 interrupt enable
TIM_DIER_COMIE_Pos        EQU (5)
TIM_DIER_COMIE_Msk        EQU (0x1 :SHL: TIM_DIER_COMIE_Pos)                 ;!< 0x00000020
TIM_DIER_COMIE            EQU TIM_DIER_COMIE_Msk                           ;!<COM interrupt enable
TIM_DIER_TIE_Pos          EQU (6)
TIM_DIER_TIE_Msk          EQU (0x1 :SHL: TIM_DIER_TIE_Pos)                   ;!< 0x00000040
TIM_DIER_TIE              EQU TIM_DIER_TIE_Msk                             ;!<Trigger interrupt enable
TIM_DIER_BIE_Pos          EQU (7)
TIM_DIER_BIE_Msk          EQU (0x1 :SHL: TIM_DIER_BIE_Pos)                   ;!< 0x00000080
TIM_DIER_BIE              EQU TIM_DIER_BIE_Msk                             ;!<Break interrupt enable
TIM_DIER_UDE_Pos          EQU (8)
TIM_DIER_UDE_Msk          EQU (0x1 :SHL: TIM_DIER_UDE_Pos)                   ;!< 0x00000100
TIM_DIER_UDE              EQU TIM_DIER_UDE_Msk                             ;!<Update DMA request enable
TIM_DIER_CC1DE_Pos        EQU (9)
TIM_DIER_CC1DE_Msk        EQU (0x1 :SHL: TIM_DIER_CC1DE_Pos)                 ;!< 0x00000200
TIM_DIER_CC1DE            EQU TIM_DIER_CC1DE_Msk                           ;!<Capture/Compare 1 DMA request enable
TIM_DIER_CC2DE_Pos        EQU (10)
TIM_DIER_CC2DE_Msk        EQU (0x1 :SHL: TIM_DIER_CC2DE_Pos)                 ;!< 0x00000400
TIM_DIER_CC2DE            EQU TIM_DIER_CC2DE_Msk                           ;!<Capture/Compare 2 DMA request enable
TIM_DIER_CC3DE_Pos        EQU (11)
TIM_DIER_CC3DE_Msk        EQU (0x1 :SHL: TIM_DIER_CC3DE_Pos)                 ;!< 0x00000800
TIM_DIER_CC3DE            EQU TIM_DIER_CC3DE_Msk                           ;!<Capture/Compare 3 DMA request enable
TIM_DIER_CC4DE_Pos        EQU (12)
TIM_DIER_CC4DE_Msk        EQU (0x1 :SHL: TIM_DIER_CC4DE_Pos)                 ;!< 0x00001000
TIM_DIER_CC4DE            EQU TIM_DIER_CC4DE_Msk                           ;!<Capture/Compare 4 DMA request enable
TIM_DIER_COMDE_Pos        EQU (13)
TIM_DIER_COMDE_Msk        EQU (0x1 :SHL: TIM_DIER_COMDE_Pos)                 ;!< 0x00002000
TIM_DIER_COMDE            EQU TIM_DIER_COMDE_Msk                           ;!<COM DMA request enable
TIM_DIER_TDE_Pos          EQU (14)
TIM_DIER_TDE_Msk          EQU (0x1 :SHL: TIM_DIER_TDE_Pos)                   ;!< 0x00004000
TIM_DIER_TDE              EQU TIM_DIER_TDE_Msk                             ;!<Trigger DMA request enable

;*******************  Bit definition for TIM_SR register  *******************
TIM_SR_UIF_Pos            EQU (0)
TIM_SR_UIF_Msk            EQU (0x1 :SHL: TIM_SR_UIF_Pos)                     ;!< 0x00000001
TIM_SR_UIF                EQU TIM_SR_UIF_Msk                               ;!<Update interrupt Flag
TIM_SR_CC1IF_Pos          EQU (1)
TIM_SR_CC1IF_Msk          EQU (0x1 :SHL: TIM_SR_CC1IF_Pos)                   ;!< 0x00000002
TIM_SR_CC1IF              EQU TIM_SR_CC1IF_Msk                             ;!<Capture/Compare 1 interrupt Flag
TIM_SR_CC2IF_Pos          EQU (2)
TIM_SR_CC2IF_Msk          EQU (0x1 :SHL: TIM_SR_CC2IF_Pos)                   ;!< 0x00000004
TIM_SR_CC2IF              EQU TIM_SR_CC2IF_Msk                             ;!<Capture/Compare 2 interrupt Flag
TIM_SR_CC3IF_Pos          EQU (3)
TIM_SR_CC3IF_Msk          EQU (0x1 :SHL: TIM_SR_CC3IF_Pos)                   ;!< 0x00000008
TIM_SR_CC3IF              EQU TIM_SR_CC3IF_Msk                             ;!<Capture/Compare 3 interrupt Flag
TIM_SR_CC4IF_Pos          EQU (4)
TIM_SR_CC4IF_Msk          EQU (0x1 :SHL: TIM_SR_CC4IF_Pos)                   ;!< 0x00000010
TIM_SR_CC4IF              EQU TIM_SR_CC4IF_Msk                             ;!<Capture/Compare 4 interrupt Flag
TIM_SR_COMIF_Pos          EQU (5)
TIM_SR_COMIF_Msk          EQU (0x1 :SHL: TIM_SR_COMIF_Pos)                   ;!< 0x00000020
TIM_SR_COMIF              EQU TIM_SR_COMIF_Msk                             ;!<COM interrupt Flag
TIM_SR_TIF_Pos            EQU (6)
TIM_SR_TIF_Msk            EQU (0x1 :SHL: TIM_SR_TIF_Pos)                     ;!< 0x00000040
TIM_SR_TIF                EQU TIM_SR_TIF_Msk                               ;!<Trigger interrupt Flag
TIM_SR_BIF_Pos            EQU (7)
TIM_SR_BIF_Msk            EQU (0x1 :SHL: TIM_SR_BIF_Pos)                     ;!< 0x00000080
TIM_SR_BIF                EQU TIM_SR_BIF_Msk                               ;!<Break interrupt Flag
TIM_SR_B2IF_Pos           EQU (8)
TIM_SR_B2IF_Msk           EQU (0x1 :SHL: TIM_SR_B2IF_Pos)                    ;!< 0x00000100
TIM_SR_B2IF               EQU TIM_SR_B2IF_Msk                              ;!<Break2 interrupt Flag
TIM_SR_CC1OF_Pos          EQU (9)
TIM_SR_CC1OF_Msk          EQU (0x1 :SHL: TIM_SR_CC1OF_Pos)                   ;!< 0x00000200
TIM_SR_CC1OF              EQU TIM_SR_CC1OF_Msk                             ;!<Capture/Compare 1 Overcapture Flag
TIM_SR_CC2OF_Pos          EQU (10)
TIM_SR_CC2OF_Msk          EQU (0x1 :SHL: TIM_SR_CC2OF_Pos)                   ;!< 0x00000400
TIM_SR_CC2OF              EQU TIM_SR_CC2OF_Msk                             ;!<Capture/Compare 2 Overcapture Flag
TIM_SR_CC3OF_Pos          EQU (11)
TIM_SR_CC3OF_Msk          EQU (0x1 :SHL: TIM_SR_CC3OF_Pos)                   ;!< 0x00000800
TIM_SR_CC3OF              EQU TIM_SR_CC3OF_Msk                             ;!<Capture/Compare 3 Overcapture Flag
TIM_SR_CC4OF_Pos          EQU (12)
TIM_SR_CC4OF_Msk          EQU (0x1 :SHL: TIM_SR_CC4OF_Pos)                   ;!< 0x00001000
TIM_SR_CC4OF              EQU TIM_SR_CC4OF_Msk                             ;!<Capture/Compare 4 Overcapture Flag
TIM_SR_CC5IF_Pos          EQU (16)
TIM_SR_CC5IF_Msk          EQU (0x1 :SHL: TIM_SR_CC5IF_Pos)                   ;!< 0x00010000
TIM_SR_CC5IF              EQU TIM_SR_CC5IF_Msk                             ;!<Capture/Compare 5 interrupt Flag
TIM_SR_CC6IF_Pos          EQU (17)
TIM_SR_CC6IF_Msk          EQU (0x1 :SHL: TIM_SR_CC6IF_Pos)                   ;!< 0x00020000
TIM_SR_CC6IF              EQU TIM_SR_CC6IF_Msk                             ;!<Capture/Compare 6 interrupt Flag

;******************  Bit definition for TIM_EGR register  *******************
TIM_EGR_UG_Pos            EQU (0)
TIM_EGR_UG_Msk            EQU (0x1 :SHL: TIM_EGR_UG_Pos)                     ;!< 0x00000001
TIM_EGR_UG                EQU TIM_EGR_UG_Msk                               ;!<Update Generation
TIM_EGR_CC1G_Pos          EQU (1)
TIM_EGR_CC1G_Msk          EQU (0x1 :SHL: TIM_EGR_CC1G_Pos)                   ;!< 0x00000002
TIM_EGR_CC1G              EQU TIM_EGR_CC1G_Msk                             ;!<Capture/Compare 1 Generation
TIM_EGR_CC2G_Pos          EQU (2)
TIM_EGR_CC2G_Msk          EQU (0x1 :SHL: TIM_EGR_CC2G_Pos)                   ;!< 0x00000004
TIM_EGR_CC2G              EQU TIM_EGR_CC2G_Msk                             ;!<Capture/Compare 2 Generation
TIM_EGR_CC3G_Pos          EQU (3)
TIM_EGR_CC3G_Msk          EQU (0x1 :SHL: TIM_EGR_CC3G_Pos)                   ;!< 0x00000008
TIM_EGR_CC3G              EQU TIM_EGR_CC3G_Msk                             ;!<Capture/Compare 3 Generation
TIM_EGR_CC4G_Pos          EQU (4)
TIM_EGR_CC4G_Msk          EQU (0x1 :SHL: TIM_EGR_CC4G_Pos)                   ;!< 0x00000010
TIM_EGR_CC4G              EQU TIM_EGR_CC4G_Msk                             ;!<Capture/Compare 4 Generation
TIM_EGR_COMG_Pos          EQU (5)
TIM_EGR_COMG_Msk          EQU (0x1 :SHL: TIM_EGR_COMG_Pos)                   ;!< 0x00000020
TIM_EGR_COMG              EQU TIM_EGR_COMG_Msk                             ;!<Capture/Compare Control Update Generation
TIM_EGR_TG_Pos            EQU (6)
TIM_EGR_TG_Msk            EQU (0x1 :SHL: TIM_EGR_TG_Pos)                     ;!< 0x00000040
TIM_EGR_TG                EQU TIM_EGR_TG_Msk                               ;!<Trigger Generation
TIM_EGR_BG_Pos            EQU (7)
TIM_EGR_BG_Msk            EQU (0x1 :SHL: TIM_EGR_BG_Pos)                     ;!< 0x00000080
TIM_EGR_BG                EQU TIM_EGR_BG_Msk                               ;!<Break Generation
TIM_EGR_B2G_Pos           EQU (8)
TIM_EGR_B2G_Msk           EQU (0x1 :SHL: TIM_EGR_B2G_Pos)                    ;!< 0x00000100
TIM_EGR_B2G               EQU TIM_EGR_B2G_Msk                              ;!<Break Generation

;*****************  Bit definition for TIM_CCMR1 register  ******************
TIM_CCMR1_CC1S_Pos        EQU (0)
TIM_CCMR1_CC1S_Msk        EQU (0x3 :SHL: TIM_CCMR1_CC1S_Pos)                 ;!< 0x00000003
TIM_CCMR1_CC1S            EQU TIM_CCMR1_CC1S_Msk                           ;!<CC1S[1:0] bits (Capture/Compare 1 Selection)
TIM_CCMR1_CC1S_0          EQU (0x1 :SHL: TIM_CCMR1_CC1S_Pos)                 ;!< 0x00000001
TIM_CCMR1_CC1S_1          EQU (0x2 :SHL: TIM_CCMR1_CC1S_Pos)                 ;!< 0x00000002

TIM_CCMR1_OC1FE_Pos       EQU (2)
TIM_CCMR1_OC1FE_Msk       EQU (0x1 :SHL: TIM_CCMR1_OC1FE_Pos)                ;!< 0x00000004
TIM_CCMR1_OC1FE           EQU TIM_CCMR1_OC1FE_Msk                          ;!<Output Compare 1 Fast enable
TIM_CCMR1_OC1PE_Pos       EQU (3)
TIM_CCMR1_OC1PE_Msk       EQU (0x1 :SHL: TIM_CCMR1_OC1PE_Pos)                ;!< 0x00000008
TIM_CCMR1_OC1PE           EQU TIM_CCMR1_OC1PE_Msk                          ;!<Output Compare 1 Preload enable

TIM_CCMR1_OC1M_Pos        EQU (4)
TIM_CCMR1_OC1M_Msk        EQU (0x1007 :SHL: TIM_CCMR1_OC1M_Pos)              ;!< 0x00010070
TIM_CCMR1_OC1M            EQU TIM_CCMR1_OC1M_Msk                           ;!<OC1M[2:0] bits (Output Compare 1 Mode)
TIM_CCMR1_OC1M_0          EQU (0x00000010)                                ;!<Bit 0
TIM_CCMR1_OC1M_1          EQU (0x00000020)                                ;!<Bit 1
TIM_CCMR1_OC1M_2          EQU (0x00000040)                                ;!<Bit 2
TIM_CCMR1_OC1M_3          EQU (0x00010000)                                ;!<Bit 3

TIM_CCMR1_OC1CE_Pos       EQU (7)
TIM_CCMR1_OC1CE_Msk       EQU (0x1 :SHL: TIM_CCMR1_OC1CE_Pos)                ;!< 0x00000080
TIM_CCMR1_OC1CE           EQU TIM_CCMR1_OC1CE_Msk                          ;!<Output Compare 1Clear Enable

TIM_CCMR1_CC2S_Pos        EQU (8)
TIM_CCMR1_CC2S_Msk        EQU (0x3 :SHL: TIM_CCMR1_CC2S_Pos)                 ;!< 0x00000300
TIM_CCMR1_CC2S            EQU TIM_CCMR1_CC2S_Msk                           ;!<CC2S[1:0] bits (Capture/Compare 2 Selection)
TIM_CCMR1_CC2S_0          EQU (0x1 :SHL: TIM_CCMR1_CC2S_Pos)                 ;!< 0x00000100
TIM_CCMR1_CC2S_1          EQU (0x2 :SHL: TIM_CCMR1_CC2S_Pos)                 ;!< 0x00000200

TIM_CCMR1_OC2FE_Pos       EQU (10)
TIM_CCMR1_OC2FE_Msk       EQU (0x1 :SHL: TIM_CCMR1_OC2FE_Pos)                ;!< 0x00000400
TIM_CCMR1_OC2FE           EQU TIM_CCMR1_OC2FE_Msk                          ;!<Output Compare 2 Fast enable
TIM_CCMR1_OC2PE_Pos       EQU (11)
TIM_CCMR1_OC2PE_Msk       EQU (0x1 :SHL: TIM_CCMR1_OC2PE_Pos)                ;!< 0x00000800
TIM_CCMR1_OC2PE           EQU TIM_CCMR1_OC2PE_Msk                          ;!<Output Compare 2 Preload enable

TIM_CCMR1_OC2M_Pos        EQU (12)
TIM_CCMR1_OC2M_Msk        EQU (0x1007 :SHL: TIM_CCMR1_OC2M_Pos)              ;!< 0x01007000
TIM_CCMR1_OC2M            EQU TIM_CCMR1_OC2M_Msk                           ;!<OC2M[2:0] bits (Output Compare 2 Mode)
TIM_CCMR1_OC2M_0          EQU (0x00001000)                                ;!<Bit 0
TIM_CCMR1_OC2M_1          EQU (0x00002000)                                ;!<Bit 1
TIM_CCMR1_OC2M_2          EQU (0x00004000)                                ;!<Bit 2
TIM_CCMR1_OC2M_3          EQU (0x01000000)                                ;!<Bit 3

TIM_CCMR1_OC2CE_Pos       EQU (15)
TIM_CCMR1_OC2CE_Msk       EQU (0x1 :SHL: TIM_CCMR1_OC2CE_Pos)                ;!< 0x00008000
TIM_CCMR1_OC2CE           EQU TIM_CCMR1_OC2CE_Msk                          ;!<Output Compare 2 Clear Enable

;----------------------------------------------------------------------------

TIM_CCMR1_IC1PSC_Pos      EQU (2)
TIM_CCMR1_IC1PSC_Msk      EQU (0x3 :SHL: TIM_CCMR1_IC1PSC_Pos)               ;!< 0x0000000C
TIM_CCMR1_IC1PSC          EQU TIM_CCMR1_IC1PSC_Msk                         ;!<IC1PSC[1:0] bits (Input Capture 1 Prescaler)
TIM_CCMR1_IC1PSC_0        EQU (0x1 :SHL: TIM_CCMR1_IC1PSC_Pos)               ;!< 0x00000004
TIM_CCMR1_IC1PSC_1        EQU (0x2 :SHL: TIM_CCMR1_IC1PSC_Pos)               ;!< 0x00000008

TIM_CCMR1_IC1F_Pos        EQU (4)
TIM_CCMR1_IC1F_Msk        EQU (0xF :SHL: TIM_CCMR1_IC1F_Pos)                 ;!< 0x000000F0
TIM_CCMR1_IC1F            EQU TIM_CCMR1_IC1F_Msk                           ;!<IC1F[3:0] bits (Input Capture 1 Filter)
TIM_CCMR1_IC1F_0          EQU (0x1 :SHL: TIM_CCMR1_IC1F_Pos)                 ;!< 0x00000010
TIM_CCMR1_IC1F_1          EQU (0x2 :SHL: TIM_CCMR1_IC1F_Pos)                 ;!< 0x00000020
TIM_CCMR1_IC1F_2          EQU (0x4 :SHL: TIM_CCMR1_IC1F_Pos)                 ;!< 0x00000040
TIM_CCMR1_IC1F_3          EQU (0x8 :SHL: TIM_CCMR1_IC1F_Pos)                 ;!< 0x00000080

TIM_CCMR1_IC2PSC_Pos      EQU (10)
TIM_CCMR1_IC2PSC_Msk      EQU (0x3 :SHL: TIM_CCMR1_IC2PSC_Pos)               ;!< 0x00000C00
TIM_CCMR1_IC2PSC          EQU TIM_CCMR1_IC2PSC_Msk                         ;!<IC2PSC[1:0] bits (Input Capture 2 Prescaler)
TIM_CCMR1_IC2PSC_0        EQU (0x1 :SHL: TIM_CCMR1_IC2PSC_Pos)               ;!< 0x00000400
TIM_CCMR1_IC2PSC_1        EQU (0x2 :SHL: TIM_CCMR1_IC2PSC_Pos)               ;!< 0x00000800

TIM_CCMR1_IC2F_Pos        EQU (12)
TIM_CCMR1_IC2F_Msk        EQU (0xF :SHL: TIM_CCMR1_IC2F_Pos)                 ;!< 0x0000F000
TIM_CCMR1_IC2F            EQU TIM_CCMR1_IC2F_Msk                           ;!<IC2F[3:0] bits (Input Capture 2 Filter)
TIM_CCMR1_IC2F_0          EQU (0x1 :SHL: TIM_CCMR1_IC2F_Pos)                 ;!< 0x00001000
TIM_CCMR1_IC2F_1          EQU (0x2 :SHL: TIM_CCMR1_IC2F_Pos)                 ;!< 0x00002000
TIM_CCMR1_IC2F_2          EQU (0x4 :SHL: TIM_CCMR1_IC2F_Pos)                 ;!< 0x00004000
TIM_CCMR1_IC2F_3          EQU (0x8 :SHL: TIM_CCMR1_IC2F_Pos)                 ;!< 0x00008000

;*****************  Bit definition for TIM_CCMR2 register  ******************
TIM_CCMR2_CC3S_Pos        EQU (0)
TIM_CCMR2_CC3S_Msk        EQU (0x3 :SHL: TIM_CCMR2_CC3S_Pos)                 ;!< 0x00000003
TIM_CCMR2_CC3S            EQU TIM_CCMR2_CC3S_Msk                           ;!<CC3S[1:0] bits (Capture/Compare 3 Selection)
TIM_CCMR2_CC3S_0          EQU (0x1 :SHL: TIM_CCMR2_CC3S_Pos)                 ;!< 0x00000001
TIM_CCMR2_CC3S_1          EQU (0x2 :SHL: TIM_CCMR2_CC3S_Pos)                 ;!< 0x00000002

TIM_CCMR2_OC3FE_Pos       EQU (2)
TIM_CCMR2_OC3FE_Msk       EQU (0x1 :SHL: TIM_CCMR2_OC3FE_Pos)                ;!< 0x00000004
TIM_CCMR2_OC3FE           EQU TIM_CCMR2_OC3FE_Msk                          ;!<Output Compare 3 Fast enable
TIM_CCMR2_OC3PE_Pos       EQU (3)
TIM_CCMR2_OC3PE_Msk       EQU (0x1 :SHL: TIM_CCMR2_OC3PE_Pos)                ;!< 0x00000008
TIM_CCMR2_OC3PE           EQU TIM_CCMR2_OC3PE_Msk                          ;!<Output Compare 3 Preload enable

TIM_CCMR2_OC3M_Pos        EQU (4)
TIM_CCMR2_OC3M_Msk        EQU (0x1007 :SHL: TIM_CCMR2_OC3M_Pos)              ;!< 0x00010070
TIM_CCMR2_OC3M            EQU TIM_CCMR2_OC3M_Msk                           ;!<OC3M[2:0] bits (Output Compare 3 Mode)
TIM_CCMR2_OC3M_0          EQU (0x00000010)                                ;!<Bit 0
TIM_CCMR2_OC3M_1          EQU (0x00000020)                                ;!<Bit 1
TIM_CCMR2_OC3M_2          EQU (0x00000040)                                ;!<Bit 2
TIM_CCMR2_OC3M_3          EQU (0x00010000)                                ;!<Bit 3

TIM_CCMR2_OC3CE_Pos       EQU (7)
TIM_CCMR2_OC3CE_Msk       EQU (0x1 :SHL: TIM_CCMR2_OC3CE_Pos)                ;!< 0x00000080
TIM_CCMR2_OC3CE           EQU TIM_CCMR2_OC3CE_Msk                          ;!<Output Compare 3 Clear Enable

TIM_CCMR2_CC4S_Pos        EQU (8)
TIM_CCMR2_CC4S_Msk        EQU (0x3 :SHL: TIM_CCMR2_CC4S_Pos)                 ;!< 0x00000300
TIM_CCMR2_CC4S            EQU TIM_CCMR2_CC4S_Msk                           ;!<CC4S[1:0] bits (Capture/Compare 4 Selection)
TIM_CCMR2_CC4S_0          EQU (0x1 :SHL: TIM_CCMR2_CC4S_Pos)                 ;!< 0x00000100
TIM_CCMR2_CC4S_1          EQU (0x2 :SHL: TIM_CCMR2_CC4S_Pos)                 ;!< 0x00000200

TIM_CCMR2_OC4FE_Pos       EQU (10)
TIM_CCMR2_OC4FE_Msk       EQU (0x1 :SHL: TIM_CCMR2_OC4FE_Pos)                ;!< 0x00000400
TIM_CCMR2_OC4FE           EQU TIM_CCMR2_OC4FE_Msk                          ;!<Output Compare 4 Fast enable
TIM_CCMR2_OC4PE_Pos       EQU (11)
TIM_CCMR2_OC4PE_Msk       EQU (0x1 :SHL: TIM_CCMR2_OC4PE_Pos)                ;!< 0x00000800
TIM_CCMR2_OC4PE           EQU TIM_CCMR2_OC4PE_Msk                          ;!<Output Compare 4 Preload enable

TIM_CCMR2_OC4M_Pos        EQU (12)
TIM_CCMR2_OC4M_Msk        EQU (0x1007 :SHL: TIM_CCMR2_OC4M_Pos)              ;!< 0x01007000
TIM_CCMR2_OC4M            EQU TIM_CCMR2_OC4M_Msk                           ;!<OC4M[2:0] bits (Output Compare 4 Mode)
TIM_CCMR2_OC4M_0          EQU (0x00001000)                                ;!<Bit 0
TIM_CCMR2_OC4M_1          EQU (0x00002000)                                ;!<Bit 1
TIM_CCMR2_OC4M_2          EQU (0x00004000)                                ;!<Bit 2
TIM_CCMR2_OC4M_3          EQU (0x01000000)                                ;!<Bit 3

TIM_CCMR2_OC4CE_Pos       EQU (15)
TIM_CCMR2_OC4CE_Msk       EQU (0x1 :SHL: TIM_CCMR2_OC4CE_Pos)                ;!< 0x00008000
TIM_CCMR2_OC4CE           EQU TIM_CCMR2_OC4CE_Msk                          ;!<Output Compare 4 Clear Enable

;----------------------------------------------------------------------------

TIM_CCMR2_IC3PSC_Pos      EQU (2)
TIM_CCMR2_IC3PSC_Msk      EQU (0x3 :SHL: TIM_CCMR2_IC3PSC_Pos)               ;!< 0x0000000C
TIM_CCMR2_IC3PSC          EQU TIM_CCMR2_IC3PSC_Msk                         ;!<IC3PSC[1:0] bits (Input Capture 3 Prescaler)
TIM_CCMR2_IC3PSC_0        EQU (0x1 :SHL: TIM_CCMR2_IC3PSC_Pos)               ;!< 0x00000004
TIM_CCMR2_IC3PSC_1        EQU (0x2 :SHL: TIM_CCMR2_IC3PSC_Pos)               ;!< 0x00000008

TIM_CCMR2_IC3F_Pos        EQU (4)
TIM_CCMR2_IC3F_Msk        EQU (0xF :SHL: TIM_CCMR2_IC3F_Pos)                 ;!< 0x000000F0
TIM_CCMR2_IC3F            EQU TIM_CCMR2_IC3F_Msk                           ;!<IC3F[3:0] bits (Input Capture 3 Filter)
TIM_CCMR2_IC3F_0          EQU (0x1 :SHL: TIM_CCMR2_IC3F_Pos)                 ;!< 0x00000010
TIM_CCMR2_IC3F_1          EQU (0x2 :SHL: TIM_CCMR2_IC3F_Pos)                 ;!< 0x00000020
TIM_CCMR2_IC3F_2          EQU (0x4 :SHL: TIM_CCMR2_IC3F_Pos)                 ;!< 0x00000040
TIM_CCMR2_IC3F_3          EQU (0x8 :SHL: TIM_CCMR2_IC3F_Pos)                 ;!< 0x00000080

TIM_CCMR2_IC4PSC_Pos      EQU (10)
TIM_CCMR2_IC4PSC_Msk      EQU (0x3 :SHL: TIM_CCMR2_IC4PSC_Pos)               ;!< 0x00000C00
TIM_CCMR2_IC4PSC          EQU TIM_CCMR2_IC4PSC_Msk                         ;!<IC4PSC[1:0] bits (Input Capture 4 Prescaler)
TIM_CCMR2_IC4PSC_0        EQU (0x1 :SHL: TIM_CCMR2_IC4PSC_Pos)               ;!< 0x00000400
TIM_CCMR2_IC4PSC_1        EQU (0x2 :SHL: TIM_CCMR2_IC4PSC_Pos)               ;!< 0x00000800

TIM_CCMR2_IC4F_Pos        EQU (12)
TIM_CCMR2_IC4F_Msk        EQU (0xF :SHL: TIM_CCMR2_IC4F_Pos)                 ;!< 0x0000F000
TIM_CCMR2_IC4F            EQU TIM_CCMR2_IC4F_Msk                           ;!<IC4F[3:0] bits (Input Capture 4 Filter)
TIM_CCMR2_IC4F_0          EQU (0x1 :SHL: TIM_CCMR2_IC4F_Pos)                 ;!< 0x00001000
TIM_CCMR2_IC4F_1          EQU (0x2 :SHL: TIM_CCMR2_IC4F_Pos)                 ;!< 0x00002000
TIM_CCMR2_IC4F_2          EQU (0x4 :SHL: TIM_CCMR2_IC4F_Pos)                 ;!< 0x00004000
TIM_CCMR2_IC4F_3          EQU (0x8 :SHL: TIM_CCMR2_IC4F_Pos)                 ;!< 0x00008000

;******************  Bit definition for TIM_CCER register  ******************
TIM_CCER_CC1E_Pos         EQU (0)
TIM_CCER_CC1E_Msk         EQU (0x1 :SHL: TIM_CCER_CC1E_Pos)                  ;!< 0x00000001
TIM_CCER_CC1E             EQU TIM_CCER_CC1E_Msk                            ;!<Capture/Compare 1 output enable
TIM_CCER_CC1P_Pos         EQU (1)
TIM_CCER_CC1P_Msk         EQU (0x1 :SHL: TIM_CCER_CC1P_Pos)                  ;!< 0x00000002
TIM_CCER_CC1P             EQU TIM_CCER_CC1P_Msk                            ;!<Capture/Compare 1 output Polarity
TIM_CCER_CC1NE_Pos        EQU (2)
TIM_CCER_CC1NE_Msk        EQU (0x1 :SHL: TIM_CCER_CC1NE_Pos)                 ;!< 0x00000004
TIM_CCER_CC1NE            EQU TIM_CCER_CC1NE_Msk                           ;!<Capture/Compare 1 Complementary output enable
TIM_CCER_CC1NP_Pos        EQU (3)
TIM_CCER_CC1NP_Msk        EQU (0x1 :SHL: TIM_CCER_CC1NP_Pos)                 ;!< 0x00000008
TIM_CCER_CC1NP            EQU TIM_CCER_CC1NP_Msk                           ;!<Capture/Compare 1 Complementary output Polarity
TIM_CCER_CC2E_Pos         EQU (4)
TIM_CCER_CC2E_Msk         EQU (0x1 :SHL: TIM_CCER_CC2E_Pos)                  ;!< 0x00000010
TIM_CCER_CC2E             EQU TIM_CCER_CC2E_Msk                            ;!<Capture/Compare 2 output enable
TIM_CCER_CC2P_Pos         EQU (5)
TIM_CCER_CC2P_Msk         EQU (0x1 :SHL: TIM_CCER_CC2P_Pos)                  ;!< 0x00000020
TIM_CCER_CC2P             EQU TIM_CCER_CC2P_Msk                            ;!<Capture/Compare 2 output Polarity
TIM_CCER_CC2NE_Pos        EQU (6)
TIM_CCER_CC2NE_Msk        EQU (0x1 :SHL: TIM_CCER_CC2NE_Pos)                 ;!< 0x00000040
TIM_CCER_CC2NE            EQU TIM_CCER_CC2NE_Msk                           ;!<Capture/Compare 2 Complementary output enable
TIM_CCER_CC2NP_Pos        EQU (7)
TIM_CCER_CC2NP_Msk        EQU (0x1 :SHL: TIM_CCER_CC2NP_Pos)                 ;!< 0x00000080
TIM_CCER_CC2NP            EQU TIM_CCER_CC2NP_Msk                           ;!<Capture/Compare 2 Complementary output Polarity
TIM_CCER_CC3E_Pos         EQU (8)
TIM_CCER_CC3E_Msk         EQU (0x1 :SHL: TIM_CCER_CC3E_Pos)                  ;!< 0x00000100
TIM_CCER_CC3E             EQU TIM_CCER_CC3E_Msk                            ;!<Capture/Compare 3 output enable
TIM_CCER_CC3P_Pos         EQU (9)
TIM_CCER_CC3P_Msk         EQU (0x1 :SHL: TIM_CCER_CC3P_Pos)                  ;!< 0x00000200
TIM_CCER_CC3P             EQU TIM_CCER_CC3P_Msk                            ;!<Capture/Compare 3 output Polarity
TIM_CCER_CC3NE_Pos        EQU (10)
TIM_CCER_CC3NE_Msk        EQU (0x1 :SHL: TIM_CCER_CC3NE_Pos)                 ;!< 0x00000400
TIM_CCER_CC3NE            EQU TIM_CCER_CC3NE_Msk                           ;!<Capture/Compare 3 Complementary output enable
TIM_CCER_CC3NP_Pos        EQU (11)
TIM_CCER_CC3NP_Msk        EQU (0x1 :SHL: TIM_CCER_CC3NP_Pos)                 ;!< 0x00000800
TIM_CCER_CC3NP            EQU TIM_CCER_CC3NP_Msk                           ;!<Capture/Compare 3 Complementary output Polarity
TIM_CCER_CC4E_Pos         EQU (12)
TIM_CCER_CC4E_Msk         EQU (0x1 :SHL: TIM_CCER_CC4E_Pos)                  ;!< 0x00001000
TIM_CCER_CC4E             EQU TIM_CCER_CC4E_Msk                            ;!<Capture/Compare 4 output enable
TIM_CCER_CC4P_Pos         EQU (13)
TIM_CCER_CC4P_Msk         EQU (0x1 :SHL: TIM_CCER_CC4P_Pos)                  ;!< 0x00002000
TIM_CCER_CC4P             EQU TIM_CCER_CC4P_Msk                            ;!<Capture/Compare 4 output Polarity
TIM_CCER_CC4NP_Pos        EQU (15)
TIM_CCER_CC4NP_Msk        EQU (0x1 :SHL: TIM_CCER_CC4NP_Pos)                 ;!< 0x00008000
TIM_CCER_CC4NP            EQU TIM_CCER_CC4NP_Msk                           ;!<Capture/Compare 4 Complementary output Polarity
TIM_CCER_CC5E_Pos         EQU (16)
TIM_CCER_CC5E_Msk         EQU (0x1 :SHL: TIM_CCER_CC5E_Pos)                  ;!< 0x00010000
TIM_CCER_CC5E             EQU TIM_CCER_CC5E_Msk                            ;!<Capture/Compare 5 output enable
TIM_CCER_CC5P_Pos         EQU (17)
TIM_CCER_CC5P_Msk         EQU (0x1 :SHL: TIM_CCER_CC5P_Pos)                  ;!< 0x00020000
TIM_CCER_CC5P             EQU TIM_CCER_CC5P_Msk                            ;!<Capture/Compare 5 output Polarity
TIM_CCER_CC6E_Pos         EQU (20)
TIM_CCER_CC6E_Msk         EQU (0x1 :SHL: TIM_CCER_CC6E_Pos)                  ;!< 0x00100000
TIM_CCER_CC6E             EQU TIM_CCER_CC6E_Msk                            ;!<Capture/Compare 6 output enable
TIM_CCER_CC6P_Pos         EQU (21)
TIM_CCER_CC6P_Msk         EQU (0x1 :SHL: TIM_CCER_CC6P_Pos)                  ;!< 0x00200000
TIM_CCER_CC6P             EQU TIM_CCER_CC6P_Msk                            ;!<Capture/Compare 6 output Polarity

;******************  Bit definition for TIM_CNT register  *******************
TIM_CNT_CNT_Pos           EQU (0)
TIM_CNT_CNT_Msk           EQU (0xFFFFFFFF :SHL: TIM_CNT_CNT_Pos)             ;!< 0xFFFFFFFF
TIM_CNT_CNT               EQU TIM_CNT_CNT_Msk                              ;!<Counter Value
TIM_CNT_UIFCPY_Pos        EQU (31)
TIM_CNT_UIFCPY_Msk        EQU (0x1 :SHL: TIM_CNT_UIFCPY_Pos)                 ;!< 0x80000000
TIM_CNT_UIFCPY            EQU TIM_CNT_UIFCPY_Msk                           ;!<Update interrupt flag copy

;******************  Bit definition for TIM_PSC register  *******************
TIM_PSC_PSC_Pos           EQU (0)
TIM_PSC_PSC_Msk           EQU (0xFFFF :SHL: TIM_PSC_PSC_Pos)                 ;!< 0x0000FFFF
TIM_PSC_PSC               EQU TIM_PSC_PSC_Msk                              ;!<Prescaler Value

;******************  Bit definition for TIM_ARR register  *******************
TIM_ARR_ARR_Pos           EQU (0)
TIM_ARR_ARR_Msk           EQU (0xFFFFFFFF :SHL: TIM_ARR_ARR_Pos)             ;!< 0xFFFFFFFF
TIM_ARR_ARR               EQU TIM_ARR_ARR_Msk                              ;!<actual auto-reload Value

;******************  Bit definition for TIM_RCR register  *******************
TIM_RCR_REP_Pos           EQU (0)
TIM_RCR_REP_Msk           EQU (0xFFFF :SHL: TIM_RCR_REP_Pos)                 ;!< 0x0000FFFF
TIM_RCR_REP               EQU TIM_RCR_REP_Msk                              ;!<Repetition Counter Value

;******************  Bit definition for TIM_CCR1 register  ******************
TIM_CCR1_CCR1_Pos         EQU (0)
TIM_CCR1_CCR1_Msk         EQU (0xFFFF :SHL: TIM_CCR1_CCR1_Pos)               ;!< 0x0000FFFF
TIM_CCR1_CCR1             EQU TIM_CCR1_CCR1_Msk                            ;!<Capture/Compare 1 Value

;******************  Bit definition for TIM_CCR2 register  ******************
TIM_CCR2_CCR2_Pos         EQU (0)
TIM_CCR2_CCR2_Msk         EQU (0xFFFF :SHL: TIM_CCR2_CCR2_Pos)               ;!< 0x0000FFFF
TIM_CCR2_CCR2             EQU TIM_CCR2_CCR2_Msk                            ;!<Capture/Compare 2 Value

;******************  Bit definition for TIM_CCR3 register  ******************
TIM_CCR3_CCR3_Pos         EQU (0)
TIM_CCR3_CCR3_Msk         EQU (0xFFFF :SHL: TIM_CCR3_CCR3_Pos)               ;!< 0x0000FFFF
TIM_CCR3_CCR3             EQU TIM_CCR3_CCR3_Msk                            ;!<Capture/Compare 3 Value

;******************  Bit definition for TIM_CCR4 register  ******************
TIM_CCR4_CCR4_Pos         EQU (0)
TIM_CCR4_CCR4_Msk         EQU (0xFFFF :SHL: TIM_CCR4_CCR4_Pos)               ;!< 0x0000FFFF
TIM_CCR4_CCR4             EQU TIM_CCR4_CCR4_Msk                            ;!<Capture/Compare 4 Value

;******************  Bit definition for TIM_CCR5 register  ******************
TIM_CCR5_CCR5_Pos         EQU (0)
TIM_CCR5_CCR5_Msk         EQU (0xFFFFFFFF :SHL: TIM_CCR5_CCR5_Pos)           ;!< 0xFFFFFFFF
TIM_CCR5_CCR5             EQU TIM_CCR5_CCR5_Msk                            ;!<Capture/Compare 5 Value
TIM_CCR5_GC5C1_Pos        EQU (29)
TIM_CCR5_GC5C1_Msk        EQU (0x1 :SHL: TIM_CCR5_GC5C1_Pos)                 ;!< 0x20000000
TIM_CCR5_GC5C1            EQU TIM_CCR5_GC5C1_Msk                           ;!<Group Channel 5 and Channel 1
TIM_CCR5_GC5C2_Pos        EQU (30)
TIM_CCR5_GC5C2_Msk        EQU (0x1 :SHL: TIM_CCR5_GC5C2_Pos)                 ;!< 0x40000000
TIM_CCR5_GC5C2            EQU TIM_CCR5_GC5C2_Msk                           ;!<Group Channel 5 and Channel 2
TIM_CCR5_GC5C3_Pos        EQU (31)
TIM_CCR5_GC5C3_Msk        EQU (0x1 :SHL: TIM_CCR5_GC5C3_Pos)                 ;!< 0x80000000
TIM_CCR5_GC5C3            EQU TIM_CCR5_GC5C3_Msk                           ;!<Group Channel 5 and Channel 3

;******************  Bit definition for TIM_CCR6 register  ******************
TIM_CCR6_CCR6_Pos         EQU (0)
TIM_CCR6_CCR6_Msk         EQU (0xFFFF :SHL: TIM_CCR6_CCR6_Pos)               ;!< 0x0000FFFF
TIM_CCR6_CCR6             EQU TIM_CCR6_CCR6_Msk                            ;!<Capture/Compare 6 Value

;******************  Bit definition for TIM_BDTR register  ******************
TIM_BDTR_DTG_Pos          EQU (0)
TIM_BDTR_DTG_Msk          EQU (0xFF :SHL: TIM_BDTR_DTG_Pos)                  ;!< 0x000000FF
TIM_BDTR_DTG              EQU TIM_BDTR_DTG_Msk                             ;!<DTG[0:7] bits (Dead-Time Generator set-up)
TIM_BDTR_DTG_0            EQU (0x01 :SHL: TIM_BDTR_DTG_Pos)                  ;!< 0x00000001
TIM_BDTR_DTG_1            EQU (0x02 :SHL: TIM_BDTR_DTG_Pos)                  ;!< 0x00000002
TIM_BDTR_DTG_2            EQU (0x04 :SHL: TIM_BDTR_DTG_Pos)                  ;!< 0x00000004
TIM_BDTR_DTG_3            EQU (0x08 :SHL: TIM_BDTR_DTG_Pos)                  ;!< 0x00000008
TIM_BDTR_DTG_4            EQU (0x10 :SHL: TIM_BDTR_DTG_Pos)                  ;!< 0x00000010
TIM_BDTR_DTG_5            EQU (0x20 :SHL: TIM_BDTR_DTG_Pos)                  ;!< 0x00000020
TIM_BDTR_DTG_6            EQU (0x40 :SHL: TIM_BDTR_DTG_Pos)                  ;!< 0x00000040
TIM_BDTR_DTG_7            EQU (0x80 :SHL: TIM_BDTR_DTG_Pos)                  ;!< 0x00000080

TIM_BDTR_LOCK_Pos         EQU (8)
TIM_BDTR_LOCK_Msk         EQU (0x3 :SHL: TIM_BDTR_LOCK_Pos)                  ;!< 0x00000300
TIM_BDTR_LOCK             EQU TIM_BDTR_LOCK_Msk                            ;!<LOCK[1:0] bits (Lock Configuration)
TIM_BDTR_LOCK_0           EQU (0x1 :SHL: TIM_BDTR_LOCK_Pos)                  ;!< 0x00000100
TIM_BDTR_LOCK_1           EQU (0x2 :SHL: TIM_BDTR_LOCK_Pos)                  ;!< 0x00000200

TIM_BDTR_OSSI_Pos         EQU (10)
TIM_BDTR_OSSI_Msk         EQU (0x1 :SHL: TIM_BDTR_OSSI_Pos)                  ;!< 0x00000400
TIM_BDTR_OSSI             EQU TIM_BDTR_OSSI_Msk                            ;!<Off-State Selection for Idle mode
TIM_BDTR_OSSR_Pos         EQU (11)
TIM_BDTR_OSSR_Msk         EQU (0x1 :SHL: TIM_BDTR_OSSR_Pos)                  ;!< 0x00000800
TIM_BDTR_OSSR             EQU TIM_BDTR_OSSR_Msk                            ;!<Off-State Selection for Run mode
TIM_BDTR_BKE_Pos          EQU (12)
TIM_BDTR_BKE_Msk          EQU (0x1 :SHL: TIM_BDTR_BKE_Pos)                   ;!< 0x00001000
TIM_BDTR_BKE              EQU TIM_BDTR_BKE_Msk                             ;!<Break enable for Break1
TIM_BDTR_BKP_Pos          EQU (13)
TIM_BDTR_BKP_Msk          EQU (0x1 :SHL: TIM_BDTR_BKP_Pos)                   ;!< 0x00002000
TIM_BDTR_BKP              EQU TIM_BDTR_BKP_Msk                             ;!<Break Polarity for Break1
TIM_BDTR_AOE_Pos          EQU (14)
TIM_BDTR_AOE_Msk          EQU (0x1 :SHL: TIM_BDTR_AOE_Pos)                   ;!< 0x00004000
TIM_BDTR_AOE              EQU TIM_BDTR_AOE_Msk                             ;!<Automatic Output enable
TIM_BDTR_MOE_Pos          EQU (15)
TIM_BDTR_MOE_Msk          EQU (0x1 :SHL: TIM_BDTR_MOE_Pos)                   ;!< 0x00008000
TIM_BDTR_MOE              EQU TIM_BDTR_MOE_Msk                             ;!<Main Output enable

TIM_BDTR_BKF_Pos          EQU (16)
TIM_BDTR_BKF_Msk          EQU (0xF :SHL: TIM_BDTR_BKF_Pos)                   ;!< 0x000F0000
TIM_BDTR_BKF              EQU TIM_BDTR_BKF_Msk                             ;!<Break Filter for Break1
TIM_BDTR_BK2F_Pos         EQU (20)
TIM_BDTR_BK2F_Msk         EQU (0xF :SHL: TIM_BDTR_BK2F_Pos)                  ;!< 0x00F00000
TIM_BDTR_BK2F             EQU TIM_BDTR_BK2F_Msk                            ;!<Break Filter for Break2

TIM_BDTR_BK2E_Pos         EQU (24)
TIM_BDTR_BK2E_Msk         EQU (0x1 :SHL: TIM_BDTR_BK2E_Pos)                  ;!< 0x01000000
TIM_BDTR_BK2E             EQU TIM_BDTR_BK2E_Msk                            ;!<Break enable for Break2
TIM_BDTR_BK2P_Pos         EQU (25)
TIM_BDTR_BK2P_Msk         EQU (0x1 :SHL: TIM_BDTR_BK2P_Pos)                  ;!< 0x02000000
TIM_BDTR_BK2P             EQU TIM_BDTR_BK2P_Msk                            ;!<Break Polarity for Break2

;******************  Bit definition for TIM_DCR register  *******************
TIM_DCR_DBA_Pos           EQU (0)
TIM_DCR_DBA_Msk           EQU (0x1F :SHL: TIM_DCR_DBA_Pos)                   ;!< 0x0000001F
TIM_DCR_DBA               EQU TIM_DCR_DBA_Msk                              ;!<DBA[4:0] bits (DMA Base Address)
TIM_DCR_DBA_0             EQU (0x01 :SHL: TIM_DCR_DBA_Pos)                   ;!< 0x00000001
TIM_DCR_DBA_1             EQU (0x02 :SHL: TIM_DCR_DBA_Pos)                   ;!< 0x00000002
TIM_DCR_DBA_2             EQU (0x04 :SHL: TIM_DCR_DBA_Pos)                   ;!< 0x00000004
TIM_DCR_DBA_3             EQU (0x08 :SHL: TIM_DCR_DBA_Pos)                   ;!< 0x00000008
TIM_DCR_DBA_4             EQU (0x10 :SHL: TIM_DCR_DBA_Pos)                   ;!< 0x00000010

TIM_DCR_DBL_Pos           EQU (8)
TIM_DCR_DBL_Msk           EQU (0x1F :SHL: TIM_DCR_DBL_Pos)                   ;!< 0x00001F00
TIM_DCR_DBL               EQU TIM_DCR_DBL_Msk                              ;!<DBL[4:0] bits (DMA Burst Length)
TIM_DCR_DBL_0             EQU (0x01 :SHL: TIM_DCR_DBL_Pos)                   ;!< 0x00000100
TIM_DCR_DBL_1             EQU (0x02 :SHL: TIM_DCR_DBL_Pos)                   ;!< 0x00000200
TIM_DCR_DBL_2             EQU (0x04 :SHL: TIM_DCR_DBL_Pos)                   ;!< 0x00000400
TIM_DCR_DBL_3             EQU (0x08 :SHL: TIM_DCR_DBL_Pos)                   ;!< 0x00000800
TIM_DCR_DBL_4             EQU (0x10 :SHL: TIM_DCR_DBL_Pos)                   ;!< 0x00001000

;******************  Bit definition for TIM_DMAR register  ******************
TIM_DMAR_DMAB_Pos         EQU (0)
TIM_DMAR_DMAB_Msk         EQU (0xFFFF :SHL: TIM_DMAR_DMAB_Pos)               ;!< 0x0000FFFF
TIM_DMAR_DMAB             EQU TIM_DMAR_DMAB_Msk                            ;!<DMA register for burst accesses

;******************  Bit definition for TIM16_OR register  ********************
TIM16_OR_TI1_RMP_Pos      EQU (0)
TIM16_OR_TI1_RMP_Msk      EQU (0x3 :SHL: TIM16_OR_TI1_RMP_Pos)               ;!< 0x00000003
TIM16_OR_TI1_RMP          EQU TIM16_OR_TI1_RMP_Msk                         ;!<TI1_RMP[1:0] bits (TIM16 Input 1 remap)
TIM16_OR_TI1_RMP_0        EQU (0x1 :SHL: TIM16_OR_TI1_RMP_Pos)               ;!< 0x00000001
TIM16_OR_TI1_RMP_1        EQU (0x2 :SHL: TIM16_OR_TI1_RMP_Pos)               ;!< 0x00000002

;******************  Bit definition for TIM1_OR register  ********************
TIM1_OR_ETR_RMP_Pos      EQU (0)
TIM1_OR_ETR_RMP_Msk      EQU (0xF :SHL: TIM1_OR_ETR_RMP_Pos)                 ;!< 0x0000000F
TIM1_OR_ETR_RMP          EQU TIM1_OR_ETR_RMP_Msk                           ;!<ETR_RMP[3:0] bits (TIM1 ETR remap)
TIM1_OR_ETR_RMP_0        EQU (0x1 :SHL: TIM1_OR_ETR_RMP_Pos)                 ;!< 0x00000001
TIM1_OR_ETR_RMP_1        EQU (0x2 :SHL: TIM1_OR_ETR_RMP_Pos)                 ;!< 0x00000002
TIM1_OR_ETR_RMP_2        EQU (0x4 :SHL: TIM1_OR_ETR_RMP_Pos)                 ;!< 0x00000004
TIM1_OR_ETR_RMP_3        EQU (0x8 :SHL: TIM1_OR_ETR_RMP_Pos)                 ;!< 0x00000008

;******************  Bit definition for TIM8_OR register  ********************
TIM8_OR_ETR_RMP_Pos      EQU (0)
TIM8_OR_ETR_RMP_Msk      EQU (0xF :SHL: TIM8_OR_ETR_RMP_Pos)                 ;!< 0x0000000F
TIM8_OR_ETR_RMP          EQU TIM8_OR_ETR_RMP_Msk                           ;!<ETR_RMP[3:0] bits (TIM8 ETR remap)
TIM8_OR_ETR_RMP_0        EQU (0x1 :SHL: TIM8_OR_ETR_RMP_Pos)                 ;!< 0x00000001
TIM8_OR_ETR_RMP_1        EQU (0x2 :SHL: TIM8_OR_ETR_RMP_Pos)                 ;!< 0x00000002
TIM8_OR_ETR_RMP_2        EQU (0x4 :SHL: TIM8_OR_ETR_RMP_Pos)                 ;!< 0x00000004
TIM8_OR_ETR_RMP_3        EQU (0x8 :SHL: TIM8_OR_ETR_RMP_Pos)                 ;!< 0x00000008

;******************  Bit definition for TIM20_OR register  ******************
TIM20_OR_ETR_RMP_Pos      EQU (0)
TIM20_OR_ETR_RMP_Msk      EQU (0xF :SHL: TIM20_OR_ETR_RMP_Pos)               ;!< 0x0000000F
TIM20_OR_ETR_RMP          EQU TIM20_OR_ETR_RMP_Msk                         ;!<ETR_RMP[3:0] bits (TIM20 ETR remap)
TIM20_OR_ETR_RMP_0        EQU (0x1 :SHL: TIM20_OR_ETR_RMP_Pos)               ;!< 0x00000001
TIM20_OR_ETR_RMP_1        EQU (0x2 :SHL: TIM20_OR_ETR_RMP_Pos)               ;!< 0x00000002
TIM20_OR_ETR_RMP_2        EQU (0x4 :SHL: TIM20_OR_ETR_RMP_Pos)               ;!< 0x00000004
TIM20_OR_ETR_RMP_3        EQU (0x8 :SHL: TIM20_OR_ETR_RMP_Pos)               ;!< 0x00000008

;*****************  Bit definition for TIM_CCMR3 register  ******************
TIM_CCMR3_OC5FE_Pos       EQU (2)
TIM_CCMR3_OC5FE_Msk       EQU (0x1 :SHL: TIM_CCMR3_OC5FE_Pos)                ;!< 0x00000004
TIM_CCMR3_OC5FE           EQU TIM_CCMR3_OC5FE_Msk                          ;!<Output Compare 5 Fast enable
TIM_CCMR3_OC5PE_Pos       EQU (3)
TIM_CCMR3_OC5PE_Msk       EQU (0x1 :SHL: TIM_CCMR3_OC5PE_Pos)                ;!< 0x00000008
TIM_CCMR3_OC5PE           EQU TIM_CCMR3_OC5PE_Msk                          ;!<Output Compare 5 Preload enable

TIM_CCMR3_OC5M_Pos        EQU (4)
TIM_CCMR3_OC5M_Msk        EQU (0x1007 :SHL: TIM_CCMR3_OC5M_Pos)              ;!< 0x00010070
TIM_CCMR3_OC5M            EQU TIM_CCMR3_OC5M_Msk                           ;!<OC5M[2:0] bits (Output Compare 5 Mode)
TIM_CCMR3_OC5M_0          EQU (0x0001 :SHL: TIM_CCMR3_OC5M_Pos)              ;!< 0x00000010
TIM_CCMR3_OC5M_1          EQU (0x0002 :SHL: TIM_CCMR3_OC5M_Pos)              ;!< 0x00000020
TIM_CCMR3_OC5M_2          EQU (0x0004 :SHL: TIM_CCMR3_OC5M_Pos)              ;!< 0x00000040
TIM_CCMR3_OC5M_3          EQU (0x1000 :SHL: TIM_CCMR3_OC5M_Pos)              ;!< 0x00010000

TIM_CCMR3_OC5CE_Pos       EQU (7)
TIM_CCMR3_OC5CE_Msk       EQU (0x1 :SHL: TIM_CCMR3_OC5CE_Pos)                ;!< 0x00000080
TIM_CCMR3_OC5CE           EQU TIM_CCMR3_OC5CE_Msk                          ;!<Output Compare 5 Clear Enable

TIM_CCMR3_OC6FE_Pos       EQU (10)
TIM_CCMR3_OC6FE_Msk       EQU (0x1 :SHL: TIM_CCMR3_OC6FE_Pos)                ;!< 0x00000400
TIM_CCMR3_OC6FE           EQU TIM_CCMR3_OC6FE_Msk                          ;!<Output Compare 6 Fast enable
TIM_CCMR3_OC6PE_Pos       EQU (11)
TIM_CCMR3_OC6PE_Msk       EQU (0x1 :SHL: TIM_CCMR3_OC6PE_Pos)                ;!< 0x00000800
TIM_CCMR3_OC6PE           EQU TIM_CCMR3_OC6PE_Msk                          ;!<Output Compare 6 Preload enable

TIM_CCMR3_OC6M_Pos        EQU (12)
TIM_CCMR3_OC6M_Msk        EQU (0x1007 :SHL: TIM_CCMR3_OC6M_Pos)              ;!< 0x01007000
TIM_CCMR3_OC6M            EQU TIM_CCMR3_OC6M_Msk                           ;!<OC6M[2:0] bits (Output Compare 6 Mode)
TIM_CCMR3_OC6M_0          EQU (0x0001 :SHL: TIM_CCMR3_OC6M_Pos)              ;!< 0x00001000
TIM_CCMR3_OC6M_1          EQU (0x0002 :SHL: TIM_CCMR3_OC6M_Pos)              ;!< 0x00002000
TIM_CCMR3_OC6M_2          EQU (0x0004 :SHL: TIM_CCMR3_OC6M_Pos)              ;!< 0x00004000
TIM_CCMR3_OC6M_3          EQU (0x1000 :SHL: TIM_CCMR3_OC6M_Pos)              ;!< 0x01000000

TIM_CCMR3_OC6CE_Pos       EQU (15)
TIM_CCMR3_OC6CE_Msk       EQU (0x1 :SHL: TIM_CCMR3_OC6CE_Pos)                ;!< 0x00008000
TIM_CCMR3_OC6CE           EQU TIM_CCMR3_OC6CE_Msk                          ;!<Output Compare 6 Clear Enable

;****************************************************************************
;
;                          Touch Sensing Controller (TSC)
;
;****************************************************************************
;******************  Bit definition for TSC_CR register  ********************
TSC_CR_TSCE_Pos          EQU (0)
TSC_CR_TSCE_Msk          EQU (0x1 :SHL: TSC_CR_TSCE_Pos)                     ;!< 0x00000001
TSC_CR_TSCE              EQU TSC_CR_TSCE_Msk                               ;!<Touch sensing controller enable
TSC_CR_START_Pos         EQU (1)
TSC_CR_START_Msk         EQU (0x1 :SHL: TSC_CR_START_Pos)                    ;!< 0x00000002
TSC_CR_START             EQU TSC_CR_START_Msk                              ;!<Start acquisition
TSC_CR_AM_Pos            EQU (2)
TSC_CR_AM_Msk            EQU (0x1 :SHL: TSC_CR_AM_Pos)                       ;!< 0x00000004
TSC_CR_AM                EQU TSC_CR_AM_Msk                                 ;!<Acquisition mode
TSC_CR_SYNCPOL_Pos       EQU (3)
TSC_CR_SYNCPOL_Msk       EQU (0x1 :SHL: TSC_CR_SYNCPOL_Pos)                  ;!< 0x00000008
TSC_CR_SYNCPOL           EQU TSC_CR_SYNCPOL_Msk                            ;!<Synchronization pin polarity
TSC_CR_IODEF_Pos         EQU (4)
TSC_CR_IODEF_Msk         EQU (0x1 :SHL: TSC_CR_IODEF_Pos)                    ;!< 0x00000010
TSC_CR_IODEF             EQU TSC_CR_IODEF_Msk                              ;!<IO default mode

TSC_CR_MCV_Pos           EQU (5)
TSC_CR_MCV_Msk           EQU (0x7 :SHL: TSC_CR_MCV_Pos)                      ;!< 0x000000E0
TSC_CR_MCV               EQU TSC_CR_MCV_Msk                                ;!<MCV[2:0] bits (Max Count Value)
TSC_CR_MCV_0             EQU (0x1 :SHL: TSC_CR_MCV_Pos)                      ;!< 0x00000020
TSC_CR_MCV_1             EQU (0x2 :SHL: TSC_CR_MCV_Pos)                      ;!< 0x00000040
TSC_CR_MCV_2             EQU (0x4 :SHL: TSC_CR_MCV_Pos)                      ;!< 0x00000080

TSC_CR_PGPSC_Pos         EQU (12)
TSC_CR_PGPSC_Msk         EQU (0x7 :SHL: TSC_CR_PGPSC_Pos)                    ;!< 0x00007000
TSC_CR_PGPSC             EQU TSC_CR_PGPSC_Msk                              ;!<PGPSC[2:0] bits (Pulse Generator Prescaler)
TSC_CR_PGPSC_0           EQU (0x1 :SHL: TSC_CR_PGPSC_Pos)                    ;!< 0x00001000
TSC_CR_PGPSC_1           EQU (0x2 :SHL: TSC_CR_PGPSC_Pos)                    ;!< 0x00002000
TSC_CR_PGPSC_2           EQU (0x4 :SHL: TSC_CR_PGPSC_Pos)                    ;!< 0x00004000

TSC_CR_SSPSC_Pos         EQU (15)
TSC_CR_SSPSC_Msk         EQU (0x1 :SHL: TSC_CR_SSPSC_Pos)                    ;!< 0x00008000
TSC_CR_SSPSC             EQU TSC_CR_SSPSC_Msk                              ;!<Spread Spectrum Prescaler
TSC_CR_SSE_Pos           EQU (16)
TSC_CR_SSE_Msk           EQU (0x1 :SHL: TSC_CR_SSE_Pos)                      ;!< 0x00010000
TSC_CR_SSE               EQU TSC_CR_SSE_Msk                                ;!<Spread Spectrum Enable

TSC_CR_SSD_Pos           EQU (17)
TSC_CR_SSD_Msk           EQU (0x7F :SHL: TSC_CR_SSD_Pos)                     ;!< 0x00FE0000
TSC_CR_SSD               EQU TSC_CR_SSD_Msk                                ;!<SSD[6:0] bits (Spread Spectrum Deviation)
TSC_CR_SSD_0             EQU (0x01 :SHL: TSC_CR_SSD_Pos)                     ;!< 0x00020000
TSC_CR_SSD_1             EQU (0x02 :SHL: TSC_CR_SSD_Pos)                     ;!< 0x00040000
TSC_CR_SSD_2             EQU (0x04 :SHL: TSC_CR_SSD_Pos)                     ;!< 0x00080000
TSC_CR_SSD_3             EQU (0x08 :SHL: TSC_CR_SSD_Pos)                     ;!< 0x00100000
TSC_CR_SSD_4             EQU (0x10 :SHL: TSC_CR_SSD_Pos)                     ;!< 0x00200000
TSC_CR_SSD_5             EQU (0x20 :SHL: TSC_CR_SSD_Pos)                     ;!< 0x00400000
TSC_CR_SSD_6             EQU (0x40 :SHL: TSC_CR_SSD_Pos)                     ;!< 0x00800000

TSC_CR_CTPL_Pos          EQU (24)
TSC_CR_CTPL_Msk          EQU (0xF :SHL: TSC_CR_CTPL_Pos)                     ;!< 0x0F000000
TSC_CR_CTPL              EQU TSC_CR_CTPL_Msk                               ;!<CTPL[3:0] bits (Charge Transfer pulse low)
TSC_CR_CTPL_0            EQU (0x1 :SHL: TSC_CR_CTPL_Pos)                     ;!< 0x01000000
TSC_CR_CTPL_1            EQU (0x2 :SHL: TSC_CR_CTPL_Pos)                     ;!< 0x02000000
TSC_CR_CTPL_2            EQU (0x4 :SHL: TSC_CR_CTPL_Pos)                     ;!< 0x04000000
TSC_CR_CTPL_3            EQU (0x8 :SHL: TSC_CR_CTPL_Pos)                     ;!< 0x08000000

TSC_CR_CTPH_Pos          EQU (28)
TSC_CR_CTPH_Msk          EQU (0xF :SHL: TSC_CR_CTPH_Pos)                     ;!< 0xF0000000
TSC_CR_CTPH              EQU TSC_CR_CTPH_Msk                               ;!<CTPH[3:0] bits (Charge Transfer pulse high)
TSC_CR_CTPH_0            EQU (0x1 :SHL: TSC_CR_CTPH_Pos)                     ;!< 0x10000000
TSC_CR_CTPH_1            EQU (0x2 :SHL: TSC_CR_CTPH_Pos)                     ;!< 0x20000000
TSC_CR_CTPH_2            EQU (0x4 :SHL: TSC_CR_CTPH_Pos)                     ;!< 0x40000000
TSC_CR_CTPH_3            EQU (0x8 :SHL: TSC_CR_CTPH_Pos)                     ;!< 0x80000000

;******************  Bit definition for TSC_IER register  *******************
TSC_IER_EOAIE_Pos        EQU (0)
TSC_IER_EOAIE_Msk        EQU (0x1 :SHL: TSC_IER_EOAIE_Pos)                   ;!< 0x00000001
TSC_IER_EOAIE            EQU TSC_IER_EOAIE_Msk                             ;!<End of acquisition interrupt enable
TSC_IER_MCEIE_Pos        EQU (1)
TSC_IER_MCEIE_Msk        EQU (0x1 :SHL: TSC_IER_MCEIE_Pos)                   ;!< 0x00000002
TSC_IER_MCEIE            EQU TSC_IER_MCEIE_Msk                             ;!<Max count error interrupt enable

;******************  Bit definition for TSC_ICR register  *******************
TSC_ICR_EOAIC_Pos        EQU (0)
TSC_ICR_EOAIC_Msk        EQU (0x1 :SHL: TSC_ICR_EOAIC_Pos)                   ;!< 0x00000001
TSC_ICR_EOAIC            EQU TSC_ICR_EOAIC_Msk                             ;!<End of acquisition interrupt clear
TSC_ICR_MCEIC_Pos        EQU (1)
TSC_ICR_MCEIC_Msk        EQU (0x1 :SHL: TSC_ICR_MCEIC_Pos)                   ;!< 0x00000002
TSC_ICR_MCEIC            EQU TSC_ICR_MCEIC_Msk                             ;!<Max count error interrupt clear

;******************  Bit definition for TSC_ISR register  *******************
TSC_ISR_EOAF_Pos         EQU (0)
TSC_ISR_EOAF_Msk         EQU (0x1 :SHL: TSC_ISR_EOAF_Pos)                    ;!< 0x00000001
TSC_ISR_EOAF             EQU TSC_ISR_EOAF_Msk                              ;!<End of acquisition flag
TSC_ISR_MCEF_Pos         EQU (1)
TSC_ISR_MCEF_Msk         EQU (0x1 :SHL: TSC_ISR_MCEF_Pos)                    ;!< 0x00000002
TSC_ISR_MCEF             EQU TSC_ISR_MCEF_Msk                              ;!<Max count error flag

;******************  Bit definition for TSC_IOHCR register  *****************
TSC_IOHCR_G1_IO1_Pos     EQU (0)
TSC_IOHCR_G1_IO1_Msk     EQU (0x1 :SHL: TSC_IOHCR_G1_IO1_Pos)                ;!< 0x00000001
TSC_IOHCR_G1_IO1         EQU TSC_IOHCR_G1_IO1_Msk                          ;!<GROUP1_IO1 schmitt trigger hysteresis mode
TSC_IOHCR_G1_IO2_Pos     EQU (1)
TSC_IOHCR_G1_IO2_Msk     EQU (0x1 :SHL: TSC_IOHCR_G1_IO2_Pos)                ;!< 0x00000002
TSC_IOHCR_G1_IO2         EQU TSC_IOHCR_G1_IO2_Msk                          ;!<GROUP1_IO2 schmitt trigger hysteresis mode
TSC_IOHCR_G1_IO3_Pos     EQU (2)
TSC_IOHCR_G1_IO3_Msk     EQU (0x1 :SHL: TSC_IOHCR_G1_IO3_Pos)                ;!< 0x00000004
TSC_IOHCR_G1_IO3         EQU TSC_IOHCR_G1_IO3_Msk                          ;!<GROUP1_IO3 schmitt trigger hysteresis mode
TSC_IOHCR_G1_IO4_Pos     EQU (3)
TSC_IOHCR_G1_IO4_Msk     EQU (0x1 :SHL: TSC_IOHCR_G1_IO4_Pos)                ;!< 0x00000008
TSC_IOHCR_G1_IO4         EQU TSC_IOHCR_G1_IO4_Msk                          ;!<GROUP1_IO4 schmitt trigger hysteresis mode
TSC_IOHCR_G2_IO1_Pos     EQU (4)
TSC_IOHCR_G2_IO1_Msk     EQU (0x1 :SHL: TSC_IOHCR_G2_IO1_Pos)                ;!< 0x00000010
TSC_IOHCR_G2_IO1         EQU TSC_IOHCR_G2_IO1_Msk                          ;!<GROUP2_IO1 schmitt trigger hysteresis mode
TSC_IOHCR_G2_IO2_Pos     EQU (5)
TSC_IOHCR_G2_IO2_Msk     EQU (0x1 :SHL: TSC_IOHCR_G2_IO2_Pos)                ;!< 0x00000020
TSC_IOHCR_G2_IO2         EQU TSC_IOHCR_G2_IO2_Msk                          ;!<GROUP2_IO2 schmitt trigger hysteresis mode
TSC_IOHCR_G2_IO3_Pos     EQU (6)
TSC_IOHCR_G2_IO3_Msk     EQU (0x1 :SHL: TSC_IOHCR_G2_IO3_Pos)                ;!< 0x00000040
TSC_IOHCR_G2_IO3         EQU TSC_IOHCR_G2_IO3_Msk                          ;!<GROUP2_IO3 schmitt trigger hysteresis mode
TSC_IOHCR_G2_IO4_Pos     EQU (7)
TSC_IOHCR_G2_IO4_Msk     EQU (0x1 :SHL: TSC_IOHCR_G2_IO4_Pos)                ;!< 0x00000080
TSC_IOHCR_G2_IO4         EQU TSC_IOHCR_G2_IO4_Msk                          ;!<GROUP2_IO4 schmitt trigger hysteresis mode
TSC_IOHCR_G3_IO1_Pos     EQU (8)
TSC_IOHCR_G3_IO1_Msk     EQU (0x1 :SHL: TSC_IOHCR_G3_IO1_Pos)                ;!< 0x00000100
TSC_IOHCR_G3_IO1         EQU TSC_IOHCR_G3_IO1_Msk                          ;!<GROUP3_IO1 schmitt trigger hysteresis mode
TSC_IOHCR_G3_IO2_Pos     EQU (9)
TSC_IOHCR_G3_IO2_Msk     EQU (0x1 :SHL: TSC_IOHCR_G3_IO2_Pos)                ;!< 0x00000200
TSC_IOHCR_G3_IO2         EQU TSC_IOHCR_G3_IO2_Msk                          ;!<GROUP3_IO2 schmitt trigger hysteresis mode
TSC_IOHCR_G3_IO3_Pos     EQU (10)
TSC_IOHCR_G3_IO3_Msk     EQU (0x1 :SHL: TSC_IOHCR_G3_IO3_Pos)                ;!< 0x00000400
TSC_IOHCR_G3_IO3         EQU TSC_IOHCR_G3_IO3_Msk                          ;!<GROUP3_IO3 schmitt trigger hysteresis mode
TSC_IOHCR_G3_IO4_Pos     EQU (11)
TSC_IOHCR_G3_IO4_Msk     EQU (0x1 :SHL: TSC_IOHCR_G3_IO4_Pos)                ;!< 0x00000800
TSC_IOHCR_G3_IO4         EQU TSC_IOHCR_G3_IO4_Msk                          ;!<GROUP3_IO4 schmitt trigger hysteresis mode
TSC_IOHCR_G4_IO1_Pos     EQU (12)
TSC_IOHCR_G4_IO1_Msk     EQU (0x1 :SHL: TSC_IOHCR_G4_IO1_Pos)                ;!< 0x00001000
TSC_IOHCR_G4_IO1         EQU TSC_IOHCR_G4_IO1_Msk                          ;!<GROUP4_IO1 schmitt trigger hysteresis mode
TSC_IOHCR_G4_IO2_Pos     EQU (13)
TSC_IOHCR_G4_IO2_Msk     EQU (0x1 :SHL: TSC_IOHCR_G4_IO2_Pos)                ;!< 0x00002000
TSC_IOHCR_G4_IO2         EQU TSC_IOHCR_G4_IO2_Msk                          ;!<GROUP4_IO2 schmitt trigger hysteresis mode
TSC_IOHCR_G4_IO3_Pos     EQU (14)
TSC_IOHCR_G4_IO3_Msk     EQU (0x1 :SHL: TSC_IOHCR_G4_IO3_Pos)                ;!< 0x00004000
TSC_IOHCR_G4_IO3         EQU TSC_IOHCR_G4_IO3_Msk                          ;!<GROUP4_IO3 schmitt trigger hysteresis mode
TSC_IOHCR_G4_IO4_Pos     EQU (15)
TSC_IOHCR_G4_IO4_Msk     EQU (0x1 :SHL: TSC_IOHCR_G4_IO4_Pos)                ;!< 0x00008000
TSC_IOHCR_G4_IO4         EQU TSC_IOHCR_G4_IO4_Msk                          ;!<GROUP4_IO4 schmitt trigger hysteresis mode
TSC_IOHCR_G5_IO1_Pos     EQU (16)
TSC_IOHCR_G5_IO1_Msk     EQU (0x1 :SHL: TSC_IOHCR_G5_IO1_Pos)                ;!< 0x00010000
TSC_IOHCR_G5_IO1         EQU TSC_IOHCR_G5_IO1_Msk                          ;!<GROUP5_IO1 schmitt trigger hysteresis mode
TSC_IOHCR_G5_IO2_Pos     EQU (17)
TSC_IOHCR_G5_IO2_Msk     EQU (0x1 :SHL: TSC_IOHCR_G5_IO2_Pos)                ;!< 0x00020000
TSC_IOHCR_G5_IO2         EQU TSC_IOHCR_G5_IO2_Msk                          ;!<GROUP5_IO2 schmitt trigger hysteresis mode
TSC_IOHCR_G5_IO3_Pos     EQU (18)
TSC_IOHCR_G5_IO3_Msk     EQU (0x1 :SHL: TSC_IOHCR_G5_IO3_Pos)                ;!< 0x00040000
TSC_IOHCR_G5_IO3         EQU TSC_IOHCR_G5_IO3_Msk                          ;!<GROUP5_IO3 schmitt trigger hysteresis mode
TSC_IOHCR_G5_IO4_Pos     EQU (19)
TSC_IOHCR_G5_IO4_Msk     EQU (0x1 :SHL: TSC_IOHCR_G5_IO4_Pos)                ;!< 0x00080000
TSC_IOHCR_G5_IO4         EQU TSC_IOHCR_G5_IO4_Msk                          ;!<GROUP5_IO4 schmitt trigger hysteresis mode
TSC_IOHCR_G6_IO1_Pos     EQU (20)
TSC_IOHCR_G6_IO1_Msk     EQU (0x1 :SHL: TSC_IOHCR_G6_IO1_Pos)                ;!< 0x00100000
TSC_IOHCR_G6_IO1         EQU TSC_IOHCR_G6_IO1_Msk                          ;!<GROUP6_IO1 schmitt trigger hysteresis mode
TSC_IOHCR_G6_IO2_Pos     EQU (21)
TSC_IOHCR_G6_IO2_Msk     EQU (0x1 :SHL: TSC_IOHCR_G6_IO2_Pos)                ;!< 0x00200000
TSC_IOHCR_G6_IO2         EQU TSC_IOHCR_G6_IO2_Msk                          ;!<GROUP6_IO2 schmitt trigger hysteresis mode
TSC_IOHCR_G6_IO3_Pos     EQU (22)
TSC_IOHCR_G6_IO3_Msk     EQU (0x1 :SHL: TSC_IOHCR_G6_IO3_Pos)                ;!< 0x00400000
TSC_IOHCR_G6_IO3         EQU TSC_IOHCR_G6_IO3_Msk                          ;!<GROUP6_IO3 schmitt trigger hysteresis mode
TSC_IOHCR_G6_IO4_Pos     EQU (23)
TSC_IOHCR_G6_IO4_Msk     EQU (0x1 :SHL: TSC_IOHCR_G6_IO4_Pos)                ;!< 0x00800000
TSC_IOHCR_G6_IO4         EQU TSC_IOHCR_G6_IO4_Msk                          ;!<GROUP6_IO4 schmitt trigger hysteresis mode
TSC_IOHCR_G7_IO1_Pos     EQU (24)
TSC_IOHCR_G7_IO1_Msk     EQU (0x1 :SHL: TSC_IOHCR_G7_IO1_Pos)                ;!< 0x01000000
TSC_IOHCR_G7_IO1         EQU TSC_IOHCR_G7_IO1_Msk                          ;!<GROUP7_IO1 schmitt trigger hysteresis mode
TSC_IOHCR_G7_IO2_Pos     EQU (25)
TSC_IOHCR_G7_IO2_Msk     EQU (0x1 :SHL: TSC_IOHCR_G7_IO2_Pos)                ;!< 0x02000000
TSC_IOHCR_G7_IO2         EQU TSC_IOHCR_G7_IO2_Msk                          ;!<GROUP7_IO2 schmitt trigger hysteresis mode
TSC_IOHCR_G7_IO3_Pos     EQU (26)
TSC_IOHCR_G7_IO3_Msk     EQU (0x1 :SHL: TSC_IOHCR_G7_IO3_Pos)                ;!< 0x04000000
TSC_IOHCR_G7_IO3         EQU TSC_IOHCR_G7_IO3_Msk                          ;!<GROUP7_IO3 schmitt trigger hysteresis mode
TSC_IOHCR_G7_IO4_Pos     EQU (27)
TSC_IOHCR_G7_IO4_Msk     EQU (0x1 :SHL: TSC_IOHCR_G7_IO4_Pos)                ;!< 0x08000000
TSC_IOHCR_G7_IO4         EQU TSC_IOHCR_G7_IO4_Msk                          ;!<GROUP7_IO4 schmitt trigger hysteresis mode
TSC_IOHCR_G8_IO1_Pos     EQU (28)
TSC_IOHCR_G8_IO1_Msk     EQU (0x1 :SHL: TSC_IOHCR_G8_IO1_Pos)                ;!< 0x10000000
TSC_IOHCR_G8_IO1         EQU TSC_IOHCR_G8_IO1_Msk                          ;!<GROUP8_IO1 schmitt trigger hysteresis mode
TSC_IOHCR_G8_IO2_Pos     EQU (29)
TSC_IOHCR_G8_IO2_Msk     EQU (0x1 :SHL: TSC_IOHCR_G8_IO2_Pos)                ;!< 0x20000000
TSC_IOHCR_G8_IO2         EQU TSC_IOHCR_G8_IO2_Msk                          ;!<GROUP8_IO2 schmitt trigger hysteresis mode
TSC_IOHCR_G8_IO3_Pos     EQU (30)
TSC_IOHCR_G8_IO3_Msk     EQU (0x1 :SHL: TSC_IOHCR_G8_IO3_Pos)                ;!< 0x40000000
TSC_IOHCR_G8_IO3         EQU TSC_IOHCR_G8_IO3_Msk                          ;!<GROUP8_IO3 schmitt trigger hysteresis mode
TSC_IOHCR_G8_IO4_Pos     EQU (31)
TSC_IOHCR_G8_IO4_Msk     EQU (0x1 :SHL: TSC_IOHCR_G8_IO4_Pos)                ;!< 0x80000000
TSC_IOHCR_G8_IO4         EQU TSC_IOHCR_G8_IO4_Msk                          ;!<GROUP8_IO4 schmitt trigger hysteresis mode

;******************  Bit definition for TSC_IOASCR register  ****************
TSC_IOASCR_G1_IO1_Pos    EQU (0)
TSC_IOASCR_G1_IO1_Msk    EQU (0x1 :SHL: TSC_IOASCR_G1_IO1_Pos)               ;!< 0x00000001
TSC_IOASCR_G1_IO1        EQU TSC_IOASCR_G1_IO1_Msk                         ;!<GROUP1_IO1 analog switch enable
TSC_IOASCR_G1_IO2_Pos    EQU (1)
TSC_IOASCR_G1_IO2_Msk    EQU (0x1 :SHL: TSC_IOASCR_G1_IO2_Pos)               ;!< 0x00000002
TSC_IOASCR_G1_IO2        EQU TSC_IOASCR_G1_IO2_Msk                         ;!<GROUP1_IO2 analog switch enable
TSC_IOASCR_G1_IO3_Pos    EQU (2)
TSC_IOASCR_G1_IO3_Msk    EQU (0x1 :SHL: TSC_IOASCR_G1_IO3_Pos)               ;!< 0x00000004
TSC_IOASCR_G1_IO3        EQU TSC_IOASCR_G1_IO3_Msk                         ;!<GROUP1_IO3 analog switch enable
TSC_IOASCR_G1_IO4_Pos    EQU (3)
TSC_IOASCR_G1_IO4_Msk    EQU (0x1 :SHL: TSC_IOASCR_G1_IO4_Pos)               ;!< 0x00000008
TSC_IOASCR_G1_IO4        EQU TSC_IOASCR_G1_IO4_Msk                         ;!<GROUP1_IO4 analog switch enable
TSC_IOASCR_G2_IO1_Pos    EQU (4)
TSC_IOASCR_G2_IO1_Msk    EQU (0x1 :SHL: TSC_IOASCR_G2_IO1_Pos)               ;!< 0x00000010
TSC_IOASCR_G2_IO1        EQU TSC_IOASCR_G2_IO1_Msk                         ;!<GROUP2_IO1 analog switch enable
TSC_IOASCR_G2_IO2_Pos    EQU (5)
TSC_IOASCR_G2_IO2_Msk    EQU (0x1 :SHL: TSC_IOASCR_G2_IO2_Pos)               ;!< 0x00000020
TSC_IOASCR_G2_IO2        EQU TSC_IOASCR_G2_IO2_Msk                         ;!<GROUP2_IO2 analog switch enable
TSC_IOASCR_G2_IO3_Pos    EQU (6)
TSC_IOASCR_G2_IO3_Msk    EQU (0x1 :SHL: TSC_IOASCR_G2_IO3_Pos)               ;!< 0x00000040
TSC_IOASCR_G2_IO3        EQU TSC_IOASCR_G2_IO3_Msk                         ;!<GROUP2_IO3 analog switch enable
TSC_IOASCR_G2_IO4_Pos    EQU (7)
TSC_IOASCR_G2_IO4_Msk    EQU (0x1 :SHL: TSC_IOASCR_G2_IO4_Pos)               ;!< 0x00000080
TSC_IOASCR_G2_IO4        EQU TSC_IOASCR_G2_IO4_Msk                         ;!<GROUP2_IO4 analog switch enable
TSC_IOASCR_G3_IO1_Pos    EQU (8)
TSC_IOASCR_G3_IO1_Msk    EQU (0x1 :SHL: TSC_IOASCR_G3_IO1_Pos)               ;!< 0x00000100
TSC_IOASCR_G3_IO1        EQU TSC_IOASCR_G3_IO1_Msk                         ;!<GROUP3_IO1 analog switch enable
TSC_IOASCR_G3_IO2_Pos    EQU (9)
TSC_IOASCR_G3_IO2_Msk    EQU (0x1 :SHL: TSC_IOASCR_G3_IO2_Pos)               ;!< 0x00000200
TSC_IOASCR_G3_IO2        EQU TSC_IOASCR_G3_IO2_Msk                         ;!<GROUP3_IO2 analog switch enable
TSC_IOASCR_G3_IO3_Pos    EQU (10)
TSC_IOASCR_G3_IO3_Msk    EQU (0x1 :SHL: TSC_IOASCR_G3_IO3_Pos)               ;!< 0x00000400
TSC_IOASCR_G3_IO3        EQU TSC_IOASCR_G3_IO3_Msk                         ;!<GROUP3_IO3 analog switch enable
TSC_IOASCR_G3_IO4_Pos    EQU (11)
TSC_IOASCR_G3_IO4_Msk    EQU (0x1 :SHL: TSC_IOASCR_G3_IO4_Pos)               ;!< 0x00000800
TSC_IOASCR_G3_IO4        EQU TSC_IOASCR_G3_IO4_Msk                         ;!<GROUP3_IO4 analog switch enable
TSC_IOASCR_G4_IO1_Pos    EQU (12)
TSC_IOASCR_G4_IO1_Msk    EQU (0x1 :SHL: TSC_IOASCR_G4_IO1_Pos)               ;!< 0x00001000
TSC_IOASCR_G4_IO1        EQU TSC_IOASCR_G4_IO1_Msk                         ;!<GROUP4_IO1 analog switch enable
TSC_IOASCR_G4_IO2_Pos    EQU (13)
TSC_IOASCR_G4_IO2_Msk    EQU (0x1 :SHL: TSC_IOASCR_G4_IO2_Pos)               ;!< 0x00002000
TSC_IOASCR_G4_IO2        EQU TSC_IOASCR_G4_IO2_Msk                         ;!<GROUP4_IO2 analog switch enable
TSC_IOASCR_G4_IO3_Pos    EQU (14)
TSC_IOASCR_G4_IO3_Msk    EQU (0x1 :SHL: TSC_IOASCR_G4_IO3_Pos)               ;!< 0x00004000
TSC_IOASCR_G4_IO3        EQU TSC_IOASCR_G4_IO3_Msk                         ;!<GROUP4_IO3 analog switch enable
TSC_IOASCR_G4_IO4_Pos    EQU (15)
TSC_IOASCR_G4_IO4_Msk    EQU (0x1 :SHL: TSC_IOASCR_G4_IO4_Pos)               ;!< 0x00008000
TSC_IOASCR_G4_IO4        EQU TSC_IOASCR_G4_IO4_Msk                         ;!<GROUP4_IO4 analog switch enable
TSC_IOASCR_G5_IO1_Pos    EQU (16)
TSC_IOASCR_G5_IO1_Msk    EQU (0x1 :SHL: TSC_IOASCR_G5_IO1_Pos)               ;!< 0x00010000
TSC_IOASCR_G5_IO1        EQU TSC_IOASCR_G5_IO1_Msk                         ;!<GROUP5_IO1 analog switch enable
TSC_IOASCR_G5_IO2_Pos    EQU (17)
TSC_IOASCR_G5_IO2_Msk    EQU (0x1 :SHL: TSC_IOASCR_G5_IO2_Pos)               ;!< 0x00020000
TSC_IOASCR_G5_IO2        EQU TSC_IOASCR_G5_IO2_Msk                         ;!<GROUP5_IO2 analog switch enable
TSC_IOASCR_G5_IO3_Pos    EQU (18)
TSC_IOASCR_G5_IO3_Msk    EQU (0x1 :SHL: TSC_IOASCR_G5_IO3_Pos)               ;!< 0x00040000
TSC_IOASCR_G5_IO3        EQU TSC_IOASCR_G5_IO3_Msk                         ;!<GROUP5_IO3 analog switch enable
TSC_IOASCR_G5_IO4_Pos    EQU (19)
TSC_IOASCR_G5_IO4_Msk    EQU (0x1 :SHL: TSC_IOASCR_G5_IO4_Pos)               ;!< 0x00080000
TSC_IOASCR_G5_IO4        EQU TSC_IOASCR_G5_IO4_Msk                         ;!<GROUP5_IO4 analog switch enable
TSC_IOASCR_G6_IO1_Pos    EQU (20)
TSC_IOASCR_G6_IO1_Msk    EQU (0x1 :SHL: TSC_IOASCR_G6_IO1_Pos)               ;!< 0x00100000
TSC_IOASCR_G6_IO1        EQU TSC_IOASCR_G6_IO1_Msk                         ;!<GROUP6_IO1 analog switch enable
TSC_IOASCR_G6_IO2_Pos    EQU (21)
TSC_IOASCR_G6_IO2_Msk    EQU (0x1 :SHL: TSC_IOASCR_G6_IO2_Pos)               ;!< 0x00200000
TSC_IOASCR_G6_IO2        EQU TSC_IOASCR_G6_IO2_Msk                         ;!<GROUP6_IO2 analog switch enable
TSC_IOASCR_G6_IO3_Pos    EQU (22)
TSC_IOASCR_G6_IO3_Msk    EQU (0x1 :SHL: TSC_IOASCR_G6_IO3_Pos)               ;!< 0x00400000
TSC_IOASCR_G6_IO3        EQU TSC_IOASCR_G6_IO3_Msk                         ;!<GROUP6_IO3 analog switch enable
TSC_IOASCR_G6_IO4_Pos    EQU (23)
TSC_IOASCR_G6_IO4_Msk    EQU (0x1 :SHL: TSC_IOASCR_G6_IO4_Pos)               ;!< 0x00800000
TSC_IOASCR_G6_IO4        EQU TSC_IOASCR_G6_IO4_Msk                         ;!<GROUP6_IO4 analog switch enable
TSC_IOASCR_G7_IO1_Pos    EQU (24)
TSC_IOASCR_G7_IO1_Msk    EQU (0x1 :SHL: TSC_IOASCR_G7_IO1_Pos)               ;!< 0x01000000
TSC_IOASCR_G7_IO1        EQU TSC_IOASCR_G7_IO1_Msk                         ;!<GROUP7_IO1 analog switch enable
TSC_IOASCR_G7_IO2_Pos    EQU (25)
TSC_IOASCR_G7_IO2_Msk    EQU (0x1 :SHL: TSC_IOASCR_G7_IO2_Pos)               ;!< 0x02000000
TSC_IOASCR_G7_IO2        EQU TSC_IOASCR_G7_IO2_Msk                         ;!<GROUP7_IO2 analog switch enable
TSC_IOASCR_G7_IO3_Pos    EQU (26)
TSC_IOASCR_G7_IO3_Msk    EQU (0x1 :SHL: TSC_IOASCR_G7_IO3_Pos)               ;!< 0x04000000
TSC_IOASCR_G7_IO3        EQU TSC_IOASCR_G7_IO3_Msk                         ;!<GROUP7_IO3 analog switch enable
TSC_IOASCR_G7_IO4_Pos    EQU (27)
TSC_IOASCR_G7_IO4_Msk    EQU (0x1 :SHL: TSC_IOASCR_G7_IO4_Pos)               ;!< 0x08000000
TSC_IOASCR_G7_IO4        EQU TSC_IOASCR_G7_IO4_Msk                         ;!<GROUP7_IO4 analog switch enable
TSC_IOASCR_G8_IO1_Pos    EQU (28)
TSC_IOASCR_G8_IO1_Msk    EQU (0x1 :SHL: TSC_IOASCR_G8_IO1_Pos)               ;!< 0x10000000
TSC_IOASCR_G8_IO1        EQU TSC_IOASCR_G8_IO1_Msk                         ;!<GROUP8_IO1 analog switch enable
TSC_IOASCR_G8_IO2_Pos    EQU (29)
TSC_IOASCR_G8_IO2_Msk    EQU (0x1 :SHL: TSC_IOASCR_G8_IO2_Pos)               ;!< 0x20000000
TSC_IOASCR_G8_IO2        EQU TSC_IOASCR_G8_IO2_Msk                         ;!<GROUP8_IO2 analog switch enable
TSC_IOASCR_G8_IO3_Pos    EQU (30)
TSC_IOASCR_G8_IO3_Msk    EQU (0x1 :SHL: TSC_IOASCR_G8_IO3_Pos)               ;!< 0x40000000
TSC_IOASCR_G8_IO3        EQU TSC_IOASCR_G8_IO3_Msk                         ;!<GROUP8_IO3 analog switch enable
TSC_IOASCR_G8_IO4_Pos    EQU (31)
TSC_IOASCR_G8_IO4_Msk    EQU (0x1 :SHL: TSC_IOASCR_G8_IO4_Pos)               ;!< 0x80000000
TSC_IOASCR_G8_IO4        EQU TSC_IOASCR_G8_IO4_Msk                         ;!<GROUP8_IO4 analog switch enable

;******************  Bit definition for TSC_IOSCR register  *****************
TSC_IOSCR_G1_IO1_Pos     EQU (0)
TSC_IOSCR_G1_IO1_Msk     EQU (0x1 :SHL: TSC_IOSCR_G1_IO1_Pos)                ;!< 0x00000001
TSC_IOSCR_G1_IO1         EQU TSC_IOSCR_G1_IO1_Msk                          ;!<GROUP1_IO1 sampling mode
TSC_IOSCR_G1_IO2_Pos     EQU (1)
TSC_IOSCR_G1_IO2_Msk     EQU (0x1 :SHL: TSC_IOSCR_G1_IO2_Pos)                ;!< 0x00000002
TSC_IOSCR_G1_IO2         EQU TSC_IOSCR_G1_IO2_Msk                          ;!<GROUP1_IO2 sampling mode
TSC_IOSCR_G1_IO3_Pos     EQU (2)
TSC_IOSCR_G1_IO3_Msk     EQU (0x1 :SHL: TSC_IOSCR_G1_IO3_Pos)                ;!< 0x00000004
TSC_IOSCR_G1_IO3         EQU TSC_IOSCR_G1_IO3_Msk                          ;!<GROUP1_IO3 sampling mode
TSC_IOSCR_G1_IO4_Pos     EQU (3)
TSC_IOSCR_G1_IO4_Msk     EQU (0x1 :SHL: TSC_IOSCR_G1_IO4_Pos)                ;!< 0x00000008
TSC_IOSCR_G1_IO4         EQU TSC_IOSCR_G1_IO4_Msk                          ;!<GROUP1_IO4 sampling mode
TSC_IOSCR_G2_IO1_Pos     EQU (4)
TSC_IOSCR_G2_IO1_Msk     EQU (0x1 :SHL: TSC_IOSCR_G2_IO1_Pos)                ;!< 0x00000010
TSC_IOSCR_G2_IO1         EQU TSC_IOSCR_G2_IO1_Msk                          ;!<GROUP2_IO1 sampling mode
TSC_IOSCR_G2_IO2_Pos     EQU (5)
TSC_IOSCR_G2_IO2_Msk     EQU (0x1 :SHL: TSC_IOSCR_G2_IO2_Pos)                ;!< 0x00000020
TSC_IOSCR_G2_IO2         EQU TSC_IOSCR_G2_IO2_Msk                          ;!<GROUP2_IO2 sampling mode
TSC_IOSCR_G2_IO3_Pos     EQU (6)
TSC_IOSCR_G2_IO3_Msk     EQU (0x1 :SHL: TSC_IOSCR_G2_IO3_Pos)                ;!< 0x00000040
TSC_IOSCR_G2_IO3         EQU TSC_IOSCR_G2_IO3_Msk                          ;!<GROUP2_IO3 sampling mode
TSC_IOSCR_G2_IO4_Pos     EQU (7)
TSC_IOSCR_G2_IO4_Msk     EQU (0x1 :SHL: TSC_IOSCR_G2_IO4_Pos)                ;!< 0x00000080
TSC_IOSCR_G2_IO4         EQU TSC_IOSCR_G2_IO4_Msk                          ;!<GROUP2_IO4 sampling mode
TSC_IOSCR_G3_IO1_Pos     EQU (8)
TSC_IOSCR_G3_IO1_Msk     EQU (0x1 :SHL: TSC_IOSCR_G3_IO1_Pos)                ;!< 0x00000100
TSC_IOSCR_G3_IO1         EQU TSC_IOSCR_G3_IO1_Msk                          ;!<GROUP3_IO1 sampling mode
TSC_IOSCR_G3_IO2_Pos     EQU (9)
TSC_IOSCR_G3_IO2_Msk     EQU (0x1 :SHL: TSC_IOSCR_G3_IO2_Pos)                ;!< 0x00000200
TSC_IOSCR_G3_IO2         EQU TSC_IOSCR_G3_IO2_Msk                          ;!<GROUP3_IO2 sampling mode
TSC_IOSCR_G3_IO3_Pos     EQU (10)
TSC_IOSCR_G3_IO3_Msk     EQU (0x1 :SHL: TSC_IOSCR_G3_IO3_Pos)                ;!< 0x00000400
TSC_IOSCR_G3_IO3         EQU TSC_IOSCR_G3_IO3_Msk                          ;!<GROUP3_IO3 sampling mode
TSC_IOSCR_G3_IO4_Pos     EQU (11)
TSC_IOSCR_G3_IO4_Msk     EQU (0x1 :SHL: TSC_IOSCR_G3_IO4_Pos)                ;!< 0x00000800
TSC_IOSCR_G3_IO4         EQU TSC_IOSCR_G3_IO4_Msk                          ;!<GROUP3_IO4 sampling mode
TSC_IOSCR_G4_IO1_Pos     EQU (12)
TSC_IOSCR_G4_IO1_Msk     EQU (0x1 :SHL: TSC_IOSCR_G4_IO1_Pos)                ;!< 0x00001000
TSC_IOSCR_G4_IO1         EQU TSC_IOSCR_G4_IO1_Msk                          ;!<GROUP4_IO1 sampling mode
TSC_IOSCR_G4_IO2_Pos     EQU (13)
TSC_IOSCR_G4_IO2_Msk     EQU (0x1 :SHL: TSC_IOSCR_G4_IO2_Pos)                ;!< 0x00002000
TSC_IOSCR_G4_IO2         EQU TSC_IOSCR_G4_IO2_Msk                          ;!<GROUP4_IO2 sampling mode
TSC_IOSCR_G4_IO3_Pos     EQU (14)
TSC_IOSCR_G4_IO3_Msk     EQU (0x1 :SHL: TSC_IOSCR_G4_IO3_Pos)                ;!< 0x00004000
TSC_IOSCR_G4_IO3         EQU TSC_IOSCR_G4_IO3_Msk                          ;!<GROUP4_IO3 sampling mode
TSC_IOSCR_G4_IO4_Pos     EQU (15)
TSC_IOSCR_G4_IO4_Msk     EQU (0x1 :SHL: TSC_IOSCR_G4_IO4_Pos)                ;!< 0x00008000
TSC_IOSCR_G4_IO4         EQU TSC_IOSCR_G4_IO4_Msk                          ;!<GROUP4_IO4 sampling mode
TSC_IOSCR_G5_IO1_Pos     EQU (16)
TSC_IOSCR_G5_IO1_Msk     EQU (0x1 :SHL: TSC_IOSCR_G5_IO1_Pos)                ;!< 0x00010000
TSC_IOSCR_G5_IO1         EQU TSC_IOSCR_G5_IO1_Msk                          ;!<GROUP5_IO1 sampling mode
TSC_IOSCR_G5_IO2_Pos     EQU (17)
TSC_IOSCR_G5_IO2_Msk     EQU (0x1 :SHL: TSC_IOSCR_G5_IO2_Pos)                ;!< 0x00020000
TSC_IOSCR_G5_IO2         EQU TSC_IOSCR_G5_IO2_Msk                          ;!<GROUP5_IO2 sampling mode
TSC_IOSCR_G5_IO3_Pos     EQU (18)
TSC_IOSCR_G5_IO3_Msk     EQU (0x1 :SHL: TSC_IOSCR_G5_IO3_Pos)                ;!< 0x00040000
TSC_IOSCR_G5_IO3         EQU TSC_IOSCR_G5_IO3_Msk                          ;!<GROUP5_IO3 sampling mode
TSC_IOSCR_G5_IO4_Pos     EQU (19)
TSC_IOSCR_G5_IO4_Msk     EQU (0x1 :SHL: TSC_IOSCR_G5_IO4_Pos)                ;!< 0x00080000
TSC_IOSCR_G5_IO4         EQU TSC_IOSCR_G5_IO4_Msk                          ;!<GROUP5_IO4 sampling mode
TSC_IOSCR_G6_IO1_Pos     EQU (20)
TSC_IOSCR_G6_IO1_Msk     EQU (0x1 :SHL: TSC_IOSCR_G6_IO1_Pos)                ;!< 0x00100000
TSC_IOSCR_G6_IO1         EQU TSC_IOSCR_G6_IO1_Msk                          ;!<GROUP6_IO1 sampling mode
TSC_IOSCR_G6_IO2_Pos     EQU (21)
TSC_IOSCR_G6_IO2_Msk     EQU (0x1 :SHL: TSC_IOSCR_G6_IO2_Pos)                ;!< 0x00200000
TSC_IOSCR_G6_IO2         EQU TSC_IOSCR_G6_IO2_Msk                          ;!<GROUP6_IO2 sampling mode
TSC_IOSCR_G6_IO3_Pos     EQU (22)
TSC_IOSCR_G6_IO3_Msk     EQU (0x1 :SHL: TSC_IOSCR_G6_IO3_Pos)                ;!< 0x00400000
TSC_IOSCR_G6_IO3         EQU TSC_IOSCR_G6_IO3_Msk                          ;!<GROUP6_IO3 sampling mode
TSC_IOSCR_G6_IO4_Pos     EQU (23)
TSC_IOSCR_G6_IO4_Msk     EQU (0x1 :SHL: TSC_IOSCR_G6_IO4_Pos)                ;!< 0x00800000
TSC_IOSCR_G6_IO4         EQU TSC_IOSCR_G6_IO4_Msk                          ;!<GROUP6_IO4 sampling mode
TSC_IOSCR_G7_IO1_Pos     EQU (24)
TSC_IOSCR_G7_IO1_Msk     EQU (0x1 :SHL: TSC_IOSCR_G7_IO1_Pos)                ;!< 0x01000000
TSC_IOSCR_G7_IO1         EQU TSC_IOSCR_G7_IO1_Msk                          ;!<GROUP7_IO1 sampling mode
TSC_IOSCR_G7_IO2_Pos     EQU (25)
TSC_IOSCR_G7_IO2_Msk     EQU (0x1 :SHL: TSC_IOSCR_G7_IO2_Pos)                ;!< 0x02000000
TSC_IOSCR_G7_IO2         EQU TSC_IOSCR_G7_IO2_Msk                          ;!<GROUP7_IO2 sampling mode
TSC_IOSCR_G7_IO3_Pos     EQU (26)
TSC_IOSCR_G7_IO3_Msk     EQU (0x1 :SHL: TSC_IOSCR_G7_IO3_Pos)                ;!< 0x04000000
TSC_IOSCR_G7_IO3         EQU TSC_IOSCR_G7_IO3_Msk                          ;!<GROUP7_IO3 sampling mode
TSC_IOSCR_G7_IO4_Pos     EQU (27)
TSC_IOSCR_G7_IO4_Msk     EQU (0x1 :SHL: TSC_IOSCR_G7_IO4_Pos)                ;!< 0x08000000
TSC_IOSCR_G7_IO4         EQU TSC_IOSCR_G7_IO4_Msk                          ;!<GROUP7_IO4 sampling mode
TSC_IOSCR_G8_IO1_Pos     EQU (28)
TSC_IOSCR_G8_IO1_Msk     EQU (0x1 :SHL: TSC_IOSCR_G8_IO1_Pos)                ;!< 0x10000000
TSC_IOSCR_G8_IO1         EQU TSC_IOSCR_G8_IO1_Msk                          ;!<GROUP8_IO1 sampling mode
TSC_IOSCR_G8_IO2_Pos     EQU (29)
TSC_IOSCR_G8_IO2_Msk     EQU (0x1 :SHL: TSC_IOSCR_G8_IO2_Pos)                ;!< 0x20000000
TSC_IOSCR_G8_IO2         EQU TSC_IOSCR_G8_IO2_Msk                          ;!<GROUP8_IO2 sampling mode
TSC_IOSCR_G8_IO3_Pos     EQU (30)
TSC_IOSCR_G8_IO3_Msk     EQU (0x1 :SHL: TSC_IOSCR_G8_IO3_Pos)                ;!< 0x40000000
TSC_IOSCR_G8_IO3         EQU TSC_IOSCR_G8_IO3_Msk                          ;!<GROUP8_IO3 sampling mode
TSC_IOSCR_G8_IO4_Pos     EQU (31)
TSC_IOSCR_G8_IO4_Msk     EQU (0x1 :SHL: TSC_IOSCR_G8_IO4_Pos)                ;!< 0x80000000
TSC_IOSCR_G8_IO4         EQU TSC_IOSCR_G8_IO4_Msk                          ;!<GROUP8_IO4 sampling mode

;******************  Bit definition for TSC_IOCCR register  *****************
TSC_IOCCR_G1_IO1_Pos     EQU (0)
TSC_IOCCR_G1_IO1_Msk     EQU (0x1 :SHL: TSC_IOCCR_G1_IO1_Pos)                ;!< 0x00000001
TSC_IOCCR_G1_IO1         EQU TSC_IOCCR_G1_IO1_Msk                          ;!<GROUP1_IO1 channel mode
TSC_IOCCR_G1_IO2_Pos     EQU (1)
TSC_IOCCR_G1_IO2_Msk     EQU (0x1 :SHL: TSC_IOCCR_G1_IO2_Pos)                ;!< 0x00000002
TSC_IOCCR_G1_IO2         EQU TSC_IOCCR_G1_IO2_Msk                          ;!<GROUP1_IO2 channel mode
TSC_IOCCR_G1_IO3_Pos     EQU (2)
TSC_IOCCR_G1_IO3_Msk     EQU (0x1 :SHL: TSC_IOCCR_G1_IO3_Pos)                ;!< 0x00000004
TSC_IOCCR_G1_IO3         EQU TSC_IOCCR_G1_IO3_Msk                          ;!<GROUP1_IO3 channel mode
TSC_IOCCR_G1_IO4_Pos     EQU (3)
TSC_IOCCR_G1_IO4_Msk     EQU (0x1 :SHL: TSC_IOCCR_G1_IO4_Pos)                ;!< 0x00000008
TSC_IOCCR_G1_IO4         EQU TSC_IOCCR_G1_IO4_Msk                          ;!<GROUP1_IO4 channel mode
TSC_IOCCR_G2_IO1_Pos     EQU (4)
TSC_IOCCR_G2_IO1_Msk     EQU (0x1 :SHL: TSC_IOCCR_G2_IO1_Pos)                ;!< 0x00000010
TSC_IOCCR_G2_IO1         EQU TSC_IOCCR_G2_IO1_Msk                          ;!<GROUP2_IO1 channel mode
TSC_IOCCR_G2_IO2_Pos     EQU (5)
TSC_IOCCR_G2_IO2_Msk     EQU (0x1 :SHL: TSC_IOCCR_G2_IO2_Pos)                ;!< 0x00000020
TSC_IOCCR_G2_IO2         EQU TSC_IOCCR_G2_IO2_Msk                          ;!<GROUP2_IO2 channel mode
TSC_IOCCR_G2_IO3_Pos     EQU (6)
TSC_IOCCR_G2_IO3_Msk     EQU (0x1 :SHL: TSC_IOCCR_G2_IO3_Pos)                ;!< 0x00000040
TSC_IOCCR_G2_IO3         EQU TSC_IOCCR_G2_IO3_Msk                          ;!<GROUP2_IO3 channel mode
TSC_IOCCR_G2_IO4_Pos     EQU (7)
TSC_IOCCR_G2_IO4_Msk     EQU (0x1 :SHL: TSC_IOCCR_G2_IO4_Pos)                ;!< 0x00000080
TSC_IOCCR_G2_IO4         EQU TSC_IOCCR_G2_IO4_Msk                          ;!<GROUP2_IO4 channel mode
TSC_IOCCR_G3_IO1_Pos     EQU (8)
TSC_IOCCR_G3_IO1_Msk     EQU (0x1 :SHL: TSC_IOCCR_G3_IO1_Pos)                ;!< 0x00000100
TSC_IOCCR_G3_IO1         EQU TSC_IOCCR_G3_IO1_Msk                          ;!<GROUP3_IO1 channel mode
TSC_IOCCR_G3_IO2_Pos     EQU (9)
TSC_IOCCR_G3_IO2_Msk     EQU (0x1 :SHL: TSC_IOCCR_G3_IO2_Pos)                ;!< 0x00000200
TSC_IOCCR_G3_IO2         EQU TSC_IOCCR_G3_IO2_Msk                          ;!<GROUP3_IO2 channel mode
TSC_IOCCR_G3_IO3_Pos     EQU (10)
TSC_IOCCR_G3_IO3_Msk     EQU (0x1 :SHL: TSC_IOCCR_G3_IO3_Pos)                ;!< 0x00000400
TSC_IOCCR_G3_IO3         EQU TSC_IOCCR_G3_IO3_Msk                          ;!<GROUP3_IO3 channel mode
TSC_IOCCR_G3_IO4_Pos     EQU (11)
TSC_IOCCR_G3_IO4_Msk     EQU (0x1 :SHL: TSC_IOCCR_G3_IO4_Pos)                ;!< 0x00000800
TSC_IOCCR_G3_IO4         EQU TSC_IOCCR_G3_IO4_Msk                          ;!<GROUP3_IO4 channel mode
TSC_IOCCR_G4_IO1_Pos     EQU (12)
TSC_IOCCR_G4_IO1_Msk     EQU (0x1 :SHL: TSC_IOCCR_G4_IO1_Pos)                ;!< 0x00001000
TSC_IOCCR_G4_IO1         EQU TSC_IOCCR_G4_IO1_Msk                          ;!<GROUP4_IO1 channel mode
TSC_IOCCR_G4_IO2_Pos     EQU (13)
TSC_IOCCR_G4_IO2_Msk     EQU (0x1 :SHL: TSC_IOCCR_G4_IO2_Pos)                ;!< 0x00002000
TSC_IOCCR_G4_IO2         EQU TSC_IOCCR_G4_IO2_Msk                          ;!<GROUP4_IO2 channel mode
TSC_IOCCR_G4_IO3_Pos     EQU (14)
TSC_IOCCR_G4_IO3_Msk     EQU (0x1 :SHL: TSC_IOCCR_G4_IO3_Pos)                ;!< 0x00004000
TSC_IOCCR_G4_IO3         EQU TSC_IOCCR_G4_IO3_Msk                          ;!<GROUP4_IO3 channel mode
TSC_IOCCR_G4_IO4_Pos     EQU (15)
TSC_IOCCR_G4_IO4_Msk     EQU (0x1 :SHL: TSC_IOCCR_G4_IO4_Pos)                ;!< 0x00008000
TSC_IOCCR_G4_IO4         EQU TSC_IOCCR_G4_IO4_Msk                          ;!<GROUP4_IO4 channel mode
TSC_IOCCR_G5_IO1_Pos     EQU (16)
TSC_IOCCR_G5_IO1_Msk     EQU (0x1 :SHL: TSC_IOCCR_G5_IO1_Pos)                ;!< 0x00010000
TSC_IOCCR_G5_IO1         EQU TSC_IOCCR_G5_IO1_Msk                          ;!<GROUP5_IO1 channel mode
TSC_IOCCR_G5_IO2_Pos     EQU (17)
TSC_IOCCR_G5_IO2_Msk     EQU (0x1 :SHL: TSC_IOCCR_G5_IO2_Pos)                ;!< 0x00020000
TSC_IOCCR_G5_IO2         EQU TSC_IOCCR_G5_IO2_Msk                          ;!<GROUP5_IO2 channel mode
TSC_IOCCR_G5_IO3_Pos     EQU (18)
TSC_IOCCR_G5_IO3_Msk     EQU (0x1 :SHL: TSC_IOCCR_G5_IO3_Pos)                ;!< 0x00040000
TSC_IOCCR_G5_IO3         EQU TSC_IOCCR_G5_IO3_Msk                          ;!<GROUP5_IO3 channel mode
TSC_IOCCR_G5_IO4_Pos     EQU (19)
TSC_IOCCR_G5_IO4_Msk     EQU (0x1 :SHL: TSC_IOCCR_G5_IO4_Pos)                ;!< 0x00080000
TSC_IOCCR_G5_IO4         EQU TSC_IOCCR_G5_IO4_Msk                          ;!<GROUP5_IO4 channel mode
TSC_IOCCR_G6_IO1_Pos     EQU (20)
TSC_IOCCR_G6_IO1_Msk     EQU (0x1 :SHL: TSC_IOCCR_G6_IO1_Pos)                ;!< 0x00100000
TSC_IOCCR_G6_IO1         EQU TSC_IOCCR_G6_IO1_Msk                          ;!<GROUP6_IO1 channel mode
TSC_IOCCR_G6_IO2_Pos     EQU (21)
TSC_IOCCR_G6_IO2_Msk     EQU (0x1 :SHL: TSC_IOCCR_G6_IO2_Pos)                ;!< 0x00200000
TSC_IOCCR_G6_IO2         EQU TSC_IOCCR_G6_IO2_Msk                          ;!<GROUP6_IO2 channel mode
TSC_IOCCR_G6_IO3_Pos     EQU (22)
TSC_IOCCR_G6_IO3_Msk     EQU (0x1 :SHL: TSC_IOCCR_G6_IO3_Pos)                ;!< 0x00400000
TSC_IOCCR_G6_IO3         EQU TSC_IOCCR_G6_IO3_Msk                          ;!<GROUP6_IO3 channel mode
TSC_IOCCR_G6_IO4_Pos     EQU (23)
TSC_IOCCR_G6_IO4_Msk     EQU (0x1 :SHL: TSC_IOCCR_G6_IO4_Pos)                ;!< 0x00800000
TSC_IOCCR_G6_IO4         EQU TSC_IOCCR_G6_IO4_Msk                          ;!<GROUP6_IO4 channel mode
TSC_IOCCR_G7_IO1_Pos     EQU (24)
TSC_IOCCR_G7_IO1_Msk     EQU (0x1 :SHL: TSC_IOCCR_G7_IO1_Pos)                ;!< 0x01000000
TSC_IOCCR_G7_IO1         EQU TSC_IOCCR_G7_IO1_Msk                          ;!<GROUP7_IO1 channel mode
TSC_IOCCR_G7_IO2_Pos     EQU (25)
TSC_IOCCR_G7_IO2_Msk     EQU (0x1 :SHL: TSC_IOCCR_G7_IO2_Pos)                ;!< 0x02000000
TSC_IOCCR_G7_IO2         EQU TSC_IOCCR_G7_IO2_Msk                          ;!<GROUP7_IO2 channel mode
TSC_IOCCR_G7_IO3_Pos     EQU (26)
TSC_IOCCR_G7_IO3_Msk     EQU (0x1 :SHL: TSC_IOCCR_G7_IO3_Pos)                ;!< 0x04000000
TSC_IOCCR_G7_IO3         EQU TSC_IOCCR_G7_IO3_Msk                          ;!<GROUP7_IO3 channel mode
TSC_IOCCR_G7_IO4_Pos     EQU (27)
TSC_IOCCR_G7_IO4_Msk     EQU (0x1 :SHL: TSC_IOCCR_G7_IO4_Pos)                ;!< 0x08000000
TSC_IOCCR_G7_IO4         EQU TSC_IOCCR_G7_IO4_Msk                          ;!<GROUP7_IO4 channel mode
TSC_IOCCR_G8_IO1_Pos     EQU (28)
TSC_IOCCR_G8_IO1_Msk     EQU (0x1 :SHL: TSC_IOCCR_G8_IO1_Pos)                ;!< 0x10000000
TSC_IOCCR_G8_IO1         EQU TSC_IOCCR_G8_IO1_Msk                          ;!<GROUP8_IO1 channel mode
TSC_IOCCR_G8_IO2_Pos     EQU (29)
TSC_IOCCR_G8_IO2_Msk     EQU (0x1 :SHL: TSC_IOCCR_G8_IO2_Pos)                ;!< 0x20000000
TSC_IOCCR_G8_IO2         EQU TSC_IOCCR_G8_IO2_Msk                          ;!<GROUP8_IO2 channel mode
TSC_IOCCR_G8_IO3_Pos     EQU (30)
TSC_IOCCR_G8_IO3_Msk     EQU (0x1 :SHL: TSC_IOCCR_G8_IO3_Pos)                ;!< 0x40000000
TSC_IOCCR_G8_IO3         EQU TSC_IOCCR_G8_IO3_Msk                          ;!<GROUP8_IO3 channel mode
TSC_IOCCR_G8_IO4_Pos     EQU (31)
TSC_IOCCR_G8_IO4_Msk     EQU (0x1 :SHL: TSC_IOCCR_G8_IO4_Pos)                ;!< 0x80000000
TSC_IOCCR_G8_IO4         EQU TSC_IOCCR_G8_IO4_Msk                          ;!<GROUP8_IO4 channel mode

;******************  Bit definition for TSC_IOGCSR register  ****************
TSC_IOGCSR_G1E_Pos       EQU (0)
TSC_IOGCSR_G1E_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G1E_Pos)                  ;!< 0x00000001
TSC_IOGCSR_G1E           EQU TSC_IOGCSR_G1E_Msk                            ;!<Analog IO GROUP1 enable
TSC_IOGCSR_G2E_Pos       EQU (1)
TSC_IOGCSR_G2E_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G2E_Pos)                  ;!< 0x00000002
TSC_IOGCSR_G2E           EQU TSC_IOGCSR_G2E_Msk                            ;!<Analog IO GROUP2 enable
TSC_IOGCSR_G3E_Pos       EQU (2)
TSC_IOGCSR_G3E_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G3E_Pos)                  ;!< 0x00000004
TSC_IOGCSR_G3E           EQU TSC_IOGCSR_G3E_Msk                            ;!<Analog IO GROUP3 enable
TSC_IOGCSR_G4E_Pos       EQU (3)
TSC_IOGCSR_G4E_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G4E_Pos)                  ;!< 0x00000008
TSC_IOGCSR_G4E           EQU TSC_IOGCSR_G4E_Msk                            ;!<Analog IO GROUP4 enable
TSC_IOGCSR_G5E_Pos       EQU (4)
TSC_IOGCSR_G5E_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G5E_Pos)                  ;!< 0x00000010
TSC_IOGCSR_G5E           EQU TSC_IOGCSR_G5E_Msk                            ;!<Analog IO GROUP5 enable
TSC_IOGCSR_G6E_Pos       EQU (5)
TSC_IOGCSR_G6E_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G6E_Pos)                  ;!< 0x00000020
TSC_IOGCSR_G6E           EQU TSC_IOGCSR_G6E_Msk                            ;!<Analog IO GROUP6 enable
TSC_IOGCSR_G7E_Pos       EQU (6)
TSC_IOGCSR_G7E_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G7E_Pos)                  ;!< 0x00000040
TSC_IOGCSR_G7E           EQU TSC_IOGCSR_G7E_Msk                            ;!<Analog IO GROUP7 enable
TSC_IOGCSR_G8E_Pos       EQU (7)
TSC_IOGCSR_G8E_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G8E_Pos)                  ;!< 0x00000080
TSC_IOGCSR_G8E           EQU TSC_IOGCSR_G8E_Msk                            ;!<Analog IO GROUP8 enable
TSC_IOGCSR_G1S_Pos       EQU (16)
TSC_IOGCSR_G1S_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G1S_Pos)                  ;!< 0x00010000
TSC_IOGCSR_G1S           EQU TSC_IOGCSR_G1S_Msk                            ;!<Analog IO GROUP1 status
TSC_IOGCSR_G2S_Pos       EQU (17)
TSC_IOGCSR_G2S_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G2S_Pos)                  ;!< 0x00020000
TSC_IOGCSR_G2S           EQU TSC_IOGCSR_G2S_Msk                            ;!<Analog IO GROUP2 status
TSC_IOGCSR_G3S_Pos       EQU (18)
TSC_IOGCSR_G3S_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G3S_Pos)                  ;!< 0x00040000
TSC_IOGCSR_G3S           EQU TSC_IOGCSR_G3S_Msk                            ;!<Analog IO GROUP3 status
TSC_IOGCSR_G4S_Pos       EQU (19)
TSC_IOGCSR_G4S_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G4S_Pos)                  ;!< 0x00080000
TSC_IOGCSR_G4S           EQU TSC_IOGCSR_G4S_Msk                            ;!<Analog IO GROUP4 status
TSC_IOGCSR_G5S_Pos       EQU (20)
TSC_IOGCSR_G5S_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G5S_Pos)                  ;!< 0x00100000
TSC_IOGCSR_G5S           EQU TSC_IOGCSR_G5S_Msk                            ;!<Analog IO GROUP5 status
TSC_IOGCSR_G6S_Pos       EQU (21)
TSC_IOGCSR_G6S_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G6S_Pos)                  ;!< 0x00200000
TSC_IOGCSR_G6S           EQU TSC_IOGCSR_G6S_Msk                            ;!<Analog IO GROUP6 status
TSC_IOGCSR_G7S_Pos       EQU (22)
TSC_IOGCSR_G7S_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G7S_Pos)                  ;!< 0x00400000
TSC_IOGCSR_G7S           EQU TSC_IOGCSR_G7S_Msk                            ;!<Analog IO GROUP7 status
TSC_IOGCSR_G8S_Pos       EQU (23)
TSC_IOGCSR_G8S_Msk       EQU (0x1 :SHL: TSC_IOGCSR_G8S_Pos)                  ;!< 0x00800000
TSC_IOGCSR_G8S           EQU TSC_IOGCSR_G8S_Msk                            ;!<Analog IO GROUP8 status

;******************  Bit definition for TSC_IOGXCR register  ****************
TSC_IOGXCR_CNT_Pos       EQU (0)
TSC_IOGXCR_CNT_Msk       EQU (0x3FFF :SHL: TSC_IOGXCR_CNT_Pos)               ;!< 0x00003FFF
TSC_IOGXCR_CNT           EQU TSC_IOGXCR_CNT_Msk                            ;!<CNT[13:0] bits (Counter value)

;****************************************************************************
;
;      Universal Synchronous Asynchronous Receiver Transmitter (USART)
;
;****************************************************************************

;*****************  Bit definition for USART_CR1 register  ******************
USART_CR1_UE_Pos              EQU (0)
USART_CR1_UE_Msk              EQU (0x1 :SHL: USART_CR1_UE_Pos)               ;!< 0x00000001
USART_CR1_UE                  EQU USART_CR1_UE_Msk                         ;!< USART Enable
USART_CR1_UESM_Pos            EQU (1)
USART_CR1_UESM_Msk            EQU (0x1 :SHL: USART_CR1_UESM_Pos)             ;!< 0x00000002
USART_CR1_UESM                EQU USART_CR1_UESM_Msk                       ;!< USART Enable in STOP Mode
USART_CR1_RE_Pos              EQU (2)
USART_CR1_RE_Msk              EQU (0x1 :SHL: USART_CR1_RE_Pos)               ;!< 0x00000004
USART_CR1_RE                  EQU USART_CR1_RE_Msk                         ;!< Receiver Enable
USART_CR1_TE_Pos              EQU (3)
USART_CR1_TE_Msk              EQU (0x1 :SHL: USART_CR1_TE_Pos)               ;!< 0x00000008
USART_CR1_TE                  EQU USART_CR1_TE_Msk                         ;!< Transmitter Enable
USART_CR1_IDLEIE_Pos          EQU (4)
USART_CR1_IDLEIE_Msk          EQU (0x1 :SHL: USART_CR1_IDLEIE_Pos)           ;!< 0x00000010
USART_CR1_IDLEIE              EQU USART_CR1_IDLEIE_Msk                     ;!< IDLE Interrupt Enable
USART_CR1_RXNEIE_Pos          EQU (5)
USART_CR1_RXNEIE_Msk          EQU (0x1 :SHL: USART_CR1_RXNEIE_Pos)           ;!< 0x00000020
USART_CR1_RXNEIE              EQU USART_CR1_RXNEIE_Msk                     ;!< RXNE Interrupt Enable
USART_CR1_TCIE_Pos            EQU (6)
USART_CR1_TCIE_Msk            EQU (0x1 :SHL: USART_CR1_TCIE_Pos)             ;!< 0x00000040
USART_CR1_TCIE                EQU USART_CR1_TCIE_Msk                       ;!< Transmission Complete Interrupt Enable
USART_CR1_TXEIE_Pos           EQU (7)
USART_CR1_TXEIE_Msk           EQU (0x1 :SHL: USART_CR1_TXEIE_Pos)            ;!< 0x00000080
USART_CR1_TXEIE               EQU USART_CR1_TXEIE_Msk                      ;!< TXE Interrupt Enable
USART_CR1_PEIE_Pos            EQU (8)
USART_CR1_PEIE_Msk            EQU (0x1 :SHL: USART_CR1_PEIE_Pos)             ;!< 0x00000100
USART_CR1_PEIE                EQU USART_CR1_PEIE_Msk                       ;!< PE Interrupt Enable
USART_CR1_PS_Pos              EQU (9)
USART_CR1_PS_Msk              EQU (0x1 :SHL: USART_CR1_PS_Pos)               ;!< 0x00000200
USART_CR1_PS                  EQU USART_CR1_PS_Msk                         ;!< Parity Selection
USART_CR1_PCE_Pos             EQU (10)
USART_CR1_PCE_Msk             EQU (0x1 :SHL: USART_CR1_PCE_Pos)              ;!< 0x00000400
USART_CR1_PCE                 EQU USART_CR1_PCE_Msk                        ;!< Parity Control Enable
USART_CR1_WAKE_Pos            EQU (11)
USART_CR1_WAKE_Msk            EQU (0x1 :SHL: USART_CR1_WAKE_Pos)             ;!< 0x00000800
USART_CR1_WAKE                EQU USART_CR1_WAKE_Msk                       ;!< Receiver Wakeup method
USART_CR1_M0_Pos              EQU (12)
USART_CR1_M0_Msk              EQU (0x1 :SHL: USART_CR1_M0_Pos)               ;!< 0x00001000
USART_CR1_M0                  EQU USART_CR1_M0_Msk                         ;!< Word length bit 0
USART_CR1_MME_Pos             EQU (13)
USART_CR1_MME_Msk             EQU (0x1 :SHL: USART_CR1_MME_Pos)              ;!< 0x00002000
USART_CR1_MME                 EQU USART_CR1_MME_Msk                        ;!< Mute Mode Enable
USART_CR1_CMIE_Pos            EQU (14)
USART_CR1_CMIE_Msk            EQU (0x1 :SHL: USART_CR1_CMIE_Pos)             ;!< 0x00004000
USART_CR1_CMIE                EQU USART_CR1_CMIE_Msk                       ;!< Character match interrupt enable
USART_CR1_OVER8_Pos           EQU (15)
USART_CR1_OVER8_Msk           EQU (0x1 :SHL: USART_CR1_OVER8_Pos)            ;!< 0x00008000
USART_CR1_OVER8               EQU USART_CR1_OVER8_Msk                      ;!< Oversampling by 8-bit or 16-bit mode
USART_CR1_DEDT_Pos            EQU (16)
USART_CR1_DEDT_Msk            EQU (0x1F :SHL: USART_CR1_DEDT_Pos)            ;!< 0x001F0000
USART_CR1_DEDT                EQU USART_CR1_DEDT_Msk                       ;!< DEDT[4:0] bits (Driver Enable Deassertion Time)
USART_CR1_DEDT_0              EQU (0x01 :SHL: USART_CR1_DEDT_Pos)            ;!< 0x00010000
USART_CR1_DEDT_1              EQU (0x02 :SHL: USART_CR1_DEDT_Pos)            ;!< 0x00020000
USART_CR1_DEDT_2              EQU (0x04 :SHL: USART_CR1_DEDT_Pos)            ;!< 0x00040000
USART_CR1_DEDT_3              EQU (0x08 :SHL: USART_CR1_DEDT_Pos)            ;!< 0x00080000
USART_CR1_DEDT_4              EQU (0x10 :SHL: USART_CR1_DEDT_Pos)            ;!< 0x00100000
USART_CR1_DEAT_Pos            EQU (21)
USART_CR1_DEAT_Msk            EQU (0x1F :SHL: USART_CR1_DEAT_Pos)            ;!< 0x03E00000
USART_CR1_DEAT                EQU USART_CR1_DEAT_Msk                       ;!< DEAT[4:0] bits (Driver Enable Assertion Time)
USART_CR1_DEAT_0              EQU (0x01 :SHL: USART_CR1_DEAT_Pos)            ;!< 0x00200000
USART_CR1_DEAT_1              EQU (0x02 :SHL: USART_CR1_DEAT_Pos)            ;!< 0x00400000
USART_CR1_DEAT_2              EQU (0x04 :SHL: USART_CR1_DEAT_Pos)            ;!< 0x00800000
USART_CR1_DEAT_3              EQU (0x08 :SHL: USART_CR1_DEAT_Pos)            ;!< 0x01000000
USART_CR1_DEAT_4              EQU (0x10 :SHL: USART_CR1_DEAT_Pos)            ;!< 0x02000000
USART_CR1_RTOIE_Pos           EQU (26)
USART_CR1_RTOIE_Msk           EQU (0x1 :SHL: USART_CR1_RTOIE_Pos)            ;!< 0x04000000
USART_CR1_RTOIE               EQU USART_CR1_RTOIE_Msk                      ;!< Receive Time Out interrupt enable
USART_CR1_EOBIE_Pos           EQU (27)
USART_CR1_EOBIE_Msk           EQU (0x1 :SHL: USART_CR1_EOBIE_Pos)            ;!< 0x08000000
USART_CR1_EOBIE               EQU USART_CR1_EOBIE_Msk                      ;!< End of Block interrupt enable
USART_CR1_M1_Pos              EQU (28)
USART_CR1_M1_Msk              EQU (0x1 :SHL: USART_CR1_M1_Pos)               ;!< 0x10000000
USART_CR1_M1                  EQU USART_CR1_M1_Msk                         ;!< Word length bit 1
USART_CR1_M_Pos               EQU (12)
USART_CR1_M_Msk               EQU (0x10001 :SHL: USART_CR1_M_Pos)            ;!< 0x10001000
USART_CR1_M                   EQU USART_CR1_M_Msk                          ;!< [M1:M0] Word length

;*****************  Bit definition for USART_CR2 register  ******************
USART_CR2_ADDM7_Pos           EQU (4)
USART_CR2_ADDM7_Msk           EQU (0x1 :SHL: USART_CR2_ADDM7_Pos)            ;!< 0x00000010
USART_CR2_ADDM7               EQU USART_CR2_ADDM7_Msk                      ;!< 7-bit or 4-bit Address Detection
USART_CR2_LBDL_Pos            EQU (5)
USART_CR2_LBDL_Msk            EQU (0x1 :SHL: USART_CR2_LBDL_Pos)             ;!< 0x00000020
USART_CR2_LBDL                EQU USART_CR2_LBDL_Msk                       ;!< LIN Break Detection Length
USART_CR2_LBDIE_Pos           EQU (6)
USART_CR2_LBDIE_Msk           EQU (0x1 :SHL: USART_CR2_LBDIE_Pos)            ;!< 0x00000040
USART_CR2_LBDIE               EQU USART_CR2_LBDIE_Msk                      ;!< LIN Break Detection Interrupt Enable
USART_CR2_LBCL_Pos            EQU (8)
USART_CR2_LBCL_Msk            EQU (0x1 :SHL: USART_CR2_LBCL_Pos)             ;!< 0x00000100
USART_CR2_LBCL                EQU USART_CR2_LBCL_Msk                       ;!< Last Bit Clock pulse
USART_CR2_CPHA_Pos            EQU (9)
USART_CR2_CPHA_Msk            EQU (0x1 :SHL: USART_CR2_CPHA_Pos)             ;!< 0x00000200
USART_CR2_CPHA                EQU USART_CR2_CPHA_Msk                       ;!< Clock Phase
USART_CR2_CPOL_Pos            EQU (10)
USART_CR2_CPOL_Msk            EQU (0x1 :SHL: USART_CR2_CPOL_Pos)             ;!< 0x00000400
USART_CR2_CPOL                EQU USART_CR2_CPOL_Msk                       ;!< Clock Polarity
USART_CR2_CLKEN_Pos           EQU (11)
USART_CR2_CLKEN_Msk           EQU (0x1 :SHL: USART_CR2_CLKEN_Pos)            ;!< 0x00000800
USART_CR2_CLKEN               EQU USART_CR2_CLKEN_Msk                      ;!< Clock Enable
USART_CR2_STOP_Pos            EQU (12)
USART_CR2_STOP_Msk            EQU (0x3 :SHL: USART_CR2_STOP_Pos)             ;!< 0x00003000
USART_CR2_STOP                EQU USART_CR2_STOP_Msk                       ;!< STOP[1:0] bits (STOP bits)
USART_CR2_STOP_0              EQU (0x1 :SHL: USART_CR2_STOP_Pos)             ;!< 0x00001000
USART_CR2_STOP_1              EQU (0x2 :SHL: USART_CR2_STOP_Pos)             ;!< 0x00002000
USART_CR2_LINEN_Pos           EQU (14)
USART_CR2_LINEN_Msk           EQU (0x1 :SHL: USART_CR2_LINEN_Pos)            ;!< 0x00004000
USART_CR2_LINEN               EQU USART_CR2_LINEN_Msk                      ;!< LIN mode enable
USART_CR2_SWAP_Pos            EQU (15)
USART_CR2_SWAP_Msk            EQU (0x1 :SHL: USART_CR2_SWAP_Pos)             ;!< 0x00008000
USART_CR2_SWAP                EQU USART_CR2_SWAP_Msk                       ;!< SWAP TX/RX pins
USART_CR2_RXINV_Pos           EQU (16)
USART_CR2_RXINV_Msk           EQU (0x1 :SHL: USART_CR2_RXINV_Pos)            ;!< 0x00010000
USART_CR2_RXINV               EQU USART_CR2_RXINV_Msk                      ;!< RX pin active level inversion
USART_CR2_TXINV_Pos           EQU (17)
USART_CR2_TXINV_Msk           EQU (0x1 :SHL: USART_CR2_TXINV_Pos)            ;!< 0x00020000
USART_CR2_TXINV               EQU USART_CR2_TXINV_Msk                      ;!< TX pin active level inversion
USART_CR2_DATAINV_Pos         EQU (18)
USART_CR2_DATAINV_Msk         EQU (0x1 :SHL: USART_CR2_DATAINV_Pos)          ;!< 0x00040000
USART_CR2_DATAINV             EQU USART_CR2_DATAINV_Msk                    ;!< Binary data inversion
USART_CR2_MSBFIRST_Pos        EQU (19)
USART_CR2_MSBFIRST_Msk        EQU (0x1 :SHL: USART_CR2_MSBFIRST_Pos)         ;!< 0x00080000
USART_CR2_MSBFIRST            EQU USART_CR2_MSBFIRST_Msk                   ;!< Most Significant Bit First
USART_CR2_ABREN_Pos           EQU (20)
USART_CR2_ABREN_Msk           EQU (0x1 :SHL: USART_CR2_ABREN_Pos)            ;!< 0x00100000
USART_CR2_ABREN               EQU USART_CR2_ABREN_Msk                      ;!< Auto Baud-Rate Enable
USART_CR2_ABRMODE_Pos         EQU (21)
USART_CR2_ABRMODE_Msk         EQU (0x3 :SHL: USART_CR2_ABRMODE_Pos)          ;!< 0x00600000
USART_CR2_ABRMODE             EQU USART_CR2_ABRMODE_Msk                    ;!< ABRMOD[1:0] bits (Auto Baud-Rate Mode)
USART_CR2_ABRMODE_0           EQU (0x1 :SHL: USART_CR2_ABRMODE_Pos)          ;!< 0x00200000
USART_CR2_ABRMODE_1           EQU (0x2 :SHL: USART_CR2_ABRMODE_Pos)          ;!< 0x00400000
USART_CR2_RTOEN_Pos           EQU (23)
USART_CR2_RTOEN_Msk           EQU (0x1 :SHL: USART_CR2_RTOEN_Pos)            ;!< 0x00800000
USART_CR2_RTOEN               EQU USART_CR2_RTOEN_Msk                      ;!< Receiver Time-Out enable
USART_CR2_ADD_Pos             EQU (24)
USART_CR2_ADD_Msk             EQU (0xFF :SHL: USART_CR2_ADD_Pos)             ;!< 0xFF000000
USART_CR2_ADD                 EQU USART_CR2_ADD_Msk                        ;!< Address of the USART node

;*****************  Bit definition for USART_CR3 register  ******************
USART_CR3_EIE_Pos             EQU (0)
USART_CR3_EIE_Msk             EQU (0x1 :SHL: USART_CR3_EIE_Pos)              ;!< 0x00000001
USART_CR3_EIE                 EQU USART_CR3_EIE_Msk                        ;!< Error Interrupt Enable
USART_CR3_IREN_Pos            EQU (1)
USART_CR3_IREN_Msk            EQU (0x1 :SHL: USART_CR3_IREN_Pos)             ;!< 0x00000002
USART_CR3_IREN                EQU USART_CR3_IREN_Msk                       ;!< IrDA mode Enable
USART_CR3_IRLP_Pos            EQU (2)
USART_CR3_IRLP_Msk            EQU (0x1 :SHL: USART_CR3_IRLP_Pos)             ;!< 0x00000004
USART_CR3_IRLP                EQU USART_CR3_IRLP_Msk                       ;!< IrDA Low-Power
USART_CR3_HDSEL_Pos           EQU (3)
USART_CR3_HDSEL_Msk           EQU (0x1 :SHL: USART_CR3_HDSEL_Pos)            ;!< 0x00000008
USART_CR3_HDSEL               EQU USART_CR3_HDSEL_Msk                      ;!< Half-Duplex Selection
USART_CR3_NACK_Pos            EQU (4)
USART_CR3_NACK_Msk            EQU (0x1 :SHL: USART_CR3_NACK_Pos)             ;!< 0x00000010
USART_CR3_NACK                EQU USART_CR3_NACK_Msk                       ;!< SmartCard NACK enable
USART_CR3_SCEN_Pos            EQU (5)
USART_CR3_SCEN_Msk            EQU (0x1 :SHL: USART_CR3_SCEN_Pos)             ;!< 0x00000020
USART_CR3_SCEN                EQU USART_CR3_SCEN_Msk                       ;!< SmartCard mode enable
USART_CR3_DMAR_Pos            EQU (6)
USART_CR3_DMAR_Msk            EQU (0x1 :SHL: USART_CR3_DMAR_Pos)             ;!< 0x00000040
USART_CR3_DMAR                EQU USART_CR3_DMAR_Msk                       ;!< DMA Enable Receiver
USART_CR3_DMAT_Pos            EQU (7)
USART_CR3_DMAT_Msk            EQU (0x1 :SHL: USART_CR3_DMAT_Pos)             ;!< 0x00000080
USART_CR3_DMAT                EQU USART_CR3_DMAT_Msk                       ;!< DMA Enable Transmitter
USART_CR3_RTSE_Pos            EQU (8)
USART_CR3_RTSE_Msk            EQU (0x1 :SHL: USART_CR3_RTSE_Pos)             ;!< 0x00000100
USART_CR3_RTSE                EQU USART_CR3_RTSE_Msk                       ;!< RTS Enable
USART_CR3_CTSE_Pos            EQU (9)
USART_CR3_CTSE_Msk            EQU (0x1 :SHL: USART_CR3_CTSE_Pos)             ;!< 0x00000200
USART_CR3_CTSE                EQU USART_CR3_CTSE_Msk                       ;!< CTS Enable
USART_CR3_CTSIE_Pos           EQU (10)
USART_CR3_CTSIE_Msk           EQU (0x1 :SHL: USART_CR3_CTSIE_Pos)            ;!< 0x00000400
USART_CR3_CTSIE               EQU USART_CR3_CTSIE_Msk                      ;!< CTS Interrupt Enable
USART_CR3_ONEBIT_Pos          EQU (11)
USART_CR3_ONEBIT_Msk          EQU (0x1 :SHL: USART_CR3_ONEBIT_Pos)           ;!< 0x00000800
USART_CR3_ONEBIT              EQU USART_CR3_ONEBIT_Msk                     ;!< One sample bit method enable
USART_CR3_OVRDIS_Pos          EQU (12)
USART_CR3_OVRDIS_Msk          EQU (0x1 :SHL: USART_CR3_OVRDIS_Pos)           ;!< 0x00001000
USART_CR3_OVRDIS              EQU USART_CR3_OVRDIS_Msk                     ;!< Overrun Disable
USART_CR3_DDRE_Pos            EQU (13)
USART_CR3_DDRE_Msk            EQU (0x1 :SHL: USART_CR3_DDRE_Pos)             ;!< 0x00002000
USART_CR3_DDRE                EQU USART_CR3_DDRE_Msk                       ;!< DMA Disable on Reception Error
USART_CR3_DEM_Pos             EQU (14)
USART_CR3_DEM_Msk             EQU (0x1 :SHL: USART_CR3_DEM_Pos)              ;!< 0x00004000
USART_CR3_DEM                 EQU USART_CR3_DEM_Msk                        ;!< Driver Enable Mode
USART_CR3_DEP_Pos             EQU (15)
USART_CR3_DEP_Msk             EQU (0x1 :SHL: USART_CR3_DEP_Pos)              ;!< 0x00008000
USART_CR3_DEP                 EQU USART_CR3_DEP_Msk                        ;!< Driver Enable Polarity Selection
USART_CR3_SCARCNT_Pos         EQU (17)
USART_CR3_SCARCNT_Msk         EQU (0x7 :SHL: USART_CR3_SCARCNT_Pos)          ;!< 0x000E0000
USART_CR3_SCARCNT             EQU USART_CR3_SCARCNT_Msk                    ;!< SCARCNT[2:0] bits (SmartCard Auto-Retry Count)
USART_CR3_SCARCNT_0           EQU (0x1 :SHL: USART_CR3_SCARCNT_Pos)          ;!< 0x00020000
USART_CR3_SCARCNT_1           EQU (0x2 :SHL: USART_CR3_SCARCNT_Pos)          ;!< 0x00040000
USART_CR3_SCARCNT_2           EQU (0x4 :SHL: USART_CR3_SCARCNT_Pos)          ;!< 0x00080000
USART_CR3_WUS_Pos             EQU (20)
USART_CR3_WUS_Msk             EQU (0x3 :SHL: USART_CR3_WUS_Pos)              ;!< 0x00300000
USART_CR3_WUS                 EQU USART_CR3_WUS_Msk                        ;!< WUS[1:0] bits (Wake UP Interrupt Flag Selection)
USART_CR3_WUS_0               EQU (0x1 :SHL: USART_CR3_WUS_Pos)              ;!< 0x00100000
USART_CR3_WUS_1               EQU (0x2 :SHL: USART_CR3_WUS_Pos)              ;!< 0x00200000
USART_CR3_WUFIE_Pos           EQU (22)
USART_CR3_WUFIE_Msk           EQU (0x1 :SHL: USART_CR3_WUFIE_Pos)            ;!< 0x00400000
USART_CR3_WUFIE               EQU USART_CR3_WUFIE_Msk                      ;!< Wake Up Interrupt Enable

;*****************  Bit definition for USART_BRR register  ******************
USART_BRR_DIV_FRACTION_Pos    EQU (0)
USART_BRR_DIV_FRACTION_Msk    EQU (0xF :SHL: USART_BRR_DIV_FRACTION_Pos)     ;!< 0x0000000F
USART_BRR_DIV_FRACTION        EQU USART_BRR_DIV_FRACTION_Msk               ;!< Fraction of USARTDIV
USART_BRR_DIV_MANTISSA_Pos    EQU (4)
USART_BRR_DIV_MANTISSA_Msk    EQU (0xFFF :SHL: USART_BRR_DIV_MANTISSA_Pos)   ;!< 0x0000FFF0
USART_BRR_DIV_MANTISSA        EQU USART_BRR_DIV_MANTISSA_Msk               ;!< Mantissa of USARTDIV

;*****************  Bit definition for USART_GTPR register  *****************
USART_GTPR_PSC_Pos            EQU (0)
USART_GTPR_PSC_Msk            EQU (0xFF :SHL: USART_GTPR_PSC_Pos)            ;!< 0x000000FF
USART_GTPR_PSC                EQU USART_GTPR_PSC_Msk                       ;!< PSC[7:0] bits (Prescaler value)
USART_GTPR_GT_Pos             EQU (8)
USART_GTPR_GT_Msk             EQU (0xFF :SHL: USART_GTPR_GT_Pos)             ;!< 0x0000FF00
USART_GTPR_GT                 EQU USART_GTPR_GT_Msk                        ;!< GT[7:0] bits (Guard time value)


;******************  Bit definition for USART_RTOR register  ****************
USART_RTOR_RTO_Pos            EQU (0)
USART_RTOR_RTO_Msk            EQU (0xFFFFFF :SHL: USART_RTOR_RTO_Pos)        ;!< 0x00FFFFFF
USART_RTOR_RTO                EQU USART_RTOR_RTO_Msk                       ;!< Receiver Time Out Value
USART_RTOR_BLEN_Pos           EQU (24)
USART_RTOR_BLEN_Msk           EQU (0xFF :SHL: USART_RTOR_BLEN_Pos)           ;!< 0xFF000000
USART_RTOR_BLEN               EQU USART_RTOR_BLEN_Msk                      ;!< Block Length

;******************  Bit definition for USART_RQR register  *****************
USART_RQR_ABRRQ_Pos           EQU (0)
USART_RQR_ABRRQ_Msk           EQU (0x1 :SHL: USART_RQR_ABRRQ_Pos)            ;!< 0x00000001
USART_RQR_ABRRQ               EQU USART_RQR_ABRRQ_Msk                      ;!< Auto-Baud Rate Request
USART_RQR_SBKRQ_Pos           EQU (1)
USART_RQR_SBKRQ_Msk           EQU (0x1 :SHL: USART_RQR_SBKRQ_Pos)            ;!< 0x00000002
USART_RQR_SBKRQ               EQU USART_RQR_SBKRQ_Msk                      ;!< Send Break Request
USART_RQR_MMRQ_Pos            EQU (2)
USART_RQR_MMRQ_Msk            EQU (0x1 :SHL: USART_RQR_MMRQ_Pos)             ;!< 0x00000004
USART_RQR_MMRQ                EQU USART_RQR_MMRQ_Msk                       ;!< Mute Mode Request
USART_RQR_RXFRQ_Pos           EQU (3)
USART_RQR_RXFRQ_Msk           EQU (0x1 :SHL: USART_RQR_RXFRQ_Pos)            ;!< 0x00000008
USART_RQR_RXFRQ               EQU USART_RQR_RXFRQ_Msk                      ;!< Receive Data flush Request
USART_RQR_TXFRQ_Pos           EQU (4)
USART_RQR_TXFRQ_Msk           EQU (0x1 :SHL: USART_RQR_TXFRQ_Pos)            ;!< 0x00000010
USART_RQR_TXFRQ               EQU USART_RQR_TXFRQ_Msk                      ;!< Transmit data flush Request

;******************  Bit definition for USART_ISR register  *****************
USART_ISR_PE_Pos              EQU (0)
USART_ISR_PE_Msk              EQU (0x1 :SHL: USART_ISR_PE_Pos)               ;!< 0x00000001
USART_ISR_PE                  EQU USART_ISR_PE_Msk                         ;!< Parity Error
USART_ISR_FE_Pos              EQU (1)
USART_ISR_FE_Msk              EQU (0x1 :SHL: USART_ISR_FE_Pos)               ;!< 0x00000002
USART_ISR_FE                  EQU USART_ISR_FE_Msk                         ;!< Framing Error
USART_ISR_NE_Pos              EQU (2)
USART_ISR_NE_Msk              EQU (0x1 :SHL: USART_ISR_NE_Pos)               ;!< 0x00000004
USART_ISR_NE                  EQU USART_ISR_NE_Msk                         ;!< Noise detected Flag
USART_ISR_ORE_Pos             EQU (3)
USART_ISR_ORE_Msk             EQU (0x1 :SHL: USART_ISR_ORE_Pos)              ;!< 0x00000008
USART_ISR_ORE                 EQU USART_ISR_ORE_Msk                        ;!< OverRun Error
USART_ISR_IDLE_Pos            EQU (4)
USART_ISR_IDLE_Msk            EQU (0x1 :SHL: USART_ISR_IDLE_Pos)             ;!< 0x00000010
USART_ISR_IDLE                EQU USART_ISR_IDLE_Msk                       ;!< IDLE line detected
USART_ISR_RXNE_Pos            EQU (5)
USART_ISR_RXNE_Msk            EQU (0x1 :SHL: USART_ISR_RXNE_Pos)             ;!< 0x00000020
USART_ISR_RXNE                EQU USART_ISR_RXNE_Msk                       ;!< Read Data Register Not Empty
USART_ISR_TC_Pos              EQU (6)
USART_ISR_TC_Msk              EQU (0x1 :SHL: USART_ISR_TC_Pos)               ;!< 0x00000040
USART_ISR_TC                  EQU USART_ISR_TC_Msk                         ;!< Transmission Complete
USART_ISR_TXE_Pos             EQU (7)
USART_ISR_TXE_Msk             EQU (0x1 :SHL: USART_ISR_TXE_Pos)              ;!< 0x00000080
USART_ISR_TXE                 EQU USART_ISR_TXE_Msk                        ;!< Transmit Data Register Empty
USART_ISR_LBDF_Pos            EQU (8)
USART_ISR_LBDF_Msk            EQU (0x1 :SHL: USART_ISR_LBDF_Pos)             ;!< 0x00000100
USART_ISR_LBDF                EQU USART_ISR_LBDF_Msk                       ;!< LIN Break Detection Flag
USART_ISR_CTSIF_Pos           EQU (9)
USART_ISR_CTSIF_Msk           EQU (0x1 :SHL: USART_ISR_CTSIF_Pos)            ;!< 0x00000200
USART_ISR_CTSIF               EQU USART_ISR_CTSIF_Msk                      ;!< CTS interrupt flag
USART_ISR_CTS_Pos             EQU (10)
USART_ISR_CTS_Msk             EQU (0x1 :SHL: USART_ISR_CTS_Pos)              ;!< 0x00000400
USART_ISR_CTS                 EQU USART_ISR_CTS_Msk                        ;!< CTS flag
USART_ISR_RTOF_Pos            EQU (11)
USART_ISR_RTOF_Msk            EQU (0x1 :SHL: USART_ISR_RTOF_Pos)             ;!< 0x00000800
USART_ISR_RTOF                EQU USART_ISR_RTOF_Msk                       ;!< Receiver Time Out
USART_ISR_EOBF_Pos            EQU (12)
USART_ISR_EOBF_Msk            EQU (0x1 :SHL: USART_ISR_EOBF_Pos)             ;!< 0x00001000
USART_ISR_EOBF                EQU USART_ISR_EOBF_Msk                       ;!< End Of Block Flag
USART_ISR_ABRE_Pos            EQU (14)
USART_ISR_ABRE_Msk            EQU (0x1 :SHL: USART_ISR_ABRE_Pos)             ;!< 0x00004000
USART_ISR_ABRE                EQU USART_ISR_ABRE_Msk                       ;!< Auto-Baud Rate Error
USART_ISR_ABRF_Pos            EQU (15)
USART_ISR_ABRF_Msk            EQU (0x1 :SHL: USART_ISR_ABRF_Pos)             ;!< 0x00008000
USART_ISR_ABRF                EQU USART_ISR_ABRF_Msk                       ;!< Auto-Baud Rate Flag
USART_ISR_BUSY_Pos            EQU (16)
USART_ISR_BUSY_Msk            EQU (0x1 :SHL: USART_ISR_BUSY_Pos)             ;!< 0x00010000
USART_ISR_BUSY                EQU USART_ISR_BUSY_Msk                       ;!< Busy Flag
USART_ISR_CMF_Pos             EQU (17)
USART_ISR_CMF_Msk             EQU (0x1 :SHL: USART_ISR_CMF_Pos)              ;!< 0x00020000
USART_ISR_CMF                 EQU USART_ISR_CMF_Msk                        ;!< Character Match Flag
USART_ISR_SBKF_Pos            EQU (18)
USART_ISR_SBKF_Msk            EQU (0x1 :SHL: USART_ISR_SBKF_Pos)             ;!< 0x00040000
USART_ISR_SBKF                EQU USART_ISR_SBKF_Msk                       ;!< Send Break Flag
USART_ISR_RWU_Pos             EQU (19)
USART_ISR_RWU_Msk             EQU (0x1 :SHL: USART_ISR_RWU_Pos)              ;!< 0x00080000
USART_ISR_RWU                 EQU USART_ISR_RWU_Msk                        ;!< Receive Wake Up from mute mode Flag
USART_ISR_WUF_Pos             EQU (20)
USART_ISR_WUF_Msk             EQU (0x1 :SHL: USART_ISR_WUF_Pos)              ;!< 0x00100000
USART_ISR_WUF                 EQU USART_ISR_WUF_Msk                        ;!< Wake Up from stop mode Flag
USART_ISR_TEACK_Pos           EQU (21)
USART_ISR_TEACK_Msk           EQU (0x1 :SHL: USART_ISR_TEACK_Pos)            ;!< 0x00200000
USART_ISR_TEACK               EQU USART_ISR_TEACK_Msk                      ;!< Transmit Enable Acknowledge Flag
USART_ISR_REACK_Pos           EQU (22)
USART_ISR_REACK_Msk           EQU (0x1 :SHL: USART_ISR_REACK_Pos)            ;!< 0x00400000
USART_ISR_REACK               EQU USART_ISR_REACK_Msk                      ;!< Receive Enable Acknowledge Flag

;******************  Bit definition for USART_ICR register  *****************
USART_ICR_PECF_Pos            EQU (0)
USART_ICR_PECF_Msk            EQU (0x1 :SHL: USART_ICR_PECF_Pos)             ;!< 0x00000001
USART_ICR_PECF                EQU USART_ICR_PECF_Msk                       ;!< Parity Error Clear Flag
USART_ICR_FECF_Pos            EQU (1)
USART_ICR_FECF_Msk            EQU (0x1 :SHL: USART_ICR_FECF_Pos)             ;!< 0x00000002
USART_ICR_FECF                EQU USART_ICR_FECF_Msk                       ;!< Framing Error Clear Flag
USART_ICR_NCF_Pos             EQU (2)
USART_ICR_NCF_Msk             EQU (0x1 :SHL: USART_ICR_NCF_Pos)              ;!< 0x00000004
USART_ICR_NCF                 EQU USART_ICR_NCF_Msk                        ;!< Noise detected Clear Flag
USART_ICR_ORECF_Pos           EQU (3)
USART_ICR_ORECF_Msk           EQU (0x1 :SHL: USART_ICR_ORECF_Pos)            ;!< 0x00000008
USART_ICR_ORECF               EQU USART_ICR_ORECF_Msk                      ;!< OverRun Error Clear Flag
USART_ICR_IDLECF_Pos          EQU (4)
USART_ICR_IDLECF_Msk          EQU (0x1 :SHL: USART_ICR_IDLECF_Pos)           ;!< 0x00000010
USART_ICR_IDLECF              EQU USART_ICR_IDLECF_Msk                     ;!< IDLE line detected Clear Flag
USART_ICR_TCCF_Pos            EQU (6)
USART_ICR_TCCF_Msk            EQU (0x1 :SHL: USART_ICR_TCCF_Pos)             ;!< 0x00000040
USART_ICR_TCCF                EQU USART_ICR_TCCF_Msk                       ;!< Transmission Complete Clear Flag
USART_ICR_LBDCF_Pos           EQU (8)
USART_ICR_LBDCF_Msk           EQU (0x1 :SHL: USART_ICR_LBDCF_Pos)            ;!< 0x00000100
USART_ICR_LBDCF               EQU USART_ICR_LBDCF_Msk                      ;!< LIN Break Detection Clear Flag
USART_ICR_CTSCF_Pos           EQU (9)
USART_ICR_CTSCF_Msk           EQU (0x1 :SHL: USART_ICR_CTSCF_Pos)            ;!< 0x00000200
USART_ICR_CTSCF               EQU USART_ICR_CTSCF_Msk                      ;!< CTS Interrupt Clear Flag
USART_ICR_RTOCF_Pos           EQU (11)
USART_ICR_RTOCF_Msk           EQU (0x1 :SHL: USART_ICR_RTOCF_Pos)            ;!< 0x00000800
USART_ICR_RTOCF               EQU USART_ICR_RTOCF_Msk                      ;!< Receiver Time Out Clear Flag
USART_ICR_EOBCF_Pos           EQU (12)
USART_ICR_EOBCF_Msk           EQU (0x1 :SHL: USART_ICR_EOBCF_Pos)            ;!< 0x00001000
USART_ICR_EOBCF               EQU USART_ICR_EOBCF_Msk                      ;!< End Of Block Clear Flag
USART_ICR_CMCF_Pos            EQU (17)
USART_ICR_CMCF_Msk            EQU (0x1 :SHL: USART_ICR_CMCF_Pos)             ;!< 0x00020000
USART_ICR_CMCF                EQU USART_ICR_CMCF_Msk                       ;!< Character Match Clear Flag
USART_ICR_WUCF_Pos            EQU (20)
USART_ICR_WUCF_Msk            EQU (0x1 :SHL: USART_ICR_WUCF_Pos)             ;!< 0x00100000
USART_ICR_WUCF                EQU USART_ICR_WUCF_Msk                       ;!< Wake Up from stop mode Clear Flag

;******************  Bit definition for USART_RDR register  *****************
USART_RDR_RDR_Pos             EQU (0)
USART_RDR_RDR_Msk             EQU (0x1FF :SHL: USART_RDR_RDR_Pos)            ;!< 0x000001FF
USART_RDR_RDR                 EQU USART_RDR_RDR_Msk                        ;!< RDR[8:0] bits (Receive Data value)

;******************  Bit definition for USART_TDR register  *****************
USART_TDR_TDR_Pos             EQU (0)
USART_TDR_TDR_Msk             EQU (0x1FF :SHL: USART_TDR_TDR_Pos)            ;!< 0x000001FF
USART_TDR_TDR                 EQU USART_TDR_TDR_Msk                        ;!< TDR[8:0] bits (Transmit Data value)

;****************************************************************************
;
;                         USB Device General registers
;
;****************************************************************************

;***************************  ISTR interrupt events  ************************
USB_ISTR_CTR                         EQU (0x8000)               ;!< Correct TRansfer (clear-only bit)
USB_ISTR_PMAOVR                      EQU (0x4000)               ;!< DMA OVeR/underrun (clear-only bit)
USB_ISTR_ERR                         EQU (0x2000)               ;!< ERRor (clear-only bit)
USB_ISTR_WKUP                        EQU (0x1000)               ;!< WaKe UP (clear-only bit)
USB_ISTR_SUSP                        EQU (0x0800)               ;!< SUSPend (clear-only bit)
USB_ISTR_RESET                       EQU (0x0400)               ;!< RESET (clear-only bit)
USB_ISTR_SOF                         EQU (0x0200)               ;!< Start Of Frame (clear-only bit)
USB_ISTR_ESOF                        EQU (0x0100)               ;!< Expected Start Of Frame (clear-only bit)
USB_ISTR_L1REQ                       EQU (0x0080)               ;!< LPM L1 state request
USB_ISTR_DIR                         EQU (0x0010)               ;!< DIRection of transaction (read-only bit)
USB_ISTR_EP_ID                       EQU (0x000F)               ;!< EndPoint IDentifier (read-only bit)

; Legacy defines
USB_ISTR_PMAOVRM EQU USB_ISTR_PMAOVR

USB_CLR_CTR                          EQU (~USB_ISTR_CTR)             ;!< clear Correct TRansfer bit
USB_CLR_PMAOVR                       EQU (~USB_ISTR_PMAOVR)          ;!< clear DMA OVeR/underrun bit
USB_CLR_ERR                          EQU (~USB_ISTR_ERR)             ;!< clear ERRor bit
USB_CLR_WKUP                         EQU (~USB_ISTR_WKUP)            ;!< clear WaKe UP bit
USB_CLR_SUSP                         EQU (~USB_ISTR_SUSP)            ;!< clear SUSPend bit
USB_CLR_RESET                        EQU (~USB_ISTR_RESET)           ;!< clear RESET bit
USB_CLR_SOF                          EQU (~USB_ISTR_SOF)             ;!< clear Start Of Frame bit
USB_CLR_ESOF                         EQU (~USB_ISTR_ESOF)            ;!< clear Expected Start Of Frame bit
USB_CLR_L1REQ                        EQU (~USB_ISTR_L1REQ)           ;!< clear LPM L1  bit

; Legacy defines
USB_CLR_PMAOVRM EQU USB_CLR_PMAOVR

;************************  CNTR control register bits definitions  **********
USB_CNTR_CTRM                        EQU (0x8000)               ;!< Correct TRansfer Mask
USB_CNTR_PMAOVR                      EQU (0x4000)               ;!< DMA OVeR/underrun Mask
USB_CNTR_ERRM                        EQU (0x2000)               ;!< ERRor Mask
USB_CNTR_WKUPM                       EQU (0x1000)               ;!< WaKe UP Mask
USB_CNTR_SUSPM                       EQU (0x0800)               ;!< SUSPend Mask
USB_CNTR_RESETM                      EQU (0x0400)               ;!< RESET Mask
USB_CNTR_SOFM                        EQU (0x0200)               ;!< Start Of Frame Mask
USB_CNTR_ESOFM                       EQU (0x0100)               ;!< Expected Start Of Frame Mask
USB_CNTR_L1REQM                      EQU (0x0080)               ;!< LPM L1 state request interrupt mask
USB_CNTR_L1RESUME                    EQU (0x0020)               ;!< LPM L1 Resume request
USB_CNTR_RESUME                      EQU (0x0010)               ;!< RESUME request
USB_CNTR_FSUSP                       EQU (0x0008)               ;!< Force SUSPend
USB_CNTR_LPMODE                      EQU (0x0004)               ;!< Low-power MODE
USB_CNTR_PDWN                        EQU (0x0002)               ;!< Power DoWN
USB_CNTR_FRES                        EQU (0x0001)               ;!< Force USB RESet

; Legacy defines
USB_CNTR_PMAOVRM EQU USB_CNTR_PMAOVR
USB_CNTR_LP_MODE EQU USB_CNTR_LPMODE

;**************************  LPM register bits definitions  *****************
USB_LPMCSR_BESL                      EQU (0x00F0)               ;!< BESL value received with last ACKed LPM Token
USB_LPMCSR_REMWAKE                   EQU (0x0008)               ;!< bRemoteWake value received with last ACKed LPM Token
USB_LPMCSR_LPMACK                    EQU (0x0002)               ;!< LPM Token acknowledge enable
USB_LPMCSR_LMPEN                     EQU (0x0001)               ;!< LPM support enable

;*******************  FNR Frame Number Register bit definitions   ***********
USB_FNR_RXDP                         EQU (0x8000)               ;!< status of D+ data line
USB_FNR_RXDM                         EQU (0x4000)               ;!< status of D- data line
USB_FNR_LCK                          EQU (0x2000)               ;!< LoCKed
USB_FNR_LSOF                         EQU (0x1800)               ;!< Lost SOF
USB_FNR_FN                           EQU (0x07FF)               ;!< Frame Number

;*******************  DADDR Device ADDRess bit definitions    ***************
USB_DADDR_EF                         EQU (0x80)                  ;!< USB device address Enable Function
USB_DADDR_ADD                        EQU (0x7F)                  ;!< USB device address

;*****************************  Endpoint register    ************************
USB_EP_CTR_RX                        EQU (0x8000)               ;!<  EndPoint Correct TRansfer RX
USB_EP_DTOG_RX                       EQU (0x4000)               ;!<  EndPoint Data TOGGLE RX
USB_EPRX_STAT                        EQU (0x3000)               ;!<  EndPoint RX STATus bit field
USB_EP_SETUP                         EQU (0x0800)               ;!<  EndPoint SETUP
USB_EP_T_FIELD                       EQU (0x0600)               ;!<  EndPoint TYPE
USB_EP_KIND                          EQU (0x0100)               ;!<  EndPoint KIND
USB_EP_CTR_TX                        EQU (0x0080)               ;!<  EndPoint Correct TRansfer TX
USB_EP_DTOG_TX                       EQU (0x0040)               ;!<  EndPoint Data TOGGLE TX
USB_EPTX_STAT                        EQU (0x0030)               ;!<  EndPoint TX STATus bit field
USB_EPADDR_FIELD                     EQU (0x000F)               ;!<  EndPoint ADDRess FIELD

; EndPoint REGister MASK (no toggle fields)
USB_EPREG_MASK     EQU (USB_EP_CTR_RX :OR: USB_EP_SETUP :OR: USB_EP_T_FIELD :OR: USB_EP_KIND :OR: USB_EP_CTR_TX :OR: USB_EPADDR_FIELD)
                                                                               ;!< EP_TYPE[1:0] EndPoint TYPE
USB_EP_TYPE_MASK                     EQU (0x0600)               ;!< EndPoint TYPE Mask
USB_EP_BULK                          EQU (0x0000)               ;!< EndPoint BULK
USB_EP_CONTROL                       EQU (0x0200)               ;!< EndPoint CONTROL
USB_EP_ISOCHRONOUS                   EQU (0x0400)               ;!< EndPoint ISOCHRONOUS
USB_EP_INTERRUPT                     EQU (0x0600)               ;!< EndPoint INTERRUPT
USB_EP_T_MASK                        EQU ( (:NOT: USB_EP_T_FIELD) :AND: USB_EPREG_MASK)

USB_EPKIND_MASK                      EQU ( (:NOT: USB_EP_KIND) :AND: USB_EPREG_MASK)            ;!< EP_KIND EndPoint KIND
                                                                               ;!< STAT_TX[1:0] STATus for TX transfer
USB_EP_TX_DIS                        EQU (0x0000)               ;!< EndPoint TX DISabled
USB_EP_TX_STALL                      EQU (0x0010)               ;!< EndPoint TX STALLed
USB_EP_TX_NAK                        EQU (0x0020)               ;!< EndPoint TX NAKed
USB_EP_TX_VALID                      EQU (0x0030)               ;!< EndPoint TX VALID
USB_EPTX_DTOG1                       EQU (0x0010)               ;!< EndPoint TX Data TOGgle bit1
USB_EPTX_DTOG2                       EQU (0x0020)               ;!< EndPoint TX Data TOGgle bit2
USB_EPTX_DTOGMASK  EQU (USB_EPTX_STAT :OR: USB_EPREG_MASK)
                                                                               ;!< STAT_RX[1:0] STATus for RX transfer
USB_EP_RX_DIS                        EQU (0x0000)               ;!< EndPoint RX DISabled
USB_EP_RX_STALL                      EQU (0x1000)               ;!< EndPoint RX STALLed
USB_EP_RX_NAK                        EQU (0x2000)               ;!< EndPoint RX NAKed
USB_EP_RX_VALID                      EQU (0x3000)               ;!< EndPoint RX VALID
USB_EPRX_DTOG1                       EQU (0x1000)               ;!< EndPoint RX Data TOGgle bit1
USB_EPRX_DTOG2                       EQU (0x2000)               ;!< EndPoint RX Data TOGgle bit1
USB_EPRX_DTOGMASK  EQU (USB_EPRX_STAT :OR: USB_EPREG_MASK)

;****************************************************************************
;
;                            Window WATCHDOG
;
;****************************************************************************
;******************  Bit definition for WWDG_CR register  *******************
WWDG_CR_T_Pos           EQU (0)
WWDG_CR_T_Msk           EQU (0x7F :SHL: WWDG_CR_T_Pos)                       ;!< 0x0000007F
WWDG_CR_T               EQU WWDG_CR_T_Msk                                  ;!< T[6:0] bits (7-Bit counter (MSB to LSB))
WWDG_CR_T_0             EQU (0x01 :SHL: WWDG_CR_T_Pos)                       ;!< 0x00000001
WWDG_CR_T_1             EQU (0x02 :SHL: WWDG_CR_T_Pos)                       ;!< 0x00000002
WWDG_CR_T_2             EQU (0x04 :SHL: WWDG_CR_T_Pos)                       ;!< 0x00000004
WWDG_CR_T_3             EQU (0x08 :SHL: WWDG_CR_T_Pos)                       ;!< 0x00000008
WWDG_CR_T_4             EQU (0x10 :SHL: WWDG_CR_T_Pos)                       ;!< 0x00000010
WWDG_CR_T_5             EQU (0x20 :SHL: WWDG_CR_T_Pos)                       ;!< 0x00000020
WWDG_CR_T_6             EQU (0x40 :SHL: WWDG_CR_T_Pos)                       ;!< 0x00000040

; Legacy defines
WWDG_CR_T0 EQU WWDG_CR_T_0
WWDG_CR_T1 EQU WWDG_CR_T_1
WWDG_CR_T2 EQU WWDG_CR_T_2
WWDG_CR_T3 EQU WWDG_CR_T_3
WWDG_CR_T4 EQU WWDG_CR_T_4
WWDG_CR_T5 EQU WWDG_CR_T_5
WWDG_CR_T6 EQU WWDG_CR_T_6

WWDG_CR_WDGA_Pos        EQU (7)
WWDG_CR_WDGA_Msk        EQU (0x1 :SHL: WWDG_CR_WDGA_Pos)                     ;!< 0x00000080
WWDG_CR_WDGA            EQU WWDG_CR_WDGA_Msk                               ;!<Activation bit

;******************  Bit definition for WWDG_CFR register  ******************
WWDG_CFR_W_Pos          EQU (0)
WWDG_CFR_W_Msk          EQU (0x7F :SHL: WWDG_CFR_W_Pos)                      ;!< 0x0000007F
WWDG_CFR_W              EQU WWDG_CFR_W_Msk                                 ;!< W[6:0] bits (7-bit window value)
WWDG_CFR_W_0            EQU (0x01 :SHL: WWDG_CFR_W_Pos)                      ;!< 0x00000001
WWDG_CFR_W_1            EQU (0x02 :SHL: WWDG_CFR_W_Pos)                      ;!< 0x00000002
WWDG_CFR_W_2            EQU (0x04 :SHL: WWDG_CFR_W_Pos)                      ;!< 0x00000004
WWDG_CFR_W_3            EQU (0x08 :SHL: WWDG_CFR_W_Pos)                      ;!< 0x00000008
WWDG_CFR_W_4            EQU (0x10 :SHL: WWDG_CFR_W_Pos)                      ;!< 0x00000010
WWDG_CFR_W_5            EQU (0x20 :SHL: WWDG_CFR_W_Pos)                      ;!< 0x00000020
WWDG_CFR_W_6            EQU (0x40 :SHL: WWDG_CFR_W_Pos)                      ;!< 0x00000040

; Legacy defines
WWDG_CFR_W0 EQU WWDG_CFR_W_0
WWDG_CFR_W1 EQU WWDG_CFR_W_1
WWDG_CFR_W2 EQU WWDG_CFR_W_2
WWDG_CFR_W3 EQU WWDG_CFR_W_3
WWDG_CFR_W4 EQU WWDG_CFR_W_4
WWDG_CFR_W5 EQU WWDG_CFR_W_5
WWDG_CFR_W6 EQU WWDG_CFR_W_6

WWDG_CFR_WDGTB_Pos      EQU (7)
WWDG_CFR_WDGTB_Msk      EQU (0x3 :SHL: WWDG_CFR_WDGTB_Pos)                   ;!< 0x00000180
WWDG_CFR_WDGTB          EQU WWDG_CFR_WDGTB_Msk                             ;!< WDGTB[1:0] bits (Timer Base)
WWDG_CFR_WDGTB_0        EQU (0x1 :SHL: WWDG_CFR_WDGTB_Pos)                   ;!< 0x00000080
WWDG_CFR_WDGTB_1        EQU (0x2 :SHL: WWDG_CFR_WDGTB_Pos)                   ;!< 0x00000100

; Legacy defines
WWDG_CFR_WDGTB0 EQU WWDG_CFR_WDGTB_0
WWDG_CFR_WDGTB1 EQU WWDG_CFR_WDGTB_1

WWDG_CFR_EWI_Pos        EQU (9)
WWDG_CFR_EWI_Msk        EQU (0x1 :SHL: WWDG_CFR_EWI_Pos)                     ;!< 0x00000200
WWDG_CFR_EWI            EQU WWDG_CFR_EWI_Msk                               ;!<Early Wakeup Interrupt

;******************  Bit definition for WWDG_SR register  *******************
WWDG_SR_EWIF_Pos        EQU (0)
WWDG_SR_EWIF_Msk        EQU (0x1 :SHL: WWDG_SR_EWIF_Pos)                     ;!< 0x00000001
WWDG_SR_EWIF            EQU WWDG_SR_EWIF_Msk                               ;!<Early Wakeup Interrupt Flag

STK_BASE EQU 0xE000E010
STK_CTRL EQU (STK_BASE + 0)
STK_LOAD EQU (STK_BASE + 4)
STK_VAL EQU (STK_BASE + 8)
STK_CALIB EQU (STK_BASE + 12)
	
STK_CTRL_ENABLE EQU 1 :SHL: 0
STK_CTRL_TICKINT EQU 1 :SHL: 1
STK_CTRL_CLKSOURCE EQU 1 :SHL: 2
STK_CTRL_COUNTFLAG EQU 1 :SHL: 16
	
NVIC_ISER0 EQU 0xE000E100
	
; takes the IRQn in r0
nvic_enable_irq proc
	push {r0-r3}
	lsr r2, r0, #5
	and r3, r0, #0x1f
	mov r0, #1
	lsl r3, r0, r3
	ldr r1, =NVIC_ISER0
	ldr r0, [r1, r2, LSL #2]
	orr r0, r3
	str r0, [r1, r2, LSL #2]
	pop {r0-r3}
	bx lr
	endp
		
	ALIGN
	LTORG
	ALIGN

;****************************************************************************
;  For a painless codes migration between the STM32F3xx device product
;  lines, the aliases defined below are put in place to overcome the
;  differences in the interrupt handlers and Â¨ definitions.
;  No need to update developed interrupt code when moving across
;  product lines within the same STM32F3 Family
;****************************************************************************

; Aliases for __IRQn
;ADC1_IRQn        EQU ADC1_2_IRQn
;SDADC1_IRQn      EQU ADC4_IRQn
;COMP1_2_IRQn     EQU COMP1_2_3_IRQn
;COMP2_IRQn       EQU COMP1_2_3_IRQn
;COMP_IRQn        EQU COMP1_2_3_IRQn
;COMP4_6_IRQn     EQU COMP4_5_6_IRQn
;HRTIM1_FLT_IRQn  EQU I2C3_ER_IRQn
;HRTIM1_TIME_IRQn EQU I2C3_EV_IRQn
;TIM15_IRQn       EQU TIM1_BRK_TIM15_IRQn
;TIM18_DAC2_IRQn  EQU TIM1_CC_IRQn
;TIM17_IRQn       EQU TIM1_TRG_COM_TIM17_IRQn
;TIM16_IRQn       EQU TIM1_UP_TIM16_IRQn
;TIM19_IRQn       EQU TIM20_UP_IRQn
;TIM6_DAC1_IRQn   EQU TIM6_DAC_IRQn
;TIM7_DAC2_IRQn   EQU TIM7_IRQn
;TIM12_IRQn       EQU TIM8_BRK_IRQn
;TIM14_IRQn       EQU TIM8_TRG_COM_IRQn
;TIM13_IRQn       EQU TIM8_UP_IRQn
;CEC_IRQn         EQU USBWakeUp_IRQn
;USBWakeUp_IRQn   EQU USBWakeUp_RMP_IRQn
;CAN_TX_IRQn      EQU USB_HP_CAN_TX_IRQn
;CAN_RX0_IRQn     EQU USB_LP_CAN_RX0_IRQn

; Aliases for __IRQHandler
;ADC1_IRQHandler        EQU ADC1_2_IRQHandler
;SDADC1_IRQHandler      EQU ADC4_IRQHandler
;COMP1_2_IRQHandler     EQU COMP1_2_3_IRQHandler
;COMP2_IRQHandler       EQU COMP1_2_3_IRQHandler
;COMP_IRQHandler        EQU COMP1_2_3_IRQHandler
;COMP4_6_IRQHandler     EQU COMP4_5_6_IRQHandler
;HRTIM1_FLT_IRQHandler  EQU I2C3_ER_IRQHandler
;HRTIM1_TIME_IRQHandler EQU I2C3_EV_IRQHandler
;TIM15_IRQHandler       EQU TIM1_BRK_TIM15_IRQHandler
;TIM18_DAC2_IRQHandler  EQU TIM1_CC_IRQHandler
;TIM17_IRQHandler       EQU TIM1_TRG_COM_TIM17_IRQHandler
;TIM16_IRQHandler       EQU TIM1_UP_TIM16_IRQHandler
;TIM19_IRQHandler       EQU TIM20_UP_IRQHandler
;TIM6_DAC1_IRQHandler   EQU TIM6_DAC_IRQHandler
;TIM7_DAC2_IRQHandler   EQU TIM7_IRQHandler
;TIM12_IRQHandler       EQU TIM8_BRK_IRQHandler
;TIM14_IRQHandler       EQU TIM8_TRG_COM_IRQHandler
;TIM13_IRQHandler       EQU TIM8_UP_IRQHandler
;CEC_IRQHandler         EQU USBWakeUp_IRQHandler
;USBWakeUp_IRQHandler   EQU USBWakeUp_RMP_IRQHandler
;CAN_TX_IRQHandler      EQU USB_HP_CAN_TX_IRQHandler
;CAN_RX0_IRQHandler     EQU USB_LP_CAN_RX0_IRQHandler


;*********************** (C) COPYRIGHT STMicroelectronics *****END OF FILE***

	END
